/**
   * TASK_ENTER_COVER
   *
   * @param {number} ped
   * @return {void}
   */
global.TaskEnterCover = function (ped) {
  return Citizen.invokeNative('0x4972a022ae6dafa1', ped);
};

/**
   * TASK_EXIT_COVER
   *
   * @param {number} ped
   * @return {void}
   */
global.TaskExitCover = function (ped) {
  return Citizen.invokeNative('0x2bc4a6d92d140112', ped);
};

/**
   * _0x140B3CB1D424A945
   * weaponHash can also be -1
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @return {void}
   */
global.N_0x140B3CB1D424A945 = function (ped, weaponHash) {
  return Citizen.invokeNative('0x140b3cb1d424a945', ped, _ch(weaponHash));
};

/**
   * _0x3C7A9C2C953128FE
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x3C7A9C2C953128FE = function (ped) {
  return Citizen.invokeNative('0x3c7a9c2c953128fe', ped);
};

/**
   * _0x53E4D0C079CA6855
   *
   * @param {number} handle
   * @return {number}
   */
global.N_0x53E4D0C079CA6855 = function (handle) {
  return Citizen.invokeNative('0x53e4d0c079ca6855', handle, _r, _ri);
};

/**
   * _0x64340DC208D671D5
   * coverLayer: see levels_0/levels/rdr3/coverlayers
   *
   * @param {string | number} coverLayer
   * @return {void}
   */
global.N_0x64340DC208D671D5 = function (coverLayer) {
  return Citizen.invokeNative('0x64340dc208d671d5', _ts(coverLayer));
};

/**
   * _ADD_COVER_BLOCKING_AREA
   * args: f_0 = Volume Handle
   * f_1 = integer (?) (only the number 1 is ever used here, or is not used at all)
   * f_2 = integer (-1 to 32 in R* Scripts)
   *
   * @param {DataView} args
   * @return {void}
   */
global.AddCoverBlockingArea = function (args) {
  return Citizen.invokeNative('0x733077295ab51304', args);
};

/**
   * _0x7A1FDCF35EAA140F
   * coverLayer: see levels_0/levels/rdr3/coverlayers
   *
   * @param {string | number} coverLayer
   * @return {void}
   */
global.N_0x7A1FDCF35EAA140F = function (coverLayer) {
  return Citizen.invokeNative('0x7a1fdcf35eaa140f', _ts(coverLayer));
};

/**
   * _0x957D7E750216D74B
   *
   * @param {number} ped
   * @return {number}
   */
global.N_0x957D7E750216D74B = function (ped) {
  return Citizen.invokeNative('0x957d7e750216d74b', ped, _r, _ri);
};

/**
   * _0xEBA51A294C73292E
   *
   * @param {DataView} args
   * @return {void}
   */
global.N_0xEBA51A294C73292E = function (args) {
  return Citizen.invokeNative('0xeba51a294c73292e', args);
};

/**
   * _ADD_SCRIPTED_COVER_POINT
   *
   * @param {DataView} data
   * @return {number}
   */
global.AddScriptedCoverPoint = function (data) {
  return Citizen.invokeNative('0x975bd6351648935f', data, _r, _ri);
};

/**
   * _ARE_LOAD_COVER_ANIMS_LOADED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.AreLoadCoverAnimsLoaded = function (ped) {
  return Citizen.invokeNative('0x8cbe916cfc64ad5c', ped, _r);
};

/**
   * _DOES_COVER_POINT_EXIST
   *
   * @param {number} handle
   * @return {boolean}
   */
global.DoesCoverPointExist = function (handle) {
  return Citizen.invokeNative('0xc276fe69dda22bad', handle, _r);
};

/**
   * _GET_COVER_POINT_STATE_FROM_PED
   * 1 = In cover while crouched
   * 2 = In cover while standing
   * 3 = Not in cover
   *
   * @param {number} ped
   * @return {number}
   */
global.GetCoverPointStateFromPed = function (ped) {
  return Citizen.invokeNative('0x5f5b1b7e8e8f94c6', ped, _r, _ri);
};

/**
   * _REQUEST_FLINCH_COVER_ANIM
   * Makes ped flinch (if in cover) like they have been shot at
   *
   * @param {number} ped
   * @return {void}
   */
global.RequestFlinchCoverAnim = function (ped) {
  return Citizen.invokeNative('0x2a31d13c5f021d0d', ped);
};

/**
   * _STOP_RUNNING_COVER_ANIMS
   * Stops running cover anims and releases them
   * _STOP_RENDERING_* - _STOP_SCRIPTED*
   *
   * @param {number} ped
   * @return {void}
   */
global.StopRunningCoverAnims = function (ped) {
  return Citizen.invokeNative('0x1a7a802b2301edc0', ped);
};

/**
   * _TASK_AI_SEEK_COVER_TO_COVER_POINT
   *
   * @param {DataView} args
   * @return {void}
   */
global.TaskAiSeekCoverToCoverPoint = function (args) {
  return Citizen.invokeNative('0x89783fddf079c88d', args);
};

/**
   * GET_TRANSPORT_CONFIG_FLAG
   * flagId: see SET_TRANSPORT_CONFIG_FLAG
   *
   * @param {number} transportEntity
   * @param {number} flagId
   * @param {boolean} p2
   * @return {boolean}
   */
global.GetTransportConfigFlag = function (transportEntity, flagId, p2) {
  return Citizen.invokeNative('0xf382c92ccc1ccdbc', transportEntity, flagId, p2, _r);
};

/**
   * IS_PED_ENTERING_TRANSPORT
   *
   * @param {number} ped
   * @param {number} transportEntity
   * @param {boolean} p2
   * @return {boolean}
   */
global.IsPedEnteringTransport = function (ped, transportEntity, p2) {
  return Citizen.invokeNative('0x619e63980bfc0096', ped, transportEntity, p2, _r);
};

/**
   * IS_PED_EXITING_TRANSPORT
   *
   * @param {number} ped
   * @param {number} transportEntity
   * @return {boolean}
   */
global.IsPedExitingTransport = function (ped, transportEntity) {
  return Citizen.invokeNative('0x660639bc60157048', ped, transportEntity, _r);
};

/**
   * SET_PED_OFF_TRANSPORT_SEAT
   *
   * @param {number} ped
   * @param {number} flags
   * @return {void}
   */
global.SetPedOffTransportSeat = function (ped, flags) {
  return Citizen.invokeNative('0x8886d83a430537fd', ped, flags);
};

/**
   * SET_PED_ON_TRANSPORT_SEAT
   * seat: see CREATE_PED_INSIDE_VEHICLE
   *
   * @param {number} ped
   * @param {number} transportEntity
   * @param {number} seat
   * @param {number} flags
   * @return {void}
   */
global.SetPedOnTransportSeat = function (ped, transportEntity, seat, flags) {
  return Citizen.invokeNative('0xe588b5a8a005cb5e', ped, transportEntity, seat, flags);
};

/**
   * SET_TRANSPORT_ACCESSIBLE_SEAT_FLAGS
   *
   * @param {number} transportEntity
   * @param {number} flags
   * @return {void}
   */
global.SetTransportAccessibleSeatFlags = function (transportEntity, flags) {
  return Citizen.invokeNative('0xdd0660c997de94fd', transportEntity, flags);
};

/**
   * SET_TRANSPORT_CONFIG_FLAG
   * flagId:
   * enum eTransportConfigFlags
   * {
   *   TCF_NotConsideredForEntryByLocalPlayer,
   *   TCF_0xB78D6624,
   *   TCF_0xA9700425,
   *   TCF_0x8D7E4641,
   *   TCF_0xF24BAA1F,
   *   TCF_0x63B77935,
   *   TCF_NotConsideredForEntryByAllPlayers,
   *   TCF_0xD17A2AFD,
   *   TCF_0xD4E4FDD5,
   *   TCF_0x8227C929,
   *   TCF_0x812C1070,
   *   TCF_0x0E1AB26F,
   *   TCF_0xBF4EC863,
   *   TCF_0x75660C36,
   *   TCF_0xA2539E20,
   *   TCF_0x9162C633,
   *   TCF_DisableHonorModifiers,
   *   TCF_0xF9E71CB6,
   *   TCF_0x933ECD3F,
   *   TCF_0x18513A34
   * };
   * https://github.com/femga/rdr3_discoveries/tree/master/AI/TRANSPORT_CONFIG_FLAGS
   *
   * @param {number} transportEntity
   * @param {number} flagId
   * @param {boolean} value
   * @return {void}
   */
global.SetTransportConfigFlag = function (transportEntity, flagId, value) {
  return Citizen.invokeNative('0xba8818212633500a', transportEntity, flagId, value);
};

/**
   * TASK_ENTER_TRANSPORT
   *
   * @param {DataView} args
   * @return {void}
   */
global.TaskEnterTransport = function (args) {
  return Citizen.invokeNative('0xaee3add08829cb6f', args);
};

/**
   * TASK_EXIT_TRANSPORT
   *
   * @param {DataView} args
   * @return {void}
   */
global.TaskExitTransport = function (args) {
  return Citizen.invokeNative('0xc273a5b8488f7838', args);
};

/**
   * _0x4248AB2EEB3C75AD
   * _SET_TRANSPORT_*
   *
   * @param {number} transportEntity
   * @param {number} ped
   * @param {boolean} p2
   * @return {void}
   */
global.N_0x4248AB2EEB3C75AD = function (transportEntity, ped, p2) {
  return Citizen.invokeNative('0x4248ab2eeb3c75ad', transportEntity, ped, p2);
};

/**
   * _0x4B6C9A43F7D9109B
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x4B6C9A43F7D9109B = function (p0, p1) {
  return Citizen.invokeNative('0x4b6c9a43f7d9109b', p0, p1);
};

/**
   * _0x5639FBEA922788DA
   * _CLEAR_A*
   *
   * @param {number} transportEntity
   * @return {void}
   */
global.N_0x5639FBEA922788DA = function (transportEntity) {
  return Citizen.invokeNative('0x5639fbea922788da', transportEntity);
};

/**
   * _0x8C8371EDFAF014A0
   * _SET_TRANSPORT_*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x8C8371EDFAF014A0 = function (ped, p1) {
  return Citizen.invokeNative('0x8c8371edfaf014a0', ped, _fv(p1));
};

/**
   * _0xF8C20282B237E3F7
   * _SET_TRANSPORT_*
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0xF8C20282B237E3F7 = function (ped) {
  return Citizen.invokeNative('0xf8c20282b237e3f7', ped);
};

/**
   * _GET_PED_IN_TRANSPORT_SEAT
   * seatIndex: see CREATE_PED_INSIDE_VEHICLE
   *
   * @param {number} transportEntity
   * @param {number} seatIndex
   * @return {number}
   */
global.GetPedInTransportSeat = function (transportEntity, seatIndex) {
  return Citizen.invokeNative('0xffec4b0a1a3ed515', transportEntity, seatIndex, _r, _ri);
};

/**
   * _GET_TRANSPORT_USAGE_FLAGS
   * See _SET_TRANSPORT_USAGE_FLAGS
   *
   * @param {number} transportEntity
   * @return {[any, number]}
   */
global.GetTransportUsageFlags = function (transportEntity) {
  return Citizen.invokeNative('0xe195c5a82156321d', transportEntity, _i, _r);
};

/**
   * _IS_PED_ON_TRANSPORT_ENTITY
   * Checks if ped is placed on target transportEntity
   *
   * @param {number} ped
   * @param {number} transportEntity
   * @return {boolean}
   */
global.IsPedOnTransportEntity = function (ped, transportEntity) {
  return Citizen.invokeNative('0x159ef5b6edce00e8', ped, transportEntity, _r);
};

/**
   * _IS_PED_ON_TRANSPORT_SEAT
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {boolean}
   */
global.IsPedOnTransportSeat = function (ped, p1) {
  return Citizen.invokeNative('0xdc44f405a6b98d03', ped, p1, _r);
};

/**
   * _IS_TRANSPORT_SEAT_FREE
   * Called together with IS_VEHICLE_SEAT_FREE
   *
   * @param {number} transportEntity
   * @param {number} seatIndex
   * @return {boolean}
   */
global.IsTransportSeatFree = function (transportEntity, seatIndex) {
  return Citizen.invokeNative('0x43ff27fc1829c202', transportEntity, seatIndex, _r);
};

/**
   * _IS_TRANSPORT_SEAT_OCCUPIED
   *
   * @param {number} transportEntity
   * @param {number} seatIndex
   * @return {boolean}
   */
global.IsTransportSeatOccupied = function (transportEntity, seatIndex) {
  return Citizen.invokeNative('0x2e2e06023d07631e', transportEntity, seatIndex, _r);
};

/**
   * _SET_AI_CAN_USE_TRANSPORT
   *
   * @param {number} transportEntity
   * @param {boolean} state
   * @return {void}
   */
global.SetAiCanUseTransport = function (transportEntity, state) {
  return Citizen.invokeNative('0x67f7ceac2391e114', transportEntity, state);
};

/**
   * _SET_PED_USE_TRANSPORT_SEAT_PREFERENCE
   *
   * @param {number} ped
   * @param {number} transportEntity
   * @param {number} preferenceSlot
   * @param {number} p3
   * @param {number} seatIndex
   * @return {void}
   */
global.SetPedUseTransportSeatPreference = function (ped, transportEntity, preferenceSlot, p3, seatIndex) {
  return Citizen.invokeNative('0xb7079f4c72896756', ped, transportEntity, preferenceSlot, p3, seatIndex);
};

/**
   * _SET_TRANSPORT_PRIORITY_SEAT
   *
   * @param {number} transportEntity
   * @param {number} seatIndex
   * @return {void}
   */
global.SetTransportPrioritySeat = function (transportEntity, seatIndex) {
  return Citizen.invokeNative('0x13f138225c202f66', transportEntity, seatIndex);
};

/**
   * _SET_TRANSPORT_USAGE_FLAGS
   * enum eTransportUsageFlags
   * {
   *   TUF_INVALID = 0,
   *   TUF_ALLOW_DRIVER_ME = (1 << 0),
   *   TUF_ALLOW_DRIVER_GANG = (1 << 1),
   *   TUF_ALLOW_DRIVER_CREW = (1 << 2),
   *   TUF_ALLOW_DRIVER_FRIENDS = (1 << 3),
   *   TUF_ALLOW_DRIVER_ANYONE = (1 << 4),
   *   TUF_ALLOW_PASSENGER_ME = (1 << 5),
   *   TUF_ALLOW_PASSENGER_GANG = (1 << 6),
   *   TUF_ALLOW_PASSENGER_CREW = (1 << 7),
   *   TUF_ALLOW_PASSENGER_FRIENDS = (1 << 8),
   *   TUF_ALLOW_PASSENGER_ANYONE = (1 << 9),
   *   TUF_ALLOW_ACCESS_AI = (1 << 10)
   * };
   *
   * @param {number} transportEntity
   * @param {number} flags
   * @return {void}
   */
global.SetTransportUsageFlags = function (transportEntity, flags) {
  return Citizen.invokeNative('0xe2487779957fe897', transportEntity, flags);
};

/**
   * ABORT_ANIM_SCENE
   *
   * @param {number} animScene
   * @param {boolean} p1
   * @return {void}
   */
global.AbortAnimScene = function (animScene, p1) {
  return Citizen.invokeNative('0x718cf1328d20c2b3', animScene, p1);
};

/**
   * ATTACH_ANIM_SCENE_TO_ENTITY
   *
   * @param {number} animScene
   * @param {number} entity
   * @param {number} p2
   * @return {void}
   */
global.AttachAnimSceneToEntity = function (animScene, entity, p2) {
  return Citizen.invokeNative('0xdc418495dba327a1', animScene, entity, p2);
};

/**
   * ATTACH_ANIM_SCENE_TO_ENTITY_PRESERVING_LOCATION
   *
   * @param {number} animScene
   * @param {number} entity
   * @param {number} p2
   * @return {void}
   */
global.AttachAnimSceneToEntityPreservingLocation = function (animScene, entity, p2) {
  return Citizen.invokeNative('0x1c0b105c3f30b88d', animScene, entity, p2);
};

/**
   * BLOCK_ANIM_SCENE_FADING_NEXT_FRAME
   *
   * @param {boolean} p0
   * @param {boolean} p1
   * @return {void}
   */
global.BlockAnimSceneFadingNextFrame = function (p0, p1) {
  return Citizen.invokeNative('0x1b70811d3bf75db9', p0, p1);
};

/**
   * CHECK_OWNERSHIP_OF_ANIM_SCENE
   *
   * @param {number} animScene
   * @return {boolean}
   */
global.CheckOwnershipOfAnimScene = function (animScene) {
  return Citizen.invokeNative('0x661b8683611b9b97', animScene, _r);
};

/**
   * COULD_ANIM_SCENE_ENTITY_REACH_EXIT_NEXT_FRAME
   *
   * @param {number} animScene
   * @param {string | number} entityName
   * @param {any} p2
   * @param {any} p3
   * @return {boolean}
   */
global.CouldAnimSceneEntityReachExitNextFrame = function (animScene, entityName, p2, p3) {
  return Citizen.invokeNative('0x73616e64696c616e', animScene, _ts(entityName), p2, p3, _r);
};

/**
   * DETACH_ANIM_SCENE
   *
   * @param {number} animScene
   * @return {void}
   */
global.DetachAnimScene = function (animScene) {
  return Citizen.invokeNative('0x6843a1aa3a336dff', animScene);
};

/**
   * DETACH_ANIM_SCENE_PRESERVING_LOCATION
   *
   * @param {number} animScene
   * @return {void}
   */
global.DetachAnimScenePreservingLocation = function (animScene) {
  return Citizen.invokeNative('0xa2507c4948c83d2e', animScene);
};

/**
   * DOES_ANIM_SCENE_EXIST
   *
   * @param {number} animScene
   * @return {boolean}
   */
global.DoesAnimSceneExist = function (animScene) {
  return Citizen.invokeNative('0x25557e324489393c', animScene, _r);
};

/**
   * FADE_ANIM_SCENE_AUDIO_IN
   *
   * @param {number} animScene
   * @param {number} p1
   * @return {void}
   */
global.FadeAnimSceneAudioIn = function (animScene, p1) {
  return Citizen.invokeNative('0xa41351ea2a18a0ad', animScene, _fv(p1));
};

/**
   * FADE_ANIM_SCENE_AUDIO_OUT
   *
   * @param {number} animScene
   * @param {number} p1
   * @return {void}
   */
global.FadeAnimSceneAudioOut = function (animScene, p1) {
  return Citizen.invokeNative('0x323e3ad772ba5d57', animScene, _fv(p1));
};

/**
   * GET_ANIM_SCENE_BOOL
   *
   * @param {number} animScene
   * @param {string | number} name
   * @return {boolean}
   */
global.GetAnimSceneBool = function (animScene, name) {
  return Citizen.invokeNative('0x07a6f6447eca9b64', animScene, _ts(name), _r);
};

/**
   * GET_ANIM_SCENE_CURRENT_ACTIVE_CAMERA_COUNT
   *
   * @param {number} animScene
   * @return {number}
   */
global.GetAnimSceneCurrentActiveCameraCount = function (animScene) {
  return Citizen.invokeNative('0x4822a65d5af64e69', animScene, _r, _ri);
};

/**
   * GET_ANIM_SCENE_ENTITY_LOCATION_DATA
   *
   * @param {number} animScene
   * @param {string | number} entityName
   * @param {boolean} p3
   * @param {string | number} playbackListName
   * @param {number} p5
   * @return {[boolean, Vector3]}
   */
global.GetAnimSceneEntityLocationData = function (animScene, entityName, p3, playbackListName, p5) {
  return Citizen.invokeNative('0x8398438d8f14f56d', animScene, _ts(entityName), _v, p3, _ts(playbackListName), p5, _r);
};

/**
   * GET_ANIM_SCENE_FLOAT
   *
   * @param {number} animScene
   * @param {string | number} name
   * @return {number}
   */
global.GetAnimSceneFloat = function (animScene, name) {
  return Citizen.invokeNative('0xcc24cb07f60b496e', animScene, _ts(name), _r, _rf);
};

/**
   * GET_ANIM_SCENE_INT
   *
   * @param {number} animScene
   * @param {string | number} name
   * @return {number}
   */
global.GetAnimSceneInt = function (animScene, name) {
  return Citizen.invokeNative('0x2b7277484cc095fd', animScene, _ts(name), _r, _ri);
};

/**
   * GET_ANIM_SCENE_ORIGIN
   *
   * @param {number} animScene
   * @param {number} order
   * @return {[Vector3, Vector3]}
   */
global.GetAnimSceneOrigin = function (animScene, order) {
  return Citizen.invokeNative('0xadf1d53f3b1fe0a7', animScene, _v, _v, order);
};

/**
   * GET_ANIM_SCENE_PHASE
   *
   * @param {number} animScene
   * @return {number}
   */
global.GetAnimScenePhase = function (animScene) {
  return Citizen.invokeNative('0x3fbc3f51bf12dfbf', animScene, _r, _rf);
};

/**
   * HAS_ANIM_SCENE_EXITED
   *
   * @param {number} animScene
   * @param {boolean} p1
   * @return {boolean}
   */
global.HasAnimSceneExited = function (animScene, p1) {
  return Citizen.invokeNative('0xf94692eb9dc15d74', animScene, p1, _r);
};

/**
   * HAS_ENTITY_EXITED_ANIM_SCENE
   *
   * @param {number} animScene
   * @param {string | number} entityName
   * @return {boolean}
   */
global.HasEntityExitedAnimScene = function (animScene, entityName) {
  return Citizen.invokeNative('0xb89fcff19dafff28', animScene, _ts(entityName), _r);
};

/**
   * IS_ANIM_SCENE_EXITING_THIS_FRAME
   *
   * @param {number} animScene
   * @return {boolean}
   */
global.IsAnimSceneExitingThisFrame = function (animScene) {
  return Citizen.invokeNative('0xcdc5512a407cf08d', animScene, _r);
};

/**
   * IS_ANIM_SCENE_FINISHED
   *
   * @param {number} animScene
   * @param {boolean} p1
   * @return {boolean}
   */
global.IsAnimSceneFinished = function (animScene, p1) {
  return Citizen.invokeNative('0xd8254cb2c586412b', animScene, p1, _r);
};

/**
   * IS_ANIM_SCENE_IN_SECTION
   *
   * @param {number} animScene
   * @param {string | number} sectionName
   * @param {boolean} p2
   * @return {boolean}
   */
global.IsAnimSceneInSection = function (animScene, sectionName, p2) {
  return Citizen.invokeNative('0x8d81e7824b7753f7', animScene, _ts(sectionName), p2, _r);
};

/**
   * IS_ANIM_SCENE_LOADED
   *
   * @param {number} animScene
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {boolean}
   */
global.IsAnimSceneLoaded = function (animScene, p1, p2) {
  return Citizen.invokeNative('0x477122b8d05e7968', animScene, p1, p2, _r);
};

/**
   * IS_ANIM_SCENE_METADATA_LOADED
   *
   * @param {number} animScene
   * @param {boolean} p1
   * @return {boolean}
   */
global.IsAnimSceneMetadataLoaded = function (animScene, p1) {
  return Citizen.invokeNative('0x95531a4a20cce7bc', animScene, p1, _r);
};

/**
   * IS_ANIM_SCENE_RUNNING
   *
   * @param {number} animScene
   * @param {boolean} p1
   * @return {boolean}
   */
global.IsAnimSceneRunning = function (animScene, p1) {
  return Citizen.invokeNative('0xcbfc7725de6ce2e0', animScene, p1, _r);
};

/**
   * IS_ENTITY_EXITING_ANIM_SCENE_THIS_FRAME
   *
   * @param {number} animScene
   * @param {string | number} entityName
   * @return {boolean}
   */
global.IsEntityExitingAnimSceneThisFrame = function (animScene, entityName) {
  return Citizen.invokeNative('0x005e6f28dd7ed58d', animScene, _ts(entityName), _r);
};

/**
   * IS_ENTITY_PLAYING_ANIM_SCENE
   *
   * @param {number} entity
   * @param {number} animScene
   * @return {boolean}
   */
global.IsEntityPlayingAnimScene = function (entity, animScene) {
  return Citizen.invokeNative('0x3ab6c7b0bb0df4b1', entity, animScene, _r);
};

/**
   * LOAD_ANIM_SCENE
   *
   * @param {number} animScene
   * @return {void}
   */
global.LoadAnimScene = function (animScene) {
  return Citizen.invokeNative('0xaf068580194d9dc7', animScene);
};

/**
   * REMOVE_ANIM_SCENE_ENTITY
   *
   * @param {number} animScene
   * @param {string | number} entityName
   * @param {number} entity
   * @return {void}
   */
global.RemoveAnimSceneEntity = function (animScene, entityName, entity) {
  return Citizen.invokeNative('0x2bf96692c67f3e53', animScene, _ts(entityName), entity);
};

/**
   * REQUEST_ANIM_SCENE_PLAY_LIST
   *
   * @param {number} animScene
   * @param {string | number} playlistName
   * @return {boolean}
   */
global.RequestAnimScenePlayList = function (animScene, playlistName) {
  return Citizen.invokeNative('0xdf7b5144e25cd3fe', animScene, _ts(playlistName), _r);
};

/**
   * RESET_ANIM_SCENE
   *
   * @param {number} animScene
   * @param {string | number} playbackListName
   * @return {void}
   */
global.ResetAnimScene = function (animScene, playbackListName) {
  return Citizen.invokeNative('0x8fdf221f13537936', animScene, _ts(playbackListName));
};

/**
   * RESUME_ANIM_SCENE_FROM_LAST_CHECKPOINT
   *
   * @param {number} animScene
   * @return {void}
   */
global.ResumeAnimSceneFromLastCheckpoint = function (animScene) {
  return Citizen.invokeNative('0x8e1ba705f63c1925', animScene);
};

/**
   * SET_ANIM_SCENE_BOOL
   *
   * @param {number} animScene
   * @param {string | number} name
   * @param {boolean} value
   * @param {boolean} p3
   * @return {void}
   */
global.SetAnimSceneBool = function (animScene, name, value, p3) {
  return Citizen.invokeNative('0x519e96c2c68b404b', animScene, _ts(name), value, p3);
};

/**
   * SET_ANIM_SCENE_ENTITY
   *
   * @param {number} animScene
   * @param {string | number} entityName
   * @param {number} entity
   * @param {number} flags
   * @return {void}
   */
global.SetAnimSceneEntity = function (animScene, entityName, entity, flags) {
  return Citizen.invokeNative('0x8b720ad451ca2ab3', animScene, _ts(entityName), entity, flags);
};

/**
   * SET_ANIM_SCENE_FLOAT
   *
   * @param {number} animScene
   * @param {string | number} name
   * @param {number} value
   * @param {boolean} p3
   * @param {boolean} p4
   * @return {void}
   */
global.SetAnimSceneFloat = function (animScene, name, value, p3, p4) {
  return Citizen.invokeNative('0x6bc5104e68cbefe8', animScene, _ts(name), _fv(value), p3, p4);
};

/**
   * SET_ANIM_SCENE_INT
   *
   * @param {number} animScene
   * @param {string | number} name
   * @param {number} value
   * @param {boolean} p3
   * @return {void}
   */
global.SetAnimSceneInt = function (animScene, name, value, p3) {
  return Citizen.invokeNative('0x3a379d2166cf5b92', animScene, _ts(name), value, p3);
};

/**
   * SET_ANIM_SCENE_ORIGIN
   *
   * @param {number} animScene
   * @param {number} posX
   * @param {number} posY
   * @param {number} posZ
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} order
   * @return {void}
   */
global.SetAnimSceneOrigin = function (animScene, posX, posY, posZ, rotX, rotY, rotZ, order) {
  return Citizen.invokeNative('0x020894bf17a02ef2', animScene, _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), order);
};

/**
   * SET_ANIM_SCENE_PAUSED
   *
   * @param {number} animScene
   * @param {boolean} toggle
   * @return {void}
   */
global.SetAnimScenePaused = function (animScene, toggle) {
  return Citizen.invokeNative('0xd6824b7d24dc0ce0', animScene, toggle);
};

/**
   * SET_ANIM_SCENE_PLAYBACK_LIST
   *
   * @param {number} animScene
   * @param {string | number} playbackListName
   * @return {void}
   */
global.SetAnimScenePlaybackList = function (animScene, playbackListName) {
  return Citizen.invokeNative('0xab5e7cab074d6b84', animScene, _ts(playbackListName));
};

/**
   * SET_ANIM_SCENE_PLAY_LIST
   *
   * @param {number} animScene
   * @param {string | number} playlistName
   * @param {boolean} p2
   * @return {void}
   */
global.SetAnimScenePlayList = function (animScene, playlistName, p2) {
  return Citizen.invokeNative('0x15598cfb25f3dc7e', animScene, _ts(playlistName), p2);
};

/**
   * SET_ANIM_SCENE_RATE
   *
   * @param {number} animScene
   * @param {number} rate
   * @return {void}
   */
global.SetAnimSceneRate = function (animScene, rate) {
  return Citizen.invokeNative('0x75820b801cff262a', animScene, _fv(rate));
};

/**
   * START_ANIM_SCENE
   *
   * @param {number} animScene
   * @return {void}
   */
global.StartAnimScene = function (animScene) {
  return Citizen.invokeNative('0xf4d94af761768700', animScene);
};

/**
   * TAKE_OWNERSHIP_OF_ANIM_SCENE
   *
   * @param {number} animScene
   * @return {void}
   */
global.TakeOwnershipOfAnimScene = function (animScene) {
  return Citizen.invokeNative('0xf7a4c571e572d237', animScene);
};

/**
   * TRIGGER_ANIM_SCENE_SKIP
   *
   * @param {number} animScene
   * @return {void}
   */
global.TriggerAnimSceneSkip = function (animScene) {
  return Citizen.invokeNative('0x4b85b3cf9197aedf', animScene);
};

/**
   * WAS_ANIM_SCENE_SKIPPED
   *
   * @param {number} animScene
   * @return {boolean}
   */
global.WasAnimSceneSkipped = function (animScene) {
  return Citizen.invokeNative('0xef324e9550a394d5', animScene, _r);
};

/**
   * _0x1407F5115FB9583E
   * Used in SP R* Scripts only
   * Params: p1 = 2B-LowHonor, 2A-HighHonor
   *
   * @param {number} animScene
   * @param {string | number} p1
   * @return {boolean}
   */
global.N_0x1407F5115FB9583E = function (animScene, p1) {
  return Citizen.invokeNative('0x1407f5115fb9583e', animScene, _ts(p1), _r);
};

/**
   * _0x1AD896BF43619551
   * Used in braithwaites2 SP R* Scripts only
   * _A*
   *
  
   * @return {void}
   */
global.N_0x1AD896BF43619551 = function () {
  return Citizen.invokeNative('0x1ad896bf43619551');
};

/**
   * _0x1C5D33A4293E6DDE
   * Used in SP R* Scripts only
   * _IS_ANIM_SCENE_P*
   *
   * @param {number} animScene
   * @param {string | number} phaseName
   * @return {boolean}
   */
global.N_0x1C5D33A4293E6DDE = function (animScene, phaseName) {
  return Citizen.invokeNative('0x1c5d33a4293e6dde', animScene, _ts(phaseName), _r);
};

/**
   * _0x2DB524750DC41ED4
   * Used in SP R* Scripts only
   * _IS_PED_* - _IS_SC*
   *
  
   * @return {boolean}
   */
global.N_0x2DB524750DC41ED4 = function () {
  return Citizen.invokeNative('0x2db524750dc41ed4', _r);
};

/**
   * _0x3641FCD53E59B335
   * p2: MINIGAME_GET_SECONDARY_VOICE_STRING
   * _SET_*
   *
   * @param {number} mgmHandle
   * @param {number} ped
   * @param {string | number} secondaryVoiceString
   * @return {void}
   */
global.N_0x3641FCD53E59B335 = function (mgmHandle, ped, secondaryVoiceString) {
  return Citizen.invokeNative('0x3641fcd53e59b335', mgmHandle, ped, _ts(secondaryVoiceString));
};

/**
   * _0x3B393716C3FD8237
   * Used in SP R* Scripts only
   * _IS_*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x3B393716C3FD8237 = function (ped) {
  return Citizen.invokeNative('0x3b393716c3fd8237', ped, _r);
};

/**
   * _0x4B85B3CF91972222
   * Used in Script Function CUTSCENE_MANAGE_SKIP
   * _CHECK_* (?)
   *
   * @param {number} animScene
   * @return {boolean}
   */
global.N_0x4B85B3CF91972222 = function (animScene) {
  return Citizen.invokeNative('0x4b85b3cf91972222', animScene, _r);
};

/**
   * _0x5D7BFDA2290B4E39
   * Used in SP R* Scripts only
   * _IS_ANIM_SCENE_R* - _IS_ANIM_SCENE_S*
   *
   * @param {string | number} p0
   * @return {boolean}
   */
global.N_0x5D7BFDA2290B4E39 = function (p0) {
  return Citizen.invokeNative('0x5d7bfda2290b4e39', _ts(p0), _r);
};

/**
   * _0x61B2AAEF645DDAF0
   * Only used in tg_p R* Script
   * Returns true when mgm event success
   * _PREPARE_* - _REGISTER_*
   *
   * @param {number} mgmEventHandle
   * @param {string | number} p1
   * @param {number} seatId
   * @param {number} p3
   * @param {boolean} p4
   * @return {boolean}
   */
global.N_0x61B2AAEF645DDAF0 = function (mgmEventHandle, p1, seatId, p3, p4) {
  return Citizen.invokeNative('0x61b2aaef645ddaf0', mgmEventHandle, _ts(p1), seatId, p3, p4, _r);
};

/**
   * _0x73616E64696C132E
   * Used in SP R* Scripts only
   * _CO* - _CR*
   *
   * @param {number} animScene
   * @param {boolean} p1
   * @return {boolean}
   */
global.N_0x73616E64696C132E = function (animScene, p1) {
  return Citizen.invokeNative('0x73616e64696c132e', animScene, p1, _r);
};

/**
   * _0x9AAE3C1148A09BCA
   * Used in SP R* Scripts only
   * _IS_ANIM_SCENE_*
   *
   * @param {number} animScene
   * @return {boolean}
   */
global.N_0x9AAE3C1148A09BCA = function (animScene) {
  return Citizen.invokeNative('0x9aae3c1148a09bca', animScene, _r);
};

/**
   * _0xA96619FE85159ED2
   * Used in SP R* Scripts only
   * _WAS_ANIM_SCENE_*
   *
   * @param {number} animScene
   * @return {boolean}
   */
global.N_0xA96619FE85159ED2 = function (animScene) {
  return Citizen.invokeNative('0xa96619fe85159ed2', animScene, _r);
};

/**
   * _0xAE6DE22DE0ED4554
   * _UNLOAD_* - _WAS_ANIM_SCENE_*
   *
   * @param {number} mgmHandle
   * @param {number} ped
   * @return {void}
   */
global.N_0xAE6DE22DE0ED4554 = function (mgmHandle, ped) {
  return Citizen.invokeNative('0xae6de22de0ed4554', mgmHandle, ped);
};

/**
   * _0xB1A196BAFE650402
   * _PREPARE_* - _REGISTER_*
   *
   * @param {number} mgmHandle
   * @param {number} ped
   * @return {void}
   */
global.N_0xB1A196BAFE650402 = function (mgmHandle, ped) {
  return Citizen.invokeNative('0xb1a196bafe650402', mgmHandle, ped);
};

/**
   * _0xC1193521E3B9FADD
   * Used in SP R* Scripts only
   * _RESUME_* - _SET_A*
   *
   * @param {number} entity
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xC1193521E3B9FADD = function (entity, p1) {
  return Citizen.invokeNative('0xc1193521e3b9fadd', entity, p1);
};

/**
   * _0xCDCD7B2D49AEE73A
   * Used in SP R* Scripts only
   * _SET_P*
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0xCDCD7B2D49AEE73A = function (p0) {
  return Citizen.invokeNative('0xcdcd7b2d49aee73a', p0);
};

/**
   * _0xD70C7A30412F8FA0
   * Used in SP R* Scripts only
   * _IS_ANIM_SCENE_*
   *
   * @param {number} animScene
   * @return {boolean}
   */
global.N_0xD70C7A30412F8FA0 = function (animScene) {
  return Citizen.invokeNative('0xd70c7a30412f8fa0', animScene, _r);
};

/**
   * _0xE12D7B4B959644CD
   * Used in SP R* Scripts only
   * _SET_B* - _SET_C*
   *
  
   * @return {void}
   */
global.N_0xE12D7B4B959644CD = function () {
  return Citizen.invokeNative('0xe12d7b4b959644cd');
};

/**
   * _0xEA41D44A8D42057B
   * Used in SP R* Scripts only
   * _PAUSE_* - _PLAY_*
   *
  
   * @return {boolean}
   */
global.N_0xEA41D44A8D42057B = function () {
  return Citizen.invokeNative('0xea41d44a8d42057b', _r);
};

/**
   * _CLEAR_ANIM_SCENE_WAS_SKIPPED
   *
   * @param {number} animScene
   * @return {void}
   */
global.ClearAnimSceneWasSkipped = function (animScene) {
  return Citizen.invokeNative('0x8a8208ae92bf87a5', animScene);
};

/**
   * _CLEAR_BREAKOUT_ARCHETYPE
   *
   * @param {number} ped
   * @return {void}
   */
global.ClearBreakoutArchetype = function (ped) {
  return Citizen.invokeNative('0xbc781d24aa11f179', ped);
};

/**
   * _CREATE_ANIM_SCENE
   * flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eAnimSceneFlag
   *
   * @param {string | number} animDict
   * @param {number} flags
   * @param {string | number} playbackListName
   * @param {boolean} p3
   * @param {boolean} p4
   * @return {number}
   */
global.CreateAnimScene = function (animDict, flags, playbackListName, p3, p4) {
  return Citizen.invokeNative('0x1fca98e33c1437b3', animDict, flags, playbackListName, p3, p4, _r, _ri);
};

/**
   * _CREATE_MGM_SYSTEM
   * Returns mgmHandle
   *
   * @param {string | number} mgmFilename
   * @return {number}
   */
global.CreateMgmSystem = function (mgmFilename) {
  return Citizen.invokeNative('0xa1300de03e5d1973', _ts(mgmFilename), _r, _ri);
};

/**
   * _DELETE_ANIM_SCENE
   *
   * @param {number} animScene
   * @return {void}
   */
global.DeleteAnimScene = function (animScene) {
  return Citizen.invokeNative('0x84eedb2c6e650000', animScene);
};

/**
   * _DELETE_MGM_SYSTEM
   *
   * @param {number} mgmHandle
   * @return {void}
   */
global.DeleteMgmSystem = function (mgmHandle) {
  return Citizen.invokeNative('0x53cb3970ba02e3cc', mgmHandle);
};

/**
   * _DOES_ANIM_SCENE_OWNERSHIP_OF_ENTITY_EXIST
   *
   * @param {number} animScene
   * @param {string | number} entityName
   * @return {boolean}
   */
global.DoesAnimSceneOwnershipOfEntityExist = function (animScene, entityName) {
  return Citizen.invokeNative('0x9d1eca9337be9fc3', animScene, _ts(entityName), _r);
};

/**
   * _DOES_ANIM_SCENE_PLAY_LIST_EXIST
   *
   * @param {number} animScene
   * @param {string | number} playbackListName
   * @return {boolean}
   */
global.DoesAnimScenePlayListExist = function (animScene, playbackListName) {
  return Citizen.invokeNative('0xa9016536015de29d', animScene, _ts(playbackListName), _r);
};

/**
   * _DOES_ENTITY_WITH_ID_EXIST_IN_ANIM_SCENE
   *
   * @param {number} animScene
   * @param {string | number} entityId
   * @return {boolean}
   */
global.DoesEntityWithIdExistInAnimScene = function (animScene, entityId) {
  return Citizen.invokeNative('0x6f1f0b17109309da', animScene, _ts(entityId), _r);
};

/**
   * _GET_ANIM_SCENE_DICT
   *
   * @param {number} animScene
   * @return {number}
   */
global.GetAnimSceneDict = function (animScene) {
  return Citizen.invokeNative('0xae5ada4fe3e21adc', animScene, _r, _ri);
};

/**
   * _GET_ANIM_SCENE_DURATION
   *
   * @param {number} animScene
   * @return {number}
   */
global.GetAnimSceneDuration = function (animScene) {
  return Citizen.invokeNative('0x49f1d143ade32656', animScene, _r, _rf);
};

/**
   * _GET_ANIM_SCENE_OBJECT
   *
   * @param {number} animScene
   * @param {string | number} name
   * @param {boolean} isNetwork
   * @return {number}
   */
global.GetAnimSceneObject = function (animScene, name, isNetwork) {
  return Citizen.invokeNative('0xfb5674687a1b2814', animScene, _ts(name), isNetwork, _r, _ri);
};

/**
   * _GET_ANIM_SCENE_PED
   *
   * @param {number} animScene
   * @param {string | number} name
   * @param {boolean} isNetwork
   * @return {number}
   */
global.GetAnimScenePed = function (animScene, name, isNetwork) {
  return Citizen.invokeNative('0xe5822422197bbba3', animScene, _ts(name), isNetwork, _r, _ri);
};

/**
   * _GET_ANIM_SCENE_PLAYBACK_LIST_PHASE_AUDIO_LOAD_STRESS
   *
   * @param {number} animScene
   * @param {string | number} phaseName
   * @return {number}
   */
global.GetAnimScenePlaybackListPhaseAudioLoadStress = function (animScene, phaseName) {
  return Citizen.invokeNative('0x9e036d5204ffbbc8', animScene, _ts(phaseName), _r, _ri);
};

/**
   * _GET_ANIM_SCENE_RATE
   *
   * @param {number} animScene
   * @return {number}
   */
global.GetAnimSceneRate = function (animScene) {
  return Citizen.invokeNative('0x43c21623e42b821b', animScene, _r, _rf);
};

/**
   * _GET_ANIM_SCENE_TIME
   *
   * @param {number} animScene
   * @return {number}
   */
global.GetAnimSceneTime = function (animScene) {
  return Citizen.invokeNative('0x61be7d6186260002', animScene, _r, _rf);
};

/**
   * _GET_ANIM_SCENE_VEHICLE
   *
   * @param {number} animScene
   * @param {string | number} name
   * @param {boolean} isNetwork
   * @return {number}
   */
global.GetAnimSceneVehicle = function (animScene, name, isNetwork) {
  return Citizen.invokeNative('0x430ee0a19bc5a287', animScene, _ts(name), isNetwork, _r, _ri);
};

/**
   * _HAS_ENTITY_ENTERED_ANIM_SCENE
   * _HAS_L* (?)
   *
   * @param {number} animScene
   * @param {string | number} entityName
   * @return {boolean}
   */
global.HasEntityEnteredAnimScene = function (animScene, entityName) {
  return Citizen.invokeNative('0x337f1cc8ee895601', animScene, _ts(entityName), _r);
};

/**
   * _IS_ANIM_SCENE_ABORTED
   *
   * @param {number} animScene
   * @return {boolean}
   */
global.IsAnimSceneAborted = function (animScene) {
  return Citizen.invokeNative('0x34a0671be613d3d0', animScene, _r);
};

/**
   * _IS_ANIM_SCENE_LOADING
   *
   * @param {number} animScene
   * @param {boolean} p1
   * @return {boolean}
   */
global.IsAnimSceneLoading = function (animScene, p1) {
  return Citizen.invokeNative('0x59606519ff9d3ec2', animScene, p1, _r);
};

/**
   * _IS_ANIM_SCENE_METADATA_ASSET_IN_RANGE_LOADING
   *
   * @param {number} animScene
   * @param {boolean} p1
   * @return {boolean}
   */
global.IsAnimSceneMetadataAssetInRangeLoading = function (animScene, p1) {
  return Citizen.invokeNative('0xf8d1d2dab6007eef', animScene, p1, _r);
};

/**
   * _IS_ANIM_SCENE_PAUSED
   *
   * @param {number} animScene
   * @return {boolean}
   */
global.IsAnimScenePaused = function (animScene) {
  return Citizen.invokeNative('0x4b4038796f0d6566', animScene, _r);
};

/**
   * _IS_ANIM_SCENE_PLAYBACK_LIST_PHASE_ACTIVE
   *
   * @param {number} animScene
   * @param {string | number} phaseName
   * @return {boolean}
   */
global.IsAnimScenePlaybackListPhaseActive = function (animScene, phaseName) {
  return Citizen.invokeNative('0x1f0e401031e20146', animScene, _ts(phaseName), _r);
};

/**
   * _IS_ANIM_SCENE_PLAYBACK_LIST_PHASE_LOADED
   *
   * @param {number} animScene
   * @param {string | number} phaseName
   * @return {boolean}
   */
global.IsAnimScenePlaybackListPhaseLoaded = function (animScene, phaseName) {
  return Citizen.invokeNative('0x23e33cb9f4a3f547', animScene, _ts(phaseName), _r);
};

/**
   * _IS_ANIM_SCENE_PLAYBACK_LIST_PHASE_LOADING
   *
   * @param {number} animScene
   * @param {string | number} phaseName
   * @return {boolean}
   */
global.IsAnimScenePlaybackListPhaseLoading = function (animScene, phaseName) {
  return Citizen.invokeNative('0x0df57f86fe71dbe5', animScene, _ts(phaseName), _r);
};

/**
   * _IS_ANIM_SCENE_SKIPPABLE
   *
   * @param {number} animScene
   * @return {boolean}
   */
global.IsAnimSceneSkippable = function (animScene) {
  return Citizen.invokeNative('0x4cdffe3189ebdbd0', animScene, _r);
};

/**
   * _IS_MGM_SYSTEM_LOADED
   * MGM stands for MiniGameMoments.
   *
   * @param {string | number} mgmFilename
   * @return {boolean}
   */
global.IsMgmSystemLoaded = function (mgmFilename) {
  return Citizen.invokeNative('0xfdfc14799373283f', _ts(mgmFilename), _r);
};

/**
   * _LOAD_MGM_ASSETS
   * Used to request MiniGameMoments Assets.
   * 
   * mgmFilename's:
   * Poker
   * PokerArthur
   * PokerArthurCamp
   * PokerJohn
   * PokerJohnCamp
   *
   * @param {string | number} mgmFilename
   * @return {boolean}
   */
global.LoadMgmAssets = function (mgmFilename) {
  return Citizen.invokeNative('0xb727a847862cb00a', _ts(mgmFilename), _r);
};

/**
   * _PAUSE_SCRIPT_THREADS
   * Pauses all script threads except the one that called it.
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.PauseScriptThreads = function (toggle) {
  return Citizen.invokeNative('0x37c1257849def24a', toggle);
};

/**
   * _RELEASE_ANIM_SCENE_PLAY_LIST
   *
   * @param {number} animScene
   * @param {string | number} playlistName
   * @return {boolean}
   */
global.ReleaseAnimScenePlayList = function (animScene, playlistName) {
  return Citizen.invokeNative('0xae6ada8fe7e84acc', animScene, _ts(playlistName), _r);
};

/**
   * _REQUEST_PHOTO_MODE_DEFREEZE
   *
  
   * @return {void}
   */
global.RequestPhotoModeDefreeze = function () {
  return Citizen.invokeNative('0x41afa5f228b0b6b0');
};

/**
   * _REQUEST_PHOTO_MODE_FREEZE
   *
  
   * @return {void}
   */
global.RequestPhotoModeFreeze = function () {
  return Citizen.invokeNative('0x7c709c01d43d94cd');
};

/**
   * _SET_BREAKOUT_ARCHETYPE
   *
   * @param {number} ped
   * @param {string | number} archetype
   * @return {void}
   */
global.SetBreakoutArchetype = function (ped, archetype) {
  return Citizen.invokeNative('0x99b2a2e3655deaf1', ped, _ts(archetype));
};

/**
   * _SET_MGM_EVENT
   *
   * @param {number} mgmEventHandle
   * @param {string | number} p1
   * @param {any} seatId
   * @param {number} p3
   * @param {number} p4
   * @return {void}
   */
global.SetMgmEvent = function (mgmEventHandle, p1, seatId, p3, p4) {
  return Citizen.invokeNative('0x07706c4cc9c6cc9e', mgmEventHandle, _ts(p1), seatId, p3, _fv(p4));
};

/**
   * ADD_ATTRIBUTE_POINTS
   * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
   *
   * @param {number} ped
   * @param {number} attributeIndex
   * @param {number} p2
   * @return {void}
   */
global.AddAttributePoints = function (ped, attributeIndex, p2) {
  return Citizen.invokeNative('0x75415ee0cb583760', ped, attributeIndex, p2);
};

/**
   * DISABLE_ATTRIBUTE_OVERPOWER
   * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
   *
   * @param {number} ped
   * @param {number} attributeIndex
   * @return {void}
   */
global.DisableAttributeOverpower = function (ped, attributeIndex) {
  return Citizen.invokeNative('0xf8dac3d85636c241', ped, attributeIndex);
};

/**
   * ENABLE_ATTRIBUTE_OVERPOWER
   * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
   * 
   * Old name: _SET_ATTRIBUTE_OVERPOWER_VALUE
   *
   * @param {number} ped
   * @param {number} attributeIndex
   * @param {number} value
   * @param {boolean} makeSound
   * @return {void}
   */
global.EnableAttributeOverpower = function (ped, attributeIndex, value, makeSound) {
  return Citizen.invokeNative('0xf6a7c08df2e28b28', ped, attributeIndex, _fv(value), makeSound);
};

/**
   * GET_ATTRIBUTE_BASE_RANK
   * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
   *
   * @param {number} ped
   * @param {number} attributeIndex
   * @return {number}
   */
global.GetAttributeBaseRank = function (ped, attributeIndex) {
  return Citizen.invokeNative('0x147149f2e909323c', ped, attributeIndex, _r, _ri);
};

/**
   * GET_ATTRIBUTE_BONUS_RANK
   * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
   *
   * @param {number} ped
   * @param {number} coreIndex
   * @return {number}
   */
global.GetAttributeBonusRank = function (ped, coreIndex) {
  return Citizen.invokeNative('0x0efa71f4b4330e04', ped, coreIndex, _r, _ri);
};

/**
   * GET_ATTRIBUTE_POINTS
   * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
   *
   * @param {number} ped
   * @param {number} attributeIndex
   * @return {number}
   */
global.GetAttributePoints = function (ped, attributeIndex) {
  return Citizen.invokeNative('0x219da04baa9cb065', ped, attributeIndex, _r, _ri);
};

/**
   * GET_ATTRIBUTE_RANK
   * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
   *
   * @param {number} ped
   * @param {number} attributeIndex
   * @return {number}
   */
global.GetAttributeRank = function (ped, attributeIndex) {
  return Citizen.invokeNative('0xa4c8e23e29040de0', ped, attributeIndex, _r, _ri);
};

/**
   * GET_DEFAULT_ATTRIBUTE_POINTS_NEEDED_FOR_RANK
   * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
   *
   * @param {number} modelHash
   * @param {number} attributeIndex
   * @param {number} rank
   * @return {number}
   */
global.GetDefaultAttributePointsNeededForRank = function (modelHash, attributeIndex, rank) {
  return Citizen.invokeNative('0x94a7f191db49a44d', _ch(modelHash), attributeIndex, rank, _r, _ri);
};

/**
   * GET_DEFAULT_ATTRIBUTE_RANK
   * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
   *
   * @param {number} ped
   * @param {number} attributeIndex
   * @return {number}
   */
global.GetDefaultAttributeRank = function (ped, attributeIndex) {
  return Citizen.invokeNative('0x958dd43d41f89a47', ped, attributeIndex, _r, _ri);
};

/**
   * GET_DEFAULT_MAX_ATTRIBUTE_RANK
   * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
   *
   * @param {number} ped
   * @param {number} attributeIndex
   * @return {number}
   */
global.GetDefaultMaxAttributeRank = function (ped, attributeIndex) {
  return Citizen.invokeNative('0x7c059c55ad940cb4', ped, attributeIndex, _r, _ri);
};

/**
   * GET_MAX_ATTRIBUTE_POINTS
   * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
   *
   * @param {number} ped
   * @param {number} attributeIndex
   * @return {number}
   */
global.GetMaxAttributePoints = function (ped, attributeIndex) {
  return Citizen.invokeNative('0x223bf310f854871c', ped, attributeIndex, _r, _ri);
};

/**
   * GET_MAX_ATTRIBUTE_RANK
   * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
   *
   * @param {number} ped
   * @param {number} attributeIndex
   * @return {number}
   */
global.GetMaxAttributeRank = function (ped, attributeIndex) {
  return Citizen.invokeNative('0x704674a0535a471d', ped, attributeIndex, _r, _ri);
};

/**
   * SET_ATTRIBUTE_BASE_RANK
   * attributeIndex:
   * enum ePedAttribute
   * {
   *   PA_HEALTH,
   *   PA_STAMINA,
   *   PA_SPECIALABILITY,
   *   PA_COURAGE,
   *   PA_AGILITY,
   *   PA_SPEED,
   *   PA_ACCELERATION,
   *   PA_BONDING,
   *   SA_HUNGER,
   *   SA_FATIGUED,
   *   SA_INEBRIATED,
   *   SA_POISONED,
   *   SA_BODYHEAT,
   *   SA_BODYWEIGHT,
   *   SA_OVERFED,
   *   SA_SICKNESS,
   *   SA_DIRTINESS,
   *   SA_DIRTINESSHAT,
   *   MTR_STRENGTH,
   *   MTR_GRIT,
   *   MTR_INSTINCT,
   *   PA_UNRULINESS,
   *   SA_DIRTINESSSKIN
   * };
   *
   * @param {number} ped
   * @param {number} attributeIndex
   * @param {number} newValue
   * @return {void}
   */
global.SetAttributeBaseRank = function (ped, attributeIndex, newValue) {
  return Citizen.invokeNative('0x5da12e025d47d4e5', ped, attributeIndex, newValue);
};

/**
   * SET_ATTRIBUTE_BONUS_RANK
   * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
   *
   * @param {number} ped
   * @param {number} attributeIndex
   * @param {number} newValue
   * @return {void}
   */
global.SetAttributeBonusRank = function (ped, attributeIndex, newValue) {
  return Citizen.invokeNative('0x920f9488bd115efb', ped, attributeIndex, newValue);
};

/**
   * SET_ATTRIBUTE_POINTS
   * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
   *
   * @param {number} ped
   * @param {number} attributeIndex
   * @param {number} p2
   * @return {void}
   */
global.SetAttributePoints = function (ped, attributeIndex, p2) {
  return Citizen.invokeNative('0x09a59688c26d88df', ped, attributeIndex, p2);
};

/**
   * STOP_ITEM_PREVIEW
   *
  
   * @return {void}
   */
global.StopItemPreview = function () {
  return Citizen.invokeNative('0xd962f8579d702db5');
};

/**
   * _ENABLE_ATTRIBUTE_CORE_OVERPOWER
   * coreIndex: see _SET_ATTRIBUTE_CORE_VALUE
   * 
   * Previously incorrectly named ENABLE_ATTRIBUTE_OVERPOWER
   *
   * @param {number} ped
   * @param {number} coreIndex
   * @param {number} value
   * @param {boolean} makeSound
   * @return {void}
   */
global.EnableAttributeCoreOverpower = function (ped, coreIndex, value, makeSound) {
  return Citizen.invokeNative('0x4af5a4c7b9157d14', ped, coreIndex, _fv(value), makeSound);
};

/**
   * _GET_ATTRIBUTE_CORE_OVERPOWER_SECONDS_LEFT
   *
   * @param {number} ped
   * @param {number} coreIndex
   * @return {number}
   */
global.GetAttributeCoreOverpowerSecondsLeft = function (ped, coreIndex) {
  return Citizen.invokeNative('0xb429f58803d285b1', ped, coreIndex, _r, _rf);
};

/**
   * _GET_ATTRIBUTE_CORE_VALUE
   * Gets the ped's core value on a scale of 0 to 100.
   * coreIndex: see _SET_ATTRIBUTE_CORE_VALUE
   *
   * @param {number} ped
   * @param {number} coreIndex
   * @return {number}
   */
global.GetAttributeCoreValue = function (ped, coreIndex) {
  return Citizen.invokeNative('0x36731ac041289bb1', ped, coreIndex, _r, _ri);
};

/**
   * _GET_ATTRIBUTE_OVERPOWER_SECONDS_LEFT
   *
   * @param {number} ped
   * @param {number} attributeIndex
   * @return {number}
   */
global.GetAttributeOverpowerSecondsLeft = function (ped, attributeIndex) {
  return Citizen.invokeNative('0x4c9f782180712742', ped, attributeIndex, _r, _rf);
};

/**
   * _IS_ATTRIBUTE_CORE_OVERPOWERED
   *
   * @param {number} ped
   * @param {number} coreIndex
   * @return {boolean}
   */
global.IsAttributeCoreOverpowered = function (ped, coreIndex) {
  return Citizen.invokeNative('0x200373a8df081f22', ped, coreIndex, _r);
};

/**
   * _IS_ATTRIBUTE_OVERPOWERED
   * attributeIndex: see SET_ATTRIBUTE_BASE_RANK
   *
   * @param {number} ped
   * @param {number} attributeIndex
   * @return {boolean}
   */
global.IsAttributeOverpowered = function (ped, attributeIndex) {
  return Citizen.invokeNative('0x103c2f885abeb00b', ped, attributeIndex, _r);
};

/**
   * _SET_ATTRIBUTE_CORE_VALUE
   * coreIndex:
   * enum eAttributeCore
   * {
   *   ATTRIBUTE_CORE_HEALTH,
   *   ATTRIBUTE_CORE_STAMINA,
   *   ATTRIBUTE_CORE_DEADEYE
   * };
   *
   * @param {number} ped
   * @param {number} coreIndex
   * @param {number} value
   * @return {void}
   */
global.SetAttributeCoreValue = function (ped, coreIndex, value) {
  return Citizen.invokeNative('0xc6258f41d86676e0', ped, coreIndex, value);
};

/**
   * _SET_STATUS_EFFECT_CORE_ICON
   * Displays status effects on core icons (includes warnings).
   * 
   * enum eUiRpgStatusEffect
   * {
   *   STATUS_NONE,
   *   STATUS_COLD,
   *   STATUS_HOT,
   *   STATUS_OVERFED,
   *   STATUS_DIRTY,
   *   STATUS_SNAKE_VENOM,
   *   STATUS_ARROW_WOUNDED,
   *   STATUS_ARROW_DRAINED,
   *   STATUS_ARROW_DISORIENTED,
   *   STATUS_ARROW_TRACKED,
   *   STATUS_ARROW_CONFUSION,
   *   STATUS_UNDERWEIGHT,
   *   STATUS_OVERWEIGHT,
   *   STATUS_SICK_1,
   *   STATUS_SICK_2,
   *   STATUS_PREDATOR_INVULNERABLE
   * };
   *
   * @param {number} statusEffectType
   * @return {void}
   */
global.SetStatusEffectCoreIcon = function (statusEffectType) {
  return Citizen.invokeNative('0xa4d3a1c008f250df', statusEffectType);
};

/**
   * _SET_STATUS_EFFECT_PERIODIC_ICON
   * Starts core periodic icon.
   * statusEffectType: see 0xA4D3A1C008F250DF
   *
   * @param {number} statusEffectType
   * @return {void}
   */
global.SetStatusEffectPeriodicIcon = function (statusEffectType) {
  return Citizen.invokeNative('0xfb6e111908502871', statusEffectType);
};

/**
   * _START_ITEM_PREVIEW
   * Params: p1 is related to satchel_category
   *
   * @param {any} p0
   * @param {number} p1
   * @return {void}
   */
global.StartItemPreview = function (p0, p1) {
  return Citizen.invokeNative('0x7e2c766adb2c5f1a', p0, p1);
};

/**
   * _STOP_STATUS_EFFECT_PERIODIC_ICON
   * Stops periodic icon.
   * statusEffectType: see 0xA4D3A1C008F250DF
   *
   * @param {number} statusEffectType
   * @return {void}
   */
global.StopStatusEffectPeriodicIcon = function (statusEffectType) {
  return Citizen.invokeNative('0x3fc4c027fd0936f4', statusEffectType);
};

/**
   * ADD_ENTITY_TO_AUDIO_MIX_GROUP
   *
   * @param {number} entity
   * @param {string | number} groupName
   * @param {number} p2
   * @return {void}
   */
global.AddEntityToAudioMixGroup = function (entity, groupName, p2) {
  return Citizen.invokeNative('0x153973ab99fe8980', entity, _ts(groupName), _fv(p2));
};

/**
   * ADD_PED_TO_CONVERSATION
   *
   * @param {string | number} convoRoot
   * @param {number} ped
   * @param {string | number} characterName
   * @return {void}
   */
global.AddPedToConversation = function (convoRoot, ped, characterName) {
  return Citizen.invokeNative('0x95d9f4bc443956e7', _ts(convoRoot), ped, _ts(characterName));
};

/**
   * AUDIO_IS_MUSIC_PLAYING
   * Old name: AUDIO_IS_SCRIPTED_MUSIC_PLAYING
   *
  
   * @return {boolean}
   */
global.AudioIsMusicPlaying = function () {
  return Citizen.invokeNative('0x845ffc3a4feefa3e', _r);
};

/**
   * AUDIO_TRIGGER_EXPLOSION
   *
   * @param {string | number} name
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.AudioTriggerExplosion = function (name, x, y, z) {
  return Citizen.invokeNative('0x374f0e716bfcde82', _ts(name), _fv(x), _fv(y), _fv(z));
};

/**
   * CANCEL_MUSIC_EVENT
   *
   * @param {string | number} eventName
   * @return {boolean}
   */
global.CancelMusicEvent = function (eventName) {
  return Citizen.invokeNative('0x5b17a90291133da5', _ts(eventName), _r);
};

/**
   * CLEAR_AMBIENT_ZONE_LIST_STATE
   *
   * @param {string | number} ambientZone
   * @param {boolean} p1
   * @return {void}
   */
global.ClearAmbientZoneListState = function (ambientZone, p1) {
  return Citizen.invokeNative('0x120c48c614909fa4', _ts(ambientZone), p1);
};

/**
   * CLEAR_AMBIENT_ZONE_STATE
   *
   * @param {string | number} zoneName
   * @param {boolean} p1
   * @return {void}
   */
global.ClearAmbientZoneState = function (zoneName, p1) {
  return Citizen.invokeNative('0x218dd44aaac964ff', _ts(zoneName), p1);
};

/**
   * CLEAR_CONVERSATION_HISTORY
   *
  
   * @return {void}
   */
global.ClearConversationHistory = function () {
  return Citizen.invokeNative('0x33d51f801cb16e4f');
};

/**
   * CREATE_NEW_SCRIPTED_CONVERSATION
   *
   * @param {string | number} convoRoot
   * @return {boolean}
   */
global.CreateNewScriptedConversation = function (convoRoot) {
  return Citizen.invokeNative('0xd2c91a0b572aae56', _ts(convoRoot), _r);
};

/**
   * DISABLE_PED_PAIN_AUDIO
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.DisablePedPainAudio = function (ped, toggle) {
  return Citizen.invokeNative('0xa9a41c1e940fb0e8', ped, toggle);
};

/**
   * DOES_CONTEXT_EXIST_FOR_THIS_PED
   * Checks if the ped can play the speech or has the speech file, last parameter is usually false.
   *
   * @param {number} ped
   * @param {string | number} speechName
   * @param {boolean} unk
   * @return {boolean}
   */
global.DoesContextExistForThisPed = function (ped, speechName, unk) {
  return Citizen.invokeNative('0x49b99bf3fda89a7a', ped, _ts(speechName), unk, _r);
};

/**
   * FORCE_PED_PANIC_WALLA
   *
  
   * @return {void}
   */
global.ForcePedPanicWalla = function () {
  return Citizen.invokeNative('0x062d5ead4da2fa6a');
};

/**
   * FORCE_USE_AUDIO_GAME_OBJECT
   * Old name: _FORCE_VEHICLE_ENGINE_AUDIO
   *
   * @param {number} vehicle
   * @param {string | number} audioName
   * @return {void}
   */
global.ForceUseAudioGameObject = function (vehicle, audioName) {
  return Citizen.invokeNative('0x4f0c413926060b38', vehicle, _ts(audioName));
};

/**
   * GET_CURRENT_SCRIPTED_CONVERSATION_LINE
   *
   * @param {string | number} p0
   * @return {number}
   */
global.GetCurrentScriptedConversationLine = function (p0) {
  return Citizen.invokeNative('0x480357ee890c295a', _ts(p0), _r, _ri);
};

/**
   * GET_MUSIC_PLAYTIME
   *
  
   * @return {number}
   */
global.GetMusicPlaytime = function () {
  return Citizen.invokeNative('0xe7a0d23dc414507b', _r, _ri);
};

/**
   * GET_SOUND_ID
   *
  
   * @return {number}
   */
global.GetSoundId = function () {
  return Citizen.invokeNative('0x430386fe9bf80b45', _r, _ri);
};

/**
   * IS_AMBIENT_SPEECH_DISABLED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsAmbientSpeechDisabled = function (ped) {
  return Citizen.invokeNative('0x932c2d096a2c3fff', ped, _r);
};

/**
   * IS_AMBIENT_SPEECH_PLAYING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsAmbientSpeechPlaying = function (ped) {
  return Citizen.invokeNative('0x9072c8b49907bfad', ped, _r);
};

/**
   * IS_ANIMAL_VOCALIZATION_PLAYING
   *
   * @param {number} pedHandle
   * @return {boolean}
   */
global.IsAnimalVocalizationPlaying = function (pedHandle) {
  return Citizen.invokeNative('0xc265df9fb44a9fbd', pedHandle, _r);
};

/**
   * IS_ANY_SPEECH_PLAYING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsAnySpeechPlaying = function (ped) {
  return Citizen.invokeNative('0x729072355fa39ec9', ped, _r);
};

/**
   * IS_AUDIO_SCENE_ACTIVE
   *
   * @param {string | number} scene
   * @return {boolean}
   */
global.IsAudioSceneActive = function (scene) {
  return Citizen.invokeNative('0xb65b60556e2a9225', _ts(scene), _r);
};

/**
   * IS_HORN_ACTIVE
   * Checks whether the horn of a vehicle is currently played.
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.IsHornActive = function (vehicle) {
  return Citizen.invokeNative('0x9d6bfc12b05c6121', vehicle, _r);
};

/**
   * IS_PED_IN_CURRENT_CONVERSATION
   *
   * @param {string | number} p0
   * @param {number} ped
   * @param {any} p2
   * @return {boolean}
   */
global.IsPedInCurrentConversation = function (p0, ped, p2) {
  return Citizen.invokeNative('0x049e937f18f4020c', _ts(p0), ped, p2, _r);
};

/**
   * IS_SCRIPTED_CONVERSATION_LOADED
   *
   * @param {string | number} convoRoot
   * @return {boolean}
   */
global.IsScriptedConversationLoaded = function (convoRoot) {
  return Citizen.invokeNative('0xdf0d54be7a776737', _ts(convoRoot), _r);
};

/**
   * IS_SCRIPTED_CONVERSATION_PLAYING
   *
   * @param {string | number} p0
   * @return {boolean}
   */
global.IsScriptedConversationPlaying = function (p0) {
  return Citizen.invokeNative('0x1ecc76792f661cf5', _ts(p0), _r);
};

/**
   * IS_SCRIPTED_SPEECH_PLAYING
   *
   * @param {any} p0
   * @return {boolean}
   */
global.IsScriptedSpeechPlaying = function (p0) {
  return Citizen.invokeNative('0xcc9aa18dcc7084f4', p0, _r);
};

/**
   * IS_STREAM_PLAYING
   *
   * @param {number} streamId
   * @return {boolean}
   */
global.IsStreamPlaying = function (streamId) {
  return Citizen.invokeNative('0xd11fa52eb849d978', streamId, _r);
};

/**
   * LOAD_STREAM
   *
   * @param {string | number} streamName
   * @param {string | number} soundSet
   * @return {boolean}
   */
global.LoadStream = function (streamName, soundSet) {
  return Citizen.invokeNative('0x1f1f957154ec51df', _ts(streamName), _ts(soundSet), _r);
};

/**
   * PAUSE_SCRIPTED_CONVERSATION
   *
   * @param {string | number} p0
   * @param {boolean} p1
   * @param {boolean} p2
   * @param {boolean} p3
   * @param {boolean} p4
   * @return {void}
   */
global.PauseScriptedConversation = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x8530ad776cd72b12', _ts(p0), p1, p2, p3, p4);
};

/**
   * PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE
   * Old name: _PLAY_AMBIENT_SPEECH_AT_COORDS
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {DataView} params
   * @return {boolean}
   */
global.PlayAmbientSpeechFromPositionNative = function (x, y, z, params) {
  return Citizen.invokeNative('0xed640017ed337e45', _fv(x), _fv(y), _fv(z), params, _r);
};

/**
   * PLAY_ANIMAL_VOCALIZATION
   *
   * @param {number} ped
   * @param {string | number} vocalizationName
   * @param {boolean} p2
   * @return {void}
   */
global.PlayAnimalVocalization = function (ped, vocalizationName, p2) {
  return Citizen.invokeNative('0xee066c7006c49c0a', ped, _ts(vocalizationName), p2);
};

/**
   * PLAY_END_CREDITS_MUSIC
   *
   * @param {boolean} play
   * @return {void}
   */
global.PlayEndCreditsMusic = function (play) {
  return Citizen.invokeNative('0xcd536c4d33dcc900', play);
};

/**
   * PLAY_PAIN
   * Valid pain IDs: 0..12  these names are not official, but here is a list of the IDs:
   *  1 burning,
   *  2 drowning,
   *  3 coughing,
   *  4 nothing,
   *  5 nothing,
   *  6 coughing_2,
   *  7 nothing,
   *  8 nothing,
   *  9 hurtingSick?,
   *  10 hurtingFall?,
   *  11 nothing,
   *  12 choking
   *
   * @param {number} ped
   * @param {number} painId
   * @param {number} p2
   * @param {boolean} p3
   * @param {boolean} isNetwork
   * @return {void}
   */
global.PlayPain = function (ped, painId, p2, p3, isNetwork) {
  return Citizen.invokeNative('0xbc9ae166038a5cec', ped, painId, _fv(p2), p3, isNetwork);
};

/**
   * PLAY_PED_AMBIENT_SPEECH_NATIVE
   * struct ScriptedSpeechParams
   * {
   *   const char* speechName;
   *   const char* voiceName;
   *   alignas(8) int variation;
   *   alignas(8) Hash speechParamHash;
   *   alignas(8) Ped listenerPed;
   *   alignas(8) BOOL syncOverNetwork;
   *   alignas(8) int v7;
   *   alignas(8) int v8;
   * };
   * 
   * static_assert(sizeof(ScriptedSpeechParams) == 0x40, "incorrect ScriptedSpeechParams size");
   * 
   * 
   * Example:
   * 
   * ScriptedSpeechParams params{"RE_PH_RHD_V3_AGGRO", "0405_U_M_M_RhdSheriff_01", 1, joaat("SPEECH_PARAMS_BEAT_SHOUTED_CLEAR"), 0, true, 1, 1};
   * PLAY_PED_AMBIENT_SPEECH_NATIVE(PLAYER_PED_ID(), (Any*)&params);
   * 
   * Old name: _PLAY_AMBIENT_SPEECH1
   * https://github.com/femga/rdr3_discoveries/tree/master/audio/audio_banks
   *
   * @param {number} speaker
   * @param {DataView} params
   * @return {boolean}
   */
global.PlayPedAmbientSpeechNative = function (speaker, params) {
  return Citizen.invokeNative('0x8e04fedd28d42462', speaker, params, _r);
};

/**
   * PLAY_SOUND
   *
   * @param {string | number} audioName
   * @param {string | number} audioRef
   * @param {boolean} p2
   * @param {any} p3
   * @param {boolean} p4
   * @param {any} p5
   * @return {void}
   */
global.PlaySound = function (audioName, audioRef, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x7ff4944cc209192d', _ts(audioName), _ts(audioRef), p2, p3, p4, p5);
};

/**
   * PLAY_SOUND_FROM_ENTITY
   *
   * @param {string | number} audioName
   * @param {number} entity
   * @param {string | number} audioRef
   * @param {boolean} isNetwork
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.PlaySoundFromEntity = function (audioName, entity, audioRef, isNetwork, p4, p5) {
  return Citizen.invokeNative('0x6fb1da3ca9da7d90', _ts(audioName), entity, _ts(audioRef), isNetwork, p4, p5);
};

/**
   * PLAY_SOUND_FRONTEND
   * https://github.com/femga/rdr3_discoveries/tree/master/audio/frontend_soundsets
   *
   * @param {string | number} audioName
   * @param {string | number} audioRef
   * @param {boolean} p2
   * @param {any} p3
   * @return {void}
   */
global.PlaySoundFrontend = function (audioName, audioRef, p2, p3) {
  return Citizen.invokeNative('0x67c540aa08e4a6f5', _ts(audioName), _ts(audioRef), p2, p3);
};

/**
   * PLAY_STREAM_FROM_PED
   *
   * @param {number} ped
   * @param {number} streamId
   * @return {void}
   */
global.PlayStreamFromPed = function (ped, streamId) {
  return Citizen.invokeNative('0x89049dd63c08b5d1', ped, streamId);
};

/**
   * PLAY_STREAM_FROM_POSITION
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} streamId
   * @return {void}
   */
global.PlayStreamFromPosition = function (x, y, z, streamId) {
  return Citizen.invokeNative('0x21442f412e8de56b', _fv(x), _fv(y), _fv(z), streamId);
};

/**
   * PLAY_STREAM_FRONTEND
   *
   * @param {number} streamId
   * @return {void}
   */
global.PlayStreamFrontend = function (streamId) {
  return Citizen.invokeNative('0x58fce43488f9f5f4', streamId);
};

/**
   * PRELOAD_SCRIPT_CONVERSATION
   *
   * @param {string | number} convoRoot
   * @param {boolean} p1
   * @param {boolean} p2
   * @param {boolean} clone
   * @return {void}
   */
global.PreloadScriptConversation = function (convoRoot, p1, p2, clone) {
  return Citizen.invokeNative('0x3b3cad6166916d87', _ts(convoRoot), p1, p2, clone);
};

/**
   * PREPARE_MUSIC_EVENT
   *
   * @param {string | number} eventName
   * @return {boolean}
   */
global.PrepareMusicEvent = function (eventName) {
  return Citizen.invokeNative('0x1e5185b72ef5158a', _ts(eventName), _r);
};

/**
   * PREPARE_SOUND
   * soundId maybe be incorrect name for param p2, in the decompiles is always -2
   *
   * @param {string | number} soundName
   * @param {string | number} soundsetName
   * @param {number} soundId
   * @return {boolean}
   */
global.PrepareSound = function (soundName, soundsetName, soundId) {
  return Citizen.invokeNative('0xe368e8422c860ba7', _ts(soundName), _ts(soundsetName), soundId, _r);
};

/**
   * PREPARE_SOUNDSET
   * https://github.com/femga/rdr3_discoveries/tree/master/audio/soundsets
   *
   * @param {string | number} soundsetName
   * @param {boolean} p1
   * @return {boolean}
   */
global.PrepareSoundset = function (soundsetName, p1) {
  return Citizen.invokeNative('0xd9130842d7226045', _ts(soundsetName), p1, _r);
};

/**
   * PREPARE_SOUND_WITH_ENTITY
   *
   * @param {string | number} soundName
   * @param {number} entity
   * @param {string | number} soundsetName
   * @param {number} soundId
   * @return {boolean}
   */
global.PrepareSoundWithEntity = function (soundName, entity, soundsetName, soundId) {
  return Citizen.invokeNative('0x4ad019591e94c064', _ts(soundName), entity, _ts(soundsetName), soundId, _r);
};

/**
   * REGISTER_SCRIPT_WITH_AUDIO
   * nullsub, doesn't do anything
   *
   * @param {boolean} p0
   * @return {void}
   */
global.RegisterScriptWithAudio = function (p0) {
  return Citizen.invokeNative('0xc6ed9d5092438d91', p0);
};

/**
   * RELEASE_NAMED_SCRIPT_AUDIO_BANK
   *
   * @param {string | number} audioBank
   * @return {void}
   */
global.ReleaseNamedScriptAudioBank = function (audioBank) {
  return Citizen.invokeNative('0x77ed170667f50170', _ts(audioBank));
};

/**
   * RELEASE_SCRIPT_AUDIO_BANK
   *
  
   * @return {void}
   */
global.ReleaseScriptAudioBank = function () {
  return Citizen.invokeNative('0x7a2d8ad0a9eb9c3f');
};

/**
   * RELEASE_SOUND_ID
   *
   * @param {number} soundId
   * @return {void}
   */
global.ReleaseSoundId = function (soundId) {
  return Citizen.invokeNative('0x353fc880830b88fa', soundId);
};

/**
   * REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP
   *
   * @param {number} entity
   * @param {number} p1
   * @return {void}
   */
global.RemoveEntityFromAudioMixGroup = function (entity, p1) {
  return Citizen.invokeNative('0x18eb48cfc41f2ea0', entity, _fv(p1));
};

/**
   * REMOVE_PORTAL_SETTINGS_OVERRIDE
   *
   * @param {string | number} p0
   * @return {void}
   */
global.RemovePortalSettingsOverride = function (p0) {
  return Citizen.invokeNative('0xb4bbfd9cd8b3922b', _ts(p0));
};

/**
   * REQUEST_SCRIPT_AUDIO_BANK
   *
   * @param {string | number} audioBank
   * @return {boolean}
   */
global.RequestScriptAudioBank = function (audioBank) {
  return Citizen.invokeNative('0x2f844a8b08d76685', _ts(audioBank), _r);
};

/**
   * RESTART_SCRIPTED_CONVERSATION
   *
   * @param {string | number} p0
   * @return {void}
   */
global.RestartScriptedConversation = function (p0) {
  return Citizen.invokeNative('0x9aeb285d1818c9ac', _ts(p0));
};

/**
   * SET_AMBIENT_VOICE_NAME
   *
   * @param {number} ped
   * @param {string | number} name
   * @return {void}
   */
global.SetAmbientVoiceName = function (ped, name) {
  return Citizen.invokeNative('0x6c8065a3b780185b', ped, _ts(name));
};

/**
   * SET_AMBIENT_ZONE_LIST_STATE
   *
   * @param {string | number} ambientZone
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {void}
   */
global.SetAmbientZoneListState = function (ambientZone, p1, p2) {
  return Citizen.invokeNative('0x9748fa4de50cce3e', _ts(ambientZone), p1, p2);
};

/**
   * SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT
   *
   * @param {string | number} ambientZone
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {void}
   */
global.SetAmbientZoneListStatePersistent = function (ambientZone, p1, p2) {
  return Citizen.invokeNative('0xf3638dae8c4045e1', _ts(ambientZone), p1, p2);
};

/**
   * SET_AMBIENT_ZONE_STATE
   *
   * @param {string | number} zoneName
   * @param {boolean} isEnabled
   * @param {boolean} p2
   * @return {void}
   */
global.SetAmbientZoneState = function (zoneName, isEnabled, p2) {
  return Citizen.invokeNative('0xbda07e5950085e46', _ts(zoneName), isEnabled, p2);
};

/**
   * SET_AMBIENT_ZONE_STATE_PERSISTENT
   *
   * @param {string | number} ambientZone
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {void}
   */
global.SetAmbientZoneStatePersistent = function (ambientZone, p1, p2) {
  return Citizen.invokeNative('0x1d6650420cec9d3b', _ts(ambientZone), p1, p2);
};

/**
   * SET_ANIMAL_MOOD
   * Not implemented.
   *
   * @param {number} animal
   * @param {number} mood
   * @return {void}
   */
global.SetAnimalMood = function (animal, mood) {
  return Citizen.invokeNative('0xcc97b29285b1dc3b', animal, mood);
};

/**
   * SET_AUDIO_FLAG
   * https://github.com/femga/rdr3_discoveries/tree/master/audio/audio_flags
   *
   * @param {string | number} flagName
   * @param {boolean} toggle
   * @return {void}
   */
global.SetAudioFlag = function (flagName, toggle) {
  return Citizen.invokeNative('0xb9efd5c25018725a', _ts(flagName), toggle);
};

/**
   * SET_AUDIO_ONLINE_TRANSITION_STAGE
   *
   * @param {string | number} p0
   * @return {void}
   */
global.SetAudioOnlineTransitionStage = function (p0) {
  return Citizen.invokeNative('0x9b1fc259187c97c0', _ts(p0));
};

/**
   * SET_AUDIO_SCENE_VARIABLE
   *
   * @param {string | number} scene
   * @param {string | number} variable
   * @param {number} value
   * @return {void}
   */
global.SetAudioSceneVariable = function (scene, variable, value) {
  return Citizen.invokeNative('0xef21a9ef089a2668', _ts(scene), _ts(variable), _fv(value));
};

/**
   * SET_AUDIO_VEHICLE_PRIORITY
   *
   * @param {number} vehicle
   * @param {any} p1
   * @return {void}
   */
global.SetAudioVehiclePriority = function (vehicle, p1) {
  return Citizen.invokeNative('0xe5564483e407f914', vehicle, p1);
};

/**
   * SET_GPS_ACTIVE
   * nullsub, doesn't do anything
   *
   * @param {boolean} active
   * @return {void}
   */
global.SetGpsActive = function (active) {
  return Citizen.invokeNative('0x3bd3f52ba9b1e4e8', active);
};

/**
   * SET_HORN_ENABLED
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetHornEnabled = function (vehicle, toggle) {
  return Citizen.invokeNative('0x76d683c108594d0e', vehicle, toggle);
};

/**
   * SET_IS_SCRIPTED_SPEECH_DISABLED
   *
   * @param {number} ped
   * @param {boolean} disabled
   * @return {any}
   */
global.SetIsScriptedSpeechDisabled = function (ped, disabled) {
  return Citizen.invokeNative('0xb2de3aebe31150e2', ped, disabled, _r);
};

/**
   * SET_PED_INTERIOR_WALLA_DENSITY
   *
   * @param {number} p0
   * @param {number} p1
   * @return {void}
   */
global.SetPedInteriorWallaDensity = function (p0, p1) {
  return Citizen.invokeNative('0x8bf907833be275de', _fv(p0), _fv(p1));
};

/**
   * SET_PED_IS_DRUNK
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedIsDrunk = function (ped, toggle) {
  return Citizen.invokeNative('0x95d2d383d5396b8a', ped, toggle);
};

/**
   * SET_PED_WALLA_DENSITY
   * https://en.m.wikipedia.org/wiki/Walla
   *
   * @param {number} p0
   * @param {number} p1
   * @return {void}
   */
global.SetPedWallaDensity = function (p0, p1) {
  return Citizen.invokeNative('0x149aee66f0cb3a99', _fv(p0), _fv(p1));
};

/**
   * SET_PORTAL_SETTINGS_OVERRIDE
   *
   * @param {string | number} p0
   * @param {string | number} p1
   * @return {void}
   */
global.SetPortalSettingsOverride = function (p0, p1) {
  return Citizen.invokeNative('0x044dbad7a7fa2be5', _ts(p0), _ts(p1));
};

/**
   * SET_STATIC_EMITTER_ENABLED
   *
   * @param {string | number} emitterName
   * @param {boolean} toggle
   * @return {void}
   */
global.SetStaticEmitterEnabled = function (emitterName, toggle) {
  return Citizen.invokeNative('0x399d2d3b33f1b8eb', _ts(emitterName), toggle);
};

/**
   * SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE
   *
   * @param {string | number} p0
   * @return {void}
   */
global.SkipToNextScriptedConversationLine = function (p0) {
  return Citizen.invokeNative('0x9663fe6b7a61eb00', _ts(p0));
};

/**
   * START_AUDIO_SCENE
   *
   * @param {string | number} scene
   * @return {boolean}
   */
global.StartAudioScene = function (scene) {
  return Citizen.invokeNative('0x013a80fc08f6e4f2', _ts(scene), _r);
};

/**
   * START_PRELOADED_CONVERSATION
   *
   * @param {string | number} convoRoot
   * @return {void}
   */
global.StartPreloadedConversation = function (convoRoot) {
  return Citizen.invokeNative('0x23641afe870af385', _ts(convoRoot));
};

/**
   * START_SCRIPT_CONVERSATION
   *
   * @param {string | number} convoRoot
   * @param {boolean} p1
   * @param {boolean} p2
   * @param {boolean} clone
   * @return {void}
   */
global.StartScriptConversation = function (convoRoot, p1, p2, clone) {
  return Citizen.invokeNative('0x6b17c62c9635d2dc', _ts(convoRoot), p1, p2, clone);
};

/**
   * STOP_AUDIO_SCENE
   *
   * @param {string | number} scene
   * @return {void}
   */
global.StopAudioScene = function (scene) {
  return Citizen.invokeNative('0xdfe8422b3b94e688', _ts(scene));
};

/**
   * STOP_AUDIO_SCENES
   *
  
   * @return {void}
   */
global.StopAudioScenes = function () {
  return Citizen.invokeNative('0xbac7fc81a75ec1a1');
};

/**
   * STOP_CURRENT_PLAYING_AMBIENT_SPEECH
   *
   * @param {number} ped
   * @param {any} p1
   * @return {void}
   */
global.StopCurrentPlayingAmbientSpeech = function (ped, p1) {
  return Citizen.invokeNative('0xb8bec0ca6f0edb0f', ped, p1);
};

/**
   * STOP_CURRENT_PLAYING_SPEECH
   *
   * @param {number} ped
   * @param {any} p1
   * @return {void}
   */
global.StopCurrentPlayingSpeech = function (ped, p1) {
  return Citizen.invokeNative('0x79d2f0e66f81d90d', ped, p1);
};

/**
   * STOP_PED_SPEAKING
   *
   * @param {number} ped
   * @param {boolean} shaking
   * @return {void}
   */
global.StopPedSpeaking = function (ped, shaking) {
  return Citizen.invokeNative('0x9d64d7405520e3d3', ped, shaking);
};

/**
   * STOP_SCRIPTED_CONVERSATION
   *
   * @param {string | number} p0
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {number}
   */
global.StopScriptedConversation = function (p0, p1, p2) {
  return Citizen.invokeNative('0xd79deefb53455eba', _ts(p0), p1, p2, _r, _ri);
};

/**
   * STOP_STREAM
   *
   * @param {number} streamId
   * @return {void}
   */
global.StopStream = function (streamId) {
  return Citizen.invokeNative('0xa4718a1419d18151', streamId);
};

/**
   * TRIGGER_MUSIC_EVENT
   * https://github.com/femga/rdr3_discoveries/blob/master/audio/music_events/music_events.lua
   *
   * @param {string | number} eventName
   * @return {boolean}
   */
global.TriggerMusicEvent = function (eventName) {
  return Citizen.invokeNative('0x706d57b0f50da710', _ts(eventName), _r);
};

/**
   * UNREGISTER_SCRIPT_WITH_AUDIO
   * nullsub, doesn't do anything
   *
  
   * @return {void}
   */
global.UnregisterScriptWithAudio = function () {
  return Citizen.invokeNative('0xa8638be228d4751a');
};

/**
   * USE_FOOTSTEP_SCRIPT_SWEETENERS
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {number} hash
   * @return {void}
   */
global.UseFootstepScriptSweeteners = function (ped, p1, hash) {
  return Citizen.invokeNative('0xbf4dc1784be94dfa', ped, p1, _ch(hash));
};

/**
   * _0x017492B2201E3428
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x017492B2201E3428 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x017492b2201e3428', p0, p1, p2, p3);
};

/**
   * _0x018ABE833CA64D2A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x018ABE833CA64D2A = function (p0, p1) {
  return Citizen.invokeNative('0x018abe833ca64d2a', p0, p1);
};

/**
   * _0x06C5DF5EE444BC6B
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0x06C5DF5EE444BC6B = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x06c5df5ee444bc6b', p0, p1, p2, p3, p4);
};

/**
   * _0x078F77FD1A43EAB3
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x078F77FD1A43EAB3 = function (p0, p1) {
  return Citizen.invokeNative('0x078f77fd1a43eab3', p0, p1);
};

/**
   * _0x0CB3D1919E8D7CBA
   *
   * @param {string | number} convoRoot
   * @return {boolean}
   */
global.N_0x0CB3D1919E8D7CBA = function (convoRoot) {
  return Citizen.invokeNative('0x0cb3d1919e8d7cba', _ts(convoRoot), _r);
};

/**
   * _0x0D7FD6A55FD63AEF
   * speechEventType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/naSpeechEventType 
   * p1 is possibly naSpeechAudibility, naSpeechType, or naSpeechEventTypeRequestPriority
   * SKIP_* - START_*
   *
   * @param {number} speechEventType
   * @param {number} p1
   * @param {boolean} p2
   * @return {void}
   */
global.N_0x0D7FD6A55FD63AEF = function (speechEventType, p1, p2) {
  return Citizen.invokeNative('0x0d7fd6a55fd63aef', speechEventType, p1, p2);
};

/**
   * _0x0FAF7171BF613B80
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x0FAF7171BF613B80 = function (p0) {
  return Citizen.invokeNative('0x0faf7171bf613b80', p0);
};

/**
   * _0x131EC9247E7A2903
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x131EC9247E7A2903 = function (p0) {
  return Citizen.invokeNative('0x131ec9247e7a2903', p0, _r);
};

/**
   * _0x138ADB94F8B90616
   *
  
   * @return {void}
   */
global.N_0x138ADB94F8B90616 = function () {
  return Citizen.invokeNative('0x138adb94f8b90616');
};

/**
   * _0x139A4B9DF2D26CBF
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x139A4B9DF2D26CBF = function (p0, p1) {
  return Citizen.invokeNative('0x139a4b9df2d26cbf', p0, p1);
};

/**
   * _0x152ED1B56E8F1F50
   *
   * @param {string | number} p0
   * @param {number} currentScriptedConvoLine
   * @return {number}
   */
global.N_0x152ED1B56E8F1F50 = function (p0, currentScriptedConvoLine) {
  return Citizen.invokeNative('0x152ed1b56e8f1f50', _ts(p0), currentScriptedConvoLine, _r, _ri);
};

/**
   * _0x1E6F9A9FE1A99F36
   *
   * @param {string | number} audSpeechEvent
   * @return {void}
   */
global.N_0x1E6F9A9FE1A99F36 = function (audSpeechEvent) {
  return Citizen.invokeNative('0x1e6f9a9fe1a99f36', _ts(audSpeechEvent));
};

/**
   * _0x254B0241E964B450
   *
   * @param {string | number} p0
   * @param {number} currentScriptedConvoLine
   * @return {number}
   */
global.N_0x254B0241E964B450 = function (p0, currentScriptedConvoLine) {
  return Citizen.invokeNative('0x254b0241e964b450', _ts(p0), currentScriptedConvoLine, _r, _ri);
};

/**
   * _0x259ACC5B52A2B2D9
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x259ACC5B52A2B2D9 = function (p0, p1) {
  return Citizen.invokeNative('0x259acc5b52a2b2d9', p0, p1);
};

/**
   * _0x2651DDC0EA269073
   *
   * @param {number} ropeId
   * @param {number} p1
   * @return {void}
   */
global.N_0x2651DDC0EA269073 = function (ropeId, p1) {
  return Citizen.invokeNative('0x2651ddc0ea269073', ropeId, _fv(p1));
};

/**
   * _0x295859EB18F48D82
   *
   * @param {string | number} p0
   * @return {number}
   */
global.N_0x295859EB18F48D82 = function (p0) {
  return Citizen.invokeNative('0x295859eb18f48d82', _ts(p0), _r, _ri);
};

/**
   * _0x2B101AD9F651243A
   *
  
   * @return {any}
   */
global.N_0x2B101AD9F651243A = function () {
  return Citizen.invokeNative('0x2b101ad9f651243a', _r);
};

/**
   * _0x2B9C37C01BF25EDB
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x2B9C37C01BF25EDB = function (p0) {
  return Citizen.invokeNative('0x2b9c37c01bf25edb', p0, _r);
};

/**
   * _0x2FFF4A78384AFFDF
   *
   * @param {number} entity
   * @return {any}
   */
global.N_0x2FFF4A78384AFFDF = function (entity) {
  return Citizen.invokeNative('0x2fff4a78384affdf', entity, _r);
};

/**
   * _0x341CDD17EFC2472E
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x341CDD17EFC2472E = function (p0, p1) {
  return Citizen.invokeNative('0x341cdd17efc2472e', p0, p1);
};

/**
   * _0x35B8C070E0C16E2F
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x35B8C070E0C16E2F = function (p0, p1) {
  return Citizen.invokeNative('0x35b8c070e0c16e2f', p0, p1);
};

/**
   * _0x380A2E353AD30917
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x380A2E353AD30917 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x380a2e353ad30917', p0, p1, p2);
};

/**
   * _0x3A00D87B20A2A5E4
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x3A00D87B20A2A5E4 = function (p0, p1) {
  return Citizen.invokeNative('0x3a00d87b20a2a5e4', p0, p1);
};

/**
   * _0x3A3BE6B920525237
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x3A3BE6B920525237 = function (p0, p1) {
  return Citizen.invokeNative('0x3a3be6b920525237', p0, p1);
};

/**
   * _0x3D0BBCCF401B5FDB
   *
  
   * @return {void}
   */
global.N_0x3D0BBCCF401B5FDB = function () {
  return Citizen.invokeNative('0x3d0bbccf401b5fdb');
};

/**
   * _0x3E93DDDCBB6111E4
   *
   * @param {string | number} p0
   * @param {number} p1
   * @return {void}
   */
global.N_0x3E93DDDCBB6111E4 = function (p0, p1) {
  return Citizen.invokeNative('0x3e93dddcbb6111e4', _ts(p0), _fv(p1));
};

/**
   * _0x3E98AC9D8C56C62C
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x3E98AC9D8C56C62C = function (p0) {
  return Citizen.invokeNative('0x3e98ac9d8c56c62c', p0);
};

/**
   * _0x40CA665AB9D8D505
   *
   * @param {string | number} convoRoot
   * @param {number} singleLineIndex
   * @return {void}
   */
global.N_0x40CA665AB9D8D505 = function (convoRoot, singleLineIndex) {
  return Citizen.invokeNative('0x40ca665ab9d8d505', _ts(convoRoot), singleLineIndex);
};

/**
   * _0x43037ABFE214A851
   *
  
   * @return {void}
   */
global.N_0x43037ABFE214A851 = function () {
  return Citizen.invokeNative('0x43037abfe214a851');
};

/**
   * _0x448F2647DD6F2E27
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0x448F2647DD6F2E27 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x448f2647dd6f2e27', p0, p1, p2, p3, p4);
};

/**
   * _0x44A5EEF54F62E823
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x44A5EEF54F62E823 = function (p0) {
  return Citizen.invokeNative('0x44a5eef54f62e823', p0, _r);
};

/**
   * _0x4A98E228A936DBCC
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x4A98E228A936DBCC = function (p0) {
  return Citizen.invokeNative('0x4a98e228a936dbcc', p0, _r);
};

/**
   * _0x4BE3EC91C01F0FE8
   *
  
   * @return {void}
   */
global.N_0x4BE3EC91C01F0FE8 = function () {
  return Citizen.invokeNative('0x4be3ec91c01f0fe8');
};

/**
   * _0x569ABC36E28DDEAA
   *
  
   * @return {void}
   */
global.N_0x569ABC36E28DDEAA = function () {
  return Citizen.invokeNative('0x569abc36e28ddeaa');
};

/**
   * _0x580D71DFE0088E34
   * _IS_SOUND_RUNNING(?)
   *
   * @param {string | number} audioName
   * @param {string | number} audioRef
   * @return {boolean}
   */
global.N_0x580D71DFE0088E34 = function (audioName, audioRef) {
  return Citizen.invokeNative('0x580d71dfe0088e34', _ts(audioName), _ts(audioRef), _r);
};

/**
   * _0x5A13586A9447931F
   *
   * @param {boolean} p0
   * @return {boolean}
   */
global.N_0x5A13586A9447931F = function (p0) {
  return Citizen.invokeNative('0x5a13586a9447931f', p0, _r);
};

/**
   * _0x5AE0CB5F35F034FD
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.N_0x5AE0CB5F35F034FD = function (p0, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0x5ae0cb5f35f034fd', p0, p1, p2, p3, p4, p5, p6, p7);
};

/**
   * _0x5BC885EBD75FAA7D
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x5BC885EBD75FAA7D = function (p0, p1) {
  return Citizen.invokeNative('0x5bc885ebd75faa7d', p0, p1);
};

/**
   * _0x5E3CCF03995388B5
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x5E3CCF03995388B5 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x5e3ccf03995388b5', p0, p1, p2, p3);
};

/**
   * _0x62377977E4F08668
   *
   * @param {number} entity
   * @return {number}
   */
global.N_0x62377977E4F08668 = function (entity) {
  return Citizen.invokeNative('0x62377977e4f08668', entity, _r, _ri);
};

/**
   * _0x64B956F4E761DF5C
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x64B956F4E761DF5C = function (p0) {
  return Citizen.invokeNative('0x64b956f4e761df5c', p0);
};

/**
   * _0x660A8F876DF1D4F8
   * speechEventType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/naSpeechEventType 
   * SKIP_* - START_*
   *
   * @param {number} speechEventType
   * @return {void}
   */
global.N_0x660A8F876DF1D4F8 = function (speechEventType) {
  return Citizen.invokeNative('0x660a8f876df1d4f8', speechEventType);
};

/**
   * _0x6652B0C8F3D414D0
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x6652B0C8F3D414D0 = function (p0) {
  return Citizen.invokeNative('0x6652b0c8f3d414d0', p0);
};

/**
   * _0x6AB944DF68B512D3
   * _STOP_AUDIO_*
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x6AB944DF68B512D3 = function (p0) {
  return Citizen.invokeNative('0x6ab944df68b512d3', p0);
};

/**
   * _0x6B7A88A61B41E589
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x6B7A88A61B41E589 = function (p0) {
  return Citizen.invokeNative('0x6b7a88a61b41e589', p0);
};

/**
   * _GET_LAST_PLAYED_SPEECH_FOR_PED
   * Gets the hash for the last played speech line.
   *
   * @param {number} ped
   * @return {number}
   */
global.GetLastPlayedSpeechForPed = function (ped) {
  return Citizen.invokeNative('0x6bffb7c276866996', ped, _r, _ri);
};

/**
   * _0x6DA15746D5CC1A92
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.N_0x6DA15746D5CC1A92 = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x6da15746d5cc1a92', p0, p1, p2, p3, p4, p5);
};

/**
   * _0x72E4D1C4639BC465
   *
   * @param {number} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x72E4D1C4639BC465 = function (p0, p1) {
  return Citizen.invokeNative('0x72e4d1c4639bc465', p0, p1, _r);
};

/**
   * _0x7455CD705F7E933E
   * _AUDIO_IS_* - _AUDIO_TRIGGER*
   *
  
   * @return {void}
   */
global.N_0x7455CD705F7E933E = function () {
  return Citizen.invokeNative('0x7455cd705f7e933e');
};

/**
   * _0x7678FE0455ED1145
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0x7678FE0455ED1145 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x7678fe0455ed1145', p0, p1, p2, _r);
};

/**
   * _0x79F9C57B8D0DFE90
   * Only used in R* SP Script cv_mus_shared
   *
   * @param {string | number} convoRoot
   * @param {number} animScene
   * @return {boolean}
   */
global.N_0x79F9C57B8D0DFE90 = function (convoRoot, animScene) {
  return Citizen.invokeNative('0x79f9c57b8d0dfe90', _ts(convoRoot), animScene, _r);
};

/**
   * _0x7E176C676F8652A9
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x7E176C676F8652A9 = function (p0) {
  return Citizen.invokeNative('0x7e176c676f8652a9', p0);
};

/**
   * _0x821C32C728B24477
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x821C32C728B24477 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x821c32c728b24477', p0, p1, p2);
};

/**
   * _0x839C9F124BE74D94
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0x839C9F124BE74D94 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x839c9f124be74d94', p0, p1, p2, p3, p4);
};

/**
   * _0x847748AE5D7B1071
   *
   * @param {boolean} p0
   * @return {boolean}
   */
global.N_0x847748AE5D7B1071 = function (p0) {
  return Citizen.invokeNative('0x847748ae5d7b1071', p0, _r);
};

/**
   * _0x864A842B86993851
   * Not implemented.
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x864A842B86993851 = function (ped) {
  return Citizen.invokeNative('0x864a842b86993851', ped);
};

/**
   * _0x886657C5B3D8EDE3
   *
   * @param {number} entity
   * @return {any}
   */
global.N_0x886657C5B3D8EDE3 = function (entity) {
  return Citizen.invokeNative('0x886657c5b3d8ede3', entity, _r);
};

/**
   * _0x8D29FDF565DED9AE
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x8D29FDF565DED9AE = function (p0, p1, p2) {
  return Citizen.invokeNative('0x8d29fdf565ded9ae', p0, p1, p2);
};

/**
   * _0x8E901B65206C2D3E
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x8E901B65206C2D3E = function (ped) {
  return Citizen.invokeNative('0x8e901b65206c2d3e', ped);
};

/**
   * _0x935DBD96D4A3DA1F
   *
   * @param {string | number} p0
   * @param {number} currentScriptedConvoLine
   * @return {number}
   */
global.N_0x935DBD96D4A3DA1F = function (p0, currentScriptedConvoLine) {
  return Citizen.invokeNative('0x935dbd96d4a3da1f', _ts(p0), currentScriptedConvoLine, _r, _ri);
};

/**
   * _0x9D6DEC9791A4E501
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {any}
   */
global.N_0x9D6DEC9791A4E501 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x9d6dec9791a4e501', p0, p1, p2, p3, _r);
};

/**
   * _0x9EB779765E68C52E
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x9EB779765E68C52E = function (p0, p1) {
  return Citizen.invokeNative('0x9eb779765e68c52e', p0, p1);
};

/**
   * _0xA2323A2EAE32A290
   *
   * @param {number} listeningToPed
   * @param {number} ped
   * @param {string | number} listenerName
   * @return {void}
   */
global.N_0xA2323A2EAE32A290 = function (listeningToPed, ped, listenerName) {
  return Citizen.invokeNative('0xa2323a2eae32a290', listeningToPed, ped, _ts(listenerName));
};

/**
   * _0xA2B851605748AD0E
   *
  
   * @return {void}
   */
global.N_0xA2B851605748AD0E = function () {
  return Citizen.invokeNative('0xa2b851605748ad0e');
};

/**
   * _0xA6847BBA4FCDD13F
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xA6847BBA4FCDD13F = function (p0, p1) {
  return Citizen.invokeNative('0xa6847bba4fcdd13f', p0, p1);
};

/**
   * _0xA6A3A3F96B8B030E
   *
  
   * @return {any}
   */
global.N_0xA6A3A3F96B8B030E = function () {
  return Citizen.invokeNative('0xa6a3a3f96b8b030e', _r);
};

/**
   * _0xABDB4863D3D72021
   *
   * @param {number} entity
   * @param {any} p1
   * @param {any} p2
   * @param {number} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0xABDB4863D3D72021 = function (entity, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xabdb4863d3d72021', entity, p1, p2, _fv(p3), p4);
};

/**
   * _0xB18FEC133C7C6C69
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xB18FEC133C7C6C69 = function (p0) {
  return Citizen.invokeNative('0xb18fec133c7c6c69', p0, _r);
};

/**
   * _0xB93A769B8B726950
   * Used in Script Function NET_CAMP_CLIENT_UPDATE_PED_ROLE_STATE_SHOP: hash exists! Playing hash
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0xB93A769B8B726950 = function (ped, p1) {
  return Citizen.invokeNative('0xb93a769b8b726950', ped, _ch(p1));
};

/**
   * _0xBC07CA8FD710E7FD
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xBC07CA8FD710E7FD = function (p0, p1) {
  return Citizen.invokeNative('0xbc07ca8fd710e7fd', p0, p1);
};

/**
   * _0xBE28DB99556FF8D9
   * Checks for MOONSHINE_BAND
   *
   * @param {number} entity
   * @return {number}
   */
global.N_0xBE28DB99556FF8D9 = function (entity) {
  return Citizen.invokeNative('0xbe28db99556ff8d9', entity, _r, _ri);
};

/**
   * _0xC369E2234E34A0CA
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xC369E2234E34A0CA = function (p0, p1) {
  return Citizen.invokeNative('0xc369e2234e34a0ca', p0, p1, _r);
};

/**
   * _0xC4CFCE4C656EF480
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0xC4CFCE4C656EF480 = function (ped) {
  return Citizen.invokeNative('0xc4cfce4c656ef480', ped);
};

/**
   * _0xC68C02DE259C927C
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xC68C02DE259C927C = function (p0) {
  return Citizen.invokeNative('0xc68c02de259c927c', p0, _r);
};

/**
   * _0xC886CD666ADD42E1
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xC886CD666ADD42E1 = function (p0, p1) {
  return Citizen.invokeNative('0xc886cd666add42e1', p0, p1);
};

/**
   * _0xCBF2BEBB468A34F3
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xCBF2BEBB468A34F3 = function (p0) {
  return Citizen.invokeNative('0xcbf2bebb468a34f3', p0);
};

/**
   * _0xCFAD2C8CD1054523
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0xCFAD2C8CD1054523 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xcfad2c8cd1054523', p0, p1, p2, p3);
};

/**
   * _0xD05A460328560477
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xD05A460328560477 = function (p0) {
  return Citizen.invokeNative('0xd05a460328560477', p0, _r);
};

/**
   * _0xD0730C1FA40348D9
   * _IS_SCRIPTED_CONVERSATION_*
   *
   * @param {string | number} convoRoot
   * @return {boolean}
   */
global.N_0xD0730C1FA40348D9 = function (convoRoot) {
  return Citizen.invokeNative('0xd0730c1fa40348d9', _ts(convoRoot), _r);
};

/**
   * _0xD47D47EFBF103FB8
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xD47D47EFBF103FB8 = function (p0, p1) {
  return Citizen.invokeNative('0xd47d47efbf103fb8', p0, p1);
};

/**
   * _0xD733528B6C35647A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xD733528B6C35647A = function (p0, p1) {
  return Citizen.invokeNative('0xd733528b6c35647a', p0, p1);
};

/**
   * _0xDAD6CD07CAA4F382
   *
  
   * @return {void}
   */
global.N_0xDAD6CD07CAA4F382 = function () {
  return Citizen.invokeNative('0xdad6cd07caa4f382');
};

/**
   * _0xDC2F83A0612CA34D
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xDC2F83A0612CA34D = function (p0) {
  return Citizen.invokeNative('0xdc2f83a0612ca34d', p0, _r);
};

/**
   * _0xDC93F0948F2C28F4
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xDC93F0948F2C28F4 = function (p0) {
  return Citizen.invokeNative('0xdc93f0948f2c28f4', p0);
};

/**
   * _0xDF947FE0D551684E
   *
   * @param {number} ped
   * @param {string | number} p1
   * @return {boolean}
   */
global.N_0xDF947FE0D551684E = function (ped, p1) {
  return Citizen.invokeNative('0xdf947fe0d551684e', ped, _ts(p1), _r);
};

/**
   * _0xE600F61F54A444A6
   *
  
   * @return {any}
   */
global.N_0xE600F61F54A444A6 = function () {
  return Citizen.invokeNative('0xe600f61f54a444a6', _r);
};

/**
   * _0xE7E6CB8B713ED190
   *
  
   * @return {void}
   */
global.N_0xE7E6CB8B713ED190 = function () {
  return Citizen.invokeNative('0xe7e6cb8b713ed190');
};

/**
   * _0xE891504B2F0E2DBA
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xE891504B2F0E2DBA = function (p0, p1) {
  return Citizen.invokeNative('0xe891504b2f0e2dba', p0, p1);
};

/**
   * _0xE9694B2D6CB87B06
   *
   * @param {number} entity
   * @param {any} p1
   * @return {void}
   */
global.N_0xE9694B2D6CB87B06 = function (entity, p1) {
  return Citizen.invokeNative('0xe9694b2d6cb87b06', entity, p1);
};

/**
   * _0xEA546C31FD45F8CD
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xEA546C31FD45F8CD = function (p0) {
  return Citizen.invokeNative('0xea546c31fd45f8cd', p0);
};

/**
   * _0xEB4D592620B8C209
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xEB4D592620B8C209 = function (p0) {
  return Citizen.invokeNative('0xeb4d592620b8c209', p0);
};

/**
   * _0xF092B6030D6FD49C
   * Name: ROPE_SETTINGS_DEFAULT
   *
   * @param {number} ropeId
   * @param {string | number} name
   * @return {void}
   */
global.N_0xF092B6030D6FD49C = function (ropeId, name) {
  return Citizen.invokeNative('0xf092b6030d6fd49c', ropeId, _ts(name));
};

/**
   * _0xF0EE69F500952FA5
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xF0EE69F500952FA5 = function (p0) {
  return Citizen.invokeNative('0xf0ee69f500952fa5', p0, _r);
};

/**
   * _0xF232C2C546AC16D0
   *
   * @param {string | number} p0
   * @return {void}
   */
global.N_0xF232C2C546AC16D0 = function (p0) {
  return Citizen.invokeNative('0xf232c2c546ac16d0', _ts(p0));
};

/**
   * _0xF336E9F989B3518F
   *
   * @param {string | number} p0
   * @return {number}
   */
global.N_0xF336E9F989B3518F = function (p0) {
  return Citizen.invokeNative('0xf336e9f989b3518f', _ts(p0), _r, _ri);
};

/**
   * _0xF64034D533CE8AAC
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xF64034D533CE8AAC = function (p0, p1, p2) {
  return Citizen.invokeNative('0xf64034d533ce8aac', p0, p1, p2);
};

/**
   * _0xFCDEC42B1C78B7F8
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xFCDEC42B1C78B7F8 = function (p0, p1) {
  return Citizen.invokeNative('0xfcdec42b1c78b7f8', p0, p1);
};

/**
   * _0xFD461D0ABA5559B1
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xFD461D0ABA5559B1 = function (p0, p1) {
  return Citizen.invokeNative('0xfd461d0aba5559b1', p0, p1);
};

/**
   * _0xFE5C6177064BD390
   *
   * @param {boolean} p0
   * @return {boolean}
   */
global.N_0xFE5C6177064BD390 = function (p0) {
  return Citizen.invokeNative('0xfe5c6177064bd390', p0, _r);
};

/**
   * _0xFFE9C53DEEA3DB0B
   *
   * @param {any} p0
   * @param {any} p1
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {boolean} isSrlLoaded
   * @param {any} p6
   * @return {any}
   */
global.N_0xFFE9C53DEEA3DB0B = function (p0, p1, x, y, z, isSrlLoaded, p6) {
  return Citizen.invokeNative('0xffe9c53deea3db0b', p0, p1, _fv(x), _fv(y), _fv(z), isSrlLoaded, p6, _r);
};

/**
   * _BLOCK_SPEECH_CONTEXT
   *
   * @param {string | number} context
   * @param {boolean} block
   * @return {void}
   */
global.BlockSpeechContext = function (context, block) {
  return Citizen.invokeNative('0x6378a235374b852f', _ts(context), block);
};

/**
   * _CLEAR_CONVERSATION_HISTORY_FOR_SCRIPTED_CONVERSATION
   *
   * @param {string | number} convoRoot
   * @return {void}
   */
global.ClearConversationHistoryForScriptedConversation = function (convoRoot) {
  return Citizen.invokeNative('0xef51242e35242b47', _ts(convoRoot));
};

/**
   * _GET_ENTITY_AUDIO_MIX_GROUP
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityAudioMixGroup = function (entity) {
  return Citizen.invokeNative('0x8b25a18e390f75bf', entity, _r, _ri);
};

/**
   * _GET_LOADED_STREAM_ID_FROM_CREATION
   * Creates stream and returns streamId handle to be used with PLAY_STREAM_* natives
   * https://github.com/femga/rdr3_discoveries/tree/master/audio/create_stream
   *
   * @param {string | number} streamName
   * @param {string | number} soundSet
   * @return {number}
   */
global.GetLoadedStreamIdFromCreation = function (streamName, soundSet) {
  return Citizen.invokeNative('0x0556c784fa056628', _ts(streamName), _ts(soundSet), _r, _ri);
};

/**
   * _GET_PED_SONG_INDEX_HOST
   *
   * @param {number} ped
   * @return {any}
   */
global.GetPedSongIndexHost = function (ped) {
  return Citizen.invokeNative('0x2dbbf0c5e19383ee', ped, _r);
};

/**
   * _HAS_SOUND_AUDIO_NAME_FINISHED
   *
   * @param {string | number} audioName
   * @param {string | number} soundsetName
   * @return {boolean}
   */
global.HasSoundAudioNameFinished = function (audioName, soundsetName) {
  return Citizen.invokeNative('0x714a0ea7de1167be', _ts(audioName), _ts(soundsetName), _r);
};

/**
   * _HAS_SOUND_ID_FINISHED
   *
   * @param {number} soundId
   * @return {boolean}
   */
global.HasSoundIdFinished = function (soundId) {
  return Citizen.invokeNative('0x84848e1c0fc67dbb', soundId, _r);
};

/**
   * _IS_ANY_CONVERSATION_PLAYING
   *
   * @param {boolean} p0
   * @return {boolean}
   */
global.IsAnyConversationPlaying = function (p0) {
  return Citizen.invokeNative('0xa2cac9def0195e6f', p0, _r);
};

/**
   * _IS_PED_IN_ANY_CONVERSATION
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {boolean}
   */
global.IsPedInAnyConversation = function (ped, p1) {
  return Citizen.invokeNative('0x54b187f111d9c6f8', ped, p1, _r);
};

/**
   * _IS_SCRIPTED_AUDIO_CUSTOM
   * item: FUSE, value returned from 0x2E1CDC1FF3B8473E
   * soundSet: HUD_SHOP_SOUNDSET, COMPANIONS_ROBBERIES_SOUNDSET
   *
   * @param {number} item
   * @param {number} soundSet
   * @return {boolean}
   */
global.IsScriptedAudioCustom = function (item, soundSet) {
  return Citizen.invokeNative('0x6df942c4179be5ab', _ch(item), _ch(soundSet), _r);
};

/**
   * _IS_SCRIPTED_CONVERSATION_CREATED
   *
   * @param {string | number} convoRoot
   * @return {boolean}
   */
global.IsScriptedConversationCreated = function (convoRoot) {
  return Citizen.invokeNative('0xd89504d9d7d5057d', _ts(convoRoot), _r);
};

/**
   * _IS_SCRIPTED_CONVERSION_ONGOING
   *
   * @param {string | number} p0
   * @return {boolean}
   */
global.IsScriptedConversionOngoing = function (p0) {
  return Citizen.invokeNative('0xf01c570e0a0a1e67', _ts(p0), _r);
};

/**
   * _PLAY_ANIMAL_VOCALIZATION_PHEROMONE_VIAL_RESPONSE
   *
   * @param {number} ped
   * @param {number} p1
   * @param {boolean} p2
   * @return {void}
   */
global.PlayAnimalVocalizationPheromoneVialResponse = function (ped, p1, p2) {
  return Citizen.invokeNative('0x0e53530d9b2db01d', ped, _ch(p1), p2);
};

/**
   * _PLAY_SOUND_FROM_ENTITY_WITH_SET
   * Params: p5 seems to be always 0
   *
   * @param {number} soundId
   * @param {string | number} soundName
   * @param {number} entity
   * @param {string | number} soundsetName
   * @param {boolean} p4
   * @param {any} p5
   * @return {void}
   */
global.PlaySoundFromEntityWithSet = function (soundId, soundName, entity, soundsetName, p4, p5) {
  return Citizen.invokeNative('0xf1c5310feaa36b48', soundId, _ts(soundName), entity, _ts(soundsetName), p4, p5);
};

/**
   * _PLAY_SOUND_FROM_ITEM
   * item: value returned from 0x2E1CDC1FF3B8473E
   * soundSet: HUD_SHOP_SOUNDSET, COMPANIONS_ROBBERIES_SOUNDSET
   *
   * @param {number} item
   * @param {number} soundSet
   * @param {any} p2
   * @return {void}
   */
global.PlaySoundFromItem = function (item, soundSet, p2) {
  return Citizen.invokeNative('0xe8eaff7b41edd291', _ch(item), _ch(soundSet), p2);
};

/**
   * PLAY_SOUND_FROM_COORD
   * Old name: _PLAY_SOUND_FROM_POSITION
   *
   * @param {string | number} soundName
   * @param {number} positionX
   * @param {number} positionY
   * @param {number} positionZ
   * @param {string | number} setName
   * @param {boolean} bOverNetwork
   * @param {number} nNetworkRange
   * @param {boolean} isExteriorLoc
   * @param {number} p8
   * @return {void}
   */
global.PlaySoundFromCoord = function (soundName, positionX, positionY, positionZ, setName, bOverNetwork, nNetworkRange, isExteriorLoc, p8) {
  return Citizen.invokeNative('0xcce219c922737bfa', _ts(soundName), _fv(positionX), _fv(positionY), _fv(positionZ), _ts(setName), bOverNetwork, nNetworkRange, isExteriorLoc, p8);
};

/**
   * _PLAY_SOUND_FROM_POSITION_WITH_ID
   * Starts Audio Loop
   * _PLAY_SOUND_FROM_ENTITY* - _PLAY_SOUND_FRONTEND*
   *
   * @param {number} soundId
   * @param {string | number} soundName
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {string | number} soundsetName
   * @param {boolean} p6
   * @param {number} p7
   * @param {boolean} p8
   * @return {void}
   */
global.PlaySoundFromPositionWithId = function (soundId, soundName, x, y, z, soundsetName, p6, p7, p8) {
  return Citizen.invokeNative('0xdcf5ba95bbf0faba', soundId, _ts(soundName), _fv(x), _fv(y), _fv(z), _ts(soundsetName), p6, p7, p8);
};

/**
   * _PLAY_SOUND_FRONTEND_WITH_SOUND_ID
   *
   * @param {number} soundId
   * @param {string | number} name
   * @param {string | number} soundSet
   * @param {boolean} p3
   * @return {void}
   */
global.PlaySoundFrontendWithSoundId = function (soundId, name, soundSet, p3) {
  return Citizen.invokeNative('0xce5d0ffe83939af1', soundId, _ts(name), _ts(soundSet), p3);
};

/**
   * _RELEASE_SHARD_SOUNDS
   *
   * @param {string | number} soundName
   * @param {string | number} soundsetName
   * @return {void}
   */
global.ReleaseShardSounds = function (soundName, soundsetName) {
  return Citizen.invokeNative('0x9d746964e0cf2c5f', _ts(soundName), _ts(soundsetName));
};

/**
   * _RELEASE_SOUNDSET
   *
   * @param {string | number} soundsetName
   * @return {void}
   */
global.ReleaseSoundset = function (soundsetName) {
  return Citizen.invokeNative('0x531a78d6bf27014b', _ts(soundsetName));
};

/**
   * _SET_AMBIENT_ZONE_POSITION
   *
   * @param {string | number} ambientZone
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} heading
   * @return {void}
   */
global.SetAmbientZonePosition = function (ambientZone, x, y, z, heading) {
  return Citizen.invokeNative('0x3743ce6948194349', _ts(ambientZone), _fv(x), _fv(y), _fv(z), _fv(heading));
};

/**
   * _SET_AUDIO_SCENESET
   *
   * @param {string | number} audioName
   * @param {string | number} sceneset
   * @return {boolean}
   */
global.SetAudioSceneset = function (audioName, sceneset) {
  return Citizen.invokeNative('0xac84686c06184b0d', _ts(audioName), _ts(sceneset), _r);
};

/**
   * _SET_SOUND_RELATIONSHIP_ON_PED
   * p1: Entity.Relationship
   * p2: Player, Enemy, Teammate, Neutral
   *
   * @param {number} ped
   * @param {string | number} p1
   * @param {string | number} p2
   * @return {void}
   */
global.SetSoundRelationshipOnPed = function (ped, p1, p2) {
  return Citizen.invokeNative('0x2e31aca7477cf00f', ped, _ts(p1), _ts(p2));
};

/**
   * SET_VARIABLE_ON_SOUND
   * Old Name: _SET_VARIABLE_ON_SOUND_WITH_ID
   *
   * @param {number} soundId
   * @param {string | number} variableName
   * @param {number} variableValue
   * @return {void}
   */
global.SetVariableOnSound = function (soundId, variableName, variableValue) {
  return Citizen.invokeNative('0x503703ec1781b7d6', soundId, _ts(variableName), _fv(variableValue));
};

/**
   * _SET_VARIABLE_ON_SOUND_WITH_NAME
   *
   * @param {string | number} variableName
   * @param {number} variableValue
   * @param {string | number} audioName
   * @param {string | number} audioRef
   * @return {void}
   */
global.SetVariableOnSoundWithName = function (variableName, variableValue, audioName, audioRef) {
  return Citizen.invokeNative('0x9821b68cd3e05f2b', _ts(variableName), _fv(variableValue), _ts(audioName), _ts(audioRef));
};

/**
   * _SET_VOFX_PED_VOICE
   * Hashes: VOFX_PLAYER_MALE01, VOFX_PLAYER_MALE02, VOFX_PLAYER_MALE03, VOFX_PLAYER_FEMALE01, VOFX_PLAYER_FEMALE02, VOFX_PLAYER_FEMALE03
   *
   * @param {number} ped
   * @param {number} voice
   * @return {void}
   */
global.SetVofxPedVoice = function (ped, voice) {
  return Citizen.invokeNative('0x2703efb583f0949a', ped, _ch(voice));
};

/**
   * _SET_WHISTLE_CONFIG_FOR_PED
   * whistleConfig: Ped.WhistlePitch (0.0 - 1.0), Ped.WhistleClarity (0.0 - 1.0), Ped.WhistleShape (0.0 - 10.0)
   *
   * @param {number} ped
   * @param {string | number} whistleConfig
   * @param {number} value
   * @return {void}
   */
global.SetWhistleConfigForPed = function (ped, whistleConfig, value) {
  return Citizen.invokeNative('0x9963681a8bc69bf3', ped, _ts(whistleConfig), _fv(value));
};

/**
   * _START_AUDIO_SCENESET
   *
   * @param {string | number} audioName
   * @param {string | number} sceneset
   * @return {boolean}
   */
global.StartAudioSceneset = function (audioName, sceneset) {
  return Citizen.invokeNative('0x6339c1ea3979b5f7', _ts(audioName), _ts(sceneset), _r);
};

/**
   * _STOP_ALL_SCRIPTED_AUDIO_SOUNDS
   *
  
   * @return {void}
   */
global.StopAllScriptedAudioSounds = function () {
  return Citizen.invokeNative('0x2e399eafbeea74d5');
};

/**
   * _STOP_ALL_SCRIPTED_CONVERSIONS
   *
   * @param {boolean} p0
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {void}
   */
global.StopAllScriptedConversions = function (p0, p1, p2) {
  return Citizen.invokeNative('0x36559148b78853b3', p0, p1, p2);
};

/**
   * _STOP_AUDIO_SCENESET
   *
   * @param {string | number} sceneset
   * @return {void}
   */
global.StopAudioSceneset = function (sceneset) {
  return Citizen.invokeNative('0x9428447ded71fc7e', _ts(sceneset));
};

/**
   * STOP_SOUND
   * Old Name: _STOP_SOUND_WITH_ID
   *
   * @param {number} soundId
   * @return {void}
   */
global.StopSound = function (soundId) {
  return Citizen.invokeNative('0x3210bcb36af7621b', soundId);
};

/**
   * _STOP_SOUND_WITH_NAME
   *
   * @param {string | number} audioName
   * @param {string | number} audioRef
   * @return {void}
   */
global.StopSoundWithName = function (audioName, audioRef) {
  return Citizen.invokeNative('0x0f2a2175734926d8', _ts(audioName), _ts(audioRef));
};

/**
   * _TRIGGER_MUSIC_EVENT_WITH_HASH
   *
   * @param {number} eventName
   * @return {any}
   */
global.TriggerMusicEventWithHash = function (eventName) {
  return Citizen.invokeNative('0x05d6195fb4d428f4', _ch(eventName), _r);
};

/**
   * _UNLOAD_SPEECH_CONTEXT
   * _UNLOAD_[A-C]* - USE_*
   *
   * @param {string | number} speechContext
   * @return {void}
   */
global.UnloadSpeechContext = function (speechContext) {
  return Citizen.invokeNative('0x87e6302fc61208cc', _ts(speechContext));
};

/**
   * UPDATE_SOUND_COORD
   * Only used in R* SP Scripts
   * Old Name: _UPDATE_SOUND_POSITION
   *
   * @param {number} soundId
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.UpdateSoundCoord = function (soundId, x, y, z) {
  return Citizen.invokeNative('0x0286617c8fc50a53', soundId, _fv(x), _fv(y), _fv(z));
};

/**
   * BOUNTY_GET_BOUNTY_ON_PLAYER
   *
   * @param {DataView} gamerHandle
   * @param {DataView} bountyData
   * @return {boolean}
   */
global.BountyGetBountyOnPlayer = function (gamerHandle, bountyData) {
  return Citizen.invokeNative('0x4ef23e04a0c8ff51', gamerHandle, bountyData, _r);
};

/**
   * BOUNTY_GET_COOLDOWN_COLLECTION
   *
   * @param {DataView} p0
   * @return {boolean}
   */
global.BountyGetCooldownCollection = function (p0) {
  return Citizen.invokeNative('0x8faf4d262faba99c', p0, _r);
};

/**
   * BOUNTY_GET_LEGENDARY_TARGET
   *
   * @param {any} p0
   * @param {DataView} p1
   * @return {boolean}
   */
global.BountyGetLegendaryTarget = function (p0, p1) {
  return Citizen.invokeNative('0x85e4d7b225a30ed1', p0, p1, _r);
};

/**
   * BOUNTY_GET_WANTED_POSTER_SLOT
   *
   * @param {number} p0
   * @param {number} p1
   * @param {DataView} p2
   * @return {boolean}
   */
global.BountyGetWantedPosterSlot = function (p0, p1, p2) {
  return Citizen.invokeNative('0xb395a44a0c7ca615', _ch(p0), _ch(p1), p2, _r);
};

/**
   * BOUNTY_REQUEST_BEGIN_LEGENDARY_MISSION
   *
   * @param {DataView} outRpcGuid
   * @param {number} p1
   * @param {number} p2
   * @return {boolean}
   */
global.BountyRequestBeginLegendaryMission = function (outRpcGuid, p1, p2) {
  return Citizen.invokeNative('0xfc81d7c7a151cfaa', outRpcGuid, p1, p2, _r);
};

/**
   * BOUNTY_REQUEST_BEGIN_LEGENDARY_MISSION_FOR_POSSE
   *
   * @param {DataView} outRpcGuid
   * @param {number} p1
   * @param {number} p2
   * @return {boolean}
   */
global.BountyRequestBeginLegendaryMissionForPosse = function (outRpcGuid, p1, p2) {
  return Citizen.invokeNative('0x48e4e23f1739e197', outRpcGuid, p1, p2, _r);
};

/**
   * _0x27D3A0E1FE090A43
   * _BOUNTY_IS_* or _BOUNTY_REQUEST_*
   *
   * @param {DataView} p0
   * @return {boolean}
   */
global.N_0x27D3A0E1FE090A43 = function (p0) {
  return Citizen.invokeNative('0x27d3a0e1fe090a43', p0, _r);
};

/**
   * _0x81847C2134039BDC
   *
   * @param {DataView} p0
   * @return {boolean}
   */
global.N_0x81847C2134039BDC = function (p0) {
  return Citizen.invokeNative('0x81847c2134039bdc', p0, _r);
};

/**
   * _0x86EC5F83867C4B70
   * _BOUNTY_C* or _BOUNTY_GET_*
   *
   * @param {DataView} p0
   * @return {boolean}
   */
global.N_0x86EC5F83867C4B70 = function (p0) {
  return Citizen.invokeNative('0x86ec5f83867c4b70', p0, _r);
};

/**
   * _0xD6A67E2FF373D0E3
   * _BOUNTY_GET_*
   *
   * @param {number} p0
   * @return {number}
   */
global.N_0xD6A67E2FF373D0E3 = function (p0) {
  return Citizen.invokeNative('0xd6a67e2ff373d0e3', p0, _r, _ri);
};

/**
   * _0xF8BCC5ECA33AC9C1
   * _BOUNTY_GET_*
   *
  
   * @return {number}
   */
global.N_0xF8BCC5ECA33AC9C1 = function () {
  return Citizen.invokeNative('0xf8bcc5eca33ac9c1', _r, _ri);
};

/**
   * _BOUNTY_CANCEL_LEGENDARY_MISSION
   *
  
   * @return {void}
   */
global.BountyCancelLegendaryMission = function () {
  return Citizen.invokeNative('0x2ba1bcc99826cda2');
};

/**
   * _BOUNTY_CANCEL_WANTED_POSTER
   *
  
   * @return {void}
   */
global.BountyCancelWantedPoster = function () {
  return Citizen.invokeNative('0x6a9df0fcd0c87ff9');
};

/**
   * _BOUNTY_CLEAR_BEING_BOUNTY_HUNTER
   *
  
   * @return {void}
   */
global.BountyClearBeingBountyHunter = function () {
  return Citizen.invokeNative('0xa59d1997ecd99f0a');
};

/**
   * _BOUNTY_CLEAR_BEING_TARGET
   *
  
   * @return {void}
   */
global.BountyClearBeingTarget = function () {
  return Citizen.invokeNative('0x932db3c05a7465d1');
};

/**
   * _BOUNTY_IS_REQUEST_PENDING
   *
   * @param {DataView} rpcGuid
   * @return {boolean}
   */
global.BountyIsRequestPending = function (rpcGuid) {
  return Citizen.invokeNative('0x03b61cd51097de60', rpcGuid, _r);
};

/**
   * _BOUNTY_REQUEST_BECOME_TARGET_OF_CHARACTER_BOUNTY_HUNT
   *
   * @param {DataView} outRpcGuid
   * @return {boolean}
   */
global.BountyRequestBecomeTargetOfCharacterBountyHunt = function (outRpcGuid) {
  return Citizen.invokeNative('0xb096547d61868254', outRpcGuid, _r);
};

/**
   * _BOUNTY_REQUEST_BEGIN_WANTED_POSTER
   *
   * @param {DataView} outRpcGuid
   * @param {number} p1
   * @return {boolean}
   */
global.BountyRequestBeginWantedPoster = function (outRpcGuid, p1) {
  return Citizen.invokeNative('0xffa13742e43507e3', outRpcGuid, p1, _r);
};

/**
   * _BOUNTY_REQUEST_BRIBE_JAIL_GUARD
   *
   * @param {DataView} outRpcGuid
   * @param {number} p1
   * @return {boolean}
   */
global.BountyRequestBribeJailGuard = function (outRpcGuid, p1) {
  return Citizen.invokeNative('0x28717806d3bdd0d0', outRpcGuid, p1, _r);
};

/**
   * _BOUNTY_REQUEST_CLAIM_CHARACTER_BOUNTY
   *
   * @param {DataView} outRpcGuid
   * @param {number} p1
   * @param {DataView} p2
   * @return {boolean}
   */
global.BountyRequestClaimCharacterBounty = function (outRpcGuid, p1, p2) {
  return Citizen.invokeNative('0xa9c3b0f746375162', outRpcGuid, p1, p2, _r);
};

/**
   * _BOUNTY_REQUEST_COMPLETE_LEGENDARY_MISSION
   *
   * @param {DataView} outRpcGuid
   * @param {DataView} p1
   * @return {boolean}
   */
global.BountyRequestCompleteLegendaryMission = function (outRpcGuid, p1) {
  return Citizen.invokeNative('0xa7309ac0dcf6d950', outRpcGuid, p1, _r);
};

/**
   * _BOUNTY_REQUEST_COMPLETE_SPLIT_WANTED_POSTER
   *
   * @param {DataView} outRpcGuid
   * @param {DataView} p1
   * @return {boolean}
   */
global.BountyRequestCompleteSplitWantedPoster = function (outRpcGuid, p1) {
  return Citizen.invokeNative('0xfbd137bf0ec50fc9', outRpcGuid, p1, _r);
};

/**
   * _BOUNTY_REQUEST_COMPLETE_WANTED_POSTER
   *
   * @param {DataView} outRpcGuid
   * @param {DataView} p1
   * @return {boolean}
   */
global.BountyRequestCompleteWantedPoster = function (outRpcGuid, p1) {
  return Citizen.invokeNative('0x727ab6f008bb9f29', outRpcGuid, p1, _r);
};

/**
   * _BOUNTY_REQUEST_ESCAPED_CHARACTER_BOUNTY_HUNT
   *
   * @param {DataView} outRpcGuid
   * @return {boolean}
   */
global.BountyRequestEscapedCharacterBountyHunt = function (outRpcGuid) {
  return Citizen.invokeNative('0x12e981d53b07bf48', outRpcGuid, _r);
};

/**
   * _BOUNTY_REQUEST_PAY_OFF_BOUNTY
   *
   * @param {DataView} outRpcGuid
   * @return {boolean}
   */
global.BountyRequestPayOffBounty = function (outRpcGuid) {
  return Citizen.invokeNative('0x537ce992bd2d7bcb', outRpcGuid, _r);
};

/**
   * _BOUNTY_REQUEST_PAY_OFF_BOUNTY_EX
   *
   * @param {DataView} outRpcGuid
   * @param {number} p1
   * @param {number} costType
   * @return {boolean}
   */
global.BountyRequestPayOffBountyEx = function (outRpcGuid, p1, costType) {
  return Citizen.invokeNative('0x587bcec31d64f382', outRpcGuid, _ch(p1), _ch(costType), _r);
};

/**
   * _BOUNTY_REQUEST_POSSE_LEADER_CLAIM_CHARACTER_BOUNTY
   *
   * @param {DataView} outRpcGuid
   * @param {number} p1
   * @param {DataView} p2
   * @return {boolean}
   */
global.BountyRequestPosseLeaderClaimCharacterBounty = function (outRpcGuid, p1, p2) {
  return Citizen.invokeNative('0x5b53ca0e2ac3ff45', outRpcGuid, p1, p2, _r);
};

/**
   * _BOUNTY_REQUEST_POSSE_LEADER_ESCAPED_CHARACTER_BOUNTY_HUNT
   *
   * @param {DataView} outRpcGuid
   * @return {boolean}
   */
global.BountyRequestPosseLeaderEscapedCharacterBountyHunt = function (outRpcGuid) {
  return Citizen.invokeNative('0x2d874ba20e8e1f20', outRpcGuid, _r);
};

/**
   * _BOUNTY_REQUEST_POSSE_MEMBER_CLAIM_CHARACTER_BOUNTY_SHARE
   *
   * @param {DataView} outRpcGuid
   * @param {DataView} p1
   * @return {boolean}
   */
global.BountyRequestPosseMemberClaimCharacterBountyShare = function (outRpcGuid, p1) {
  return Citizen.invokeNative('0x22d3a61ce053270c', outRpcGuid, p1, _r);
};

/**
   * _BOUNTY_REQUEST_POSSE_MEMBER_ESCAPED_CHARACTER_BOUNTY_HUNT
   *
   * @param {DataView} outRpcGuid
   * @return {boolean}
   */
global.BountyRequestPosseMemberEscapedCharacterBountyHunt = function (outRpcGuid) {
  return Citizen.invokeNative('0x8521c2e235558278', outRpcGuid, _r);
};

/**
   * _BOUNTY_REQUEST_SELF_REPORT_CRIME
   * crimeType: see _REPORT_CRIME
   *
   * @param {DataView} outRpcGuid
   * @param {number} crimeType
   * @param {boolean} p2
   * @return {boolean}
   */
global.BountyRequestSelfReportCrime = function (outRpcGuid, crimeType, p2) {
  return Citizen.invokeNative('0x188b748861b5ba17', outRpcGuid, _ch(crimeType), p2, _r);
};

/**
   * _BOUNTY_REQUEST_SELF_REPORT_KILLED_BY_BOUNTY_HUNTER
   *
   * @param {DataView} outRpcGuid
   * @return {boolean}
   */
global.BountyRequestSelfReportKilledByBountyHunter = function (outRpcGuid) {
  return Citizen.invokeNative('0xb462d69d406a2602', outRpcGuid, _r);
};

/**
   * _BOUNTY_REQUEST_SERVED_FULL_JAIL_SENTENCE
   *
   * @param {DataView} outRpcGuid
   * @return {boolean}
   */
global.BountyRequestServedFullJailSentence = function (outRpcGuid) {
  return Citizen.invokeNative('0x3f73aed12a5ef0ff', outRpcGuid, _r);
};

/**
   * DISABLE_SCRIPT_BRAIN_SET
   *
   * @param {number} brainSet
   * @return {void}
   */
global.DisableScriptBrainSet = function (brainSet) {
  return Citizen.invokeNative('0x3f44ea613a5b2676', brainSet);
};

/**
   * ENABLE_SCRIPT_BRAIN_SET
   *
   * @param {number} brainSet
   * @return {void}
   */
global.EnableScriptBrainSet = function (brainSet) {
  return Citizen.invokeNative('0x1cf6e5c6750eadbd', brainSet);
};

/**
   * REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE
   * Called before starting a new thread_monitor script thread in startup_mp/startup_tlg
   * Alternative name _REGISTER_SCRIPT_BRAIN
   * 
   * Old name: _PREPARE_SCRIPT_BRAIN
   *
  
   * @return {void}
   */
global.ReactivateAllObjectBrainsThatAreWaitingTillOutOfRange = function () {
  return Citizen.invokeNative('0xa32b0b05eff75730');
};

/**
   * REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE
   *
   * @param {string | number} scriptName
   * @return {void}
   */
global.ReactivateNamedObjectBrainsWaitingTillOutOfRange = function (scriptName) {
  return Citizen.invokeNative('0x74c333e34df74e8a', _ts(scriptName));
};

/**
   * REGISTER_OBJECT_SCRIPT_BRAIN
   * Registers a script for any object with a specific model hash.
   *
   * @param {string | number} scriptName
   * @param {number} modelHash
   * @param {number} p2
   * @param {number} activationRange
   * @param {number} p4
   * @param {number} p5
   * @return {void}
   */
global.RegisterObjectScriptBrain = function (scriptName, modelHash, p2, activationRange, p4, p5) {
  return Citizen.invokeNative('0x16af9b4eeac3b305', _ts(scriptName), _ch(modelHash), p2, _fv(activationRange), p4, p5);
};

/**
   * _0x4AA5EA1EDFB25786
   * Called with flag 0 before 0xA6AC35DB4A7957A8 in net_entity_brain
   * _SET_SCRIPT_BRAIN*
   *
   * @param {number} flag
   * @return {void}
   */
global.N_0x4AA5EA1EDFB25786 = function (flag) {
  return Citizen.invokeNative('0x4aa5ea1edfb25786', flag);
};

/**
   * _0xA6AC35DB4A7957A8
   * Common flags: 250, 99999
   * _SET_SCRIPT_BRAIN*
   *
   * @param {number} flag
   * @return {void}
   */
global.N_0xA6AC35DB4A7957A8 = function (flag) {
  return Citizen.invokeNative('0xa6ac35db4a7957a8', flag);
};

/**
   * _GET_SCRIPT_BRAIN_ENTITY
   *
  
   * @return {number}
   */
global.GetScriptBrainEntity = function () {
  return Citizen.invokeNative('0x6818d1a194e29983', _r, _ri);
};

/**
   * _REMOVE_SCRIPT_BRAIN_ENTITY
   *
   * @param {number} entity
   * @return {void}
   */
global.RemoveScriptBrainEntity = function (entity) {
  return Citizen.invokeNative('0x38f1e09224eeca09', entity);
};

/**
   * _START_PRELOADED_SCRIPT_BRAIN
   * Returns threadId
   *
   * @param {number} entity
   * @param {string | number} scriptName
   * @param {number} scriptStackSize
   * @param {boolean} p3
   * @return {number}
   */
global.StartPreloadedScriptBrain = function (entity, scriptName, scriptStackSize, p3) {
  return Citizen.invokeNative('0x4e4507cc5e4db869', entity, _ts(scriptName), scriptStackSize, p3, _r, _ri);
};

/**
   * _START_SCRIPT_BRAIN
   * Returns threadId
   *
   * @param {number} entity
   * @param {string | number} scriptName
   * @param {number} p2
   * @param {DataView} p3
   * @param {number} p4
   * @param {boolean} p5
   * @return {number}
   */
global.StartScriptBrain = function (entity, scriptName, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x6f62fae266dcfc81', entity, _ts(scriptName), p2, p3, p4, p5, _r, _ri);
};

/**
   * CEIL
   * Rounds a float value up to the next whole number
   *
   * @param {number} value
   * @return {number}
   */
global.Ceil = function (value) {
  return Citizen.invokeNative('0x11e019c8f43acc8a', _fv(value), _r, _ri);
};

/**
   * COS
   *
   * @param {number} value
   * @return {number}
   */
global.Cos = function (value) {
  return Citizen.invokeNative('0xd0ffb162f40a139c', _fv(value), _r, _rf);
};

/**
   * FLOOR
   * Rounds a float value down to the next whole number
   *
   * @param {number} value
   * @return {number}
   */
global.Floor = function (value) {
  return Citizen.invokeNative('0xf34ee736cf047844', _fv(value), _r, _ri);
};

/**
   * LOG10
   * Old name: _LOG10
   *
   * @param {number} value
   * @return {number}
   */
global.Log10 = function (value) {
  return Citizen.invokeNative('0xe816e655de37fe20', _fv(value), _r, _rf);
};

/**
   * POW
   *
   * @param {number} base
   * @param {number} exponent
   * @return {number}
   */
global.Pow = function (base, exponent) {
  return Citizen.invokeNative('0xe3621cc40f31fe2e', _fv(base), _fv(exponent), _r, _rf);
};

/**
   * ROUND
   *
   * @param {number} value
   * @return {number}
   */
global.Round = function (value) {
  return Citizen.invokeNative('0xf2db717a73826179', _fv(value), _r, _ri);
};

/**
   * SETTIMERA
   *
   * @param {number} value
   * @return {void}
   */
global.Settimera = function (value) {
  return Citizen.invokeNative('0xc1b1e9a034a63a62', value);
};

/**
   * SETTIMERB
   *
   * @param {number} value
   * @return {void}
   */
global.Settimerb = function (value) {
  return Citizen.invokeNative('0x5ae11bc36633de4e', value);
};

/**
   * SET_THIS_THREAD_PRIORITY
   * THREAD_PRIO_HIGHEST = 0
   * THREAD_PRIO_NORMAL = 1
   * THREAD_PRIO_LOWEST = 2
   * THREAD_PRIO_MANUAL_UPDATE = 100
   *
   * @param {number} priority
   * @return {void}
   */
global.SetThisThreadPriority = function (priority) {
  return Citizen.invokeNative('0x42b65deef2edf2a1', priority);
};

/**
   * SHIFT_LEFT
   *
   * @param {number} value
   * @param {number} bitShift
   * @return {number}
   */
global.ShiftLeft = function (value, bitShift) {
  return Citizen.invokeNative('0xedd95a39e5544de8', value, bitShift, _r, _ri);
};

/**
   * SHIFT_RIGHT
   *
   * @param {number} value
   * @param {number} bitShift
   * @return {number}
   */
global.ShiftRight = function (value, bitShift) {
  return Citizen.invokeNative('0x97ef1e5bce9dc075', value, bitShift, _r, _ri);
};

/**
   * SIN
   *
   * @param {number} value
   * @return {number}
   */
global.Sin = function (value) {
  return Citizen.invokeNative('0x0badbfa3b172435f', _fv(value), _r, _rf);
};

/**
   * SQRT
   *
   * @param {number} value
   * @return {number}
   */
global.Sqrt = function (value) {
  return Citizen.invokeNative('0x71d93b57d07f9804', _fv(value), _r, _rf);
};

/**
   * TIMERA
   * Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).
   *
  
   * @return {number}
   */
global.Timera = function () {
  return Citizen.invokeNative('0x83666f9fb8febd4b', _r, _ri);
};

/**
   * TIMERB
   *
  
   * @return {number}
   */
global.Timerb = function () {
  return Citizen.invokeNative('0xc9d9444186b5a374', _r, _ri);
};

/**
   * TIMESTEP
   * Gets the current frame time.
   *
  
   * @return {number}
   */
global.Timestep = function () {
  return Citizen.invokeNative('0x0000000050597ee2', _r, _rf);
};

/**
   * TO_FLOAT
   *
   * @param {number} value
   * @return {number}
   */
global.ToFloat = function (value) {
  return Citizen.invokeNative('0xbbda792448db5a89', value, _r, _rf);
};

/**
   * VDIST
   * Calculates distance between vectors.
   * The value returned will be in meters.
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @return {number}
   */
global.Vdist = function (x1, y1, z1, x2, y2, z2) {
  return Citizen.invokeNative('0x2a488c176d52cca5', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _rf);
};

/**
   * VDIST2
   * Calculates distance between vectors but does not perform Sqrt operations. (Its way faster)
   * The value returned will be in RAGE units.
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @return {number}
   */
global.Vdist2 = function (x1, y1, z1, x2, y2, z2) {
  return Citizen.invokeNative('0xb7a628320eff8e47', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _rf);
};

/**
   * VMAG
   * Calculates the magnitude of a vector.
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {number}
   */
global.Vmag = function (x, y, z) {
  return Citizen.invokeNative('0x652d2eeef1d3e62c', _fv(x), _fv(y), _fv(z), _r, _rf);
};

/**
   * VMAG2
   * Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {number}
   */
global.Vmag2 = function (x, y, z) {
  return Citizen.invokeNative('0xa8ceacb4f35ae058', _fv(x), _fv(y), _fv(z), _r, _rf);
};

/**
   * WAIT
   *
   * @param {number} ms
   * @return {void}
   */
global.Wait = function (ms) {
  return Citizen.invokeNative('0x4ede34fbadd967a6', ms);
};

/**
   * ADD_CAM_SPLINE_NODE
   * p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one
   * 
   * p8 big values ~100 will slow down the camera movement before reaching this node
   * 
   * p9 != 0 seems to override the rotation/pitch (bool?)
   *
   * @param {number} camera
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} xRot
   * @param {number} yRot
   * @param {number} zRot
   * @param {number} length
   * @param {number} p8
   * @param {number} p9
   * @return {void}
   */
global.AddCamSplineNode = function (camera, x, y, z, xRot, yRot, zRot, length, p8, p9) {
  return Citizen.invokeNative('0xf1f57f9d230f9cd1', camera, _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), length, p8, p9);
};

/**
   * ALLOW_MOTION_BLUR_DECAY
   *
   * @param {number} cam
   * @param {boolean} p1
   * @return {void}
   */
global.AllowMotionBlurDecay = function (cam, p1) {
  return Citizen.invokeNative('0x42ed56b02e05d109', cam, p1);
};

/**
   * ATTACH_CAM_TO_ENTITY
   * Last param determines if its relative to the Entity
   *
   * @param {number} cam
   * @param {number} entity
   * @param {number} xOffset
   * @param {number} yOffset
   * @param {number} zOffset
   * @param {boolean} isRelative
   * @return {void}
   */
global.AttachCamToEntity = function (cam, entity, xOffset, yOffset, zOffset, isRelative) {
  return Citizen.invokeNative('0xfdc0df7f6fb0a592', cam, entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), isRelative);
};

/**
   * ATTACH_CAM_TO_PED_BONE
   * boneIndex: https://github.com/femga/rdr3_discoveries/tree/master/boneNames
   *
   * @param {number} cam
   * @param {number} ped
   * @param {number} boneIndex
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {boolean} heading
   * @return {void}
   */
global.AttachCamToPedBone = function (cam, ped, boneIndex, x, y, z, heading) {
  return Citizen.invokeNative('0xdfc1e4a44c0324ca', cam, ped, boneIndex, _fv(x), _fv(y), _fv(z), heading);
};

/**
   * CINEMATIC_LOCATION_OVERRIDE_TARGET_ENTITY_THIS_UPDATE
   * Only used in R* Script fm_mission_controller
   *
   * @param {string | number} name
   * @param {number} entity
   * @return {void}
   */
global.CinematicLocationOverrideTargetEntityThisUpdate = function (name, entity) {
  return Citizen.invokeNative('0x0b0f914459731f60', _ts(name), entity);
};

/**
   * CINEMATIC_LOCATION_STOP_SCRIPTED_SHOT_EVENT
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.CinematicLocationStopScriptedShotEvent = function (p0, p1, p2) {
  return Citizen.invokeNative('0x6d4d25c2137ff511', p0, p1, p2);
};

/**
   * CINEMATIC_LOCATION_TRIGGER_SCRIPTED_SHOT_EVENT
   *
   * @param {string | number} dictionary
   * @param {string | number} shotName
   * @param {string | number} cameraName
   * @param {any} p3
   * @return {void}
   */
global.CinematicLocationTriggerScriptedShotEvent = function (dictionary, shotName, cameraName, p3) {
  return Citizen.invokeNative('0x02389579a53c3276', _ts(dictionary), _ts(shotName), _ts(cameraName), p3);
};

/**
   * CREATE_CAM
   *
   * @param {string | number} camName
   * @param {boolean} p1
   * @return {number}
   */
global.CreateCam = function (camName, p1) {
  return Citizen.invokeNative('0xe72cdba7f0a02dd6', _ts(camName), p1, _r, _ri);
};

/**
   * CREATE_CAMERA
   *
   * @param {number} camHash
   * @param {boolean} p1
   * @return {number}
   */
global.CreateCamera = function (camHash, p1) {
  return Citizen.invokeNative('0x57cdf879ea466c46', _ch(camHash), p1, _r, _ri);
};

/**
   * CREATE_CAMERA_WITH_PARAMS
   *
   * @param {number} camHash
   * @param {number} posX
   * @param {number} posY
   * @param {number} posZ
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} fov
   * @param {boolean} p8
   * @param {any} p9
   * @return {number}
   */
global.CreateCameraWithParams = function (camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9) {
  return Citizen.invokeNative('0x98b99b9f27e2d60b', _ch(camHash), _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(fov), p8, p9, _r, _ri);
};

/**
   * CREATE_CAM_WITH_PARAMS
   *
   * @param {string | number} camName
   * @param {number} posX
   * @param {number} posY
   * @param {number} posZ
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} fov
   * @param {boolean} p8
   * @param {number} p9
   * @return {number}
   */
global.CreateCamWithParams = function (camName, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9) {
  return Citizen.invokeNative('0x40c23491ce83708e', _ts(camName), _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(fov), p8, p9, _r, _ri);
};

/**
   * DESTROY_ALL_CAMS
   * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
   *
   * @param {boolean} p0
   * @return {void}
   */
global.DestroyAllCams = function (p0) {
  return Citizen.invokeNative('0x163600d6e136c9f8', p0);
};

/**
   * DESTROY_CAM
   * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
   *
   * @param {number} cam
   * @param {boolean} p1
   * @return {void}
   */
global.DestroyCam = function (cam, p1) {
  return Citizen.invokeNative('0x4e67e0b6d7fd5145', cam, p1);
};

/**
   * DETACH_CAM
   *
   * @param {number} cam
   * @return {void}
   */
global.DetachCam = function (cam) {
  return Citizen.invokeNative('0x05b41ddbeb559556', cam);
};

/**
   * DISABLE_CAM_COLLISION_FOR_OBJECT
   *
   * @param {number} entity
   * @return {void}
   */
global.DisableCamCollisionForObject = function (entity) {
  return Citizen.invokeNative('0x7e3f546acfe6c8d9', entity);
};

/**
   * DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE
   * Old name: _DISABLE_VEHICLE_FIRST_PERSON_CAM_THIS_FRAME
   *
  
   * @return {void}
   */
global.DisableCinematicBonnetCameraThisUpdate = function () {
  return Citizen.invokeNative('0xa5929c2e57ac90d1');
};

/**
   * DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE
   * nullsub, doesn't do anything
   *
  
   * @return {void}
   */
global.DisableFirstPersonFlashEffectThisUpdate = function () {
  return Citizen.invokeNative('0x77d65669a05d1a1a');
};

/**
   * DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE
   * Old name: _DISABLE_FIRST_PERSON_CAM_THIS_FRAME
   *
  
   * @return {void}
   */
global.DisableOnFootFirstPersonViewThisUpdate = function () {
  return Citizen.invokeNative('0x9c473089a934c930');
};

/**
   * DOES_CAM_EXIST
   * Returns whether or not the passed camera handle exists.
   *
   * @param {number} cam
   * @return {boolean}
   */
global.DoesCamExist = function (cam) {
  return Citizen.invokeNative('0x153ad457764fd704', cam, _r);
};

/**
   * DO_SCREEN_FADE_IN
   * Fades the screen in.
   * 
   * duration: The time the fade should take, in milliseconds.
   *
   * @param {number} duration
   * @return {void}
   */
global.DoScreenFadeIn = function (duration) {
  return Citizen.invokeNative('0x6a053cf596f67df7', duration);
};

/**
   * DO_SCREEN_FADE_OUT
   * Fades the screen out.
   * 
   * duration: The time the fade should take, in milliseconds.
   *
   * @param {number} duration
   * @return {void}
   */
global.DoScreenFadeOut = function (duration) {
  return Citizen.invokeNative('0x40c719a5e410b9e4', duration);
};

/**
   * FORCE_CINEMATIC_RENDERING_THIS_UPDATE
   *
   * @param {boolean} p0
   * @return {void}
   */
global.ForceCinematicRenderingThisUpdate = function (p0) {
  return Citizen.invokeNative('0x702b75dc9d3ede56', p0);
};

/**
   * GET_CAM_COORD
   *
   * @param {number} cam
   * @return {Vector3}
   */
global.GetCamCoord = function (cam) {
  return Citizen.invokeNative('0x6b12f11c2a9f0344', cam, _r, _rv);
};

/**
   * GET_CAM_FOV
   *
   * @param {number} cam
   * @return {number}
   */
global.GetCamFov = function (cam) {
  return Citizen.invokeNative('0x8101d32a0a6b0f60', cam, _r, _rf);
};

/**
   * GET_CAM_ROT
   * rotationOrder: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEulerRotationOrder
   *
   * @param {number} cam
   * @param {number} rotationOrder
   * @return {Vector3}
   */
global.GetCamRot = function (cam, rotationOrder) {
  return Citizen.invokeNative('0x9bf96b57254e7889', cam, rotationOrder, _r, _rv);
};

/**
   * GET_CAM_SPLINE_PHASE
   * Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.
   * 
   * (returns 1.0f when no nodes has been added, reached end of non existing spline)
   *
   * @param {number} cam
   * @return {number}
   */
global.GetCamSplinePhase = function (cam) {
  return Citizen.invokeNative('0x095edcd24d90033a', cam, _r, _rf);
};

/**
   * GET_FINAL_RENDERED_CAM_COORD
   *
  
   * @return {Vector3}
   */
global.GetFinalRenderedCamCoord = function () {
  return Citizen.invokeNative('0x5352e025ec2b416f', _r, _rv);
};

/**
   * GET_FINAL_RENDERED_CAM_FOV
   *
  
   * @return {number}
   */
global.GetFinalRenderedCamFov = function () {
  return Citizen.invokeNative('0x04af77971e508f6a', _r, _rf);
};

/**
   * GET_FINAL_RENDERED_CAM_ROT
   *
   * @param {number} rotationOrder
   * @return {Vector3}
   */
global.GetFinalRenderedCamRot = function (rotationOrder) {
  return Citizen.invokeNative('0x602685bd85dd26ca', rotationOrder, _r, _rv);
};

/**
   * GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR
   *
  
   * @return {number}
   */
global.GetFirstPersonAimCamZoomFactor = function () {
  return Citizen.invokeNative('0xb4132ca1b0ee1365', _r, _rf);
};

/**
   * GET_GAMEPLAY_CAM_COORD
   *
  
   * @return {Vector3}
   */
global.GetGameplayCamCoord = function () {
  return Citizen.invokeNative('0x595320200b98596e', _r, _rv);
};

/**
   * GET_GAMEPLAY_CAM_FOV
   *
  
   * @return {number}
   */
global.GetGameplayCamFov = function () {
  return Citizen.invokeNative('0xf6a96e5aceec6e50', _r, _rf);
};

/**
   * GET_GAMEPLAY_CAM_RELATIVE_HEADING
   *
  
   * @return {number}
   */
global.GetGameplayCamRelativeHeading = function () {
  return Citizen.invokeNative('0xc4abf536048998aa', _r, _rf);
};

/**
   * GET_GAMEPLAY_CAM_RELATIVE_PITCH
   *
  
   * @return {number}
   */
global.GetGameplayCamRelativePitch = function () {
  return Citizen.invokeNative('0x99aadebba803f827', _r, _rf);
};

/**
   * GET_GAMEPLAY_CAM_ROT
   *
   * @param {number} rotationOrder
   * @return {Vector3}
   */
global.GetGameplayCamRot = function (rotationOrder) {
  return Citizen.invokeNative('0x0252d2b5582957a6', rotationOrder, _r, _rv);
};

/**
   * GET_LETTER_BOX_RATIO
   * More info: see HAS_LETTER_BOX
   *
  
   * @return {number}
   */
global.GetLetterBoxRatio = function () {
  return Citizen.invokeNative('0xa2b1c7ef759a63ce', _r, _rf);
};

/**
   * GET_RENDERING_CAM
   *
  
   * @return {number}
   */
global.GetRenderingCam = function () {
  return Citizen.invokeNative('0x03a8931ecc8015d6', _r, _ri);
};

/**
   * HAS_LETTER_BOX
   * More info: https://en.wikipedia.org/wiki/Letterboxing_(filming)
   *
  
   * @return {boolean}
   */
global.HasLetterBox = function () {
  return Citizen.invokeNative('0x81dcfd13cf39920e', _r);
};

/**
   * INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE
   * Old name: _INVALIDATE_VEHICLE_IDLE_CAM
   *
  
   * @return {void}
   */
global.InvalidateCinematicVehicleIdleMode = function () {
  return Citizen.invokeNative('0x634f4a0562cf19b8');
};

/**
   * IS_AIM_CAM_ACTIVE
   *
  
   * @return {boolean}
   */
global.IsAimCamActive = function () {
  return Citizen.invokeNative('0x698f456fb909e077', _r);
};

/**
   * IS_CAM_ACTIVE
   * Returns whether or not the passed camera handle is active.
   *
   * @param {number} cam
   * @return {boolean}
   */
global.IsCamActive = function (cam) {
  return Citizen.invokeNative('0x63efcc7e1810b8e6', cam, _r);
};

/**
   * IS_CAM_INTERPOLATING
   *
   * @param {number} cam
   * @return {boolean}
   */
global.IsCamInterpolating = function (cam) {
  return Citizen.invokeNative('0x578f8f1caa17bd2b', cam, _r);
};

/**
   * IS_CAM_RENDERING
   *
   * @param {number} cam
   * @return {boolean}
   */
global.IsCamRendering = function (cam) {
  return Citizen.invokeNative('0x4415f8a6c536d39f', cam, _r);
};

/**
   * IS_CAM_SHAKING
   *
   * @param {number} cam
   * @return {boolean}
   */
global.IsCamShaking = function (cam) {
  return Citizen.invokeNative('0x2eeb402bd7320159', cam, _r);
};

/**
   * IS_CINEMATIC_CAM_RENDERING
   *
  
   * @return {boolean}
   */
global.IsCinematicCamRendering = function () {
  return Citizen.invokeNative('0xbf7c780731aadbf8', _r);
};

/**
   * IS_DEATH_FAIL_CAMERA_RUNNING
   *
  
   * @return {boolean}
   */
global.IsDeathFailCameraRunning = function () {
  return Citizen.invokeNative('0x139efb0a71dd9011', _r);
};

/**
   * IS_FIRST_PERSON_AIM_CAM_ACTIVE
   *
  
   * @return {boolean}
   */
global.IsFirstPersonAimCamActive = function () {
  return Citizen.invokeNative('0xf63134c54b6ec212', _r);
};

/**
   * IS_FIRST_PERSON_CAMERA_ACTIVE
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {boolean}
   */
global.IsFirstPersonCameraActive = function (p0, p1, p2) {
  return Citizen.invokeNative('0xa24c1d341c6e0d53', p0, p1, p2, _r);
};

/**
   * IS_FOLLOW_VEHICLE_CAM_ACTIVE
   *
  
   * @return {boolean}
   */
global.IsFollowVehicleCamActive = function () {
  return Citizen.invokeNative('0xa40c2f51fb589e9a', _r);
};

/**
   * IS_GAMEPLAY_CAM_LOOKING_BEHIND
   *
  
   * @return {boolean}
   */
global.IsGameplayCamLookingBehind = function () {
  return Citizen.invokeNative('0x8fe0d24ffd04d5a2', _r);
};

/**
   * IS_GAMEPLAY_CAM_RENDERING
   *
  
   * @return {boolean}
   */
global.IsGameplayCamRendering = function () {
  return Citizen.invokeNative('0x8660ea714834e412', _r);
};

/**
   * IS_GAMEPLAY_CAM_SHAKING
   *
  
   * @return {boolean}
   */
global.IsGameplayCamShaking = function () {
  return Citizen.invokeNative('0xea4c5f4aa0a4dbef', _r);
};

/**
   * IS_GAMEPLAY_HINT_ACTIVE
   *
  
   * @return {boolean}
   */
global.IsGameplayHintActive = function () {
  return Citizen.invokeNative('0x2e04ab5fee042d4a', _r);
};

/**
   * IS_INTERPOLATING_FROM_SCRIPT_CAMS
   *
  
   * @return {boolean}
   */
global.IsInterpolatingFromScriptCams = function () {
  return Citizen.invokeNative('0x251241caec707106', _r);
};

/**
   * IS_INTERPOLATING_TO_SCRIPT_CAMS
   *
  
   * @return {boolean}
   */
global.IsInterpolatingToScriptCams = function () {
  return Citizen.invokeNative('0x43ab9d5a7d415478', _r);
};

/**
   * IS_SCREEN_FADED_IN
   *
  
   * @return {boolean}
   */
global.IsScreenFadedIn = function () {
  return Citizen.invokeNative('0x37f9a426fbcf4af2', _r);
};

/**
   * IS_SCREEN_FADED_OUT
   *
  
   * @return {boolean}
   */
global.IsScreenFadedOut = function () {
  return Citizen.invokeNative('0xf5472c80df2ff847', _r);
};

/**
   * IS_SCREEN_FADING_IN
   *
  
   * @return {boolean}
   */
global.IsScreenFadingIn = function () {
  return Citizen.invokeNative('0x0ceccc63ffa2ef24', _r);
};

/**
   * IS_SCREEN_FADING_OUT
   *
  
   * @return {boolean}
   */
global.IsScreenFadingOut = function () {
  return Citizen.invokeNative('0x02f39befe7b88d00', _r);
};

/**
   * IS_SPHERE_VISIBLE
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @return {boolean}
   */
global.IsSphereVisible = function (x, y, z, radius) {
  return Citizen.invokeNative('0x2e941b5ffa2989c6', _fv(x), _fv(y), _fv(z), _fv(radius), _r);
};

/**
   * PLAY_CAM_ANIM
   *
   * @param {number} cam
   * @param {string | number} animName
   * @param {string | number} animDictionary
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} xRot
   * @param {number} yRot
   * @param {number} zRot
   * @param {number} animFlags
   * @param {number} rotOrder
   * @return {boolean}
   */
global.PlayCamAnim = function (cam, animName, animDictionary, x, y, z, xRot, yRot, zRot, animFlags, rotOrder) {
  return Citizen.invokeNative('0xa263ddf694d563f6', cam, _ts(animName), _ts(animDictionary), _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), animFlags, rotOrder, _r);
};

/**
   * POINT_CAM_AT_COORD
   *
   * @param {number} cam
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.PointCamAtCoord = function (cam, x, y, z) {
  return Citizen.invokeNative('0x948b39341c3a40c2', cam, _fv(x), _fv(y), _fv(z));
};

/**
   * POINT_CAM_AT_ENTITY
   *
   * @param {number} cam
   * @param {number} entity
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {boolean} p5
   * @return {void}
   */
global.PointCamAtEntity = function (cam, entity, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xfc2867e6074d3a61', cam, entity, _fv(p2), _fv(p3), _fv(p4), p5);
};

/**
   * RENDER_SCRIPT_CAMS
   * ease - smooth transition between the camera's positions
   * easeTime - Time in milliseconds for the transition to happen
   * 
   * If you have created a script (rendering) camera, and want to go back to the 
   * character (gameplay) camera, call this native with render set to FALSE.
   * Setting ease to TRUE will smooth the transition.
   *
   * @param {boolean} render
   * @param {boolean} ease
   * @param {number} easeTime
   * @param {boolean} p3
   * @param {boolean} p4
   * @param {number} p5
   * @return {void}
   */
global.RenderScriptCams = function (render, ease, easeTime, p3, p4, p5) {
  return Citizen.invokeNative('0x33281167e4942e4f', render, ease, easeTime, p3, p4, p5);
};

/**
   * SET_CAM_ACTIVE
   * Set camera as active/inactive.
   *
   * @param {number} cam
   * @param {boolean} active
   * @return {void}
   */
global.SetCamActive = function (cam, active) {
  return Citizen.invokeNative('0x87295bca613800c8', cam, active);
};

/**
   * SET_CAM_ACTIVE_WITH_INTERP
   *
   * @param {number} camTo
   * @param {number} camFrom
   * @param {number} duration
   * @param {number} easeLocation
   * @param {number} easeRotation
   * @return {void}
   */
global.SetCamActiveWithInterp = function (camTo, camFrom, duration, easeLocation, easeRotation) {
  return Citizen.invokeNative('0x8b15ae2987c1ac8f', camTo, camFrom, duration, easeLocation, easeRotation);
};

/**
   * SET_CAM_AFFECTS_AIMING
   * Allows you to aim and shoot at the direction the camera is facing.
   *
   * @param {number} cam
   * @param {boolean} toggle
   * @return {void}
   */
global.SetCamAffectsAiming = function (cam, toggle) {
  return Citizen.invokeNative('0x3cb9e8bde5e76f33', cam, toggle);
};

/**
   * SET_CAM_CONTROLS_MINI_MAP_HEADING
   *
   * @param {number} cam
   * @param {boolean} p1
   * @return {void}
   */
global.SetCamControlsMiniMapHeading = function (cam, p1) {
  return Citizen.invokeNative('0x1b8f3ce5a6001298', cam, p1);
};

/**
   * SET_CAM_COORD
   * Sets the position of the cam.
   *
   * @param {number} cam
   * @param {number} posX
   * @param {number} posY
   * @param {number} posZ
   * @return {void}
   */
global.SetCamCoord = function (cam, posX, posY, posZ) {
  return Citizen.invokeNative('0xf9ee7d419ee49de6', cam, _fv(posX), _fv(posY), _fv(posZ));
};

/**
   * SET_CAM_FAR_CLIP
   *
   * @param {number} cam
   * @param {number} farClip
   * @return {void}
   */
global.SetCamFarClip = function (cam, farClip) {
  return Citizen.invokeNative('0x5e32817bf6302111', cam, _fv(farClip));
};

/**
   * SET_CAM_FOV
   * Sets the field of view of the cam.
   * 
   * Min: 1.0f
   * Max: 130.0f
   *
   * @param {number} cam
   * @param {number} fieldOfView
   * @return {void}
   */
global.SetCamFov = function (cam, fieldOfView) {
  return Citizen.invokeNative('0x27666e5988d9d429', cam, _fv(fieldOfView));
};

/**
   * SET_CAM_MOTION_BLUR_STRENGTH
   *
   * @param {number} cam
   * @param {number} strength
   * @return {void}
   */
global.SetCamMotionBlurStrength = function (cam, strength) {
  return Citizen.invokeNative('0x45fd891364181f9e', cam, _fv(strength));
};

/**
   * SET_CAM_NEAR_CLIP
   *
   * @param {number} cam
   * @param {number} nearClip
   * @return {void}
   */
global.SetCamNearClip = function (cam, nearClip) {
  return Citizen.invokeNative('0xa924028272a61364', cam, _fv(nearClip));
};

/**
   * SET_CAM_PARAMS
   *
   * @param {number} cam
   * @param {number} posX
   * @param {number} posY
   * @param {number} posZ
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} fieldOfView
   * @param {any} p8
   * @param {number} p9
   * @param {number} p10
   * @param {number} p11
   * @param {any} p12
   * @param {any} p13
   * @return {void}
   */
global.SetCamParams = function (cam, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, p8, p9, p10, p11, p12, p13) {
  return Citizen.invokeNative('0xa47bbfffb83d4d0a', cam, _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(fieldOfView), p8, p9, p10, p11, p12, p13);
};

/**
   * SET_CAM_ROT
   * Sets the rotation of the cam.
   *
   * @param {number} cam
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} rotationOrder
   * @return {void}
   */
global.SetCamRot = function (cam, rotX, rotY, rotZ, rotationOrder) {
  return Citizen.invokeNative('0x63dfa6810ad78719', cam, _fv(rotX), _fv(rotY), _fv(rotZ), rotationOrder);
};

/**
   * SET_CAM_SPLINE_DURATION
   *
   * @param {number} cam
   * @param {number} timeDuration
   * @return {void}
   */
global.SetCamSplineDuration = function (cam, timeDuration) {
  return Citizen.invokeNative('0xff6311652ca91015', cam, timeDuration);
};

/**
   * SET_CAM_SPLINE_PHASE
   *
   * @param {number} cam
   * @param {number} p1
   * @return {void}
   */
global.SetCamSplinePhase = function (cam, p1) {
  return Citizen.invokeNative('0xf1898a68e7c15636', cam, _fv(p1));
};

/**
   * SET_CAM_SPLINE_SMOOTHING_STYLE
   *
   * @param {number} cam
   * @param {number} smoothingStyle
   * @return {void}
   */
global.SetCamSplineSmoothingStyle = function (cam, smoothingStyle) {
  return Citizen.invokeNative('0x84b3645618e726b0', cam, smoothingStyle);
};

/**
   * SET_CINEMATIC_BUTTON_ACTIVE
   *
   * @param {boolean} p0
   * @return {void}
   */
global.SetCinematicButtonActive = function (p0) {
  return Citizen.invokeNative('0xb90411f480457a6c', p0);
};

/**
   * SET_CINEMATIC_MODE_ACTIVE
   *
   * @param {boolean} p0
   * @return {void}
   */
global.SetCinematicModeActive = function (p0) {
  return Citizen.invokeNative('0xce7a90b160f75046', p0);
};

/**
   * SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE
   *
   * @param {number} p0
   * @param {number} p1
   * @return {void}
   */
global.SetFirstPersonAimCamRelativeHeadingLimitsThisUpdate = function (p0, p1) {
  return Citizen.invokeNative('0x05bd5e4088b30a66', _fv(p0), _fv(p1));
};

/**
   * SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE
   * Old name: _SET_FIRST_PERSON_CAM_PITCH_RANGE
   *
   * @param {number} p0
   * @param {number} p1
   * @return {void}
   */
global.SetFirstPersonAimCamRelativePitchLimitsThisUpdate = function (p0, p1) {
  return Citizen.invokeNative('0x715b7f5e8bed32a2', _fv(p0), _fv(p1));
};

/**
   * SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE
   * Forces gameplay cam to specified ped as if you were the ped or spectating it
   *
   * @param {number} ped
   * @return {void}
   */
global.SetGameplayCamFollowPedThisUpdate = function (ped) {
  return Citizen.invokeNative('0x82e41d6ade924fca', ped);
};

/**
   * SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE
   * Old name: _DISABLE_CAM_COLLISION_FOR_ENTITY
   *
   * @param {number} entity
   * @return {void}
   */
global.SetGameplayCamIgnoreEntityCollisionThisUpdate = function (entity) {
  return Citizen.invokeNative('0xd904f75dbd7ab865', entity);
};

/**
   * SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE
   *
   * @param {number} p0
   * @return {void}
   */
global.SetGameplayCamMaxMotionBlurStrengthThisUpdate = function (p0) {
  return Citizen.invokeNative('0x8459b3e64257b21d', _fv(p0));
};

/**
   * SET_GAMEPLAY_CAM_RELATIVE_HEADING
   * Sets the camera position relative to heading in float from -360 to +360.
   * 
   * Heading is always 0 in aiming camera.
   *
   * @param {number} heading
   * @param {number} p1
   * @return {void}
   */
global.SetGameplayCamRelativeHeading = function (heading, p1) {
  return Citizen.invokeNative('0x5d1eb123eac5d071', _fv(heading), _fv(p1));
};

/**
   * SET_GAMEPLAY_CAM_RELATIVE_PITCH
   * Sets the camera pitch.
   * 
   * Parameters:
   * x = pitches the camera on the x axis.
   * Value2 = always seems to be hex 0x3F800000 (1.000000 float).
   *
   * @param {number} x
   * @param {number} value2
   * @return {void}
   */
global.SetGameplayCamRelativePitch = function (x, value2) {
  return Citizen.invokeNative('0xfb760af4f537b8bf', _fv(x), _fv(value2));
};

/**
   * SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE
   * Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake.
   *
   * @param {number} amplitude
   * @return {void}
   */
global.SetGameplayCamShakeAmplitude = function (amplitude) {
  return Citizen.invokeNative('0x570e35f5c4a44838', _fv(amplitude));
};

/**
   * SET_GAMEPLAY_COORD_HINT
   * Hash used in finale1.ysc: 1726668277
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} duration
   * @param {number} blendOutDuration
   * @param {number} blendInDuration
   * @param {number} p6
   * @return {void}
   */
global.SetGameplayCoordHint = function (x, y, z, duration, blendOutDuration, blendInDuration, p6) {
  return Citizen.invokeNative('0xfa33b8c69a4a6a0f', _fv(x), _fv(y), _fv(z), duration, blendOutDuration, blendInDuration, _ch(p6));
};

/**
   * SET_GAMEPLAY_ENTITY_HINT
   * p6 & p7 - possibly length or time
   *
   * @param {number} entity
   * @param {number} xOffset
   * @param {number} yOffset
   * @param {number} zOffset
   * @param {boolean} p4
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @param {any} p8
   * @return {void}
   */
global.SetGameplayEntityHint = function (entity, xOffset, yOffset, zOffset, p4, p5, p6, p7, p8) {
  return Citizen.invokeNative('0xd1f7f32640adfd12', entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), p4, p5, p6, p7, p8);
};

/**
   * SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET
   *
   * @param {number} p0
   * @return {void}
   */
global.SetGameplayHintBaseOrbitPitchOffset = function (p0) {
  return Citizen.invokeNative('0x421192a2da48fd01', _fv(p0));
};

/**
   * SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET
   * Old name: _SET_GAMEPLAY_HINT_ANIM_OFFSETX
   *
   * @param {number} p0
   * @return {void}
   */
global.SetGameplayHintCameraRelativeSideOffset = function (p0) {
  return Citizen.invokeNative('0xf86b6f93727c59c9', _fv(p0));
};

/**
   * SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET
   * Old name: _SET_GAMEPLAY_HINT_ANIM_OFFSETY
   *
   * @param {number} p0
   * @return {void}
   */
global.SetGameplayHintCameraRelativeVerticalOffset = function (p0) {
  return Citizen.invokeNative('0x29e74f819150cc32', _fv(p0));
};

/**
   * SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR
   *
   * @param {number} p0
   * @return {void}
   */
global.SetGameplayHintFollowDistanceScalar = function (p0) {
  return Citizen.invokeNative('0xdddc54181868f81f', _fv(p0));
};

/**
   * SET_GAMEPLAY_HINT_FOV
   *
   * @param {number} fov
   * @return {void}
   */
global.SetGameplayHintFov = function (fov) {
  return Citizen.invokeNative('0x661e58bc6f00a49a', _fv(fov));
};

/**
   * SET_GAMEPLAY_OBJECT_HINT
   *
   * @param {any} p0
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {boolean} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.SetGameplayObjectHint = function (p0, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0xc40551d65f2bf297', p0, _fv(p1), _fv(p2), _fv(p3), p4, p5, p6, p7);
};

/**
   * SET_GAMEPLAY_PED_HINT
   *
   * @param {number} p0
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {boolean} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.SetGameplayPedHint = function (p0, x1, y1, z1, p4, p5, p6, p7) {
  return Citizen.invokeNative('0x90fb951648851733', p0, _fv(x1), _fv(y1), _fv(z1), p4, p5, p6, p7);
};

/**
   * SET_GAMEPLAY_VEHICLE_HINT
   *
   * @param {any} p0
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {boolean} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.SetGameplayVehicleHint = function (p0, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0xe2b2bb7dac280515', p0, _fv(p1), _fv(p2), _fv(p3), p4, p5, p6, p7);
};

/**
   * SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE
   * Forces gameplay cam to specified vehicle as if you were in it
   *
   * @param {number} vehicle
   * @param {number} p1
   * @return {void}
   */
global.SetInVehicleCamStateThisUpdate = function (vehicle, p1) {
  return Citizen.invokeNative('0xfa1d5e8d1c3ccd67', vehicle, p1);
};

/**
   * SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME
   *
   * @param {boolean} p0
   * @return {void}
   */
global.SetScriptedCameraIsFirstPersonThisFrame = function (p0) {
  return Citizen.invokeNative('0x1dd95a8d6b24a0c9', p0);
};

/**
   * SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE
   * Old name: _ANIMATE_GAMEPLAY_CAM_ZOOM
   *
   * @param {number} p0
   * @param {number} distance
   * @return {void}
   */
global.SetThirdPersonCamOrbitDistanceLimitsThisUpdate = function (p0, distance) {
  return Citizen.invokeNative('0x2126c740a4ac370b', _fv(p0), _fv(distance));
};

/**
   * SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE
   * minimum: Degrees between -180f and 180f.
   * maximum: Degrees between -180f and 180f.
   * 
   * Clamps the gameplay camera's current yaw.
   * 
   * Eg. _CLAMP_GAMEPLAY_CAM_YAW(0.0f, 0.0f) will set the horizontal angle directly behind the player.
   * 
   * Old name: _CLAMP_GAMEPLAY_CAM_YAW
   *
   * @param {number} minimum
   * @param {number} maximum
   * @return {void}
   */
global.SetThirdPersonCamRelativeHeadingLimitsThisUpdate = function (minimum, maximum) {
  return Citizen.invokeNative('0x14f3947318ca8ad2', _fv(minimum), _fv(maximum));
};

/**
   * SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE
   * minimum: Degrees between -90f and 90f.
   * maximum: Degrees between -90f and 90f.
   * 
   * Clamps the gameplay camera's current pitch.
   * 
   * Eg. _CLAMP_GAMEPLAY_CAM_PITCH(0.0f, 0.0f) will set the vertical angle directly behind the player.
   * 
   * Old name: _CLAMP_GAMEPLAY_CAM_PITCH
   *
   * @param {number} minimum
   * @param {number} maximum
   * @return {void}
   */
global.SetThirdPersonCamRelativePitchLimitsThisUpdate = function (minimum, maximum) {
  return Citizen.invokeNative('0x326c7aa308f3df6a', _fv(minimum), _fv(maximum));
};

/**
   * SET_WIDESCREEN_BORDERS
   *
   * @param {boolean} p0
   * @param {number} p1
   * @return {void}
   */
global.SetWidescreenBorders = function (p0, p1) {
  return Citizen.invokeNative('0xd7f4d54cf80afa34', p0, p1);
};

/**
   * SHAKE_CAM
   *
   * @param {number} cam
   * @param {string | number} type
   * @param {number} amplitude
   * @return {void}
   */
global.ShakeCam = function (cam, type, amplitude) {
  return Citizen.invokeNative('0xf9a7bcf5d050d4e7', cam, _ts(type), _fv(amplitude));
};

/**
   * SHAKE_GAMEPLAY_CAM
   *
   * @param {string | number} shakeName
   * @param {number} intensity
   * @return {void}
   */
global.ShakeGameplayCam = function (shakeName, intensity) {
  return Citizen.invokeNative('0xd9b31b4650520529', _ts(shakeName), _fv(intensity));
};

/**
   * STOP_CAM_POINTING
   *
   * @param {number} cam
   * @return {void}
   */
global.StopCamPointing = function (cam) {
  return Citizen.invokeNative('0xca1b30a3357c71f1', cam);
};

/**
   * STOP_CAM_SHAKING
   *
   * @param {number} cam
   * @param {boolean} p1
   * @return {void}
   */
global.StopCamShaking = function (cam, p1) {
  return Citizen.invokeNative('0xb78cc4b4706614b0', cam, p1);
};

/**
   * STOP_CODE_GAMEPLAY_HINT
   *
   * @param {boolean} p0
   * @return {void}
   */
global.StopCodeGameplayHint = function (p0) {
  return Citizen.invokeNative('0x93759a83d0d844e7', p0);
};

/**
   * STOP_GAMEPLAY_CAM_SHAKING
   *
   * @param {boolean} p0
   * @return {void}
   */
global.StopGameplayCamShaking = function (p0) {
  return Citizen.invokeNative('0xe0de43d290fb65f9', p0);
};

/**
   * STOP_GAMEPLAY_HINT
   *
   * @param {boolean} p0
   * @return {void}
   */
global.StopGameplayHint = function (p0) {
  return Citizen.invokeNative('0x1bcec33d54cfca8a', p0);
};

/**
   * STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP
   * This native makes the gameplay camera zoom into first person/third person with a special effect.
   * blendBackSmoothingType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eBlendBackSmoothing
   *
   * @param {boolean} render
   * @param {number} distance
   * @param {number} blendBackSmoothingType
   * @param {boolean} p3
   * @param {boolean} p4
   * @param {boolean} p5
   * @return {void}
   */
global.StopRenderingScriptCamsUsingCatchUp = function (render, distance, blendBackSmoothingType, p3, p4, p5) {
  return Citizen.invokeNative('0x8c7c7ff7cf0e5153', render, _fv(distance), blendBackSmoothingType, p3, p4, p5);
};

/**
   * _0x0060B31968E60E41
   * shakeNames in script_rel: CORRECTOR_SHAKE, MINIGAME_BOUNTY_SHAKE, POV_DRUNK_SHAKE, DRUNK_SHAKE, MINIGAME_TRAIN_SHAKE
   * _IS_GAMEPLAY_*
   *
   * @param {string | number} shakeName
   * @return {boolean}
   */
global.N_0x0060B31968E60E41 = function (shakeName) {
  return Citizen.invokeNative('0x0060b31968e60e41', _ts(shakeName), _r);
};

/**
   * _0x04084490CC302CFB
   *
  
   * @return {void}
   */
global.N_0x04084490CC302CFB = function () {
  return Citizen.invokeNative('0x04084490cc302cfb');
};

/**
   * _0x06557F6D96C86881
   *
  
   * @return {void}
   */
global.N_0x06557F6D96C86881 = function () {
  return Citizen.invokeNative('0x06557f6d96c86881');
};

/**
   * _SET_GAMEPLAY_CAM_PARAMS_THIS_UPDATE
   * Not official name
   * This native allows to move the gameplay cam with the given speed, enableSlide will allow to move the cam to the slideOffset, enableZoom will allow to move the cam to the zoomOffset. 
   * 
   * EXAMPLE:
   * Citizen.InvokeNative(0x066167c63111d8cf,1.0, true, -1.0, true, 2.0)
   *
   * @param {number} camSpeed
   * @param {boolean} enableSlide
   * @param {number} slideOffset
   * @param {boolean} enableZoom
   * @param {number} zoomOffset
   * @return {void}
   */
global.SetGameplayCamParamsThisUpdate = function (camSpeed, enableSlide, slideOffset, enableZoom, zoomOffset) {
  return Citizen.invokeNative('0x066167c63111d8cf', _fv(camSpeed), enableSlide, _fv(slideOffset), enableZoom, _fv(zoomOffset));
};

/**
   * _0x0961B089947BA6D0
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x0961B089947BA6D0 = function (p0) {
  return Citizen.invokeNative('0x0961b089947ba6d0', p0);
};

/**
   * _0x0F1FFEF5D54AE832
   * NPLOI_UPDATE__GUN_SPINNING_PREVIEW - Adjusting Camera / Ped Reset Flags This Frame
   * _DISABLE_*
   *
  
   * @return {void}
   */
global.N_0x0F1FFEF5D54AE832 = function () {
  return Citizen.invokeNative('0x0f1ffef5d54ae832');
};

/**
   * _0x0FF7125F07DEB84F
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x0FF7125F07DEB84F = function (p0, p1) {
  return Citizen.invokeNative('0x0ff7125f07deb84f', p0, p1);
};

/**
   * _0x1204EB53A5FBC63D
   * Used for DUELING_LOCK_CAMERA_CONTROLS_THIS_FRAME: Disabling look/aim controls
   * _IS_SC(REEN_)* (?)
   *
  
   * @return {boolean}
   */
global.N_0x1204EB53A5FBC63D = function () {
  return Citizen.invokeNative('0x1204eb53a5fbc63d', _r);
};

/**
   * _0x14C4A49E36C29E49
   *
  
   * @return {any}
   */
global.N_0x14C4A49E36C29E49 = function () {
  return Citizen.invokeNative('0x14c4a49e36c29e49', _r);
};

/**
   * _0x16E9ABDD34DDD931
   *
  
   * @return {void}
   */
global.N_0x16E9ABDD34DDD931 = function () {
  return Citizen.invokeNative('0x16e9abdd34ddd931');
};

/**
   * _0x1811A02277A9E49D
   *
  
   * @return {boolean}
   */
global.N_0x1811A02277A9E49D = function () {
  return Citizen.invokeNative('0x1811a02277a9e49d', _r);
};

/**
   * _0x18C3DFAC458783BB
   *
  
   * @return {void}
   */
global.N_0x18C3DFAC458783BB = function () {
  return Citizen.invokeNative('0x18c3dfac458783bb');
};

/**
   * _0x190F7DA1AC09A8EF
   *
  
   * @return {any}
   */
global.N_0x190F7DA1AC09A8EF = function () {
  return Citizen.invokeNative('0x190f7da1ac09a8ef', _r);
};

/**
   * _0x1D931B7CC0EE3956
   *
   * @param {string | number} dictionary
   * @param {string | number} shotName
   * @param {string | number} cameraName
   * @return {boolean}
   */
global.N_0x1D931B7CC0EE3956 = function (dictionary, shotName, cameraName) {
  return Citizen.invokeNative('0x1d931b7cc0ee3956', _ts(dictionary), _ts(shotName), _ts(cameraName), _r);
};

/**
   * _0x1D9F72DD4FD9A9D7
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x1D9F72DD4FD9A9D7 = function (p0) {
  return Citizen.invokeNative('0x1d9f72dd4fd9a9d7', p0);
};

/**
   * _0x1F6EBD94680252CE
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x1F6EBD94680252CE = function (p0, p1) {
  return Citizen.invokeNative('0x1f6ebd94680252ce', p0, p1);
};

/**
   * _0x1FC6C727D30FFDDE
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x1FC6C727D30FFDDE = function (p0) {
  return Citizen.invokeNative('0x1fc6c727d30ffdde', p0);
};

/**
   * _0x29E6655DF3590B0D
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x29E6655DF3590B0D = function (p0) {
  return Citizen.invokeNative('0x29e6655df3590b0d', p0);
};

/**
   * _0x2AB7C81B3F70570C
   *
  
   * @return {any}
   */
global.N_0x2AB7C81B3F70570C = function () {
  return Citizen.invokeNative('0x2ab7c81b3f70570c', _r);
};

/**
   * _0x2DD3149DC34A3F4C
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x2DD3149DC34A3F4C = function (p0) {
  return Citizen.invokeNative('0x2dd3149dc34a3f4c', p0);
};

/**
   * _0x39073DA4EDDBC91D
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x39073DA4EDDBC91D = function (p0) {
  return Citizen.invokeNative('0x39073da4eddbc91d', p0);
};

/**
   * _0x3B8E3AD9677CE12B
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x3B8E3AD9677CE12B = function (p0, p1, p2) {
  return Citizen.invokeNative('0x3b8e3ad9677ce12b', p0, p1, p2);
};

/**
   * _0x3C486E334520579D
   *
  
   * @return {void}
   */
global.N_0x3C486E334520579D = function () {
  return Citizen.invokeNative('0x3c486e334520579d');
};

/**
   * _0x3C8F74E8FE751614
   *
  
   * @return {void}
   */
global.N_0x3C8F74E8FE751614 = function () {
  return Citizen.invokeNative('0x3c8f74e8fe751614');
};

/**
   * _0x4138EE36BC3DC0A7
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x4138EE36BC3DC0A7 = function (p0, p1) {
  return Citizen.invokeNative('0x4138ee36bc3dc0a7', p0, p1, _r);
};

/**
   * _0x41E452A3C580D1A7
   *
  
   * @return {void}
   */
global.N_0x41E452A3C580D1A7 = function () {
  return Citizen.invokeNative('0x41e452a3c580d1a7');
};

/**
   * _0x450769C833D58844
   *
  
   * @return {any}
   */
global.N_0x450769C833D58844 = function () {
  return Citizen.invokeNative('0x450769c833d58844', _r);
};

/**
   * _0x465F04F68AD38197
   *
   * @param {string | number} dictionary
   * @param {string | number} shotName
   * @param {number} duration
   * @return {any}
   */
global.N_0x465F04F68AD38197 = function (dictionary, shotName, duration) {
  return Citizen.invokeNative('0x465f04f68ad38197', _ts(dictionary), _ts(shotName), duration, _r);
};

/**
   * _0x4D2F46D1B28D90FB
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x4D2F46D1B28D90FB = function (p0, p1) {
  return Citizen.invokeNative('0x4d2f46d1b28d90fb', p0, p1);
};

/**
   * _0x5060FA977CEA4455
   *
  
   * @return {any}
   */
global.N_0x5060FA977CEA4455 = function () {
  return Citizen.invokeNative('0x5060fa977cea4455', _r);
};

/**
   * _0x5B637D6F3B67716A
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x5B637D6F3B67716A = function (p0) {
  return Citizen.invokeNative('0x5b637d6f3b67716a', p0);
};

/**
   * _0x6072B7420A83A03F
   *
  
   * @return {any}
   */
global.N_0x6072B7420A83A03F = function () {
  return Citizen.invokeNative('0x6072b7420a83a03f', _r);
};

/**
   * _0x632BE8D84846FA56
   * Zooms in the gameplay camera to the next zoom level?
   * USE_* - WAS_*
   *
  
   * @return {void}
   */
global.N_0x632BE8D84846FA56 = function () {
  return Citizen.invokeNative('0x632be8d84846fa56');
};

/**
   * _0x63E5841A9264D016
   * Maintains the death camera after respawn
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.N_0x63E5841A9264D016 = function (toggle) {
  return Citizen.invokeNative('0x63e5841a9264d016', toggle);
};

/**
   * _0x641092322A8852AB
   *
  
   * @return {void}
   */
global.N_0x641092322A8852AB = function () {
  return Citizen.invokeNative('0x641092322a8852ab');
};

/**
   * _0x6519238858AF5479
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x6519238858AF5479 = function (p0) {
  return Citizen.invokeNative('0x6519238858af5479', p0);
};

/**
   * _0x6CAB0BA160B168D2
   *
  
   * @return {void}
   */
global.N_0x6CAB0BA160B168D2 = function () {
  return Citizen.invokeNative('0x6cab0ba160b168d2');
};

/**
   * _0x6DFD37E586D4F44F
   *
  
   * @return {any}
   */
global.N_0x6DFD37E586D4F44F = function () {
  return Citizen.invokeNative('0x6dfd37e586d4f44f', _r);
};

/**
   * _0x70A6658D476C6187
   *
  
   * @return {void}
   */
global.N_0x70A6658D476C6187 = function () {
  return Citizen.invokeNative('0x70a6658d476c6187');
};

/**
   * _FORCE_THIRD_PERSON_CLOSE_THIS_FRAME
   * Forces camera position to closest 3rd person
   *
  
   * @return {void}
   */
global.ForceThirdPersonCloseThisFrame = function () {
  return Citizen.invokeNative('0x718c6ecf5e8cbdd4');
};

/**
   * _0x71D71E08A7ED5BD7
   * Zooms in the third person camera closer to ground level.
   * Must be called every frame to interpolate.
   * Pass false to reset.
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.N_0x71D71E08A7ED5BD7 = function (toggle) {
  return Citizen.invokeNative('0x71d71e08a7ed5bd7', toggle);
};

/**
   * _0x728491FB3DFFEF99
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x728491FB3DFFEF99 = function (p0) {
  return Citizen.invokeNative('0x728491fb3dffef99', p0);
};

/**
   * _0x73FF6BE63DC18819
   *
  
   * @return {any}
   */
global.N_0x73FF6BE63DC18819 = function () {
  return Citizen.invokeNative('0x73ff6be63dc18819', _r);
};

/**
   * _0x796085220ADCC847
   *
  
   * @return {any}
   */
global.N_0x796085220ADCC847 = function () {
  return Citizen.invokeNative('0x796085220adcc847', _r);
};

/**
   * _0x7CE9DC58E3E4755F
   *
  
   * @return {any}
   */
global.N_0x7CE9DC58E3E4755F = function () {
  return Citizen.invokeNative('0x7ce9dc58e3e4755f', _r);
};

/**
   * _0x7E40A01B11398FCB
   *
  
   * @return {void}
   */
global.N_0x7E40A01B11398FCB = function () {
  return Citizen.invokeNative('0x7e40a01b11398fcb');
};

/**
   * _0x80D7A3E39B120BC4
   *
  
   * @return {any}
   */
global.N_0x80D7A3E39B120BC4 = function () {
  return Citizen.invokeNative('0x80d7a3e39b120bc4', _r);
};

/**
   * _0x8505E05FC8822843
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x8505E05FC8822843 = function (p0) {
  return Citizen.invokeNative('0x8505e05fc8822843', p0);
};

/**
   * _0x88544C0E3291DCAE
   * UPDATE_PLAYER_PLAYING_STATE - Releasing Lasso Hint Cam
   * Return type char in ida
   * _SET_GAMEPLAY_HINT_*
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0x88544C0E3291DCAE = function (p0) {
  return Citizen.invokeNative('0x88544c0e3291dcae', p0);
};

/**
   * _0x8B1A5FE7E41E52B2
   *
  
   * @return {any}
   */
global.N_0x8B1A5FE7E41E52B2 = function () {
  return Citizen.invokeNative('0x8b1a5fe7e41e52b2', _r);
};

/**
   * _0x8E036B41C37D0E5F
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x8E036B41C37D0E5F = function (p0) {
  return Citizen.invokeNative('0x8e036b41c37d0e5f', p0);
};

/**
   * _0x975F6EBB62632FE3
   * _IS_SCRIPTED_S*
   *
  
   * @return {boolean}
   */
global.N_0x975F6EBB62632FE3 = function () {
  return Citizen.invokeNative('0x975f6ebb62632fe3', _r);
};

/**
   * _0x9AC65A36D3C0C189
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x9AC65A36D3C0C189 = function (p0) {
  return Citizen.invokeNative('0x9ac65a36d3c0c189', p0);
};

/**
   * _0xA54D643D0773EB65
   *
   * @param {string | number} dictionary
   * @param {string | number} shotName
   * @param {number} duration
   * @return {void}
   */
global.N_0xA54D643D0773EB65 = function (dictionary, shotName, duration) {
  return Citizen.invokeNative('0xa54d643d0773eb65', _ts(dictionary), _ts(shotName), duration);
};

/**
   * _0xA8BA2E0204D8486F
   * NPLOI_UPDATE__GUN_SPINNING_PREVIEW - Adjusting Camera / Ped Reset Flags This Frame
   * _DISABLE_*
   *
  
   * @return {void}
   */
global.N_0xA8BA2E0204D8486F = function () {
  return Citizen.invokeNative('0xa8ba2e0204d8486f');
};

/**
   * _0xAC77757C05DE9E5A
   *
   * @param {string | number} cameraDictionary
   * @return {void}
   */
global.N_0xAC77757C05DE9E5A = function (cameraDictionary) {
  return Citizen.invokeNative('0xac77757c05de9e5a', _ts(cameraDictionary));
};

/**
   * _0xB6A80E1E3A5444F1
   *
  
   * @return {any}
   */
global.N_0xB6A80E1E3A5444F1 = function () {
  return Citizen.invokeNative('0xb6a80e1e3a5444f1', _r);
};

/**
   * _0xB85C13E0BF1F2A1C
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xB85C13E0BF1F2A1C = function (p0) {
  return Citizen.invokeNative('0xb85c13e0bf1f2a1c', p0);
};

/**
   * _0xC205B3C54C6A4E37
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xC205B3C54C6A4E37 = function (p0) {
  return Citizen.invokeNative('0xc205b3c54c6a4e37', p0);
};

/**
   * _0xC252C0CC969AF79A
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xC252C0CC969AF79A = function (p0) {
  return Citizen.invokeNative('0xc252c0cc969af79a', p0);
};

/**
   * _0xC285FD21294A1C49
   *
   * @param {string | number} cameraDictionary
   * @return {boolean}
   */
global.N_0xC285FD21294A1C49 = function (cameraDictionary) {
  return Citizen.invokeNative('0xc285fd21294a1c49', _ts(cameraDictionary), _r);
};

/**
   * _0xC3742F1FDF0A6824
   * Camera will be or is running
   *
  
   * @return {void}
   */
global.N_0xC3742F1FDF0A6824 = function () {
  return Citizen.invokeNative('0xc3742f1fdf0a6824');
};

/**
   * _0xC3AEBB276825A359
   *
   * @param {string | number} dictionary
   * @param {string | number} shotName
   * @param {number} duration
   * @return {boolean}
   */
global.N_0xC3AEBB276825A359 = function (dictionary, shotName, duration) {
  return Citizen.invokeNative('0xc3aebb276825a359', _ts(dictionary), _ts(shotName), duration, _r);
};

/**
   * _0xC3E9E5D4F413B773
   * shakeName: REINFORCED_LASSO_STRUGGLE_SHAKE
   * _RES*
   *
   * @param {string | number} shakeName
   * @param {number} intensity
   * @return {void}
   */
global.N_0xC3E9E5D4F413B773 = function (shakeName, intensity) {
  return Citizen.invokeNative('0xc3e9e5d4f413b773', _ts(shakeName), _fv(intensity));
};

/**
   * _0xCF69EA05CD9C33C9
   *
  
   * @return {void}
   */
global.N_0xCF69EA05CD9C33C9 = function () {
  return Citizen.invokeNative('0xcf69ea05cd9c33c9');
};

/**
   * _0xDB382FE20C2DA222
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xDB382FE20C2DA222 = function (p0) {
  return Citizen.invokeNative('0xdb382fe20c2da222', p0);
};

/**
   * _0xDC62CD70658E7A02
   *
  
   * @return {any}
   */
global.N_0xDC62CD70658E7A02 = function () {
  return Citizen.invokeNative('0xdc62cd70658e7a02', _r);
};

/**
   * _0xDF7F5BE9150E47E4
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xDF7F5BE9150E47E4 = function (p0) {
  return Citizen.invokeNative('0xdf7f5be9150e47e4', p0);
};

/**
   * _0xE28F73212A813E82
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0xE28F73212A813E82 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xe28f73212a813e82', p0, p1, p2, p3);
};

/**
   * _0xE2BB2D6A9FE2ECDE
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xE2BB2D6A9FE2ECDE = function (p0) {
  return Citizen.invokeNative('0xe2bb2d6a9fe2ecde', p0);
};

/**
   * _0xE4B7945EF4F1BFB2
   *
   * @param {number} cam
   * @param {DataView} args
   * @return {void}
   */
global.N_0xE4B7945EF4F1BFB2 = function (cam, args) {
  return Citizen.invokeNative('0xe4b7945ef4f1bfb2', cam, args);
};

/**
   * _0xE6F364DE6C2FDEFE
   *
  
   * @return {void}
   */
global.N_0xE6F364DE6C2FDEFE = function () {
  return Citizen.invokeNative('0xe6f364de6c2fdefe');
};

/**
   * _0xEA113BF9B0C0C5D7
   *
   * @param {string | number} dictionary
   * @param {string | number} shotName
   * @param {number} duration
   * @return {any}
   */
global.N_0xEA113BF9B0C0C5D7 = function (dictionary, shotName, duration) {
  return Citizen.invokeNative('0xea113bf9b0c0c5d7', _ts(dictionary), _ts(shotName), duration, _r);
};

/**
   * _0xEF9A3132A0AA6B19
   *
  
   * @return {any}
   */
global.N_0xEF9A3132A0AA6B19 = function () {
  return Citizen.invokeNative('0xef9a3132a0aa6b19', _r);
};

/**
   * _0xF1A6FEEDF3776EF9
   *
  
   * @return {void}
   */
global.N_0xF1A6FEEDF3776EF9 = function () {
  return Citizen.invokeNative('0xf1a6feedf3776ef9');
};

/**
   * _0xF48664E9C83825E3
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xF48664E9C83825E3 = function (p0, p1) {
  return Citizen.invokeNative('0xf48664e9c83825e3', p0, p1);
};

/**
   * _0xF824530B612FE0CE
   *
  
   * @return {any}
   */
global.N_0xF824530B612FE0CE = function () {
  return Citizen.invokeNative('0xf824530b612fe0ce', _r);
};

/**
   * _0xFC3F638BE2B6BB02
   *
  
   * @return {void}
   */
global.N_0xFC3F638BE2B6BB02 = function () {
  return Citizen.invokeNative('0xfc3f638be2b6bb02');
};

/**
   * _0xFEB8646818294C75
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xFEB8646818294C75 = function (p0, p1) {
  return Citizen.invokeNative('0xfeb8646818294c75', p0, p1);
};

/**
   * _0xFEFDDC6E8FDF8A75
   * _SET_GAMEPLAY_P* - _SET_GAMEPLAY_V*
   *
   * @param {string | number} shakeName
   * @param {number} intensity
   * @return {void}
   */
global.N_0xFEFDDC6E8FDF8A75 = function (shakeName, intensity) {
  return Citizen.invokeNative('0xfefddc6e8fdf8a75', _ts(shakeName), _fv(intensity));
};

/**
   * _CAM_CREATE
   *
   * @param {string | number} cameraDictionary
   * @return {void}
   */
global.CamCreate = function (cameraDictionary) {
  return Citizen.invokeNative('0xb8b207c34285e978', _ts(cameraDictionary));
};

/**
   * _CAM_CREATE_2
   *
   * @param {string | number} cameraDictionary
   * @return {void}
   */
global.CamCreate_2 = function (cameraDictionary) {
  return Citizen.invokeNative('0x7b0279170961a73f', _ts(cameraDictionary));
};

/**
   * _CAM_DESTROY
   *
   * @param {string | number} cameraDictionary
   * @return {void}
   */
global.CamDestroy = function (cameraDictionary) {
  return Citizen.invokeNative('0x0a5a4f1979abb40e', _ts(cameraDictionary));
};

/**
   * _CINEMATIC_LOCATION_SET_LOCATION_AND_ROTATION
   *
   * @param {string | number} name
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @return {void}
   */
global.CinematicLocationSetLocationAndRotation = function (name, x, y, z, rotX, rotY, rotZ) {
  return Citizen.invokeNative('0x0e94c95ec3185fa9', _ts(name), _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ));
};

/**
   * _CINEMATIC_LOCATION_TRIGGER_SCRIPTED_SHOT_EVENT_2
   *
   * @param {string | number} dictionary
   * @param {string | number} shotName
   * @param {number} duration
   * @return {void}
   */
global.CinematicLocationTriggerScriptedShotEvent_2 = function (dictionary, shotName, duration) {
  return Citizen.invokeNative('0xbc016635d6a73b31', _ts(dictionary), _ts(shotName), duration);
};

/**
   * _CREATE_KILL_CAM
   * Creates Kill Cam for specified Ped Handle
   *
   * @param {number} ped
   * @return {void}
   */
global.CreateKillCam = function (ped) {
  return Citizen.invokeNative('0x2f994cc29caa9d22', ped);
};

/**
   * _DISABLE_CINEMATIC_MODE_THIS_FRAME
   *
  
   * @return {void}
   */
global.DisableCinematicModeThisFrame = function () {
  return Citizen.invokeNative('0x8910c24b7e0046ec');
};

/**
   * _DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE_2
   * Does the same as 0x9C473089A934C930 (DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE)
   *
  
   * @return {void}
   */
global.DisableOnFootFirstPersonViewThisUpdate_2 = function () {
  return Citizen.invokeNative('0x05ab44d906738426');
};

/**
   * _FORCE_CINEMATIC_DEATH_CAM_ON_PED
   * Used for DUELING_MANAGE_DEATH_CAMERA - Initializing death camera
   * Params: targetPed = death cam focuses on it
   *
   * @param {number} targetPed
   * @return {void}
   */
global.ForceCinematicDeathCamOnPed = function (targetPed) {
  return Citizen.invokeNative('0xe3639db78b3b5400', targetPed);
};

/**
   * _FORCE_FIRST_PERSON_CAM_THIS_FRAME
   * Returns true if first person camera is active in saloon1.ysc
   *
  
   * @return {boolean}
   */
global.ForceFirstPersonCamThisFrame = function () {
  return Citizen.invokeNative('0x90da5ba5c2635416', _r);
};

/**
   * _FORCE_LETTER_BOX_THIS_UPDATE
   *
  
   * @return {void}
   */
global.ForceLetterBoxThisUpdate = function () {
  return Citizen.invokeNative('0xc64abc0676af262b');
};

/**
   * _FORCE_THIRD_PERSON_CAM_FAR_THIS_FRAME
   * Forces camera position to furthest 3rd person
   *
  
   * @return {void}
   */
global.ForceThirdPersonCamFarThisFrame = function () {
  return Citizen.invokeNative('0x1cfb749ad4317bde');
};

/**
   * _FORCE_THIRD_PERSON_CAM_THIS_FRAME
   * Forces camera position to second furthest 3rd person
   *
  
   * @return {void}
   */
global.ForceThirdPersonCamThisFrame = function () {
  return Citizen.invokeNative('0x8370d34bd2e60b73');
};

/**
   * _FREEZE_GAMEPLAY_CAM_THIS_FRAME
   *
  
   * @return {void}
   */
global.FreezeGameplayCamThisFrame = function () {
  return Citizen.invokeNative('0x027cab2c3af27010');
};

/**
   * _GET_PHOTO_MODE_DOF
   *
  
   * @return {number}
   */
global.GetPhotoModeDof = function () {
  return Citizen.invokeNative('0x4653a741d17f2cd0', _r, _rf);
};

/**
   * _GET_PHOTO_MODE_FOCAL_LENGTH
   *
  
   * @return {number}
   */
global.GetPhotoModeFocalLength = function () {
  return Citizen.invokeNative('0x2533baffbe737e54', _r, _rf);
};

/**
   * _GET_PHOTO_MODE_FOCUS_DISTANCE
   *
  
   * @return {number}
   */
global.GetPhotoModeFocusDistance = function () {
  return Citizen.invokeNative('0x18fc740ffdcd7454', _r, _rf);
};

/**
   * _IS_ANIM_SCENE_CAM_ACTIVE
   * Only used in R* Script camera_photomode
   *
  
   * @return {boolean}
   */
global.IsAnimSceneCamActive = function () {
  return Citizen.invokeNative('0x20389408f0e93b9a', _r);
};

/**
   * _IS_CAMERA_AVAILABLE
   *
   * @param {string | number} cameraDictionary
   * @return {boolean}
   */
global.IsCameraAvailable = function (cameraDictionary) {
  return Citizen.invokeNative('0x927b810e43e99932', _ts(cameraDictionary), _r);
};

/**
   * _IS_CAM_DATA_DICT_LOADED
   *
   * @param {string | number} cameraDictionary
   * @return {boolean}
   */
global.IsCamDataDictLoaded = function (cameraDictionary) {
  return Citizen.invokeNative('0xdd0b7c5ae58f721d', _ts(cameraDictionary), _r);
};

/**
   * _IS_CAM_PHOTOFX_RUNNING
   *
  
   * @return {boolean}
   */
global.IsCamPhotofxRunning = function () {
  return Citizen.invokeNative('0xa14d5fe82bcb1d9e', _r);
};

/**
   * _IS_CINEMATIC_CAM_LOCATION_LOADED
   *
   * @param {string | number} sLocationDictName
   * @return {boolean}
   */
global.IsCinematicCamLocationLoaded = function (sLocationDictName) {
  return Citizen.invokeNative('0xaa235e2f2c09e952', _ts(sLocationDictName), _r);
};

/**
   * _IS_CINEMATIC_CAM_LOCATION_LOADED_2
   * Checks data related to Cinematic Cam Locations, if the check fails, the location is being loaded using 0x1B3C2D961F5FC0E1.
   *
   * @param {string | number} locationDictName
   * @return {boolean}
   */
global.IsCinematicCamLocationLoaded_2 = function (locationDictName) {
  return Citizen.invokeNative('0x595550376b7ea230', _ts(locationDictName), _r);
};

/**
   * _IS_IN_CINEMATIC_MODE
   *
  
   * @return {boolean}
   */
global.IsInCinematicMode = function () {
  return Citizen.invokeNative('0x74f1d22efa71fab8', _r);
};

/**
   * _IS_IN_FULL_FIRST_PERSON_MODE
   * Returns true if player is in first person
   *
  
   * @return {boolean}
   */
global.IsInFullFirstPersonMode = function () {
  return Citizen.invokeNative('0xd1ba66940e94c547', _r);
};

/**
   * _LOAD_CAMERA_DATA_DICT
   *
   * @param {string | number} cameraDictionary
   * @return {void}
   */
global.LoadCameraDataDict = function (cameraDictionary) {
  return Citizen.invokeNative('0x6a4d224fc7643941', _ts(cameraDictionary));
};

/**
   * _LOAD_CINEMATIC_CAM_LOCATION
   *
   * @param {string | number} locationDictName
   * @return {void}
   */
global.LoadCinematicCamLocation = function (locationDictName) {
  return Citizen.invokeNative('0x1b3c2d961f5fc0e1', _ts(locationDictName));
};

/**
   * _PAUSE_CAMERA_FOCUS
   *
   * @param {number} cam
   * @param {boolean} pause
   * @return {void}
   */
global.PauseCameraFocus = function (cam, pause) {
  return Citizen.invokeNative('0x9f97e85ec142255e', cam, pause);
};

/**
   * _REACTIVATE_PED_HEADSHOT_EXECUTE_SLOWCAM
   * Used to enable headshot kill replay when you headshot set ped.
   * Params: p1 seems to be 0 or 1 in R* Scripts
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.ReactivatePedHeadshotExecuteSlowcam = function (ped, p1) {
  return Citizen.invokeNative('0x986f7a51ee3e1f92', ped, p1);
};

/**
   * _REQUEST_LETTER_BOX_NOW
   * Creates Cinematic Black Bars (at top and bottom)
   * Disable instantly: false/false, Enable instantly: true/true
   *
   * @param {boolean} p0
   * @param {boolean} p1
   * @return {void}
   */
global.RequestLetterBoxNow = function (p0, p1) {
  return Citizen.invokeNative('0x69d65e89ffd72313', p0, p1);
};

/**
   * _REQUEST_LETTER_BOX_OVERTIME
   *
   * @param {number} p0
   * @param {number} p1
   * @param {boolean} p2
   * @param {number} p3
   * @param {boolean} p4
   * @param {boolean} p5
   * @return {void}
   */
global.RequestLetterBoxOvertime = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xe296208c273bd7f0', p0, p1, p2, p3, p4, p5);
};

/**
   * _SET_CAM_FOCUS_DISTANCE
   *
   * @param {number} cam
   * @param {number} distance
   * @return {void}
   */
global.SetCamFocusDistance = function (cam, distance) {
  return Citizen.invokeNative('0x11f32bb61b756732', cam, _fv(distance));
};

/**
   * _SET_GAMEPLAY_CAM_INITIAL_HEADING
   *
   * @param {number} camInitialHeading
   * @return {void}
   */
global.SetGameplayCamInitialHeading = function (camInitialHeading) {
  return Citizen.invokeNative('0x6c1053c433a573cf', _fv(camInitialHeading));
};

/**
   * _SET_GAMEPLAY_CAM_INITIAL_PITCH
   *
   * @param {number} camInitialPitch
   * @return {void}
   */
global.SetGameplayCamInitialPitch = function (camInitialPitch) {
  return Citizen.invokeNative('0x449995ea846d3fc2', _fv(camInitialPitch));
};

/**
   * _SET_GAMEPLAY_CAM_INITIAL_ZOOM
   * Used in Script Function SHOP_CAMERA_SUPPORT_START_NEW_ORBIT
   *
   * @param {number} camInitialZoom
   * @return {void}
   */
global.SetGameplayCamInitialZoom = function (camInitialZoom) {
  return Citizen.invokeNative('0xbcda0ba8762facb9', _fv(camInitialZoom));
};

/**
   * _SET_START_CINEMATIC_DEATH_CAM
   * Used for DUELING_MANAGE_DEATH_CAMERA - Initializing death camera
   * _SET_P* - _SET_S*
   *
   * @param {boolean} p0
   * @return {void}
   */
global.SetStartCinematicDeathCam = function (p0) {
  return Citizen.invokeNative('0x6e969927cf632608', p0);
};

/**
   * _START_CAMERA_ORBIT
   * [SHOP_CAMERA_SUPPORT_START_NEW_ORBIT]
   * p0: struct<32> |*256*|
   *
   * @param {DataView} p0
   * @return {void}
   */
global.StartCameraOrbit = function (p0) {
  return Citizen.invokeNative('0x65b205bf30c13ddb', p0);
};

/**
   * _STOP_GAMEPLAY_CAM_SHAKING_WITH_NAME
   * script_rel: DRUNK_SHAKE, REINFORCED_LASSO_STRUGGLE_SHAKE, CORRECTOR_SHAKE, MINIGAME_BOUNTY_SHAKE, HAND_SHAKE, MINIGAME_TRAIN_SHAKE
   * script_mp_rel: DRUNK_SHAKE, REINFORCED_LASSO_STRUGGLE_SHAKE
   * _STOP_GAMEPLAY_CAM* - _STOP_I*
   *
   * @param {string | number} shakeName
   * @param {boolean} p1
   * @return {void}
   */
global.StopGameplayCamShakingWithName = function (shakeName, p1) {
  return Citizen.invokeNative('0x4285804fd65d8066', _ts(shakeName), p1);
};

/**
   * _TRIGGER_MISSION_FAILED_CAM
   *
  
   * @return {void}
   */
global.TriggerMissionFailedCam = function () {
  return Citizen.invokeNative('0x9a92c06acbaf9731');
};

/**
   * _UNLOAD_CAMERA_DATA_DICT
   *
   * @param {string | number} cameraDictionary
   * @return {void}
   */
global.UnloadCameraDataDict = function (cameraDictionary) {
  return Citizen.invokeNative('0x798be43c9393632b', _ts(cameraDictionary));
};

/**
   * _UNLOAD_CINEMATIC_CAMERA_LOCATION
   *
   * @param {string | number} dictionaryName
   * @return {void}
   */
global.UnloadCinematicCameraLocation = function (dictionaryName) {
  return Citizen.invokeNative('0x2412216fcc7b4e3e', _ts(dictionaryName));
};

/**
   * ADD_TO_CLOCK_TIME
   *
   * @param {number} hours
   * @param {number} minutes
   * @param {number} seconds
   * @return {void}
   */
global.AddToClockTime = function (hours, minutes, seconds) {
  return Citizen.invokeNative('0xab7c251c7701d336', hours, minutes, seconds);
};

/**
   * ADVANCE_CLOCK_TIME_TO
   *
   * @param {number} hour
   * @param {number} minute
   * @param {number} second
   * @return {void}
   */
global.AdvanceClockTimeTo = function (hour, minute, second) {
  return Citizen.invokeNative('0x0184750ae88d0b1d', hour, minute, second);
};

/**
   * GET_CLOCK_DAY_OF_MONTH
   *
  
   * @return {number}
   */
global.GetClockDayOfMonth = function () {
  return Citizen.invokeNative('0xdf2fd796c54480a5', _r, _ri);
};

/**
   * GET_CLOCK_DAY_OF_WEEK
   * Gets the current day of the week.
   * 
   * 0: Sunday
   * 1: Monday
   * 2: Tuesday
   * 3: Wednesday
   * 4: Thursday
   * 5: Friday
   * 6: Saturday
   *
  
   * @return {number}
   */
global.GetClockDayOfWeek = function () {
  return Citizen.invokeNative('0x4dd02d4c7fb30076', _r, _ri);
};

/**
   * GET_CLOCK_HOURS
   * Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)
   *
  
   * @return {number}
   */
global.GetClockHours = function () {
  return Citizen.invokeNative('0xc82cf208c2b19199', _r, _ri);
};

/**
   * GET_CLOCK_MINUTES
   * Gets the current ingame clock minute.
   *
  
   * @return {number}
   */
global.GetClockMinutes = function () {
  return Citizen.invokeNative('0x4e162231b823dbbf', _r, _ri);
};

/**
   * GET_CLOCK_MONTH
   *
  
   * @return {number}
   */
global.GetClockMonth = function () {
  return Citizen.invokeNative('0x2d44e8fc79eab1ac', _r, _ri);
};

/**
   * GET_CLOCK_SECONDS
   * Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in RDR is only 48 minutes in real life.
   *
  
   * @return {number}
   */
global.GetClockSeconds = function () {
  return Citizen.invokeNative('0xb6101abe62b5f080', _r, _ri);
};

/**
   * GET_CLOCK_YEAR
   *
  
   * @return {number}
   */
global.GetClockYear = function () {
  return Citizen.invokeNative('0xe136dca28c4a48ba', _r, _ri);
};

/**
   * GET_MILLISECONDS_PER_GAME_MINUTE
   *
  
   * @return {number}
   */
global.GetMillisecondsPerGameMinute = function () {
  return Citizen.invokeNative('0xe4cb8d126501ec52', _r, _ri);
};

/**
   * GET_POSIX_TIME
   *
  
   * @return {[number, number, number, number, number, number]}
   */
global.GetPosixTime = function () {
  return Citizen.invokeNative('0x90338ad4a784e455', _i, _i, _i, _i, _i, _i);
};

/**
   * PAUSE_CLOCK
   *
   * @param {boolean} toggle
   * @param {any} unused
   * @return {void}
   */
global.PauseClock = function (toggle, unused) {
  return Citizen.invokeNative('0x4d1a590c92bf377e', toggle, unused);
};

/**
   * SET_CLOCK_DATE
   *
   * @param {number} day
   * @param {number} month
   * @param {number} year
   * @return {void}
   */
global.SetClockDate = function (day, month, year) {
  return Citizen.invokeNative('0x02ad3092562941e2', day, month, year);
};

/**
   * SET_CLOCK_TIME
   * SET_CLOCK_TIME(12, 34, 56);
   *
   * @param {number} hour
   * @param {number} minute
   * @param {number} second
   * @return {void}
   */
global.SetClockTime = function (hour, minute, second) {
  return Citizen.invokeNative('0x3a52c59ffb2deed8', hour, minute, second);
};

/**
   * _ADD_TIME_TO_DATE_TIME
   *
   * @param {DataView} inDateTime
   * @param {DataView} timeToAdd
   * @param {DataView} outDateTime
   * @return {void}
   */
global.AddTimeToDateTime = function (inDateTime, timeToAdd, outDateTime) {
  return Citizen.invokeNative('0x28eeace9b43d9597', inDateTime, timeToAdd, outDateTime);
};

/**
   * _GET_POSIX_TIME_STRUCT
   * Same as GET_POSIX_TIME except that it takes a single pointer to a struct.
   *
   * @param {DataView} outTime
   * @return {void}
   */
global.GetPosixTimeStruct = function (outTime) {
  return Citizen.invokeNative('0x86a68e84e5884951', outTime);
};

/**
   * _GET_SECONDS_SINCE_BASE_YEAR
   * Base year is 1898.
   *
  
   * @return {number}
   */
global.GetSecondsSinceBaseYear = function () {
  return Citizen.invokeNative('0x78fd8be812e436b2', _r, _ri);
};

/**
   * _PAUSE_CLOCK_THIS_FRAME
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.PauseClockThisFrame = function (toggle) {
  return Citizen.invokeNative('0x568d998a9ff96774', toggle);
};

/**
   * _SET_MILLISECONDS_PER_GAME_MINUTE
   *
   * @param {number} ms
   * @return {void}
   */
global.SetMillisecondsPerGameMinute = function (ms) {
  return Citizen.invokeNative('0x04eedb3848dacf68', ms);
};

/**
   * COLLECTABLE_CATEGORY_SET_HAS_RECEIVED_LIST
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.CollectableCategorySetHasReceivedList = function (p0, p1, p2) {
  return Citizen.invokeNative('0x0b6d275d2f242e17', p0, p1, p2);
};

/**
   * COLLECTABLE_GET_CATEGORY_ITEM_SET_BUY_AWARD
   * collectableCategory: ANTIQUE_BOTTLES, BIRD_EGGS, ARROWHEADS, FAMILY_HEIRLOOMS, WILD_FLOWERS, COINS, LOST_JEWELRY_RINGS, LOST_JEWELRY_BRACELETS, LOST_JEWELRY_EARRINGS, LOST_JEWELRY_NECKLACES, TAROT_CARDS_CUPS, TAROT_CARDS_PENTACLES, TAROT_CARDS_SWORDS, TAROT_CARDS_WANDS, FOSSILS_COMMON, FOSSILS_UNCOMMON, FOSSILS_RARE
   *
   * @param {number} collectableCategory
   * @param {number} p1
   * @return {number}
   */
global.CollectableGetCategoryItemSetBuyAward = function (collectableCategory, p1) {
  return Citizen.invokeNative('0xcc644bc1dd655269', _ch(collectableCategory), _ch(p1), _r, _ri);
};

/**
   * _0x33825A7388A6B9F6
   *
   * @param {number} collectableCategory
   * @param {number} p1
   * @return {number}
   */
global.N_0x33825A7388A6B9F6 = function (collectableCategory, p1) {
  return Citizen.invokeNative('0x33825a7388a6b9f6', _ch(collectableCategory), p1, _r, _ri);
};

/**
   * _0x3FD91F1A148A0468
   *
   * @param {number} collectableCategory
   * @param {number} p1
   * @return {any}
   */
global.N_0x3FD91F1A148A0468 = function (collectableCategory, p1) {
  return Citizen.invokeNative('0x3fd91f1a148a0468', _ch(collectableCategory), p1, _r);
};

/**
   * _0x61BEFBA3CE7A3BC8
   * Params: collectableCategory = WEEKLY_COLLECTABLES
   *
   * @param {number} collectableCategory
   * @param {number} p1
   * @return {boolean}
   */
global.N_0x61BEFBA3CE7A3BC8 = function (collectableCategory, p1) {
  return Citizen.invokeNative('0x61befba3ce7a3bc8', _ch(collectableCategory), p1, _r);
};

/**
   * _0x6BAB7ACED1017204
   * Params: collectableCategory = WEEKLY_COLLECTABLES
   *
   * @param {number} collectableCategory
   * @param {number} p1
   * @return {boolean}
   */
global.N_0x6BAB7ACED1017204 = function (collectableCategory, p1) {
  return Citizen.invokeNative('0x6bab7aced1017204', _ch(collectableCategory), p1, _r);
};

/**
   * _0x755901C7598B97BC
   * Returns p2 (index?) for 0xB9020EC89C07DF04
   *
   * @param {number} collectableCategory
   * @param {number} p1
   * @return {number}
   */
global.N_0x755901C7598B97BC = function (collectableCategory, p1) {
  return Citizen.invokeNative('0x755901c7598b97bc', _ch(collectableCategory), p1, _r, _ri);
};

/**
   * _0x775FA1FC87666847
   *
   * @param {number} collectableCategory
   * @param {number} p1
   * @return {any}
   */
global.N_0x775FA1FC87666847 = function (collectableCategory, p1) {
  return Citizen.invokeNative('0x775fa1fc87666847', _ch(collectableCategory), p1, _r);
};

/**
   * _0x93F2E7B5DB85657B
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x93F2E7B5DB85657B = function (p0, p1) {
  return Citizen.invokeNative('0x93f2e7b5db85657b', p0, p1, _r);
};

/**
   * _0x9ADEE485726025D4
   * Params: collectableCategory = WEEKLY_COLLECTABLES
   *
   * @param {number} collectableCategory
   * @return {number}
   */
global.N_0x9ADEE485726025D4 = function (collectableCategory) {
  return Citizen.invokeNative('0x9adee485726025d4', _ch(collectableCategory), _r, _ri);
};

/**
   * _0xB9020EC89C07DF04
   * Accepts more hashes than 0xCC644BC1DD655269
   * Such as: CAROLINA_PARAKEETS, DINO_BONES, EGRET_FEATHERS, ...
   *
   * @param {number} collectableCategory
   * @param {number} p1
   * @param {number} index
   * @return {any}
   */
global.N_0xB9020EC89C07DF04 = function (collectableCategory, p1, index) {
  return Citizen.invokeNative('0xb9020ec89c07df04', _ch(collectableCategory), p1, index, _r);
};

/**
   * _0xC3CA424E1F12ED0C
   *
   * @param {number} collectableCategory
   * @param {number} p1
   * @return {any}
   */
global.N_0xC3CA424E1F12ED0C = function (collectableCategory, p1) {
  return Citizen.invokeNative('0xc3ca424e1f12ed0c', _ch(collectableCategory), p1, _r);
};

/**
   * _0xC4AC39719C1BB559
   *
   * @param {number} collectableCategory
   * @param {any} p1
   * @return {any}
   */
global.N_0xC4AC39719C1BB559 = function (collectableCategory, p1) {
  return Citizen.invokeNative('0xc4ac39719c1bb559', _ch(collectableCategory), p1, _r);
};

/**
   * _0xD1806FB3EDED6D11
   *
   * @param {number} collectableCategory
   * @param {number} p1
   * @return {any}
   */
global.N_0xD1806FB3EDED6D11 = function (collectableCategory, p1) {
  return Citizen.invokeNative('0xd1806fb3eded6d11', _ch(collectableCategory), p1, _r);
};

/**
   * _0xD297F68928A58130
   *
   * @param {number} collectableCategory
   * @param {number} p1
   * @return {any}
   */
global.N_0xD297F68928A58130 = function (collectableCategory, p1) {
  return Citizen.invokeNative('0xd297f68928a58130', _ch(collectableCategory), p1, _r);
};

/**
   * _COLLECTABLE_SET_ITEM_HASH_DISCOVERED
   * Returns discoveredItemHash
   * _COLLECTABLE_C* - _COLLECTABLE_G*
   *
   * @param {number} collectableItem
   * @return {number}
   */
global.CollectableSetItemHashDiscovered = function (collectableItem) {
  return Citizen.invokeNative('0xec3959e9950bf56b', _ch(collectableItem), _r, _ri);
};

/**
   * _0xFC832B06127D8E99
   *
   * @param {number} collectableCategory
   * @param {number} p1
   * @return {boolean}
   */
global.N_0xFC832B06127D8E99 = function (collectableCategory, p1) {
  return Citizen.invokeNative('0xfc832b06127d8e99', _ch(collectableCategory), p1, _r);
};

/**
   * _COLLECTABLE_CATEGORY_GET_NUM_COLLECTABLES
   *
   * @param {number} collectableCategory
   * @param {number} collectableSubcategory
   * @return {number}
   */
global.CollectableCategoryGetNumCollectables = function (collectableCategory, collectableSubcategory) {
  return Citizen.invokeNative('0x62cab7db62ead434', _ch(collectableCategory), _ch(collectableSubcategory), _r, _ri);
};

/**
   * _COLLECTABLE_CATEGORY_GET_NUM_FOUND
   *
   * @param {number} collectableCategory
   * @param {number} collectableSubcategory
   * @return {number}
   */
global.CollectableCategoryGetNumFound = function (collectableCategory, collectableSubcategory) {
  return Citizen.invokeNative('0x5461c821d00fe15a', _ch(collectableCategory), _ch(collectableSubcategory), _r, _ri);
};

/**
   * _COLLECTABLE_CATEGORY_GET_NUM_TURNED_IN
   *
   * @param {number} collectableCategory
   * @param {number} collectableSubcategory
   * @return {number}
   */
global.CollectableCategoryGetNumTurnedIn = function (collectableCategory, collectableSubcategory) {
  return Citizen.invokeNative('0x3a65f4844913a047', _ch(collectableCategory), _ch(collectableSubcategory), _r, _ri);
};

/**
   * _COLLECTABLE_CATEGORY_GET_TOAST_TEXTURE_DICTIONARY
   *
   * @param {number} collectableCategory
   * @param {number} collectableSubcategory
   * @return {number}
   */
global.CollectableCategoryGetToastTextureDictionary = function (collectableCategory, collectableSubcategory) {
  return Citizen.invokeNative('0x13aaecda43318bfe', _ch(collectableCategory), _ch(collectableSubcategory), _r, _ri);
};

/**
   * _COLLECTABLE_CATEGORY_GET_TOAST_TEXTURE_NAME
   *
   * @param {number} collectableCategory
   * @param {number} collectableSubcategory
   * @return {number}
   */
global.CollectableCategoryGetToastTextureName = function (collectableCategory, collectableSubcategory) {
  return Citizen.invokeNative('0xd52d20b0c76bb26d', _ch(collectableCategory), _ch(collectableSubcategory), _r, _ri);
};

/**
   * _COLLECTABLE_GET_CATEGORY
   * Used in Script Function NET_COLLECTABLES_HANDLE_ITEM_ADDED
   * Returns collectableCategory Hash
   *
   * @param {number} collectableItem
   * @return {number}
   */
global.CollectableGetCategory = function (collectableItem) {
  return Citizen.invokeNative('0x725d52f21a5e9ef6', _ch(collectableItem), _r, _ri);
};

/**
   * _COLLECTABLE_GET_COLLECTABLE_ITEM_HASH
   *
   * @param {number} index
   * @param {number} collectableCategory
   * @param {number} collectableSubcategory
   * @return {number}
   */
global.CollectableGetCollectableItemHash = function (index, collectableCategory, collectableSubcategory) {
  return Citizen.invokeNative('0x126cbebba46693cf', index, _ch(collectableCategory), _ch(collectableSubcategory), _r, _ri);
};

/**
   * _COLLECTABLE_GET_IPL
   *
   * @param {number} collectableItem
   * @return {number}
   */
global.CollectableGetIpl = function (collectableItem) {
  return Citizen.invokeNative('0x922a79cd4a033b8b', _ch(collectableItem), _r, _ri);
};

/**
   * _COLLECTABLE_GET_NUM_FOUND
   *
   * @param {number} collectableItem
   * @return {number}
   */
global.CollectableGetNumFound = function (collectableItem) {
  return Citizen.invokeNative('0xf83d3dda4d3c8169', _ch(collectableItem), _r, _ri);
};

/**
   * _COLLECTABLE_GET_NUM_TURNED_IN
   *
   * @param {number} collectableItem
   * @return {number}
   */
global.CollectableGetNumTurnedIn = function (collectableItem) {
  return Citizen.invokeNative('0x9a03f22ad446eeac', _ch(collectableItem), _r, _ri);
};

/**
   * _COLLECTABLE_GET_PLACEMENT_LOCATION
   *
   * @param {number} collectableItem
   * @return {Vector3}
   */
global.CollectableGetPlacementLocation = function (collectableItem) {
  return Citizen.invokeNative('0x1f1dd794908c2bfa', _ch(collectableItem), _r, _rv);
};

/**
   * _COLLECTABLE_GET_SUBCATEGORY
   *
   * @param {number} collectableItem
   * @return {number}
   */
global.CollectableGetSubcategory = function (collectableItem) {
  return Citizen.invokeNative('0x6052b4de6657684f', _ch(collectableItem), _r, _ri);
};

/**
   * _COLLECTABLE_INCREMENT_NUM_FOUND
   *
   * @param {number} collectableItem
   * @param {number} amount
   * @return {void}
   */
global.CollectableIncrementNumFound = function (collectableItem, amount) {
  return Citizen.invokeNative('0x3ea62e56f386c997', _ch(collectableItem), amount);
};

/**
   * _COLLECTABLE_INCREMENT_NUM_TURNED_IN
   *
   * @param {number} collectableItem
   * @param {number} amount
   * @return {void}
   */
global.CollectableIncrementNumTurnedIn = function (collectableItem, amount) {
  return Citizen.invokeNative('0x398fab9c96a81924', _ch(collectableItem), amount);
};

/**
   * _0x0A8FD91EDE7B328A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x0A8FD91EDE7B328A = function (p0, p1) {
  return Citizen.invokeNative('0x0a8fd91ede7b328a', p0, p1);
};

/**
   * _0x0C6A00DAE896614C
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x0C6A00DAE896614C = function (p0, p1) {
  return Citizen.invokeNative('0x0c6a00dae896614c', p0, p1);
};

/**
   * _0x0DE02DA3C0F66955
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x0DE02DA3C0F66955 = function (ped, p1) {
  return Citizen.invokeNative('0x0de02da3c0f66955', ped, _ch(p1));
};

/**
   * _0x2917E634206B9E17
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x2917E634206B9E17 = function (ped, p1) {
  return Citizen.invokeNative('0x2917e634206b9e17', ped, p1);
};

/**
   * _0x3CAAD93FA5B9579A
   *
   * @param {number} volume
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.N_0x3CAAD93FA5B9579A = function (volume, p1, p2) {
  return Citizen.invokeNative('0x3caad93fa5b9579a', volume, p1, p2);
};

/**
   * _0x61BDA07407754A5C
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x61BDA07407754A5C = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x61bda07407754a5c', p0, p1, p2, p3);
};

/**
   * _0x722FBE08EF5B87BD
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {any}
   */
global.N_0x722FBE08EF5B87BD = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x722fbe08ef5b87bd', p0, p1, p2, p3, p4, _r);
};

/**
   * _0x7274F84B1501B523
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x7274F84B1501B523 = function (p0) {
  return Citizen.invokeNative('0x7274f84b1501b523', p0);
};

/**
   * _0x8FB98B719AA0075A
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0x8FB98B719AA0075A = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x8fb98b719aa0075a', p0, p1, p2, p3, p4);
};

/**
   * _0x991E3346D788F20F
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x991E3346D788F20F = function (p0, p1) {
  return Citizen.invokeNative('0x991e3346d788f20f', p0, p1);
};

/**
   * _0x9C902084F48D2E6C
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x9C902084F48D2E6C = function (p0) {
  return Citizen.invokeNative('0x9c902084f48d2e6c', p0);
};

/**
   * _0xA079FF7CFB9AC8BD
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xA079FF7CFB9AC8BD = function (p0, p1) {
  return Citizen.invokeNative('0xa079ff7cfb9ac8bd', p0, p1);
};

/**
   * _0xBF6583E926D13890
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xBF6583E926D13890 = function (p0, p1) {
  return Citizen.invokeNative('0xbf6583e926d13890', p0, p1);
};

/**
   * _0xCE27824B5968B79A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xCE27824B5968B79A = function (p0, p1) {
  return Citizen.invokeNative('0xce27824b5968b79a', p0, p1);
};

/**
   * _0xD428C3F92FC3F6F8
   *
   * @param {number} ped
   * @param {string | number} p1
   * @return {void}
   */
global.N_0xD428C3F92FC3F6F8 = function (ped, p1) {
  return Citizen.invokeNative('0xd428c3f92fc3f6f8', ped, _ts(p1));
};

/**
   * _0xD55A871E1CE3481B
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0xD55A871E1CE3481B = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xd55a871e1ce3481b', p0, p1, p2, p3);
};

/**
   * _0xD730281E496621FB
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0xD730281E496621FB = function (ped, p1) {
  return Citizen.invokeNative('0xd730281e496621fb', ped, _ch(p1));
};

/**
   * _0xD747979C053EFA7A
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xD747979C053EFA7A = function (p0) {
  return Citizen.invokeNative('0xd747979c053efa7a', p0);
};

/**
   * _0xF06CBB8CCCA823C0
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xF06CBB8CCCA823C0 = function (p0, p1) {
  return Citizen.invokeNative('0xf06cbb8ccca823c0', p0, p1);
};

/**
   * _ACTIVATE_COMPANION_ANALYSIS
   *
   * @param {number} groupId
   * @return {void}
   */
global.ActivateCompanionAnalysis = function (groupId) {
  return Citizen.invokeNative('0xcbd9ec60495c728c', groupId);
};

/**
   * _ADD_COMPANION_FLAG
   * Used for Script Function NET_FETCH_CLIENT_ACTIVATE_COMAPNION_ANALYSIS: Hiding! Ped
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.AddCompanionFlag = function (ped, p1) {
  return Citizen.invokeNative('0xdeb369f6ad168c58', ped, p1);
};

/**
   * _DEACTIVATE_COMPANION_ANALYSIS
   *
   * @param {number} groupId
   * @return {void}
   */
global.DeactivateCompanionAnalysis = function (groupId) {
  return Citizen.invokeNative('0x72b7f65f11fc8896', groupId);
};

/**
   * _GET_COMPANION_ACTIVITY
   * enum _0x18F77396
   *
   * @param {number} groupId
   * @return {number}
   */
global.GetCompanionActivity = function (groupId) {
  return Citizen.invokeNative('0xb7e0590c86e1711f', groupId, _r, _ri);
};

/**
   * _REMOVE_COMPANION_FLAG
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.RemoveCompanionFlag = function (ped, p1) {
  return Citizen.invokeNative('0x1740e3dee0ae4d27', ped, p1);
};

/**
   * _SET_COMPANION_ACTIVITY
   * enum _0x18F77396
   *
   * @param {number} groupId
   * @param {number} activity
   * @return {void}
   */
global.SetCompanionActivity = function (groupId, activity) {
  return Citizen.invokeNative('0x0f1cd8ca9e65d5f6', groupId, _ch(activity));
};

/**
   * _0x29C733459A9011EB
   * nullsub, doesn't do anything
   *
   * @param {number} p0
   * @param {string | number} p1
   * @return {void}
   */
global.N_0x29C733459A9011EB = function (p0, p1) {
  return Citizen.invokeNative('0x29c733459a9011eb', _ch(p0), _ts(p1));
};

/**
   * _0x74BCCEB233AD95B2
   * nullsub, doesn't do anything
   *
   * @param {number} p0
   * @param {number} p1
   * @return {void}
   */
global.N_0x74BCCEB233AD95B2 = function (p0, p1) {
  return Citizen.invokeNative('0x74bcceb233ad95b2', _ch(p0), _ch(p1));
};

/**
   * _0x7AF1BB4504EA5ED9
   * Hardcoded to return false.
   *
  
   * @return {boolean}
   */
global.N_0x7AF1BB4504EA5ED9 = function () {
  return Citizen.invokeNative('0x7af1bb4504ea5ed9', _r);
};

/**
   * _0xB6FD96420C0126A1
   * nullsub, doesn't do anything
   *
   * @param {number} p0
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xB6FD96420C0126A1 = function (p0, p1) {
  return Citizen.invokeNative('0xb6fd96420c0126a1', _ch(p0), p1);
};

/**
   * _0xCCB4635A071FB62D
   * nullsub, doesn't do anything
   *
  
   * @return {void}
   */
global.N_0xCCB4635A071FB62D = function () {
  return Citizen.invokeNative('0xccb4635a071fb62d');
};

/**
   * COMPENDIUM_ANIMAL_GET_SAMPLE_INVENTORY_ITEM
   *
   * @param {number} compendiumEntry
   * @return {any}
   */
global.CompendiumAnimalGetSampleInventoryItem = function (compendiumEntry) {
  return Citizen.invokeNative('0x4e4acae1c671a9da', compendiumEntry, _r);
};

/**
   * COMPENDIUM_ANIMAL_HAS_SAMPLE
   *
   * @param {number} compendiumEntry
   * @return {boolean}
   */
global.CompendiumAnimalHasSample = function (compendiumEntry) {
  return Citizen.invokeNative('0x6fc24625e4fcac27', compendiumEntry, _r);
};

/**
   * COMPENDIUM_ANIMAL_HAS_STAMP
   *
   * @param {number} compendiumEntry
   * @return {boolean}
   */
global.CompendiumAnimalHasStamp = function (compendiumEntry) {
  return Citizen.invokeNative('0xbcf569fc32fff456', compendiumEntry, _r);
};

/**
   * COMPENDIUM_ANIMAL_OBSERVED_BY_STAT_NAME
   *
   * @param {number} animalType
   * @param {boolean} disableCompendiumToast
   * @return {void}
   */
global.CompendiumAnimalObservedByStatName = function (animalType, disableCompendiumToast) {
  return Citizen.invokeNative('0x725d52f26a5e9e10', _ch(animalType), disableCompendiumToast);
};

/**
   * COMPENDIUM_ANIMAL_SET_DISCOVERED
   *
   * @param {number} compendiumEntry
   * @return {void}
   */
global.CompendiumAnimalSetDiscovered = function (compendiumEntry) {
  return Citizen.invokeNative('0x67f35c7c9f2bdcfe', compendiumEntry);
};

/**
   * COMPENDIUM_FISH_CAUGHT
   *
   * @param {number} ped
   * @param {number} category
   * @return {void}
   */
global.CompendiumFishCaught = function (ped, category) {
  return Citizen.invokeNative('0x725d52f21a5e9e00', ped, _ch(category));
};

/**
   * COMPENDIUM_FISH_GET_LURE_SUITABILITY_BY_STAT_ITEM
   *
   * @param {number} animalType
   * @param {number} baitType
   * @return {number}
   */
global.CompendiumFishGetLureSuitabilityByStatItem = function (animalType, baitType) {
  return Citizen.invokeNative('0x725d52f21a5e9e81', _ch(animalType), _ch(baitType), _r, _ri);
};

/**
   * COMPENDIUM_GANG_AMBUSH_SURVIVED
   *
   * @param {any} p0
   * @return {void}
   */
global.CompendiumGangAmbushSurvived = function (p0) {
  return Citizen.invokeNative('0x725d52f21a5e9e04', p0);
};

/**
   * COMPENDIUM_GANG_BOUNTY_CAPTURED
   *
   * @param {any} p0
   * @return {void}
   */
global.CompendiumGangBountyCaptured = function (p0) {
  return Citizen.invokeNative('0x725d52f21a5e9e06', p0);
};

/**
   * COMPENDIUM_GANG_CAMP_FOUND
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.CompendiumGangCampFound = function (p0, p1) {
  return Citizen.invokeNative('0x725d52f21a5e9e03', p0, p1);
};

/**
   * COMPENDIUM_GANG_ENCOUNTERED
   *
   * @param {any} p0
   * @return {void}
   */
global.CompendiumGangEncountered = function (p0) {
  return Citizen.invokeNative('0x725d52f21a5e9e05', p0);
};

/**
   * COMPENDIUM_GANG_HIDEOUT_FOUND
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.CompendiumGangHideoutFound = function (p0, p1) {
  return Citizen.invokeNative('0x725d52f21a5e9e08', p0, p1);
};

/**
   * COMPENDIUM_GANG_MEMBER_KILLED
   *
   * @param {any} p0
   * @return {void}
   */
global.CompendiumGangMemberKilled = function (p0) {
  return Citizen.invokeNative('0x725d52f21a5e9e07', p0);
};

/**
   * COMPENDIUM_GET_ENTRY_BY_INDEX_IN_SUBCATEGORY
   *
   * @param {number} category
   * @param {number} subcategory
   * @param {number} count
   * @return {number}
   */
global.CompendiumGetEntryByIndexInSubcategory = function (category, subcategory, count) {
  return Citizen.invokeNative('0x5ceb63b2e3d9895f', _ch(category), _ch(subcategory), count, _r, _ri);
};

/**
   * COMPENDIUM_GET_ENTRY_BY_PED_INDEX
   *
   * @param {number} category
   * @param {number} ped
   * @return {number}
   */
global.CompendiumGetEntryByPedIndex = function (category, ped) {
  return Citizen.invokeNative('0x1cfa0219d8e1cf25', _ch(category), ped, _r, _ri);
};

/**
   * COMPENDIUM_GET_ENTRY_BY_STAT_ITEM
   *
   * @param {number} category
   * @param {number} animalType
   * @return {number}
   */
global.CompendiumGetEntryByStatItem = function (category, animalType) {
  return Citizen.invokeNative('0x66ec938394d76c85', _ch(category), _ch(animalType), _r, _ri);
};

/**
   * COMPENDIUM_GET_MAP_DISCOVERABLE_FROM_STAT_ITEM
   *
   * @param {number} animalStatItem
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {number}
   */
global.CompendiumGetMapDiscoverableFromStatItem = function (animalStatItem, x, y, z) {
  return Citizen.invokeNative('0x729d54121a5e9e20', _ch(animalStatItem), _fv(x), _fv(y), _fv(z), _r, _ri);
};

/**
   * COMPENDIUM_GET_NUM_ENTRIES_IN_SUBCATEGORY
   *
   * @param {number} category
   * @param {number} subcategory
   * @return {number}
   */
global.CompendiumGetNumEntriesInSubcategory = function (category, subcategory) {
  return Citizen.invokeNative('0xf58a0c0e086e8e36', _ch(category), _ch(subcategory), _r, _ri);
};

/**
   * COMPENDIUM_GET_SHORT_DESCRIPTION_FROM_PED
   *
   * @param {number} ped
   * @return {number}
   */
global.CompendiumGetShortDescriptionFromPed = function (ped) {
  return Citizen.invokeNative('0x6c5e5d48e48b4c65', ped, _r, _ri);
};

/**
   * COMPENDIUM_GET_STUDY_AWARD_ID
   *
   * @param {number} ped
   * @return {any}
   */
global.CompendiumGetStudyAwardId = function (ped) {
  return Citizen.invokeNative('0x9f678782720349e4', ped, _r);
};

/**
   * COMPENDIUM_GET_SUBCATEGORY_PED_IS_IN
   *
   * @param {number} category
   * @param {number} ped
   * @return {number}
   */
global.CompendiumGetSubcategoryPedIsIn = function (category, ped) {
  return Citizen.invokeNative('0x9b657550df55ec96', _ch(category), ped, _r, _ri);
};

/**
   * COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_DESC_COMPLETE
   *
   * @param {number} category
   * @param {number} subcategory
   * @return {string | number}
   */
global.CompendiumGetSubcategorySampleToastDescComplete = function (category, subcategory) {
  return Citizen.invokeNative('0x59d4d68cdb82427c', _ch(category), _ch(subcategory), _r, _s);
};

/**
   * COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_DESC_PROGRESS
   *
   * @param {number} category
   * @param {number} subcategory
   * @return {string | number}
   */
global.CompendiumGetSubcategorySampleToastDescProgress = function (category, subcategory) {
  return Citizen.invokeNative('0x82bfb5b367957699', _ch(category), _ch(subcategory), _r, _s);
};

/**
   * COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_TITLE
   *
   * @param {number} category
   * @param {number} subcategory
   * @return {string | number}
   */
global.CompendiumGetSubcategorySampleToastTitle = function (category, subcategory) {
  return Citizen.invokeNative('0x5e50c67eb60951e6', _ch(category), _ch(subcategory), _r, _s);
};

/**
   * COMPENDIUM_GET_SUBCATEGORY_TOAST_APP_ID
   *
   * @param {number} category
   * @param {number} subcategory
   * @return {any}
   */
global.CompendiumGetSubcategoryToastAppId = function (category, subcategory) {
  return Citizen.invokeNative('0x2bf30d9d4d680112', _ch(category), _ch(subcategory), _r);
};

/**
   * COMPENDIUM_HERB_PICKED
   * herbType: https://alloc8or.re/rdr3/doc/enums/eHerbType.txt
   * Vector3: Player Location
   *
   * @param {number} herbType
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.CompendiumHerbPicked = function (herbType, x, y, z) {
  return Citizen.invokeNative('0x725d52f21a5e9e09', _ch(herbType), _fv(x), _fv(y), _fv(z));
};

/**
   * COMPENDIUM_HORSE_BONDING
   *
   * @param {number} ped
   * @param {number} bondingLevel
   * @return {void}
   */
global.CompendiumHorseBonding = function (ped, bondingLevel) {
  return Citizen.invokeNative('0x725d52f21a5e9e50', ped, bondingLevel);
};

/**
   * COMPENDIUM_HORSE_OBSERVED
   * Only gets called if bSetObserved is true and animalType is matching
   *
   * @param {number} ped
   * @param {boolean} disableCompendiumToast
   * @return {void}
   */
global.CompendiumHorseObserved = function (ped, disableCompendiumToast) {
  return Citizen.invokeNative('0x725d58f2125e5e50', ped, disableCompendiumToast);
};

/**
   * COMPENDIUM_HORSE_WILD_BROKEN
   * NET_PLAYER_HORSE_PROCESS_EVENT_HORSE_BREAKING
   *
   * @param {number} ped
   * @return {void}
   */
global.CompendiumHorseWildBroken = function (ped) {
  return Citizen.invokeNative('0x725852d21a2e9e50', ped);
};

/**
   * COMPENDIUM_WAS_ANIMAL_OBSERVED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.CompendiumWasAnimalObserved = function (ped) {
  return Citizen.invokeNative('0x23b5e9c5160bc04f', ped, _r);
};

/**
   * _0x725D52F21A5E9E22
   * Only used in R* SP Scripts, category = GANGS
   * _COMPENDIUM_GET_*
   *
   * @param {number} category
   * @return {number}
   */
global.N_0x725D52F21A5E9E22 = function (category) {
  return Citizen.invokeNative('0x725d52f21a5e9e22', _ch(category), _r, _rf);
};

/**
   * _0x729D52461AEA9E22
   * Only used in R* SP Scripts, category = GANGS
   * _COMPENDIUM_GET_NUM_OF_ENTRIES_IN_*
   *
   * @param {number} category
   * @return {number}
   */
global.N_0x729D52461AEA9E22 = function (category) {
  return Citizen.invokeNative('0x729d52461aea9e22', _ch(category), _r, _ri);
};

/**
   * _COMPENDIUM_GET_NUM_OF_ENTRIES_IN_CATEGORY
   *
   * @param {number} category
   * @return {number}
   */
global.CompendiumGetNumOfEntriesInCategory = function (category) {
  return Citizen.invokeNative('0x729d52f61a5a9e22', _ch(category), _r, _ri);
};

/**
   * _COMPENDIUM_GET_SUBCATEGORY_HASH_FROM_ANIMAL_TYPE
   *
   * @param {number} category
   * @param {number} animalType
   * @return {number}
   */
global.CompendiumGetSubcategoryHashFromAnimalType = function (category, animalType) {
  return Citizen.invokeNative('0xcd278b6bfbdbdc22', _ch(category), _ch(animalType), _r, _ri);
};

/**
   * _0x0FD3ECF9D0C8655F
   *
   * @param {string | number} p0
   * @return {void}
   */
global.N_0x0FD3ECF9D0C8655F = function (p0) {
  return Citizen.invokeNative('0x0fd3ecf9d0c8655f', _ts(p0));
};

/**
   * _0x23CCAB8F40B9CBEE
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {boolean}
   */
global.N_0x23CCAB8F40B9CBEE = function (x, y, z) {
  return Citizen.invokeNative('0x23ccab8f40b9cbee', _fv(x), _fv(y), _fv(z), _r);
};

/**
   * _0x33C1D63E55FA4284
   *
   * @param {string | number} p0
   * @return {boolean}
   */
global.N_0x33C1D63E55FA4284 = function (p0) {
  return Citizen.invokeNative('0x33c1d63e55fa4284', _ts(p0), _r);
};

/**
   * _0x3A66F1963B223F61
   *
   * @param {string | number} p0
   * @return {boolean}
   */
global.N_0x3A66F1963B223F61 = function (p0) {
  return Citizen.invokeNative('0x3a66f1963b223f61', _ts(p0), _r);
};

/**
   * _0x4E42CA5BCD45444A
   *
  
   * @return {void}
   */
global.N_0x4E42CA5BCD45444A = function () {
  return Citizen.invokeNative('0x4e42ca5bcd45444a');
};

/**
   * _0x7C680FF55617F82F
   *
  
   * @return {boolean}
   */
global.N_0x7C680FF55617F82F = function () {
  return Citizen.invokeNative('0x7c680ff55617f82f', _r);
};

/**
   * _0x87F005C969EF1563
   *
   * @param {number} p0
   * @return {boolean}
   */
global.N_0x87F005C969EF1563 = function (p0) {
  return Citizen.invokeNative('0x87f005c969ef1563', _fv(p0), _r);
};

/**
   * _0xA67F0B039D9CD513
   *
   * @param {boolean} p0
   * @return {boolean}
   */
global.N_0xA67F0B039D9CD513 = function (p0) {
  return Citizen.invokeNative('0xa67f0b039d9cd513', p0, _r);
};

/**
   * _0xCA0BAC376C541978
   *
   * @param {string | number} p0
   * @return {void}
   */
global.N_0xCA0BAC376C541978 = function (p0) {
  return Citizen.invokeNative('0xca0bac376c541978', _ts(p0));
};

/**
   * _0xD8E3D22AA4F0E0A5
   *
   * @param {string | number} p0
   * @return {boolean}
   */
global.N_0xD8E3D22AA4F0E0A5 = function (p0) {
  return Citizen.invokeNative('0xd8e3d22aa4f0e0a5', _ts(p0), _r);
};

/**
   * _0xDA05310EA94DC8C6
   * unused = true
   *
   * @param {string | number} p0
   * @param {string | number} p1
   * @return {void}
   */
global.N_0xDA05310EA94DC8C6 = function (p0, p1) {
  return Citizen.invokeNative('0xda05310ea94dc8c6', _ts(p0), _ts(p1));
};

/**
   * _0xE72E234B30DA7B7A
   *
   * @param {number} p0
   * @return {boolean}
   */
global.N_0xE72E234B30DA7B7A = function (p0) {
  return Citizen.invokeNative('0xe72e234b30da7b7a', p0, _r);
};

/**
   * _0xF0D545C1EEAD614A
   *
  
   * @return {boolean}
   */
global.N_0xF0D545C1EEAD614A = function () {
  return Citizen.invokeNative('0xf0d545c1eead614a', _r);
};

/**
   * NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT
   *
  
   * @return {number}
   */
global.NetworkClanGetLocalMembershipsCount = function () {
  return Citizen.invokeNative('0x1f471b79acc90bef', _r, _ri);
};

/**
   * NETWORK_CLAN_GET_MEMBERSHIP_DESC
   *
   * @param {DataView} memberDesc
   * @param {number} p1
   * @return {boolean}
   */
global.NetworkClanGetMembershipDesc = function (memberDesc, p1) {
  return Citizen.invokeNative('0x48de78af2c8885b8', memberDesc, p1, _r);
};

/**
   * NETWORK_CLAN_IS_EMBLEM_READY
   *
   * @param {any} p0
   * @param {DataView} p1
   * @return {boolean}
   */
global.NetworkClanIsEmblemReady = function (p0, p1) {
  return Citizen.invokeNative('0xa134777ff7f33331', p0, p1, _r);
};

/**
   * NETWORK_CLAN_PLAYER_GET_DESC
   *
   * @param {DataView} clanDesc
   * @param {number} bufferSize
   * @param {DataView} gamerHandle
   * @return {boolean}
   */
global.NetworkClanPlayerGetDesc = function (clanDesc, bufferSize, gamerHandle) {
  return Citizen.invokeNative('0xeee6eacbe8874fba', clanDesc, bufferSize, gamerHandle, _r);
};

/**
   * NETWORK_CLAN_PLAYER_IS_ACTIVE
   *
   * @param {DataView} gamerHandle
   * @return {boolean}
   */
global.NetworkClanPlayerIsActive = function (gamerHandle) {
  return Citizen.invokeNative('0xb124b57f571d8f18', gamerHandle, _r);
};

/**
   * NETWORK_CLAN_RELEASE_EMBLEM
   *
   * @param {any} p0
   * @return {void}
   */
global.NetworkClanReleaseEmblem = function (p0) {
  return Citizen.invokeNative('0x113e6e3e50e286b0', p0);
};

/**
   * NETWORK_CLAN_REQUEST_EMBLEM
   *
   * @param {any} p0
   * @return {boolean}
   */
global.NetworkClanRequestEmblem = function (p0) {
  return Citizen.invokeNative('0x13518ff1c6b28938', p0, _r);
};

/**
   * NETWORK_CLAN_SERVICE_IS_VALID
   *
  
   * @return {boolean}
   */
global.NetworkClanServiceIsValid = function () {
  return Citizen.invokeNative('0x579cced0265d4896', _r);
};

/**
   * NETWORK_FIND_GAMERS_IN_CREW
   *
   * @param {number} crewId
   * @return {boolean}
   */
global.NetworkFindGamersInCrew = function (crewId) {
  return Citizen.invokeNative('0xe532d6811b3a4d2a', crewId, _r);
};

/**
   * NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR
   *
  
   * @return {any}
   */
global.NetworkGetPrimaryClanDataClear = function () {
  return Citizen.invokeNative('0x9aa46badad0e27ed', _r);
};

/**
   * NETWORK_GET_PRIMARY_CLAN_DATA_NEW
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @return {boolean}
   */
global.NetworkGetPrimaryClanDataNew = function (p0, p1) {
  return Citizen.invokeNative('0xc080ff658b2e41da', p0, p1, _r);
};

/**
   * NETWORK_GET_PRIMARY_CLAN_DATA_PENDING
   *
  
   * @return {any}
   */
global.NetworkGetPrimaryClanDataPending = function () {
  return Citizen.invokeNative('0xb5074db804e28ce7', _r);
};

/**
   * NETWORK_GET_PRIMARY_CLAN_DATA_START
   *
   * @param {DataView} p0
   * @param {any} p1
   * @return {boolean}
   */
global.NetworkGetPrimaryClanDataStart = function (p0, p1) {
  return Citizen.invokeNative('0xce86d8191b762107', p0, p1, _r);
};

/**
   * NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS
   *
  
   * @return {any}
   */
global.NetworkGetPrimaryClanDataSuccess = function () {
  return Citizen.invokeNative('0x5b4f04f19376a0ba', _r);
};

/**
   * _0x58D378AF2C8765B7
   *
   * @param {any} p0
   * @return {boolean}
   */
global.N_0x58D378AF2C8765B7 = function (p0) {
  return Citizen.invokeNative('0x58d378af2c8765b7', p0, _r);
};

/**
   * _NETWORK_ACCEPT_CLAN_INVITE
   *
   * @param {number} crewInviteIndex
   * @return {boolean}
   */
global.NetworkAcceptClanInvite = function (crewInviteIndex) {
  return Citizen.invokeNative('0x8e2143144b8e188d', crewInviteIndex, _r);
};

/**
   * _NETWORK_CLAN_INVITE_PLAYER
   *
   * @param {any} p0
   * @return {boolean}
   */
global.NetworkClanInvitePlayer = function (p0) {
  return Citizen.invokeNative('0xc685b014ce3d988b', p0, _r);
};

/**
   * _NETWORK_CLAN_SET_ACTIVE
   *
   * @param {any} p0
   * @return {any}
   */
global.NetworkClanSetActive = function (p0) {
  return Citizen.invokeNative('0xc080ff658b2e51da', p0, _r);
};

/**
   * DATABINDING_IS_ENTRY_VALID
   *
   * @param {number} entryId
   * @return {boolean}
   */
global.DatabindingIsEntryValid = function (entryId) {
  return Citizen.invokeNative('0x1e7130793aaaab8d', _ch(entryId), _r);
};

/**
   * DATABINDING_READ_INT
   *
   * @param {any} p0
   * @return {number}
   */
global.DatabindingReadInt = function (p0) {
  return Citizen.invokeNative('0x570784d782597512', p0, _r, _ri);
};

/**
   * DATABINDING_WRITE_STRING_FROM_PARENT
   *
   * @param {any} p0
   * @param {string | number} p1
   * @param {string | number} p2
   * @return {void}
   */
global.DatabindingWriteStringFromParent = function (p0, p1, p2) {
  return Citizen.invokeNative('0x4ff713b2f17a391e', p0, _ts(p1), _ts(p2));
};

/**
   * _0x02B21B6BEEDD83CC
   *
   * @param {number} entryId
   * @param {number} p1
   * @return {any}
   */
global.N_0x02B21B6BEEDD83CC = function (entryId, p1) {
  return Citizen.invokeNative('0x02b21b6beedd83cc', _ch(entryId), p1, _r);
};

/**
   * _0x05AC9E1E02975AFB
   * _DATABINDING_WRITE_DATA_*
   *
   * @param {any} p0
   * @param {string | number} p1
   * @param {number} p2
   * @return {void}
   */
global.N_0x05AC9E1E02975AFB = function (p0, p1, p2) {
  return Citizen.invokeNative('0x05ac9e1e02975afb', p0, _ts(p1), _fv(p2));
};

/**
   * _0x1919D59E60FD516E
   *
   * @param {any} p0
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.N_0x1919D59E60FD516E = function (p0, p1, p2) {
  return Citizen.invokeNative('0x1919d59e60fd516e', p0, p1, p2);
};

/**
   * _0x294AF5323F44B053
   *
   * @param {any} p0
   * @param {string | number} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0x294AF5323F44B053 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x294af5323f44b053', p0, _ts(p1), p2, _r);
};

/**
   * _0x3BF0767CF33FCC88
   *
   * @param {number} entryId
   * @return {void}
   */
global.N_0x3BF0767CF33FCC88 = function (entryId) {
  return Citizen.invokeNative('0x3bf0767cf33fcc88', _ch(entryId));
};

/**
   * _0x422179C7F6AD9304
   *
   * @param {any} p0
   * @param {DataView} gamerHandle
   * @return {void}
   */
global.N_0x422179C7F6AD9304 = function (p0, gamerHandle) {
  return Citizen.invokeNative('0x422179c7f6ad9304', p0, gamerHandle);
};

/**
   * _0x6318FB3BE37E11B3
   *
   * @param {number} entryId
   * @param {number} index
   * @return {void}
   */
global.N_0x6318FB3BE37E11B3 = function (entryId, index) {
  return Citizen.invokeNative('0x6318fb3be37e11b3', _ch(entryId), index);
};

/**
   * _0x6329C34BEE5BFF4B
   *
   * @param {any} p0
   * @param {number} p1
   * @return {any}
   */
global.N_0x6329C34BEE5BFF4B = function (p0, p1) {
  return Citizen.invokeNative('0x6329c34bee5bff4b', p0, _ch(p1), _r);
};

/**
   * _0x7FC60C94C83C5CD7
   *
   * @param {any} p0
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.N_0x7FC60C94C83C5CD7 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x7fc60c94c83c5cd7', p0, _ch(p1), p2);
};

/**
   * _0xB138CA787F3DD858
   *
   * @param {any} p0
   * @param {string | number} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xB138CA787F3DD858 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xb138ca787f3dd858', p0, _ts(p1), p2);
};

/**
   * _0xBFC83DA249BEFCC9
   * _DATABINDING_WRITE_DATA_*
   *
   * @param {any} p0
   * @param {number} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xBFC83DA249BEFCC9 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xbfc83da249befcc9', p0, _ch(p1), p2);
};

/**
   * _0xC900CEC8A172375B
   *
   * @param {any} p0
   * @param {string | number} p1
   * @param {number} p2
   * @return {void}
   */
global.N_0xC900CEC8A172375B = function (p0, p1, p2) {
  return Citizen.invokeNative('0xc900cec8a172375b', p0, _ts(p1), p2);
};

/**
   * _0xD48993A61938C64D
   *
   * @param {any} p0
   * @param {string | number} p1
   * @return {any}
   */
global.N_0xD48993A61938C64D = function (p0, p1) {
  return Citizen.invokeNative('0xd48993a61938c64d', p0, _ts(p1), _r);
};

/**
   * _DATABINDING_ADD_DATA_CONTAINER_FROM_PATH_BY_HASH
   * p0 seems to always be empty string, p1 is the hash of the path
   *
   * @param {string | number} p0
   * @param {number} path
   * @return {any}
   */
global.DatabindingAddDataContainerFromPathByHash = function (p0, path) {
  return Citizen.invokeNative('0xd7db94ab78e8ebe4', _ts(p0), _ch(path), _r);
};

/**
   * _0xE6AAB897120492D6
   *
   * @param {any} p0
   * @param {string | number} p1
   * @return {any}
   */
global.N_0xE6AAB897120492D6 = function (p0, p1) {
  return Citizen.invokeNative('0xe6aab897120492d6', p0, _ts(p1), _r);
};

/**
   * _0xE6AAB897120492D7
   *
   * @param {any} p0
   * @param {string | number} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xE6AAB897120492D7 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xe6aab897120492d7', p0, _ts(p1), p2);
};

/**
   * _0xF47E33F8D2523825
   *
   * @param {any} p0
   * @param {number} p1
   * @return {any}
   */
global.N_0xF47E33F8D2523825 = function (p0, p1) {
  return Citizen.invokeNative('0xf47e33f8d2523825', p0, p1, _r);
};

/**
   * _DATABINDING_ADD_DATA_BOOL
   *
   * @param {any} p0
   * @param {string | number} p1
   * @param {boolean} p2
   * @return {any}
   */
global.DatabindingAddDataBool = function (p0, p1, p2) {
  return Citizen.invokeNative('0x58baa5f635da2ff4', p0, _ts(p1), p2, _r);
};

/**
   * _DATABINDING_ADD_DATA_BOOL_BY_HASH
   *
   * @param {any} p0
   * @param {number} p1
   * @param {boolean} p2
   * @return {any}
   */
global.DatabindingAddDataBoolByHash = function (p0, p1, p2) {
  return Citizen.invokeNative('0xbc95d3ae2eca70d6', p0, _ch(p1), p2, _r);
};

/**
   * _DATABINDING_ADD_DATA_BOOL_FROM_PATH
   *
   * @param {string | number} p0
   * @param {string | number} p1
   * @param {boolean} p2
   * @return {any}
   */
global.DatabindingAddDataBoolFromPath = function (p0, p1, p2) {
  return Citizen.invokeNative('0x37bb86a751148a6a', _ts(p0), _ts(p1), p2, _r);
};

/**
   * _DATABINDING_ADD_DATA_CONTAINER
   * Returns entryId Hash
   *
   * @param {number} entryId
   * @param {string | number} p1
   * @return {number}
   */
global.DatabindingAddDataContainer = function (entryId, p1) {
  return Citizen.invokeNative('0xeb4f9a3537eeabcd', _ch(entryId), _ts(p1), _r, _ri);
};

/**
   * _DATABINDING_ADD_DATA_CONTAINER_BY_HASH
   *
   * @param {any} p0
   * @param {number} p1
   * @return {any}
   */
global.DatabindingAddDataContainerByHash = function (p0, p1) {
  return Citizen.invokeNative('0x98bb14345bb68257', p0, _ch(p1), _r);
};

/**
   * _DATABINDING_ADD_DATA_CONTAINER_FROM_PATH
   *
   * @param {string | number} p0
   * @param {string | number} p1
   * @return {any}
   */
global.DatabindingAddDataContainerFromPath = function (p0, p1) {
  return Citizen.invokeNative('0x0c827d175f1292f4', _ts(p0), _ts(p1), _r);
};

/**
   * _DATABINDING_ADD_DATA_FLOAT
   *
   * @param {any} p0
   * @param {string | number} p1
   * @param {number} p2
   * @return {any}
   */
global.DatabindingAddDataFloat = function (p0, p1, p2) {
  return Citizen.invokeNative('0x5154228273adb9a6', p0, _ts(p1), _fv(p2), _r);
};

/**
   * _DATABINDING_ADD_DATA_GANG_ID
   *
   * @param {any} p0
   * @param {string | number} p1
   * @param {any} gangId
   * @return {any}
   */
global.DatabindingAddDataGangId = function (p0, p1, gangId) {
  return Citizen.invokeNative('0x7d0f2014db28dd00', p0, _ts(p1), gangId, _r);
};

/**
   * _DATABINDING_ADD_DATA_HASH
   *
   * @param {any} p0
   * @param {string | number} p1
   * @param {number} p2
   * @return {any}
   */
global.DatabindingAddDataHash = function (p0, p1, p2) {
  return Citizen.invokeNative('0x8538f1205d60eca6', p0, _ts(p1), _ch(p2), _r);
};

/**
   * _DATABINDING_ADD_DATA_HASH_BY_HASH
   *
   * @param {any} p0
   * @param {number} p1
   * @param {number} p2
   * @return {any}
   */
global.DatabindingAddDataHashByHash = function (p0, p1, p2) {
  return Citizen.invokeNative('0x8e173dfb041993c6', p0, _ch(p1), _ch(p2), _r);
};

/**
   * _DATABINDING_ADD_DATA_INT
   *
   * @param {any} p0
   * @param {string | number} p1
   * @param {number} p2
   * @return {any}
   */
global.DatabindingAddDataInt = function (p0, p1, p2) {
  return Citizen.invokeNative('0x307a3247c5457bde', p0, _ts(p1), _ch(p2), _r);
};

/**
   * _DATABINDING_ADD_DATA_INT_BY_HASH
   *
   * @param {any} p0
   * @param {number} p1
   * @param {number} p2
   * @return {any}
   */
global.DatabindingAddDataIntByHash = function (p0, p1, p2) {
  return Citizen.invokeNative('0x267f9527f4350ade', p0, _ch(p1), p2, _r);
};

/**
   * _DATABINDING_ADD_DATA_POSSE_ID
   *
   * @param {any} p0
   * @param {string | number} p1
   * @param {any} posseId
   * @return {any}
   */
global.DatabindingAddDataPosseId = function (p0, p1, posseId) {
  return Citizen.invokeNative('0x7d0f2014db28dd01', p0, _ts(p1), posseId, _r);
};

/**
   * _DATABINDING_ADD_DATA_STRING
   *
   * @param {any} p0
   * @param {string | number} p1
   * @param {string | number} p2
   * @return {any}
   */
global.DatabindingAddDataString = function (p0, p1, p2) {
  return Citizen.invokeNative('0x617fca1c5652bbad', p0, _ts(p1), _ts(p2), _r);
};

/**
   * _DATABINDING_ADD_DATA_STRING_BY_HASH
   *
   * @param {any} p0
   * @param {number} p1
   * @param {string | number} p2
   * @return {any}
   */
global.DatabindingAddDataStringByHash = function (p0, p1, p2) {
  return Citizen.invokeNative('0xead09e76e22630c3', p0, _ch(p1), _ts(p2), _r);
};

/**
   * _DATABINDING_ADD_DATA_STRING_FROM_PATH
   *
   * @param {string | number} p0
   * @param {string | number} p1
   * @param {string | number} p2
   * @return {any}
   */
global.DatabindingAddDataStringFromPath = function (p0, p1, p2) {
  return Citizen.invokeNative('0xa381de86ee170c4a', _ts(p0), _ts(p1), _ts(p2), _r);
};

/**
   * _DATABINDING_ADD_HASH_ARRAY
   *
   * @param {any} p0
   * @param {string | number} p1
   * @return {any}
   */
global.DatabindingAddHashArray = function (p0, p1) {
  return Citizen.invokeNative('0x52f5f08278ea5d75', p0, _ts(p1), _r);
};

/**
   * _DATABINDING_ADD_STRING_ARRAY
   *
   * @param {any} p0
   * @param {string | number} p1
   * @return {any}
   */
global.DatabindingAddStringArray = function (p0, p1) {
  return Citizen.invokeNative('0x1b23e0627bdbfe85', p0, _ts(p1), _r);
};

/**
   * _DATABINDING_ADD_UI_ITEM_LIST
   *
   * @param {any} p0
   * @param {string | number} p1
   * @return {any}
   */
global.DatabindingAddUiItemList = function (p0, p1) {
  return Citizen.invokeNative('0xfe74fa57e0ce6824', p0, _ts(p1), _r);
};

/**
   * _DATABINDING_ADD_UI_ITEM_LIST_BY_HASH
   *
   * @param {any} p0
   * @param {number} p1
   * @return {any}
   */
global.DatabindingAddUiItemListByHash = function (p0, p1) {
  return Citizen.invokeNative('0x3c7799283325181b', p0, _ch(p1), _r);
};

/**
   * _DATABINDING_ADD_UI_ITEM_LIST_FROM_PATH
   *
   * @param {string | number} p0
   * @param {string | number} p1
   * @return {any}
   */
global.DatabindingAddUiItemListFromPath = function (p0, p1) {
  return Citizen.invokeNative('0xdb5b9a474148f699', _ts(p0), _ts(p1), _r);
};

/**
   * _DATABINDING_CLEAR_BINDING_ARRAY
   *
   * @param {number} entryId
   * @return {void}
   */
global.DatabindingClearBindingArray = function (entryId) {
  return Citizen.invokeNative('0xa1f15c1d03df802d', _ch(entryId));
};

/**
   * _DATABINDING_GET_ARRAY_COUNT
   *
   * @param {number} entryId
   * @return {any}
   */
global.DatabindingGetArrayCount = function (entryId) {
  return Citizen.invokeNative('0xd23f5de04fe717e2', _ch(entryId), _r);
};

/**
   * _DATABINDING_GET_DATA_CONTAINER_FROM_CHILD_INDEX
   *
   * @param {number} entryId
   * @param {number} p1
   * @return {any}
   */
global.DatabindingGetDataContainerFromChildIndex = function (entryId, p1) {
  return Citizen.invokeNative('0x0c827d175f1292f3', _ch(entryId), p1, _r);
};

/**
   * _DATABINDING_GET_DATA_CONTAINER_FROM_PATH
   *
   * @param {string | number} p0
   * @return {any}
   */
global.DatabindingGetDataContainerFromPath = function (p0) {
  return Citizen.invokeNative('0x0c827d175f1292f2', _ts(p0), _r);
};

/**
   * _DATABINDING_GET_ITEM_CONTEXT_BY_INDEX
   *
   * @param {any} p0
   * @param {number} index
   * @return {any}
   */
global.DatabindingGetItemContextByIndex = function (p0, index) {
  return Citizen.invokeNative('0xe96d7f9fefcc105f', p0, index, _r);
};

/**
   * _DATABINDING_INSERT_UI_ITEM_TO_LIST_FROM_CONTEXT_HASH_ALIAS
   *
   * @param {any} p0
   * @param {number} index
   * @param {number} p2
   * @param {any} p3
   * @return {void}
   */
global.DatabindingInsertUiItemToListFromContextHashAlias = function (p0, index, p2, p3) {
  return Citizen.invokeNative('0xee97a05c05f16e41', p0, index, _ch(p2), p3);
};

/**
   * _DATABINDING_INSERT_UI_ITEM_TO_LIST_FROM_CONTEXT_STRING_ALIAS
   *
   * @param {any} p0
   * @param {number} index
   * @param {string | number} p2
   * @param {any} p3
   * @return {void}
   */
global.DatabindingInsertUiItemToListFromContextStringAlias = function (p0, index, p2, p3) {
  return Citizen.invokeNative('0x5859e970794d92f3', p0, index, _ts(p2), p3);
};

/**
   * _DATABINDING_INSERT_UI_ITEM_TO_LIST_FROM_PATH_STRING_ALIAS
   *
   * @param {any} p0
   * @param {any} p1
   * @param {string | number} p2
   * @param {any} p3
   * @return {void}
   */
global.DatabindingInsertUiItemToListFromPathStringAlias = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x5740774f608e4fc8', p0, p1, _ts(p2), p3);
};

/**
   * _DATABINDING_READ_DATA_BOOL
   *
   * @param {any} p0
   * @return {any}
   */
global.DatabindingReadDataBool = function (p0) {
  return Citizen.invokeNative('0x5eefbd4b6d7cd6eb', p0, _r);
};

/**
   * _DATABINDING_READ_DATA_BOOL_FROM_PARENT
   *
   * @param {any} p0
   * @param {string | number} p1
   * @return {any}
   */
global.DatabindingReadDataBoolFromParent = function (p0, p1) {
  return Citizen.invokeNative('0xa8ede09fe07bd77f', p0, _ts(p1), _r);
};

/**
   * _DATABINDING_READ_DATA_BOOL_FROM_PARENT_BY_HASH
   *
   * @param {any} p0
   * @param {number} p1
   * @return {any}
   */
global.DatabindingReadDataBoolFromParentByHash = function (p0, p1) {
  return Citizen.invokeNative('0x4cdc3fddfae07eb3', p0, _ch(p1), _r);
};

/**
   * _DATABINDING_READ_DATA_HASH_STRING_FROM_PARENT
   *
   * @param {any} p0
   * @param {string | number} p1
   * @return {any}
   */
global.DatabindingReadDataHashStringFromParent = function (p0, p1) {
  return Citizen.invokeNative('0x9b535990b01b62de', p0, _ts(p1), _r);
};

/**
   * _DATABINDING_READ_DATA_HASH_STRING_FROM_PARENT_BY_HASH
   *
   * @param {any} p0
   * @param {number} p1
   * @return {any}
   */
global.DatabindingReadDataHashStringFromParentByHash = function (p0, p1) {
  return Citizen.invokeNative('0x1f43bc25a119b252', p0, _ch(p1), _r);
};

/**
   * _DATABINDING_READ_DATA_INT_FROM_PARENT
   *
   * @param {any} p0
   * @param {string | number} p1
   * @return {any}
   */
global.DatabindingReadDataIntFromParent = function (p0, p1) {
  return Citizen.invokeNative('0xffc566a4801f6b40', p0, _ts(p1), _r);
};

/**
   * _DATABINDING_READ_DATA_INT_FROM_PARENT_BY_HASH
   *
   * @param {any} p0
   * @param {number} p1
   * @return {any}
   */
global.DatabindingReadDataIntFromParentByHash = function (p0, p1) {
  return Citizen.invokeNative('0xb5f668b648ec0970', p0, _ch(p1), _r);
};

/**
   * _DATABINDING_READ_DATA_STRING
   *
   * @param {any} p0
   * @return {any}
   */
global.DatabindingReadDataString = function (p0) {
  return Citizen.invokeNative('0x3d290b5ffa7c5151', p0, _r);
};

/**
   * _DATABINDING_READ_DATA_STRING_FROM_PARENT
   *
   * @param {any} p0
   * @param {string | number} p1
   * @return {any}
   */
global.DatabindingReadDataStringFromParent = function (p0, p1) {
  return Citizen.invokeNative('0x6323ad277c4a2afb', p0, _ts(p1), _r);
};

/**
   * _DATABINDING_READ_FLOAT
   *
   * @param {number} entryId
   * @return {number}
   */
global.DatabindingReadFloat = function (entryId) {
  return Citizen.invokeNative('0x5fe444eb67c70ad4', _ch(entryId), _r, _rf);
};

/**
   * _DATABINDING_READ_HASH
   *
   * @param {number} entryId
   * @return {number}
   */
global.DatabindingReadHash = function (entryId) {
  return Citizen.invokeNative('0x81d7183e7a8eca72', _ch(entryId), _r, _ri);
};

/**
   * _DATABINDING_REMOVE_BINDING_ARRAY_ITEM_BY_DATA_CONTEXT_ID
   *
   * @param {any} p0
   * @param {number} entryId
   * @return {void}
   */
global.DatabindingRemoveBindingArrayItemByDataContextId = function (p0, entryId) {
  return Citizen.invokeNative('0xf68b1726eaf7b285', p0, _ch(entryId));
};

/**
   * _DATABINDING_REMOVE_DATA_ENTRY
   *
   * @param {number} entryId
   * @return {void}
   */
global.DatabindingRemoveDataEntry = function (entryId) {
  return Citizen.invokeNative('0x0ae9938d0541f2da', _ch(entryId));
};

/**
   * _DATABINDING_SET_TEMPLATED_UI_ITEM_HASH_ALIAS
   *
   * @param {any} p0
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.DatabindingSetTemplatedUiItemHashAlias = function (p0, p1, p2) {
  return Citizen.invokeNative('0x0ae7138d0541f2de', p0, p1, _ch(p2));
};

/**
   * _DATABINDING_SET_TEMPLATED_UI_ITEM_LIST_SIZE
   *
   * @param {any} p0
   * @param {number} p1
   * @return {void}
   */
global.DatabindingSetTemplatedUiItemListSize = function (p0, p1) {
  return Citizen.invokeNative('0xfe74fa57e0ce6825', p0, p1);
};

/**
   * _DATABINDING_WRITE_DATA_BOOL
   *
   * @param {any} p0
   * @param {boolean} p1
   * @return {void}
   */
global.DatabindingWriteDataBool = function (p0, p1) {
  return Citizen.invokeNative('0xab888b4b91046770', p0, p1);
};

/**
   * _DATABINDING_WRITE_DATA_BOOL_FROM_PARENT
   *
   * @param {any} p0
   * @param {string | number} p1
   * @param {boolean} p2
   * @return {void}
   */
global.DatabindingWriteDataBoolFromParent = function (p0, p1, p2) {
  return Citizen.invokeNative('0xbdfe546e4c2d0e21', p0, _ts(p1), p2);
};

/**
   * _DATABINDING_WRITE_DATA_FLOAT
   *
   * @param {any} p0
   * @param {number} p1
   * @return {void}
   */
global.DatabindingWriteDataFloat = function (p0, p1) {
  return Citizen.invokeNative('0xdf504beceb15da93', p0, _fv(p1));
};

/**
   * _DATABINDING_WRITE_DATA_GANG_ID
   *
   * @param {any} p0
   * @param {string | number} p1
   * @param {any} gangId
   * @return {void}
   */
global.DatabindingWriteDataGangId = function (p0, p1, gangId) {
  return Citizen.invokeNative('0xc70041408e16be2d', p0, _ts(p1), gangId);
};

/**
   * _DATABINDING_WRITE_DATA_HASH_STRING
   *
   * @param {any} p0
   * @param {number} p1
   * @return {void}
   */
global.DatabindingWriteDataHashString = function (p0, p1) {
  return Citizen.invokeNative('0xacdef586bd71b1fd', p0, _ch(p1));
};

/**
   * _DATABINDING_WRITE_DATA_HASH_STRING_FROM_PARENT
   *
   * @param {any} p0
   * @param {string | number} p1
   * @param {number} p2
   * @return {void}
   */
global.DatabindingWriteDataHashStringFromParent = function (p0, p1, p2) {
  return Citizen.invokeNative('0x0971f04e1eaa7ae8', p0, _ts(p1), _ch(p2));
};

/**
   * _DATABINDING_WRITE_DATA_HASH_STRING_FROM_PARENT_BY_HASH
   *
   * @param {any} p0
   * @param {number} p1
   * @param {any} p2
   * @return {void}
   */
global.DatabindingWriteDataHashStringFromParentByHash = function (p0, p1, p2) {
  return Citizen.invokeNative('0x20209529689e0953', p0, _ch(p1), p2);
};

/**
   * _DATABINDING_WRITE_DATA_INT
   *
   * @param {any} p0
   * @param {number} p1
   * @return {void}
   */
global.DatabindingWriteDataInt = function (p0, p1) {
  return Citizen.invokeNative('0x335c3f6b3766b8d9', p0, p1);
};

/**
   * _DATABINDING_WRITE_DATA_INT_FROM_PARENT
   *
   * @param {any} p0
   * @param {string | number} p1
   * @param {number} p2
   * @return {void}
   */
global.DatabindingWriteDataIntFromParent = function (p0, p1, p2) {
  return Citizen.invokeNative('0x9efa98238ba08fc4', p0, _ts(p1), p2);
};

/**
   * _DATABINDING_WRITE_DATA_INT_FROM_PARENT_BY_HASH
   *
   * @param {any} p0
   * @param {number} p1
   * @param {any} p2
   * @return {void}
   */
global.DatabindingWriteDataIntFromParentByHash = function (p0, p1, p2) {
  return Citizen.invokeNative('0x9d6e10a41d6ed6ec', p0, _ch(p1), p2);
};

/**
   * _DATABINDING_WRITE_DATA_POSSE_ID
   *
   * @param {any} p0
   * @param {string | number} p1
   * @param {any} posseId
   * @return {void}
   */
global.DatabindingWriteDataPosseId = function (p0, p1, posseId) {
  return Citizen.invokeNative('0xc70041408e16be2e', p0, _ts(p1), posseId);
};

/**
   * _DATABINDING_WRITE_DATA_SCRIPT_VARIABLES
   *
   * @param {number} p0
   * @param {number} p1
   * @param {any[]} args
   * @return {void}
   */
global.DatabindingWriteDataScriptVariables = function (p0, p1, ...args) {
  return Citizen.invokeNative('0xab888b4b91046771', p0, p1, args);
};

/**
   * _DATABINDING_WRITE_DATA_STRING
   *
   * @param {any} p0
   * @param {string | number} p1
   * @return {void}
   */
global.DatabindingWriteDataString = function (p0, p1) {
  return Citizen.invokeNative('0xe1bd342f2872aee9', p0, _ts(p1));
};

/**
   * _DATABINDING_WRITE_STRING_FROM_HASH
   *
   * @param {any} p0
   * @param {number} p1
   * @param {string | number} p2
   * @return {void}
   */
global.DatabindingWriteStringFromHash = function (p0, p1, p2) {
  return Citizen.invokeNative('0xa3bd6ff95e713ee5', p0, _ch(p1), _ts(p2));
};

/**
   * _VIRTUAL_COLLECTION_EXISTS
   *
   * @param {any} p0
   * @return {any}
   */
global.VirtualCollectionExists = function (p0) {
  return Citizen.invokeNative('0x37963b56755bfb35', p0, _r);
};

/**
   * _VIRTUAL_COLLECTION_ITEM_ADD
   *
   * @param {any} p0
   * @param {number} index
   * @param {number} p2
   * @param {any} p3
   * @return {void}
   */
global.VirtualCollectionItemAdd = function (p0, index, p2, p3) {
  return Citizen.invokeNative('0x6dcbf187221cf73d', p0, index, _ch(p2), p3);
};

/**
   * _VIRTUAL_COLLECTION_RESET
   *
   * @param {any} p0
   * @return {void}
   */
global.VirtualCollectionReset = function (p0) {
  return Citizen.invokeNative('0x09d95666ed2b5f60', p0);
};

/**
   * _VIRTUAL_COLLECTION_SET_INTEREST_INDEX
   *
   * @param {any} p0
   * @param {number} interestIndex
   * @return {void}
   */
global.VirtualCollectionSetInterestIndex = function (p0, interestIndex) {
  return Citizen.invokeNative('0x49a8447533308bcf', p0, interestIndex);
};

/**
   * _VIRTUAL_COLLECTION_SET_SIZE
   *
   * @param {any} p0
   * @param {number} size
   * @return {void}
   */
global.VirtualCollectionSetSize = function (p0, size) {
  return Citizen.invokeNative('0x9dce9b01a93b58bc', p0, size);
};

/**
   * DATAARRAY_GET_BOOL
   *
   * @param {DataView} arrayData
   * @param {number} arrayIndex
   * @return {boolean}
   */
global.DataarrayGetBool = function (arrayData, arrayIndex) {
  return Citizen.invokeNative('0xab1231d2de52f2d3', arrayData, arrayIndex, _r);
};

/**
   * DATAARRAY_GET_COUNT
   *
   * @param {DataView} arrayData
   * @return {number}
   */
global.DataarrayGetCount = function (arrayData) {
  return Citizen.invokeNative('0x6a885bf69239e539', arrayData, _r, _ri);
};

/**
   * DATAARRAY_GET_DICT
   *
   * @param {DataView} arrayData
   * @param {number} arrayIndex
   * @return {any}
   */
global.DataarrayGetDict = function (arrayData, arrayIndex) {
  return Citizen.invokeNative('0xa010655985853485', arrayData, arrayIndex, _r);
};

/**
   * DATAARRAY_GET_FLOAT
   *
   * @param {DataView} arrayData
   * @param {number} arrayIndex
   * @return {number}
   */
global.DataarrayGetFloat = function (arrayData, arrayIndex) {
  return Citizen.invokeNative('0xa9d003cf419cb81e', arrayData, arrayIndex, _r, _rf);
};

/**
   * DATAARRAY_GET_INT
   *
   * @param {DataView} arrayData
   * @param {number} arrayIndex
   * @return {number}
   */
global.DataarrayGetInt = function (arrayData, arrayIndex) {
  return Citizen.invokeNative('0x96dea500b6ebbe53', arrayData, arrayIndex, _r, _ri);
};

/**
   * DATAARRAY_GET_STRING
   *
   * @param {DataView} arrayData
   * @param {number} arrayIndex
   * @return {string | number}
   */
global.DataarrayGetString = function (arrayData, arrayIndex) {
  return Citizen.invokeNative('0xb6790a8ff80f889f', arrayData, arrayIndex, _r, _s);
};

/**
   * DATAARRAY_GET_TYPE
   * Types:
   * 1 = Boolean
   * 2 = Integer
   * 3 = Float
   * 4 = String
   * 5 = Vector3
   * 6 = Object
   * 7 = Array
   *
   * @param {DataView} arrayData
   * @param {number} arrayIndex
   * @return {number}
   */
global.DataarrayGetType = function (arrayData, arrayIndex) {
  return Citizen.invokeNative('0x151dafe6b3b9888f', arrayData, arrayIndex, _r, _ri);
};

/**
   * DATAARRAY_GET_VECTOR
   *
   * @param {DataView} arrayData
   * @param {number} arrayIndex
   * @return {Vector3}
   */
global.DataarrayGetVector = function (arrayData, arrayIndex) {
  return Citizen.invokeNative('0x850da2750da14e9a', arrayData, arrayIndex, _r, _rv);
};

/**
   * DATADICT_GET_ARRAY
   *
   * @param {DataView} objectData
   * @param {string | number} key
   * @return {any}
   */
global.DatadictGetArray = function (objectData, key) {
  return Citizen.invokeNative('0x1b5447cf18544b18', objectData, _ts(key), _r);
};

/**
   * DATADICT_GET_BOOL
   *
   * @param {DataView} objectData
   * @param {string | number} key
   * @return {boolean}
   */
global.DatadictGetBool = function (objectData, key) {
  return Citizen.invokeNative('0x175e915a486ee548', objectData, _ts(key), _r);
};

/**
   * DATADICT_GET_DICT
   *
   * @param {DataView} objectData
   * @param {string | number} key
   * @return {any}
   */
global.DatadictGetDict = function (objectData, key) {
  return Citizen.invokeNative('0x4d7a30130f46ac9c', objectData, _ts(key), _r);
};

/**
   * DATADICT_GET_FLOAT
   *
   * @param {DataView} objectData
   * @param {string | number} key
   * @return {number}
   */
global.DatadictGetFloat = function (objectData, key) {
  return Citizen.invokeNative('0x814643eca258adf5', objectData, _ts(key), _r, _rf);
};

/**
   * DATADICT_GET_INT
   *
   * @param {DataView} objectData
   * @param {string | number} key
   * @return {number}
   */
global.DatadictGetInt = function (objectData, key) {
  return Citizen.invokeNative('0x9d896a3b87d96e2b', objectData, _ts(key), _r, _ri);
};

/**
   * DATADICT_GET_STRING
   *
   * @param {DataView} objectData
   * @param {string | number} key
   * @return {string | number}
   */
global.DatadictGetString = function (objectData, key) {
  return Citizen.invokeNative('0xe37b38c0b4e95dfa', objectData, _ts(key), _r, _s);
};

/**
   * DATADICT_GET_TYPE
   * Types:
   * 1 = Boolean
   * 2 = Integer
   * 3 = Float
   * 4 = String
   * 5 = Vector3
   * 6 = Object
   * 7 = Array
   *
   * @param {DataView} objectData
   * @param {string | number} key
   * @return {number}
   */
global.DatadictGetType = function (objectData, key) {
  return Citizen.invokeNative('0x92e11e3ca4c7cdf0', objectData, _ts(key), _r, _ri);
};

/**
   * DATADICT_GET_VECTOR
   *
   * @param {DataView} objectData
   * @param {string | number} key
   * @return {Vector3}
   */
global.DatadictGetVector = function (objectData, key) {
  return Citizen.invokeNative('0xe459c941431e0ffa', objectData, _ts(key), _r, _rv);
};

/**
   * DATADICT_IS_ARRAY_VALID
   *
   * @param {DataView} fileDict
   * @return {boolean}
   */
global.DatadictIsArrayValid = function (fileDict) {
  return Citizen.invokeNative('0xb04b69cf277d15c0', fileDict, _r);
};

/**
   * DATADICT_IS_DICT_VALID
   *
   * @param {DataView} fileDict
   * @return {boolean}
   */
global.DatadictIsDictValid = function (fileDict) {
  return Citizen.invokeNative('0x4607d57c5f7d332a', fileDict, _r);
};

/**
   * DATADICT_SET_INT
   *
   * @param {DataView} objectData
   * @param {string | number} key
   * @param {number} value
   * @return {void}
   */
global.DatadictSetInt = function (objectData, key, value) {
  return Citizen.invokeNative('0x26fdf5e99aa2f3e9', objectData, _ts(key), value);
};

/**
   * DATAFILE_CREATE
   *
   * @param {number} index
   * @return {void}
   */
global.DatafileCreate = function (index) {
  return Citizen.invokeNative('0x56b7291fb953dd51', index);
};

/**
   * DATAFILE_DELETE
   *
   * @param {number} index
   * @return {void}
   */
global.DatafileDelete = function (index) {
  return Citizen.invokeNative('0x9fb90eedea9f2d5c', index);
};

/**
   * DATAFILE_DELETE_REQUESTED_FILE
   *
   * @param {any} p0
   * @return {boolean}
   */
global.DatafileDeleteRequestedFile = function (p0) {
  return Citizen.invokeNative('0x604b8ed1a482f9df', p0, _r);
};

/**
   * DATAFILE_GET_FILE_DICT
   *
   * @param {number} index
   * @return {any}
   */
global.DatafileGetFileDict = function (index) {
  return Citizen.invokeNative('0xbbd8cf823cae557c', index, _r);
};

/**
   * DATAFILE_HAS_LOADED_FILE_DATA
   *
   * @param {any} p0
   * @return {boolean}
   */
global.DatafileHasLoadedFileData = function (p0) {
  return Citizen.invokeNative('0x17279c820464cee0', p0, _r);
};

/**
   * DATAFILE_HAS_VALID_FILE_DATA
   *
   * @param {any} p0
   * @return {boolean}
   */
global.DatafileHasValidFileData = function (p0) {
  return Citizen.invokeNative('0xe60100389e50eade', p0, _r);
};

/**
   * DATAFILE_SELECT_ACTIVE_FILE
   *
   * @param {any} p0
   * @param {any} p1
   * @return {boolean}
   */
global.DatafileSelectActiveFile = function (p0, p1) {
  return Citizen.invokeNative('0x46102a0989ad80b5', p0, p1, _r);
};

/**
   * DATAFILE_UGC_SELECT_DATA
   * Reloops value returned by UGC_QUERY_GET_CONTENT_NUM
   *
   * @param {any} ugcRequestId
   * @param {number} index
   * @param {any} p2
   * @return {any}
   */
global.DatafileUgcSelectData = function (ugcRequestId, index, p2) {
  return Citizen.invokeNative('0x790ec421078f5c4e', ugcRequestId, index, p2, _r);
};

/**
   * DATAFILE_WATCH_REQUEST_ID
   * Adds the given request ID to the watch list.
   *
   * @param {number} id
   * @return {void}
   */
global.DatafileWatchRequestId = function (id) {
  return Citizen.invokeNative('0xa5834834ca8fd7fc', id);
};

/**
   * PARSEDDATA_IS_FILE_LOADED
   *
   * @param {number} fileHandle
   * @return {boolean}
   */
global.ParseddataIsFileLoaded = function (fileHandle) {
  return Citizen.invokeNative('0x603ac35fd4602c76', fileHandle, _r);
};

/**
   * PARSEDDATA_IS_FILE_VALID
   *
   * @param {number} fileHandle
   * @return {boolean}
   */
global.ParseddataIsFileValid = function (fileHandle) {
  return Citizen.invokeNative('0x7907969497ea92f5', fileHandle, _r);
};

/**
   * PARSEDDATA_RQ_FILLOUT_HASH
   * Old name: _DATAFILE_GET_HASH
   *
   * @param {DataView} p1
   * @return {[boolean, number]}
   */
global.ParseddataRqFilloutHash = function (p1) {
  return Citizen.invokeNative('0xfbff3ff2f5e80c0b', _i, p1, _r);
};

/**
   * PARSEDDATA_RQ_FILLOUT_NODE
   * Old name: _DATAFILE_GET_DATA_NODE_INDEX
   *
   * @param {DataView} p1
   * @return {[boolean, number]}
   */
global.ParseddataRqFilloutNode = function (p1) {
  return Citizen.invokeNative('0x83c3ed532b6e5d07', _i, p1, _r);
};

/**
   * PARSEDDATA_RQ_FILLOUT_STRING_127
   *
   * @param {string | number} p0
   * @param {DataView} p1
   * @return {boolean}
   */
global.ParseddataRqFilloutString_127 = function (p0, p1) {
  return Citizen.invokeNative('0x951327435dc5164b', p0, p1, _r);
};

/**
   * UGC2_SET_PLAYER_DATA
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {any}
   */
global.Ugc2SetPlayerData = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xe79c70e77e0973c7', p0, p1, p2, p3, _r);
};

/**
   * _0x1C65CC931C0F946F
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x1C65CC931C0F946F = function (p0, p1, p2) {
  return Citizen.invokeNative('0x1c65cc931c0f946f', p0, p1, p2);
};

/**
   * _0x277251C161B4C3F4
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x277251C161B4C3F4 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x277251c161b4c3f4', p0, p1, p2);
};

/**
   * _0x3168BA5D6DECE323
   * nullsub, doesn't do anything
   *
  
   * @return {void}
   */
global.N_0x3168BA5D6DECE323 = function () {
  return Citizen.invokeNative('0x3168ba5d6dece323');
};

/**
   * _0x4F9E3ED7617123AC
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x4F9E3ED7617123AC = function (p0) {
  return Citizen.invokeNative('0x4f9e3ed7617123ac', p0, _r);
};

/**
   * _0x7681B677400C7071
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0x7681B677400C7071 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x7681b677400c7071', p0, p1, p2, p3, p4);
};

/**
   * _0x9F130129EBC31B34
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x9F130129EBC31B34 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x9f130129ebc31b34', p0, p1, p2);
};

/**
   * _0xBC0DF006A4952C68
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xBC0DF006A4952C68 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xbc0df006a4952c68', p0, p1, p2);
};

/**
   * _0xCA56DD6AB7A39F64
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xCA56DD6AB7A39F64 = function (p0) {
  return Citizen.invokeNative('0xca56dd6ab7a39f64', p0, _r);
};

/**
   * _0xE13634BB6BAF0734
   *
   * @param {number} p0
   * @param {number} p1
   * @return {number}
   */
global.N_0xE13634BB6BAF0734 = function (p0, p1) {
  return Citizen.invokeNative('0xe13634bb6baf0734', p0, p1, _r, _ri);
};

/**
   * _PARSEDDATA_GET_BOOL
   *
   * @param {DataView} p1
   * @param {number} p2
   * @return {[boolean, boolean]}
   */
global.ParseddataGetBool = function (p1, p2) {
  return Citizen.invokeNative('0xa63cd20f19b961ab', /* actually bool */ _i, p1, _ch(p2), _r);
};

/**
   * _PARSEDDATA_GET_ENTRIES
   * Returns false when there are no entries.
   *
   * @param {DataView} p0
   * @return {boolean}
   */
global.ParseddataGetEntries = function (p0) {
  return Citizen.invokeNative('0xed4413cee1bf142c', p0, _r);
};

/**
   * _PARSEDDATA_GET_FILE
   * Opens file.
   *
   * @param {DataView} p0
   * @return {void}
   */
global.ParseddataGetFile = function (p0) {
  return Citizen.invokeNative('0x91ded5dd64bb2691', p0);
};

/**
   * _PARSEDDATA_GET_FLOAT
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {number} p2
   * @return {boolean}
   */
global.ParseddataGetFloat = function (p0, p1, p2) {
  return Citizen.invokeNative('0xb2b42607f7867576', p0, p1, _ch(p2), _r);
};

/**
   * _PARSEDDATA_GET_INT
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {number} p2
   * @return {boolean}
   */
global.ParseddataGetInt = function (p0, p1, p2) {
  return Citizen.invokeNative('0x52fc26d2d2fc2987', p0, p1, _ch(p2), _r);
};

/**
   * _PARSEDDATA_GET_NUM_CHILDREN
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.ParseddataGetNumChildren = function (p0, p1) {
  return Citizen.invokeNative('0x6beb168d5195e7ab', p0, p1, _r);
};

/**
   * _PARSEDDATA_GET_SECTION
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {number} section
   * @return {boolean}
   */
global.ParseddataGetSection = function (p0, p1, section) {
  return Citizen.invokeNative('0x44b3a36933ac009c', p0, p1, _ch(section), _r);
};

/**
   * _PARSEDDATA_LOAD_FILE_HASH
   * LOAD_PARSEDDATA_FILE_FAILSAFE_HASH
   * Returns parseddata script fileHandle
   *
   * @param {number} p0
   * @return {number}
   */
global.ParseddataLoadFileHash = function (p0) {
  return Citizen.invokeNative('0xd97d8d905f1562f2', _ch(p0), _r, _ri);
};

/**
   * _PARSEDDATA_REGISTER_QUERY
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.ParseddataRegisterQuery = function (p0, p1, p2) {
  return Citizen.invokeNative('0xae156a747c39a741', p0, p1, p2, _r);
};

/**
   * _PARSEDDATA_RQ_FILLOUT_BOOL
   * Old name: _DATAFILE_GET_BOOL
   *
   * @param {DataView} p1
   * @return {[boolean, boolean]}
   */
global.ParseddataRqFilloutBool = function (p1) {
  return Citizen.invokeNative('0x0d9138f3f8261df7', /* actually bool */ _i, p1, _r);
};

/**
   * _PARSEDDATA_RQ_FILLOUT_FLOAT
   * Old name: _DATAFILE_GET_FLOAT
   *
   * @param {DataView} p1
   * @return {[boolean, number]}
   */
global.ParseddataRqFilloutFloat = function (p1) {
  return Citizen.invokeNative('0x7f034fc3e891b57a', _f, p1, _r);
};

/**
   * _PARSEDDATA_RQ_FILLOUT_INT
   * Old name: _DATAFILE_GET_INT
   *
   * @param {DataView} p1
   * @return {[boolean, number]}
   */
global.ParseddataRqFilloutInt = function (p1) {
  return Citizen.invokeNative('0xef44acc657352a35', _i, p1, _r);
};

/**
   * _PARSEDDATA_RQ_FILLOUT_STRING_63
   * Old name: _DATAFILE_GET_STRING
   *
   * @param {string | number} p0
   * @param {DataView} p1
   * @return {boolean}
   */
global.ParseddataRqFilloutString_63 = function (p0, p1) {
  return Citizen.invokeNative('0x08eaf8e9f2eb7b2e', p0, p1, _r);
};

/**
   * _PARSEDDATA_RQ_FILLOUT_VECTOR
   * Old name: _DATAFILE_GET_VECTOR
   *
   * @param {DataView} p1
   * @return {[boolean, Vector3]}
   */
global.ParseddataRqFilloutVector = function (p1) {
  return Citizen.invokeNative('0x06fbf89b12da279c', _v, p1, _r);
};

/**
   * _PARSEDDATA_RQ_GET_NUM_NODES
   *
   * @param {any} p0
   * @return {any}
   */
global.ParseddataRqGetNumNodes = function (p0) {
  return Citizen.invokeNative('0xdf01b1f7a886b42d', p0, _r);
};

/**
   * _PARSEDDATA_UNLOAD_FILE
   *
   * @param {number} fileHandle
   * @return {void}
   */
global.ParseddataUnloadFile = function (fileHandle) {
  return Citizen.invokeNative('0x129567f0c05f81b9', fileHandle);
};

/**
   * GET_GAME_VERSION_NAME
   * Return example: 1207.69_dev_pc, 1436.28_dev_live_tu
   * 
   * Old name: _GET_GAME_BUILD_STRING
   *
  
   * @return {string | number}
   */
global.GetGameVersionName = function () {
  return Citizen.invokeNative('0x05a5f662ad35c573', _r, _s);
};

/**
   * _0xA8D970D8A72640A6
   * nullsub, doesn't do anything
   *
  
   * @return {any}
   */
global.N_0xA8D970D8A72640A6 = function () {
  return Citizen.invokeNative('0xa8d970d8a72640a6', _r);
};

/**
   * _0xACF9CB705BEFA8CB
   * nullsub, doesn't do anything
   *
  
   * @return {any}
   */
global.N_0xACF9CB705BEFA8CB = function () {
  return Citizen.invokeNative('0xacf9cb705befa8cb', _r);
};

/**
   * DECOR_EXIST_ON
   * Returns whether or not the specified property is set for the entity.
   *
   * @param {number} entity
   * @param {string | number} propertyName
   * @return {boolean}
   */
global.DecorExistOn = function (entity, propertyName) {
  return Citizen.invokeNative('0xd9d1cdbf3464dcdf', entity, _ts(propertyName), _r);
};

/**
   * DECOR_GET_BOOL
   *
   * @param {number} entity
   * @param {string | number} propertyName
   * @return {boolean}
   */
global.DecorGetBool = function (entity, propertyName) {
  return Citizen.invokeNative('0xdef3f1b071abb197', entity, _ts(propertyName), _r);
};

/**
   * DECOR_GET_FLOAT
   *
   * @param {number} entity
   * @param {string | number} propertyName
   * @return {number}
   */
global.DecorGetFloat = function (entity, propertyName) {
  return Citizen.invokeNative('0xe5ff70cd842ca9d4', entity, _ts(propertyName), _r, _rf);
};

/**
   * DECOR_GET_INT
   *
   * @param {number} entity
   * @param {string | number} propertyName
   * @return {number}
   */
global.DecorGetInt = function (entity, propertyName) {
  return Citizen.invokeNative('0x44db62727762fd9b', entity, _ts(propertyName), _r, _ri);
};

/**
   * DECOR_IS_REGISTERED_AS_TYPE
   * type: see DECOR_REGISTER
   *
   * @param {string | number} propertyName
   * @param {number} type
   * @return {boolean}
   */
global.DecorIsRegisteredAsType = function (propertyName, type) {
  return Citizen.invokeNative('0x72355278c069f272', _ts(propertyName), type, _r);
};

/**
   * DECOR_REGISTER
   *
   * @param {string | number} propertyName
   * @param {number} type
   * @return {void}
   */
global.DecorRegister = function (propertyName, type) {
  return Citizen.invokeNative('0x0b253d644e3c36b3', _ts(propertyName), type);
};

/**
   * DECOR_REMOVE
   *
   * @param {number} entity
   * @param {string | number} propertyName
   * @return {boolean}
   */
global.DecorRemove = function (entity, propertyName) {
  return Citizen.invokeNative('0x2ba7f5877a088a1d', entity, _ts(propertyName), _r);
};

/**
   * DECOR_REMOVE_ALL
   *
   * @param {number} entity
   * @return {boolean}
   */
global.DecorRemoveAll = function (entity) {
  return Citizen.invokeNative('0x88942780e0adea42', entity, _r);
};

/**
   * DECOR_SET_BOOL
   * This function sets metadata of type bool to specified entity.
   * 
   *
   * @param {number} entity
   * @param {string | number} propertyName
   * @param {boolean} value
   * @return {boolean}
   */
global.DecorSetBool = function (entity, propertyName, value) {
  return Citizen.invokeNative('0xfe26e4609b1c3772', entity, _ts(propertyName), value, _r);
};

/**
   * DECOR_SET_FLOAT
   *
   * @param {number} entity
   * @param {string | number} propertyName
   * @param {number} value
   * @return {boolean}
   */
global.DecorSetFloat = function (entity, propertyName, value) {
  return Citizen.invokeNative('0x238f8b0c1c7fe834', entity, _ts(propertyName), _fv(value), _r);
};

/**
   * DECOR_SET_INT
   * Sets property to int.
   *
   * @param {number} entity
   * @param {string | number} propertyName
   * @param {number} value
   * @return {boolean}
   */
global.DecorSetInt = function (entity, propertyName, value) {
  return Citizen.invokeNative('0xe88f4d7f52a6090f', entity, _ts(propertyName), value, _r);
};

/**
   * DECOR_SET_STRING
   *
   * @param {number} entity
   * @param {string | number} propertyName
   * @param {string | number} value
   * @return {boolean}
   */
global.DecorSetString = function (entity, propertyName, value) {
  return Citizen.invokeNative('0x0671c1a3ff7afdfc', entity, _ts(propertyName), _ts(value), _r);
};

/**
   * _DECOR_GET_UINT8
   *
   * @param {number} entity
   * @param {string | number} propertyName
   * @return {number}
   */
global.DecorGetUint8 = function (entity, propertyName) {
  return Citizen.invokeNative('0xb1682b2443f0540b', entity, _ts(propertyName), _r, _ri);
};

/**
   * _DECOR_REGISTER_2
   *
   * @param {string | number} propertyName
   * @param {number} type
   * @param {boolean} p2
   * @return {void}
   */
global.DecorRegister_2 = function (propertyName, type, p2) {
  return Citizen.invokeNative('0x4587374f88b7f6c2', _ts(propertyName), type, p2);
};

/**
   * _DECOR_SET_UINT8
   *
   * @param {number} entity
   * @param {string | number} propertyName
   * @param {number} value
   * @return {boolean}
   */
global.DecorSetUint8 = function (entity, propertyName, value) {
  return Citizen.invokeNative('0x4bdc83150d43772d', entity, _ts(propertyName), value, _r);
};

/**
   * GET_IS_LOADING_SCREEN_ACTIVE
   *
  
   * @return {boolean}
   */
global.GetIsLoadingScreenActive = function () {
  return Citizen.invokeNative('0x71d4bf5890659b0c', _r);
};

/**
   * IS_DLC_PRESENT
   *
   * @param {number} dlcHash
   * @return {boolean}
   */
global.IsDlcPresent = function (dlcHash) {
  return Citizen.invokeNative('0x2763dc12bbe2bb6f', _ch(dlcHash), _r);
};

/**
   * _GET_SPECIAL_EDITION_CASH_CAMP_BONUS_ENABLED
   *
  
   * @return {boolean}
   */
global.GetSpecialEditionCashCampBonusEnabled = function () {
  return Citizen.invokeNative('0x1db9d61e505ae3fc', _r);
};

/**
   * _GET_SPECIAL_EDITION_CORE_STATS_BONUS_ENABLED
   *
  
   * @return {boolean}
   */
global.GetSpecialEditionCoreStatsBonusEnabled = function () {
  return Citizen.invokeNative('0xa16b4fba7887d7ba', _r);
};

/**
   * APPLY_FORCE_TO_ENTITY
   *
   * @param {number} entity
   * @param {number} forceFlags
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} offX
   * @param {number} offY
   * @param {number} offZ
   * @param {number} boneIndex
   * @param {boolean} isDirectionRel
   * @param {boolean} ignoreUpVec
   * @param {boolean} isForceRel
   * @param {boolean} p12
   * @param {boolean} p13
   * @return {void}
   */
global.ApplyForceToEntity = function (entity, forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13) {
  return Citizen.invokeNative('0xf15e8f5d333f09c4', entity, forceFlags, _fv(x), _fv(y), _fv(z), _fv(offX), _fv(offY), _fv(offZ), boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13);
};

/**
   * APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS
   * p6/relative - makes the xyz force not relative to world coords, but to something else
   * p7/highForce - setting false will make the force really low
   *
   * @param {number} entity
   * @param {number} forceType
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} component
   * @param {boolean} isDirectionRel
   * @param {boolean} isForceRel
   * @param {boolean} p8
   * @return {void}
   */
global.ApplyForceToEntityCenterOfMass = function (entity, forceType, x, y, z, component, isDirectionRel, isForceRel, p8) {
  return Citizen.invokeNative('0x31da7cec5334db37', entity, forceType, _fv(x), _fv(y), _fv(z), component, isDirectionRel, isForceRel, p8);
};

/**
   * ATTACH_ENTITY_TO_ENTITY
   * Attaches entity1 to bone (boneIndex) of entity2.
   * 
   * boneIndex - this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2's centre if bone index given doesn't correspond to bone indexes for that entity type.
   * https://github.com/femga/rdr3_discoveries/tree/master/boneNames
   * 
   * useSoftPinning - if set to false attached entity will not detach when fixed
   * collision - controls collision between the two entities (FALSE disables collision).
   * isPed - pitch doesn't work when false and roll will only work on negative numbers (only peds)
   * vertexIndex - position of vertex
   * fixedRot - if false it ignores entity vector
   *
   * @param {number} entity1
   * @param {number} entity2
   * @param {number} boneIndex
   * @param {number} xPos
   * @param {number} yPos
   * @param {number} zPos
   * @param {number} xRot
   * @param {number} yRot
   * @param {number} zRot
   * @param {boolean} p9
   * @param {boolean} useSoftPinning
   * @param {boolean} collision
   * @param {boolean} isPed
   * @param {number} vertexIndex
   * @param {boolean} fixedRot
   * @param {boolean} p15
   * @param {boolean} p16
   * @return {void}
   */
global.AttachEntityToEntity = function (entity1, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot, p15, p16) {
  return Citizen.invokeNative('0x6b9bbd38ab0796df', entity1, entity2, boneIndex, _fv(xPos), _fv(yPos), _fv(zPos), _fv(xRot), _fv(yRot), _fv(zRot), p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot, p15, p16);
};

/**
   * ATTACH_ENTITY_TO_ENTITY_PHYSICALLY
   *
   * @param {number} entity1
   * @param {number} entity2
   * @param {number} p2
   * @param {number} boneIndex
   * @param {number} offsetX
   * @param {number} offsetY
   * @param {number} offsetZ
   * @param {number} p7
   * @param {number} p8
   * @param {number} p9
   * @param {number} p10
   * @param {number} p11
   * @param {number} p12
   * @param {number} p13
   * @param {boolean} p14
   * @param {boolean} p15
   * @param {boolean} p16
   * @param {boolean} p17
   * @param {number} p18
   * @param {boolean} p19
   * @param {number} p20
   * @param {number} p21
   * @return {void}
   */
global.AttachEntityToEntityPhysically = function (entity1, entity2, p2, boneIndex, offsetX, offsetY, offsetZ, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21) {
  return Citizen.invokeNative('0xb629a43ca1643481', entity1, entity2, p2, boneIndex, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(p7), _fv(p8), _fv(p9), _fv(p10), _fv(p11), _fv(p12), _fv(p13), p14, p15, p16, p17, p18, p19, _fv(p20), _fv(p21));
};

/**
   * CLEAR_ENTITY_LAST_DAMAGE_ENTITY
   *
   * @param {number} entity
   * @return {void}
   */
global.ClearEntityLastDamageEntity = function (entity) {
  return Citizen.invokeNative('0xbb19ac7d4dcefd0f', entity);
};

/**
   * CREATE_FORCED_OBJECT
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {any} p3
   * @param {number} modelHash
   * @param {boolean} p5
   * @return {void}
   */
global.CreateForcedObject = function (x, y, z, p3, modelHash, p5) {
  return Citizen.invokeNative('0x0961a905afbc34c7', _fv(x), _fv(y), _fv(z), p3, _ch(modelHash), p5);
};

/**
   * CREATE_MODEL_HIDE
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} model
   * @param {boolean} p5
   * @return {void}
   */
global.CreateModelHide = function (x, y, z, radius, model, p5) {
  return Citizen.invokeNative('0x069848b3fb3c4426', _fv(x), _fv(y), _fv(z), _fv(radius), _ch(model), p5);
};

/**
   * CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} model
   * @param {boolean} p5
   * @return {void}
   */
global.CreateModelHideExcludingScriptObjects = function (x, y, z, radius, model, p5) {
  return Citizen.invokeNative('0xd136090a9aaab17d', _fv(x), _fv(y), _fv(z), _fv(radius), _ch(model), p5);
};

/**
   * CREATE_MODEL_SWAP
   * Only works with objects!
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} originalModel
   * @param {number} newModel
   * @param {boolean} p6
   * @return {void}
   */
global.CreateModelSwap = function (x, y, z, radius, originalModel, newModel, p6) {
  return Citizen.invokeNative('0x10b2218320b6f5ac', _fv(x), _fv(y), _fv(z), _fv(radius), _ch(originalModel), _ch(newModel), p6);
};

/**
   * DELETE_ENTITY
   * Deletes the specified entity, then sets the handle pointed to by the pointer to NULL.
   *
   * @param {number} entity
   * @return {void}
   */
global.DeleteEntity = function (entity) {
  return Citizen.invokeNative('0x4cd38c78bd19a497', _ii(entity));
};

/**
   * DETACH_ENTITY
   *
   * @param {number} entity
   * @param {boolean} p1
   * @param {boolean} collision
   * @return {void}
   */
global.DetachEntity = function (entity, p1, collision) {
  return Citizen.invokeNative('0x64cde9d6bf8ecad3', entity, p1, collision);
};

/**
   * DOES_ENTITY_BELONG_TO_THIS_SCRIPT
   *
   * @param {number} entity
   * @param {boolean} p1
   * @return {boolean}
   */
global.DoesEntityBelongToThisScript = function (entity, p1) {
  return Citizen.invokeNative('0x622b1980cbe13332', entity, p1, _r);
};

/**
   * DOES_ENTITY_EXIST
   * Checks if the Entity exists
   *
   * @param {number} entity
   * @return {boolean}
   */
global.DoesEntityExist = function (entity) {
  return Citizen.invokeNative('0xd42bd6eb2e0f1677', entity, _r);
};

/**
   * DOES_ENTITY_HAVE_DRAWABLE
   *
   * @param {number} entity
   * @return {boolean}
   */
global.DoesEntityHaveDrawable = function (entity) {
  return Citizen.invokeNative('0x20487f0da9af164a', entity, _r);
};

/**
   * DOES_ENTITY_HAVE_PHYSICS
   *
   * @param {number} entity
   * @return {boolean}
   */
global.DoesEntityHavePhysics = function (entity) {
  return Citizen.invokeNative('0xa512b3f1b2a0b51c', entity, _r);
};

/**
   * FIND_ANIM_EVENT_PHASE
   *
   * @param {string | number} animDictionary
   * @param {string | number} animName
   * @param {string | number} p2
   * @param {DataView} p3
   * @param {DataView} p4
   * @return {boolean}
   */
global.FindAnimEventPhase = function (animDictionary, animName, p2, p3, p4) {
  return Citizen.invokeNative('0x42718cc559bd7776', _ts(animDictionary), _ts(animName), _ts(p2), p3, p4, _r);
};

/**
   * FORCE_ENTITY_AI_AND_ANIMATION_UPDATE
   *
   * @param {number} entity
   * @param {boolean} p1
   * @return {void}
   */
global.ForceEntityAiAndAnimationUpdate = function (entity, p1) {
  return Citizen.invokeNative('0x4c9e96473d4f1a88', entity, p1);
};

/**
   * FREEZE_ENTITY_POSITION
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.FreezeEntityPosition = function (entity, toggle) {
  return Citizen.invokeNative('0x7d9efb7ad6b19754', entity, toggle);
};

/**
   * GET_ANIM_DURATION
   *
   * @param {string | number} animDict
   * @param {string | number} animName
   * @return {number}
   */
global.GetAnimDuration = function (animDict, animName) {
  return Citizen.invokeNative('0x9ffaf4940a54cc09', _ts(animDict), _ts(animName), _r, _rf);
};

/**
   * GET_CARRIABLE_ENTITY_STATE
   * enum eCarriableState
   * {
   *   CARRIABLE_STATE_NONE,
   *   CARRIABLE_STATE_TRANSITIONING_TO_HOGTIED,
   *   CARRIABLE_STATE_CARRIABLE_INTRO,
   *   CARRIABLE_STATE_CARRIABLE,
   *   CARRIABLE_STATE_BEING_PICKED_UP_FROM_GROUND,
   *   CARRIABLE_STATE_CARRIED_BY_HUMAN,
   *   CARRIABLE_STATE_BEING_PLACED_ON_GROUND,
   *   CARRIABLE_STATE_CARRIED_BY_MOUNT,
   *   CARRIABLE_STATE_BEING_PLACED_ON_MOUNT,
   *   CARRIABLE_STATE_BEING_PICKED_UP_FROM_MOUNT,
   *   CARRIABLE_STATE_BEING_CUT_FREE,
   *   CARRIABLE_STATE_BEING_PLACED_ON_GROUND_ESCAPE,
   *   CARRIABLE_STATE_BEING_PLACED_IN_VEHICLE
   * };
   *
   * @param {number} entity
   * @return {number}
   */
global.GetCarriableEntityState = function (entity) {
  return Citizen.invokeNative('0x61914209c36efddb', entity, _r, _ri);
};

/**
   * GET_ENTITY_ALPHA
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityAlpha = function (entity) {
  return Citizen.invokeNative('0x1bb501624faf2bea', entity, _r, _ri);
};

/**
   * GET_ENTITY_ATTACHED_TO
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityAttachedTo = function (entity) {
  return Citizen.invokeNative('0x56d713888a566481', entity, _r, _ri);
};

/**
   * GET_ENTITY_BONE_INDEX_BY_NAME
   *
   * @param {number} entity
   * @param {string | number} boneName
   * @return {number}
   */
global.GetEntityBoneIndexByName = function (entity, boneName) {
  return Citizen.invokeNative('0xbaca8fe9c76c124e', entity, _ts(boneName), _r, _ri);
};

/**
   * GET_ENTITY_COLLISION_DISABLED
   *
   * @param {number} entity
   * @return {boolean}
   */
global.GetEntityCollisionDisabled = function (entity) {
  return Citizen.invokeNative('0xaa2fadd30f45a9da', entity, _r);
};

/**
   * GET_ENTITY_COORDS
   * Gets the current coordinates for a specified entity.
   * `entity` = The entity to get the coordinates from.
   * `alive` = Unused by the game, potentially used by debug builds in order to assert whether or not an entity was alive.
   * 
   * If entity is a ped and it's in a vehicle or on a mount the coords of that entity are returned. Set 'realCoords' to true when you need the true ped coords.
   *
   * @param {number} entity
   * @param {boolean} alive
   * @param {boolean} realCoords
   * @return {Vector3}
   */
global.GetEntityCoords = function (entity, alive, realCoords) {
  return Citizen.invokeNative('0xa86d5f069399f44d', entity, alive, realCoords, _r, _rv);
};

/**
   * GET_ENTITY_FORWARD_VECTOR
   * Gets the entity's forward vector in XY(Z) eulers.
   *
   * @param {number} entity
   * @return {Vector3}
   */
global.GetEntityForwardVector = function (entity) {
  return Citizen.invokeNative('0x2412d9c05bb09b97', entity, _r, _rv);
};

/**
   * GET_ENTITY_FORWARD_X
   * Gets the X-component of the entity's forward vector.
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityForwardX = function (entity) {
  return Citizen.invokeNative('0xdb0954e9960f6457', entity, _r, _rf);
};

/**
   * GET_ENTITY_FORWARD_Y
   * Gets the Y-component of the entity's forward vector.
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityForwardY = function (entity) {
  return Citizen.invokeNative('0x9a5c073ecbda7ee7', entity, _r, _rf);
};

/**
   * GET_ENTITY_HEADING
   * Returns the heading of the entity in degrees. Also know as the "Yaw" of an entity.
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityHeading = function (entity) {
  return Citizen.invokeNative('0xc230dd956e2f5507', entity, _r, _rf);
};

/**
   * GET_ENTITY_HEALTH
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityHealth = function (entity) {
  return Citizen.invokeNative('0x82368787ea73c0f7', entity, _r, _ri);
};

/**
   * GET_ENTITY_HEIGHT
   *
   * @param {number} entity
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {boolean} atTop
   * @param {boolean} inWorldCoords
   * @return {number}
   */
global.GetEntityHeight = function (entity, x, y, z, atTop, inWorldCoords) {
  return Citizen.invokeNative('0x296debc84474b375', entity, _fv(x), _fv(y), _fv(z), atTop, inWorldCoords, _r, _rf);
};

/**
   * GET_ENTITY_HEIGHT_ABOVE_GROUND
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityHeightAboveGround = function (entity) {
  return Citizen.invokeNative('0x0d3b5baea08f63e9', entity, _r, _rf);
};

/**
   * GET_ENTITY_LOD_DIST
   * Returns the LOD distance of an entity.
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityLodDist = function (entity) {
  return Citizen.invokeNative('0xdf240d0c2a948683', entity, _r, _ri);
};

/**
   * GET_ENTITY_MATRIX
   *
   * @param {number} entity
   * @return {[Vector3, Vector3, Vector3, Vector3]}
   */
global.GetEntityMatrix = function (entity) {
  return Citizen.invokeNative('0x3a9b1120af13fbf2', entity, _v, _v, _v, _v);
};

/**
   * GET_ENTITY_MAX_HEALTH
   *
   * @param {number} entity
   * @param {boolean} p1
   * @return {number}
   */
global.GetEntityMaxHealth = function (entity, p1) {
  return Citizen.invokeNative('0x15d757606d170c3c', entity, p1, _r, _ri);
};

/**
   * GET_ENTITY_MODEL
   * Returns the model hash from the entity
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityModel = function (entity) {
  return Citizen.invokeNative('0xda76a9f39210d365', entity, _r, _ri);
};

/**
   * GET_ENTITY_PITCH
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityPitch = function (entity) {
  return Citizen.invokeNative('0xef355abeff7f5005', entity, _r, _rf);
};

/**
   * GET_ENTITY_POPULATION_TYPE
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityPopulationType = function (entity) {
  return Citizen.invokeNative('0xade28862b6d7b85b', entity, _r, _ri);
};

/**
   * GET_ENTITY_ROLL
   * Displays the current ROLL axis of the entity [-180.0000/180.0000+]
   * (Sideways Roll) such as a vehicle tipped on its side
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityRoll = function (entity) {
  return Citizen.invokeNative('0xbf966536fa8b6879', entity, _r, _rf);
};

/**
   * GET_ENTITY_ROTATION
   *
   * @param {number} entity
   * @param {number} rotationOrder
   * @return {Vector3}
   */
global.GetEntityRotation = function (entity, rotationOrder) {
  return Citizen.invokeNative('0xe09caf86c32cb48f', entity, rotationOrder, _r, _rv);
};

/**
   * GET_ENTITY_SPEED
   * Result is in meters per second (m/s)
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntitySpeed = function (entity) {
  return Citizen.invokeNative('0xfb6ba510a533df81', entity, _r, _rf);
};

/**
   * GET_ENTITY_SPEED_VECTOR
   *
   * @param {number} entity
   * @param {boolean} relative
   * @return {Vector3}
   */
global.GetEntitySpeedVector = function (entity, relative) {
  return Citizen.invokeNative('0xf2db09816a419dc5', entity, relative, _r, _rv);
};

/**
   * GET_ENTITY_SUBMERGED_LEVEL
   * Get how much of the entity is submerged.  1.0f is whole entity.
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntitySubmergedLevel = function (entity) {
  return Citizen.invokeNative('0x4a77c3f73fd9e831', entity, _r, _rf);
};

/**
   * GET_ENTITY_TYPE
   * Returns entityType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEntityType
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityType = function (entity) {
  return Citizen.invokeNative('0x97f696aca466b4e0', entity, _r, _ri);
};

/**
   * GET_ENTITY_UPRIGHT_VALUE
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityUprightValue = function (entity) {
  return Citizen.invokeNative('0x56398be65160c3be', entity, _r, _rf);
};

/**
   * GET_ENTITY_VELOCITY
   *
   * @param {number} entity
   * @param {number} p1
   * @return {Vector3}
   */
global.GetEntityVelocity = function (entity, p1) {
  return Citizen.invokeNative('0x4805d2b1d8cf94a9', entity, p1, _r, _rv);
};

/**
   * GET_IS_ANIMAL
   *
   * @param {number} entity
   * @return {boolean}
   */
global.GetIsAnimal = function (entity) {
  return Citizen.invokeNative('0x9a100f1cf4546629', entity, _r);
};

/**
   * GET_MATCHING_ENTITIES
   *
   * @param {number} volume
   * @param {number} itemSet
   * @param {number} entityType
   * @param {any} p3
   * @param {number} p4
   * @param {string | number} p5
   * @return {number}
   */
global.GetMatchingEntities = function (volume, itemSet, entityType, p3, p4, p5) {
  return Citizen.invokeNative('0x84ccf9a12942c83d', volume, itemSet, entityType, p3, _ch(p4), _ts(p5), _r, _ri);
};

/**
   * GET_NEAREST_PARTICIPANT_TO_ENTITY
   *
   * @param {number} entity
   * @return {number}
   */
global.GetNearestParticipantToEntity = function (entity) {
  return Citizen.invokeNative('0x6888a43c35a5f630', entity, _r, _ri);
};

/**
   * GET_NEAREST_PLAYER_TO_ENTITY
   *
   * @param {number} entity
   * @param {number} playerPedToIgnore
   * @param {number} flags
   * @return {number}
   */
global.GetNearestPlayerToEntity = function (entity, playerPedToIgnore, flags) {
  return Citizen.invokeNative('0x990e294fc387fb88', entity, playerPedToIgnore, flags, _r, _ri);
};

/**
   * GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM
   *
   * @param {number} entity
   * @param {number} team
   * @param {number} playerPedToIgnore
   * @param {number} flags
   * @return {number}
   */
global.GetNearestPlayerToEntityOnTeam = function (entity, team, playerPedToIgnore, flags) {
  return Citizen.invokeNative('0xb2c30c3b4aff718c', entity, team, playerPedToIgnore, flags, _r, _ri);
};

/**
   * GET_OBJECT_INDEX_FROM_ENTITY_INDEX
   * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
   *
   * @param {number} entity
   * @return {number}
   */
global.GetObjectIndexFromEntityIndex = function (entity) {
  return Citizen.invokeNative('0x280bbe5601eaa983', entity, _r, _ri);
};

/**
   * GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS
   *
   * @param {number} entity
   * @param {number} posX
   * @param {number} posY
   * @param {number} posZ
   * @return {Vector3}
   */
global.GetOffsetFromEntityGivenWorldCoords = function (entity, posX, posY, posZ) {
  return Citizen.invokeNative('0x497c6b1a2c9ae69c', entity, _fv(posX), _fv(posY), _fv(posZ), _r, _rv);
};

/**
   * GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS
   * Offset values are relative to the entity.
   * 
   * x = left/right
   * y = forward/backward
   * z = up/down
   *
   * @param {number} entity
   * @param {number} offsetX
   * @param {number} offsetY
   * @param {number} offsetZ
   * @return {Vector3}
   */
global.GetOffsetFromEntityInWorldCoords = function (entity, offsetX, offsetY, offsetZ) {
  return Citizen.invokeNative('0x1899f328b0e12848', entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _r, _rv);
};

/**
   * GET_PED_INDEX_FROM_ENTITY_INDEX
   * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
   *
   * @param {number} entity
   * @return {number}
   */
global.GetPedIndexFromEntityIndex = function (entity) {
  return Citizen.invokeNative('0x0f16d042bd640ea3', entity, _r, _ri);
};

/**
   * GET_VEHICLE_INDEX_FROM_ENTITY_INDEX
   * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
   *
   * @param {number} entity
   * @return {number}
   */
global.GetVehicleIndexFromEntityIndex = function (entity) {
  return Citizen.invokeNative('0xdf1e5aac561afc59', entity, _r, _ri);
};

/**
   * GET_WORLD_POSITION_OF_ENTITY_BONE
   * Returns the coordinates of an entity-bone.
   * https://github.com/femga/rdr3_discoveries/tree/master/boneNames
   *
   * @param {number} entity
   * @param {number} boneIndex
   * @return {Vector3}
   */
global.GetWorldPositionOfEntityBone = function (entity, boneIndex) {
  return Citizen.invokeNative('0x82cfa50e34681ca5', entity, boneIndex, _r, _rv);
};

/**
   * HAS_ANIM_EVENT_FIRED
   *
   * @param {number} entity
   * @param {number} actionHash
   * @return {boolean}
   */
global.HasAnimEventFired = function (entity, actionHash) {
  return Citizen.invokeNative('0x5851cc48405f4a07', entity, _ch(actionHash), _r);
};

/**
   * HAS_COLLISION_LOADED_AROUND_ENTITY
   *
   * @param {number} entity
   * @return {boolean}
   */
global.HasCollisionLoadedAroundEntity = function (entity) {
  return Citizen.invokeNative('0xbeb1600952b9cf5c', entity, _r);
};

/**
   * HAS_COLLISION_LOADED_AROUND_POSITION
   * Old name: _HAS_COLLISION_LOADED_AT_COORDS
   *
   * @param {number} xPos
   * @param {number} yPos
   * @param {number} zPos
   * @return {boolean}
   */
global.HasCollisionLoadedAroundPosition = function (xPos, yPos, zPos) {
  return Citizen.invokeNative('0x6bfbdc46139c45ab', _fv(xPos), _fv(yPos), _fv(zPos), _r);
};

/**
   * HAS_ENTITY_ANIM_FINISHED
   *
   * @param {number} entity
   * @param {string | number} animDict
   * @param {string | number} animName
   * @param {number} p3
   * @return {boolean}
   */
global.HasEntityAnimFinished = function (entity, animDict, animName, p3) {
  return Citizen.invokeNative('0xaeb40615337ef1e3', entity, _ts(animDict), _ts(animName), p3, _r);
};

/**
   * HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT
   *
   * @param {number} entity
   * @return {boolean}
   */
global.HasEntityBeenDamagedByAnyObject = function (entity) {
  return Citizen.invokeNative('0x73bb763880cd23a6', entity, _r);
};

/**
   * HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED
   *
   * @param {number} entity
   * @return {boolean}
   */
global.HasEntityBeenDamagedByAnyPed = function (entity) {
  return Citizen.invokeNative('0x9934e9c42d52d87e', entity, _r);
};

/**
   * HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE
   *
   * @param {number} entity
   * @return {boolean}
   */
global.HasEntityBeenDamagedByAnyVehicle = function (entity) {
  return Citizen.invokeNative('0x695d7c26de65c423', entity, _r);
};

/**
   * HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY
   *
   * @param {number} entity1
   * @param {number} entity2
   * @param {boolean} p2
   * @param {boolean} p3
   * @return {boolean}
   */
global.HasEntityBeenDamagedByEntity = function (entity1, entity2, p2, p3) {
  return Citizen.invokeNative('0x7b6e7bec1143ac86', entity1, entity2, p2, p3, _r);
};

/**
   * HAS_ENTITY_CLEAR_LOS_TO_COORD
   *
   * @param {number} entity
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} flags
   * @return {boolean}
   */
global.HasEntityClearLosToCoord = function (entity, x, y, z, flags) {
  return Citizen.invokeNative('0x0c9dbf48c6ba6e4c', entity, _fv(x), _fv(y), _fv(z), flags, _r);
};

/**
   * HAS_ENTITY_CLEAR_LOS_TO_ENTITY
   *
   * @param {number} entity1
   * @param {number} entity2
   * @param {number} traceType
   * @return {boolean}
   */
global.HasEntityClearLosToEntity = function (entity1, entity2, traceType) {
  return Citizen.invokeNative('0xfcdff7b72d23a1ac', entity1, entity2, traceType, _r);
};

/**
   * HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT
   * Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.
   *
   * @param {number} entity1
   * @param {number} entity2
   * @param {number} traceType
   * @return {boolean}
   */
global.HasEntityClearLosToEntityInFront = function (entity1, entity2, traceType) {
  return Citizen.invokeNative('0xe88f19660651d566', entity1, entity2, traceType, _r);
};

/**
   * HAS_ENTITY_COLLIDED_WITH_ANYTHING
   *
   * @param {number} entity
   * @return {boolean}
   */
global.HasEntityCollidedWithAnything = function (entity) {
  return Citizen.invokeNative('0xdf18751ec74f90ff', entity, _r);
};

/**
   * IS_AN_ENTITY
   *
   * @param {number} handle
   * @return {boolean}
   */
global.IsAnEntity = function (handle) {
  return Citizen.invokeNative('0x27cff3e5a286d3df', handle, _r);
};

/**
   * IS_ENTITY_AN_OBJECT
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityAnObject = function (entity) {
  return Citizen.invokeNative('0x0a27a546a375fdef', entity, _r);
};

/**
   * IS_ENTITY_ATTACHED
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityAttached = function (entity) {
  return Citizen.invokeNative('0xee6ad63abf59c0b7', entity, _r);
};

/**
   * IS_ENTITY_ATTACHED_TO_ANY_OBJECT
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityAttachedToAnyObject = function (entity) {
  return Citizen.invokeNative('0x306c1f6178f01ab3', entity, _r);
};

/**
   * IS_ENTITY_ATTACHED_TO_ANY_PED
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityAttachedToAnyPed = function (entity) {
  return Citizen.invokeNative('0xc841153ded2ca89a', entity, _r);
};

/**
   * IS_ENTITY_ATTACHED_TO_ANY_VEHICLE
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityAttachedToAnyVehicle = function (entity) {
  return Citizen.invokeNative('0x12df6e0d2e736749', entity, _r);
};

/**
   * IS_ENTITY_ATTACHED_TO_ENTITY
   *
   * @param {number} from
   * @param {number} to
   * @return {boolean}
   */
global.IsEntityAttachedToEntity = function (from, to) {
  return Citizen.invokeNative('0x154a3c529497053e', from, to, _r);
};

/**
   * IS_ENTITY_AT_COORD
   * Checks if entity is within x/y/zSize distance of x/y/z. 
   * 
   * Last three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0
   *
   * @param {number} entity
   * @param {number} xPos
   * @param {number} yPos
   * @param {number} zPos
   * @param {number} xSize
   * @param {number} ySize
   * @param {number} zSize
   * @param {boolean} p7
   * @param {boolean} p8
   * @param {number} p9
   * @return {boolean}
   */
global.IsEntityAtCoord = function (entity, xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9) {
  return Citizen.invokeNative('0x5e58342602e94718', entity, _fv(xPos), _fv(yPos), _fv(zPos), _fv(xSize), _fv(ySize), _fv(zSize), p7, p8, p9, _r);
};

/**
   * IS_ENTITY_AT_ENTITY
   * Checks if entity1 is within the box defined by x/y/zSize of entity2.
   * 
   * Last three parameters are almost always p5 = 0, p6 = 1, p7 = 0
   *
   * @param {number} entity1
   * @param {number} entity2
   * @param {number} xSize
   * @param {number} ySize
   * @param {number} zSize
   * @param {boolean} p5
   * @param {boolean} p6
   * @param {number} p7
   * @return {boolean}
   */
global.IsEntityAtEntity = function (entity1, entity2, xSize, ySize, zSize, p5, p6, p7) {
  return Citizen.invokeNative('0xc057f02b837a27f6', entity1, entity2, _fv(xSize), _fv(ySize), _fv(zSize), p5, p6, p7, _r);
};

/**
   * IS_ENTITY_A_MISSION_ENTITY
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityAMissionEntity = function (entity) {
  return Citizen.invokeNative('0x138190f64db4bbd1', entity, _r);
};

/**
   * IS_ENTITY_A_PED
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityAPed = function (entity) {
  return Citizen.invokeNative('0xcf8176912dda4ea5', entity, _r);
};

/**
   * IS_ENTITY_A_VEHICLE
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityAVehicle = function (entity) {
  return Citizen.invokeNative('0xc3d96af45fccec4c', entity, _r);
};

/**
   * IS_ENTITY_DEAD
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityDead = function (entity) {
  return Citizen.invokeNative('0x7d5b1f88e7504bba', entity, _r);
};

/**
   * IS_ENTITY_IN_AIR
   *
   * @param {number} entity
   * @param {any} p1
   * @return {boolean}
   */
global.IsEntityInAir = function (entity, p1) {
  return Citizen.invokeNative('0x886e37ec497200b6', entity, p1, _r);
};

/**
   * IS_ENTITY_IN_ANGLED_AREA
   * Creates a spherical cone at origin that extends to surface with the angle specified. Then returns true if the entity is inside the spherical cone
   * 
   * Angle is measured in degrees.
   *
   * @param {number} entity
   * @param {number} originX
   * @param {number} originY
   * @param {number} originZ
   * @param {number} edgeX
   * @param {number} edgeY
   * @param {number} edgeZ
   * @param {number} angle
   * @param {boolean} p8
   * @param {boolean} p9
   * @param {any} p10
   * @return {boolean}
   */
global.IsEntityInAngledArea = function (entity, originX, originY, originZ, edgeX, edgeY, edgeZ, angle, p8, p9, p10) {
  return Citizen.invokeNative('0xd3151e53134595e5', entity, _fv(originX), _fv(originY), _fv(originZ), _fv(edgeX), _fv(edgeY), _fv(edgeZ), _fv(angle), p8, p9, p10, _r);
};

/**
   * IS_ENTITY_IN_AREA
   *
   * @param {number} entity
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {boolean} p7
   * @param {boolean} p8
   * @param {any} p9
   * @return {boolean}
   */
global.IsEntityInArea = function (entity, x1, y1, z1, x2, y2, z2, p7, p8, p9) {
  return Citizen.invokeNative('0x0c2634c40a16193e', entity, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p7, p8, p9, _r);
};

/**
   * IS_ENTITY_IN_VOLUME
   *
   * @param {number} entity
   * @param {number} volume
   * @param {boolean} p2
   * @param {number} p3
   * @return {boolean}
   */
global.IsEntityInVolume = function (entity, volume, p2, p3) {
  return Citizen.invokeNative('0x5a5526bc09c06623', entity, volume, p2, p3, _r);
};

/**
   * IS_ENTITY_IN_WATER
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityInWater = function (entity) {
  return Citizen.invokeNative('0xdde5c125ac446723', entity, _r);
};

/**
   * IS_ENTITY_OCCLUDED
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityOccluded = function (entity) {
  return Citizen.invokeNative('0x140188e884645624', entity, _r);
};

/**
   * IS_ENTITY_ON_SCREEN
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityOnScreen = function (entity) {
  return Citizen.invokeNative('0x613c15d5d8db781f', entity, _r);
};

/**
   * IS_ENTITY_PLAYING_ANIM
   *
   * @param {number} entity
   * @param {string | number} animDict
   * @param {string | number} animName
   * @param {number} animType
   * @return {boolean}
   */
global.IsEntityPlayingAnim = function (entity, animDict, animName, animType) {
  return Citizen.invokeNative('0xdee49d5ca6c49148', entity, _ts(animDict), _ts(animName), animType, _r);
};

/**
   * IS_ENTITY_STATIC
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityStatic = function (entity) {
  return Citizen.invokeNative('0x86468adfa0f6b861', entity, _r);
};

/**
   * IS_ENTITY_TOUCHING_ENTITY
   *
   * @param {number} entity
   * @param {number} targetEntity
   * @return {boolean}
   */
global.IsEntityTouchingEntity = function (entity, targetEntity) {
  return Citizen.invokeNative('0x9a2304a64c3c8423', entity, targetEntity, _r);
};

/**
   * IS_ENTITY_TOUCHING_MODEL
   *
   * @param {number} entity
   * @param {number} modelHash
   * @return {boolean}
   */
global.IsEntityTouchingModel = function (entity, modelHash) {
  return Citizen.invokeNative('0x2ae3ebc8deb9768b', entity, _ch(modelHash), _r);
};

/**
   * IS_ENTITY_UPRIGHT
   *
   * @param {number} entity
   * @param {number} angle
   * @return {boolean}
   */
global.IsEntityUpright = function (entity, angle) {
  return Citizen.invokeNative('0xf6f6afd8d4fb2658', entity, _fv(angle), _r);
};

/**
   * IS_ENTITY_UPSIDEDOWN
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityUpsidedown = function (entity) {
  return Citizen.invokeNative('0x109de3da41aad94a', entity, _r);
};

/**
   * IS_ENTITY_VISIBLE
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityVisible = function (entity) {
  return Citizen.invokeNative('0xffc96ecb7fa404ca', entity, _r);
};

/**
   * IS_ENTITY_VISIBLE_TO_SCRIPT
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityVisibleToScript = function (entity) {
  return Citizen.invokeNative('0xf213c724e77f321a', entity, _r);
};

/**
   * IS_ENTITY_WAITING_FOR_WORLD_COLLISION
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityWaitingForWorldCollision = function (entity) {
  return Citizen.invokeNative('0x5e1cc2e8dc3111dd', entity, _r);
};

/**
   * IS_MAP_ENTITY_PINNED
   *
   * @param {any} p0
   * @return {boolean}
   */
global.IsMapEntityPinned = function (p0) {
  return Citizen.invokeNative('0x1ff441d7954f8709', p0, _r);
};

/**
   * PIN_CLOSEST_MAP_ENTITY
   *
   * @param {number} modelHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} flags
   * @return {any}
   */
global.PinClosestMapEntity = function (modelHash, x, y, z, flags) {
  return Citizen.invokeNative('0x6f3068258a499e52', _ch(modelHash), _fv(x), _fv(y), _fv(z), flags, _r);
};

/**
   * PLACE_ENTITY_ON_GROUND_PROPERLY
   *
   * @param {number} entity
   * @param {boolean} p1
   * @return {boolean}
   */
global.PlaceEntityOnGroundProperly = function (entity, p1) {
  return Citizen.invokeNative('0x9587913b9e772d29', entity, p1, _r);
};

/**
   * PLAY_ENTITY_ANIM
   * https://github.com/femga/rdr3_discoveries/tree/master/animations
   *
   * @param {number} entity
   * @param {string | number} animName
   * @param {string | number} animDict
   * @param {number} p3
   * @param {boolean} loop
   * @param {boolean} stayInAnim
   * @param {boolean} p6
   * @param {number} delta
   * @param {any} bitset
   * @return {boolean}
   */
global.PlayEntityAnim = function (entity, animName, animDict, p3, loop, stayInAnim, p6, delta, bitset) {
  return Citizen.invokeNative('0xdc6d22fab76d4874', entity, _ts(animName), _ts(animDict), _fv(p3), loop, stayInAnim, p6, _fv(delta), bitset, _r);
};

/**
   * REMOVE_FORCED_OBJECT
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.RemoveForcedObject = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x553fa683f2bcd814', p0, p1, p2, p3, p4);
};

/**
   * REMOVE_MODEL_HIDE
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.RemoveModelHide = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x3f38a98576f6213a', p0, p1, p2, p3, p4, p5);
};

/**
   * REMOVE_MODEL_SWAP
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} originalModel
   * @param {number} newModel
   * @param {boolean} p6
   * @return {void}
   */
global.RemoveModelSwap = function (x, y, z, radius, originalModel, newModel, p6) {
  return Citizen.invokeNative('0x824e1c26a14cb817', _fv(x), _fv(y), _fv(z), _fv(radius), _ch(originalModel), _ch(newModel), p6);
};

/**
   * RESET_ENTITY_ALPHA
   *
   * @param {number} entity
   * @return {void}
   */
global.ResetEntityAlpha = function (entity) {
  return Citizen.invokeNative('0x744b9ef44779d9ab', entity);
};

/**
   * SCRIPT_OVERRIDE_ENTITY_LOOT_TABLE_PERMANENT
   * Sets the loot table an entity will carry. Returns true if loot table has been successfully set. Returns false if entity is not a ped or object.
   * https://github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS/loot_rewards.lua
   *
   * @param {number} entity
   * @param {number} lootTable
   * @return {boolean}
   */
global.ScriptOverrideEntityLootTablePermanent = function (entity, lootTable) {
  return Citizen.invokeNative('0x8c03cd6b5e0e85e8', entity, _ch(lootTable), _r);
};

/**
   * SET_CAN_AUTO_VAULT_ON_ENTITY
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.SetCanAutoVaultOnEntity = function (entity, toggle) {
  return Citizen.invokeNative('0x80646744fa88f9d7', entity, toggle);
};

/**
   * SET_CAN_CLIMB_ON_ENTITY
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.SetCanClimbOnEntity = function (entity, toggle) {
  return Citizen.invokeNative('0x24aed2a608f93c4c', entity, toggle);
};

/**
   * SET_ENTITY_ALPHA
   * skin - everything alpha except skin
   * Set entity alpha level. Ranging from 0 to 255 but changes occur after every 20 percent (after every 51).
   *
   * @param {number} entity
   * @param {number} alphaLevel
   * @param {boolean} skin
   * @return {void}
   */
global.SetEntityAlpha = function (entity, alphaLevel, skin) {
  return Citizen.invokeNative('0x0df7692b1d9e7ba7', entity, alphaLevel, skin);
};

/**
   * SET_ENTITY_ALWAYS_PRERENDER
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.SetEntityAlwaysPrerender = function (entity, toggle) {
  return Citizen.invokeNative('0xacad101e1fb66689', entity, toggle);
};

/**
   * SET_ENTITY_AS_MISSION_ENTITY
   * Makes the specified entity (ped, vehicle or object) persistent. Persistent entities will not automatically be removed by the engine.
   *
   * @param {number} entity
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {void}
   */
global.SetEntityAsMissionEntity = function (entity, p1, p2) {
  return Citizen.invokeNative('0xdc19c288082e586e', entity, p1, p2);
};

/**
   * SET_ENTITY_AS_NO_LONGER_NEEDED
   * Marks the specified entity (ped, vehicle or object) as no longer needed.
   * Entities marked as no longer needed, will be deleted as the engine sees fit.
   *
   * @param {number} entity
   * @return {void}
   */
global.SetEntityAsNoLongerNeeded = function (entity) {
  return Citizen.invokeNative('0x4971d2f8162b9674', _ii(entity));
};

/**
   * SET_ENTITY_CAN_BE_DAMAGED
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.SetEntityCanBeDamaged = function (entity, toggle) {
  return Citizen.invokeNative('0x0d06d522b90e861f', entity, toggle);
};

/**
   * SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP
   *
   * @param {number} entity
   * @param {boolean} bCanBeDamaged
   * @param {number} relGroup
   * @return {void}
   */
global.SetEntityCanBeDamagedByRelationshipGroup = function (entity, bCanBeDamaged, relGroup) {
  return Citizen.invokeNative('0x0ef1afb18649e015', entity, bCanBeDamaged, _ch(relGroup));
};

/**
   * SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS
   * Sets whether the entity can be targeted without being in line-of-sight.
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.SetEntityCanBeTargetedWithoutLos = function (entity, toggle) {
  return Citizen.invokeNative('0x6d09f32e284d0fb7', entity, toggle);
};

/**
   * SET_ENTITY_COLLISION
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @param {boolean} keepPhysics
   * @return {void}
   */
global.SetEntityCollision = function (entity, toggle, keepPhysics) {
  return Citizen.invokeNative('0xf66f820909453b8c', entity, toggle, keepPhysics);
};

/**
   * SET_ENTITY_COMPLETELY_DISABLE_COLLISION
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @param {boolean} keepPhysics
   * @return {void}
   */
global.SetEntityCompletelyDisableCollision = function (entity, toggle, keepPhysics) {
  return Citizen.invokeNative('0xe0580ec84813875a', entity, toggle, keepPhysics);
};

/**
   * SET_ENTITY_COORDS
   *
   * @param {number} entity
   * @param {number} xPos
   * @param {number} yPos
   * @param {number} zPos
   * @param {boolean} xAxis
   * @param {boolean} yAxis
   * @param {boolean} zAxis
   * @param {boolean} clearArea
   * @return {void}
   */
global.SetEntityCoords = function (entity, xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea) {
  return Citizen.invokeNative('0x06843da7060a026b', entity, _fv(xPos), _fv(yPos), _fv(zPos), xAxis, yAxis, zAxis, clearArea);
};

/**
   * SET_ENTITY_COORDS_NO_OFFSET
   * Axis - Invert Axis Flags
   *
   * @param {number} entity
   * @param {number} xPos
   * @param {number} yPos
   * @param {number} zPos
   * @param {boolean} xAxis
   * @param {boolean} yAxis
   * @param {boolean} zAxis
   * @return {void}
   */
global.SetEntityCoordsNoOffset = function (entity, xPos, yPos, zPos, xAxis, yAxis, zAxis) {
  return Citizen.invokeNative('0x239a3351ac1da385', entity, _fv(xPos), _fv(yPos), _fv(zPos), xAxis, yAxis, zAxis);
};

/**
   * SET_ENTITY_DYNAMIC
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.SetEntityDynamic = function (entity, toggle) {
  return Citizen.invokeNative('0xfbfc4473f66ce344', entity, toggle);
};

/**
   * SET_ENTITY_HAS_GRAVITY
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.SetEntityHasGravity = function (entity, toggle) {
  return Citizen.invokeNative('0x0cedb728a1083fa7', entity, toggle);
};

/**
   * SET_ENTITY_HEADING
   *
   * @param {number} entity
   * @param {number} heading
   * @return {void}
   */
global.SetEntityHeading = function (entity, heading) {
  return Citizen.invokeNative('0xcf2b9c0645c4651b', entity, _fv(heading));
};

/**
   * SET_ENTITY_HEALTH
   * Sets the entity's health. healthAmount sets the health value to that, and sets the maximum health core value. Setting healthAmount to 0 will kill the entity. entityKilledBy parameter can also be 0
   *
   * @param {number} entity
   * @param {number} healthAmount
   * @param {number} entityKilledBy
   * @return {void}
   */
global.SetEntityHealth = function (entity, healthAmount, entityKilledBy) {
  return Citizen.invokeNative('0xac2767ed8bdfab15', entity, healthAmount, entityKilledBy);
};

/**
   * SET_ENTITY_INVINCIBLE
   * Sets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions.
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.SetEntityInvincible = function (entity, toggle) {
  return Citizen.invokeNative('0xa5c38736c426fcb8', entity, toggle);
};

/**
   * SET_ENTITY_IS_TARGET_PRIORITY
   *
   * @param {number} entity
   * @param {boolean} p1
   * @param {number} p2
   * @return {void}
   */
global.SetEntityIsTargetPriority = function (entity, p1, p2) {
  return Citizen.invokeNative('0x0a5d170c44cb2189', entity, p1, _fv(p2));
};

/**
   * SET_ENTITY_LOAD_COLLISION_FLAG
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.SetEntityLoadCollisionFlag = function (entity, toggle) {
  return Citizen.invokeNative('0x9b9ee31aed48072e', entity, toggle);
};

/**
   * SET_ENTITY_LOD_DIST
   * LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).
   *
   * @param {number} entity
   * @param {number} value
   * @return {void}
   */
global.SetEntityLodDist = function (entity, value) {
  return Citizen.invokeNative('0x5fb407f0a7c877bf', entity, value);
};

/**
   * SET_ENTITY_MAX_HEALTH
   *
   * @param {number} entity
   * @param {number} value
   * @return {void}
   */
global.SetEntityMaxHealth = function (entity, value) {
  return Citizen.invokeNative('0x166e7cf68597d8b5', entity, value);
};

/**
   * SET_ENTITY_MOTION_BLUR
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.SetEntityMotionBlur = function (entity, toggle) {
  return Citizen.invokeNative('0x516c6abd18322b63', entity, toggle);
};

/**
   * SET_ENTITY_NOWEAPONDECALS
   * Old name: _SET_ENTITY_DECALS_DISABLED
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.SetEntityNoweapondecals = function (entity, toggle) {
  return Citizen.invokeNative('0xc64e597783be9a1d', entity, toggle);
};

/**
   * SET_ENTITY_NO_COLLISION_ENTITY
   *
   * @param {number} entity1
   * @param {number} entity2
   * @param {boolean} thisFrameOnly
   * @return {void}
   */
global.SetEntityNoCollisionEntity = function (entity1, entity2, thisFrameOnly) {
  return Citizen.invokeNative('0xe037bf068223c38d', entity1, entity2, thisFrameOnly);
};

/**
   * SET_ENTITY_ONLY_DAMAGED_BY_PLAYER
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.SetEntityOnlyDamagedByPlayer = function (entity, toggle) {
  return Citizen.invokeNative('0x473598683095d430', entity, toggle);
};

/**
   * SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP
   *
   * @param {number} entity
   * @param {boolean} p1
   * @param {number} relationshipGroup
   * @return {void}
   */
global.SetEntityOnlyDamagedByRelationshipGroup = function (entity, p1, relationshipGroup) {
  return Citizen.invokeNative('0x6c1f6aa2f0add104', entity, p1, _ch(relationshipGroup));
};

/**
   * SET_ENTITY_PROOFS
   * https://github.com/femga/rdr3_discoveries/tree/master/AI/ENTITY_PROOFS
   * BOOL p2: handles an additional special proofs flag, so it simply indicates whether it should be enabled or disabled, not sure what exactly it proofs the entity from though
   *
   * @param {number} entity
   * @param {number} proofsBitset
   * @param {boolean} specialFlag
   * @return {void}
   */
global.SetEntityProofs = function (entity, proofsBitset, specialFlag) {
  return Citizen.invokeNative('0xfaee099c6f890bb8', entity, proofsBitset, specialFlag);
};

/**
   * SET_ENTITY_QUATERNION
   *
   * @param {number} entity
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} w
   * @return {void}
   */
global.SetEntityQuaternion = function (entity, x, y, z, w) {
  return Citizen.invokeNative('0x100e7007d13e3687', entity, _fv(x), _fv(y), _fv(z), _fv(w));
};

/**
   * SET_ENTITY_RENDER_SCORCHED
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.SetEntityRenderScorched = function (entity, toggle) {
  return Citizen.invokeNative('0x85b8a7534e44bc23', entity, toggle);
};

/**
   * SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.SetEntityRequiresMoreExpensiveRiverCheck = function (entity, toggle) {
  return Citizen.invokeNative('0x850c940ee3e7b8b5', entity, toggle);
};

/**
   * SET_ENTITY_ROTATION
   *
   * @param {number} entity
   * @param {number} pitch
   * @param {number} roll
   * @param {number} yaw
   * @param {number} rotationOrder
   * @param {boolean} p5
   * @return {void}
   */
global.SetEntityRotation = function (entity, pitch, roll, yaw, rotationOrder, p5) {
  return Citizen.invokeNative('0x9cc8314dfede441e', entity, _fv(pitch), _fv(roll), _fv(yaw), rotationOrder, p5);
};

/**
   * SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION
   * Old name: _SET_ENTITY_CLEANUP_BY_ENGINE
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.SetEntityShouldFreezeWaitingOnCollision = function (entity, toggle) {
  return Citizen.invokeNative('0x740cb4f3f602c9f4', entity, toggle);
};

/**
   * SET_ENTITY_VELOCITY
   * Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
   *
   * @param {number} entity
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.SetEntityVelocity = function (entity, x, y, z) {
  return Citizen.invokeNative('0x1c99bb7b6e96d16f', entity, _fv(x), _fv(y), _fv(z));
};

/**
   * SET_ENTITY_VISIBLE
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.SetEntityVisible = function (entity, toggle) {
  return Citizen.invokeNative('0x1794b4fcc84d812f', entity, toggle);
};

/**
   * SET_OBJECT_AS_NO_LONGER_NEEDED
   * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
   *
  
   * @return {number}
   */
global.SetObjectAsNoLongerNeeded = function () {
  return Citizen.invokeNative('0x3ae22deb5ba5a3e6', _i);
};

/**
   * SET_PED_AS_NO_LONGER_NEEDED
   * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
   *
  
   * @return {number}
   */
global.SetPedAsNoLongerNeeded = function () {
  return Citizen.invokeNative('0x2595dd4236549ce3', _i);
};

/**
   * SET_VEHICLE_AS_NO_LONGER_NEEDED
   * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
   *
  
   * @return {number}
   */
global.SetVehicleAsNoLongerNeeded = function () {
  return Citizen.invokeNative('0x629bfa74418d6239', _i);
};

/**
   * STOP_ENTITY_ANIM
   *
   * @param {number} entity
   * @param {string | number} animation
   * @param {string | number} animGroup
   * @param {number} p3
   * @return {any}
   */
global.StopEntityAnim = function (entity, animation, animGroup, p3) {
  return Citizen.invokeNative('0x786591d986de9159', entity, _ts(animation), _ts(animGroup), _fv(p3), _r);
};

/**
   * WOULD_ENTITY_BE_OCCLUDED
   *
   * @param {number} entityModelHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {boolean} p4
   * @return {boolean}
   */
global.WouldEntityBeOccluded = function (entityModelHash, x, y, z, p4) {
  return Citizen.invokeNative('0x3546fab293ff2981', _ch(entityModelHash), _fv(x), _fv(y), _fv(z), p4, _r);
};

/**
   * _0x002AAC783ED323ED
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x002AAC783ED323ED = function (p0, p1) {
  return Citizen.invokeNative('0x002aac783ed323ed', p0, p1);
};

/**
   * _0x007AAC783ED323ED
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x007AAC783ED323ED = function (p0, p1, p2) {
  return Citizen.invokeNative('0x007aac783ed323ed', p0, p1, p2);
};

/**
   * _0x0939E773925C4719
   *
  
   * @return {void}
   */
global.N_0x0939E773925C4719 = function () {
  return Citizen.invokeNative('0x0939e773925c4719');
};

/**
   * _0x0CCEFC6C2C95DA2A
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {any}
   */
global.N_0x0CCEFC6C2C95DA2A = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x0ccefc6c2c95da2a', p0, p1, p2, p3, _r);
};

/**
   * _0x0DB41D59E0F1502B
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x0DB41D59E0F1502B = function (p0) {
  return Citizen.invokeNative('0x0db41d59e0f1502b', p0);
};

/**
   * _0x0FD7D7C232876E72
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x0FD7D7C232876E72 = function (p0) {
  return Citizen.invokeNative('0x0fd7d7c232876e72', p0);
};

/**
   * _0x119A5714578F4E05
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x119A5714578F4E05 = function (p0, p1) {
  return Citizen.invokeNative('0x119a5714578f4e05', p0, p1);
};

/**
   * _0x120376C23F019C6C
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x120376C23F019C6C = function (p0, p1) {
  return Citizen.invokeNative('0x120376c23f019c6c', p0, p1, _r);
};

/**
   * _0x16908E859C3AB698
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0x16908E859C3AB698 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x16908e859c3ab698', p0, p1, p2, p3, p4);
};

/**
   * _0x188736456D1DEDE6
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x188736456D1DEDE6 = function (p0, p1) {
  return Citizen.invokeNative('0x188736456d1dede6', p0, p1, _r);
};

/**
   * _0x20FAEE47427A4497
   *
  
   * @return {void}
   */
global.N_0x20FAEE47427A4497 = function () {
  return Citizen.invokeNative('0x20faee47427a4497');
};

/**
   * _0x2A77EF9BEC8518F4
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x2A77EF9BEC8518F4 = function (p0) {
  return Citizen.invokeNative('0x2a77ef9bec8518f4', p0, _r);
};

/**
   * _0x2D40BCBFE9305DEA
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x2D40BCBFE9305DEA = function (p0, p1) {
  return Citizen.invokeNative('0x2d40bcbfe9305dea', p0, p1);
};

/**
   * _0x350E9211074955AF
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x350E9211074955AF = function (p0, p1) {
  return Citizen.invokeNative('0x350e9211074955af', p0, p1, _r);
};

/**
   * _0x371D179701D9C082
   * Called if entity is in water and submerged level is larger than 1f. If CARRYING_FLAG_FORCE_ALLOW_WARP_TO_SAFE_GROUND_LOCATION is true, it gets disabled as well.
   *
   * @param {number} entity
   * @return {void}
   */
global.N_0x371D179701D9C082 = function (entity) {
  return Citizen.invokeNative('0x371d179701d9c082', entity);
};

/**
   * _0x37B01666BAE8F7EF
   * Seems to return true if entity is burned / scorched
   * _GET_ENTITY_*
   *
   * @param {number} entity
   * @return {any}
   */
global.N_0x37B01666BAE8F7EF = function (entity) {
  return Citizen.invokeNative('0x37b01666bae8f7ef', entity, _r);
};

/**
   * _0x37CEB637BA3B1A47
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x37CEB637BA3B1A47 = function (p0) {
  return Citizen.invokeNative('0x37ceb637ba3b1a47', p0);
};

/**
   * _0x383F64263F946E45
   * Used when checking if ped is in water
   *
   * @param {number} entity
   * @param {number} p2
   * @param {number} ped
   * @param {any} p4
   * @param {number} p5
   * @return {[boolean, number]}
   */
global.N_0x383F64263F946E45 = function (entity, p2, ped, p4, p5) {
  return Citizen.invokeNative('0x383f64263f946e45', _i, entity, p2, ped, p4, p5, _r);
};

/**
   * _0x3AB3A77672F6473F
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {Vector3}
   */
global.N_0x3AB3A77672F6473F = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x3ab3a77672f6473f', p0, p1, p2, p3, _r, _rv);
};

/**
   * _0x3EC28DA1FFAC9DDD
   * Used in Script Function DUELING_DID_PLAYER_DISARM_OPPONENT
   *
   * @param {number} entity1
   * @param {number} entity2
   * @param {any} p2
   * @param {any} p3
   * @return {boolean}
   */
global.N_0x3EC28DA1FFAC9DDD = function (entity1, entity2, p2, p3) {
  return Citizen.invokeNative('0x3ec28da1ffac9ddd', entity1, entity2, p2, p3, _r);
};

/**
   * _0x3F08C6163A4AB1D6
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x3F08C6163A4AB1D6 = function (p0) {
  return Citizen.invokeNative('0x3f08c6163a4ab1d6', p0);
};

/**
   * _ATTACH_ENTITY_TO_COORDS_PHYSICALLY
   * Attach an entity to coordinates physically better name may be perfered? seems to be used with boats `p_skiff02x` ? The last 6 params are always 0 everywhere in the base code. p7 = 500.0 some kind of time? p8 =1
   *
   * @param {number} entity
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} offsetx
   * @param {number} offsety
   * @param {number} offsetz
   * @param {number} p7
   * @param {boolean} p8
   * @param {number} p9
   * @param {number} p10
   * @param {number} p11
   * @param {number} p12
   * @param {number} p13
   * @param {number} p14
   * @return {void}
   */
global.AttachEntityToCoordsPhysically = function (entity, x, y, z, offsetx, offsety, offsetz, p7, p8, p9, p10, p11, p12, p13, p14) {
  return Citizen.invokeNative('0x445d7d8ea66e373e', entity, _fv(x), _fv(y), _fv(z), _fv(offsetx), _fv(offsety), _fv(offsetz), _fv(p7), p8, p9, p10, p11, p12, p13, p14);
};

/**
   * _0x56E0735D6273B227
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x56E0735D6273B227 = function (p0, p1) {
  return Citizen.invokeNative('0x56e0735d6273b227', p0, p1);
};

/**
   * _0x5744562E973E33CD
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {any}
   */
global.N_0x5744562E973E33CD = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x5744562e973e33cd', p0, p1, p2, p3, p4, _r);
};

/**
   * _0x5826EFD6D73C4DE5
   * _REMOVE_DECALS_* - _REMOVE_FORCED*
   *
   * @param {number} entity
   * @return {void}
   */
global.N_0x5826EFD6D73C4DE5 = function (entity) {
  return Citizen.invokeNative('0x5826efd6d73c4de5', entity);
};

/**
   * _0x582F73ACFE969571
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0x582F73ACFE969571 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x582f73acfe969571', p0, p1, p2, _r);
};

/**
   * _0x5E214112806591EA
   * Attaches scenario to bone with an offset
   * _GET_I* - _GET_M*
   *
   * @param {number} entity
   * @param {number} boneIndex
   * @return {Vector3}
   */
global.N_0x5E214112806591EA = function (entity, boneIndex) {
  return Citizen.invokeNative('0x5e214112806591ea', entity, boneIndex, _r, _rv);
};

/**
   * _SET_FILL_IN_STATE_FOR_ENTITY
   * sets the fill in state for some objects like for the stew, coffee mug ,poker chips, jugs ? P1 is either 0 or 2 p2 seems to be a label/name p3 is the fill in state, max seems to be for some 3.0 (most is 1.0) - 0.0
   * heres some of the labels/names found 
   * tumbler_fill, Canvas, Stew_Fill, from Chip01_Ctrl to Chip10_Ctrl, from empty_jug01_Ctrl to empty_jug20_Ctrl, from full_jug01_Ctrl to full_jug20_Ctrl, CTRL_cupFill, Food_DOF_Fill, from WhiteChip_Ctrl_0 to WhiteChip_Ctrl_10, from BlueChip_Ctrl_0 to BlueChip_Ctrl_10, from BlackChip_Ctrl_0 to BlackChip_Ctrl_10, from RedChip_Ctrl_0 to RedChip_Ctrl_10,
   *
   * @param {number} entity
   * @param {number} p1
   * @param {string | number} p2
   * @param {number} fill
   * @return {void}
   */
global.SetFillInStateForEntity = function (entity, p1, p2, fill) {
  return Citizen.invokeNative('0x669655ffb29ef1a9', entity, p1, _ts(p2), _fv(fill));
};

/**
   * _0x6C31B06E91518269
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x6C31B06E91518269 = function (p0, p1) {
  return Citizen.invokeNative('0x6c31b06e91518269', p0, p1);
};

/**
   * _0x6D58167F62238284
   *
   * @param {number} vehicle
   * @return {number}
   */
global.N_0x6D58167F62238284 = function (vehicle) {
  return Citizen.invokeNative('0x6d58167f62238284', vehicle, _r, _rf);
};

/**
   * _0x7A49D40DE437BC8D
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x7A49D40DE437BC8D = function (p0, p1) {
  return Citizen.invokeNative('0x7a49d40de437bc8d', p0, p1);
};

/**
   * _0x7F20092547B4DDEA
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x7F20092547B4DDEA = function (p0) {
  return Citizen.invokeNative('0x7f20092547b4ddea', p0);
};

/**
   * _0x80FDEB3A9E9AA578
   *
   * @param {number} entity
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x80FDEB3A9E9AA578 = function (entity, p1) {
  return Citizen.invokeNative('0x80fdeb3a9e9aa578', entity, p1);
};

/**
   * _0x898586729DB5221D
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x898586729DB5221D = function (ped) {
  return Citizen.invokeNative('0x898586729db5221d', ped);
};

/**
   * _0x8E10DF0FFA63FB65
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {any}
   */
global.N_0x8E10DF0FFA63FB65 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x8e10df0ffa63fb65', p0, p1, p2, p3, p4, _r);
};

/**
   * _0x8E46E18AA828334F
   * Used in Script Function GENERIC_ITEM_HAS_ANIM_COMPLETED
   * _GET_ENTITY_*
   *
   * @param {number} entity
   * @param {string | number} animDict
   * @param {string | number} animClip
   * @return {number}
   */
global.N_0x8E46E18AA828334F = function (entity, animDict, animClip) {
  return Citizen.invokeNative('0x8e46e18aa828334f', entity, _ts(animDict), _ts(animClip), _r, _rf);
};

/**
   * _0x978AA2323ED32209
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x978AA2323ED32209 = function (p0, p1) {
  return Citizen.invokeNative('0x978aa2323ed32209', p0, p1);
};

/**
   * _0x9C6906EF8CB20C5F
   *
   * @param {number} entity
   * @return {void}
   */
global.N_0x9C6906EF8CB20C5F = function (entity) {
  return Citizen.invokeNative('0x9c6906ef8cb20c5f', entity);
};

/**
   * _0xA48E4801DEBDF7E4
   *
   * @param {number} entity
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xA48E4801DEBDF7E4 = function (entity, p1) {
  return Citizen.invokeNative('0xa48e4801debdf7e4', entity, p1);
};

/**
   * _0xA9E6D8F2DDFC4DB9
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xA9E6D8F2DDFC4DB9 = function (p0, p1) {
  return Citizen.invokeNative('0xa9e6d8f2ddfc4db9', p0, p1);
};

/**
   * _0xAAACB74442C1BED3
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xAAACB74442C1BED3 = function (p0) {
  return Citizen.invokeNative('0xaaacb74442c1bed3', p0, _r);
};

/**
   * _0xAF72EC7E1B54539B
   *
   * @param {number} entity
   * @return {number}
   */
global.N_0xAF72EC7E1B54539B = function (entity) {
  return Citizen.invokeNative('0xaf72ec7e1b54539b', entity, _r, _ri);
};

/**
   * _0xAF7F3099B9FEB535
   * SET_ENTITY_LO*
   *
   * @param {number} entity
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @return {void}
   */
global.N_0xAF7F3099B9FEB535 = function (entity, p1, p2, p3) {
  return Citizen.invokeNative('0xaf7f3099b9feb535', entity, _fv(p1), _fv(p2), _fv(p3));
};

/**
   * _0xB16C780C51E51E2B
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xB16C780C51E51E2B = function (p0) {
  return Citizen.invokeNative('0xb16c780c51e51e2b', p0, _r);
};

/**
   * _0xB38A29CCD5447783
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xB38A29CCD5447783 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xb38a29ccd5447783', p0, p1, p2);
};

/**
   * _0xBA2A089E60ED1163
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {any}
   */
global.N_0xBA2A089E60ED1163 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xba2a089e60ed1163', p0, p1, p2, p3, p4, _r);
};

/**
   * _0xBD94CECFB2D65119
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.N_0xBD94CECFB2D65119 = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xbd94cecfb2d65119', p0, p1, p2, p3, p4, p5);
};

/**
   * _0xC0EDEF16D90661EE
   * SET_ENTITY_A*
   *
   * @param {number} entity
   * @param {number} p1
   * @return {void}
   */
global.N_0xC0EDEF16D90661EE = function (entity, p1) {
  return Citizen.invokeNative('0xc0edef16d90661ee', entity, _fv(p1));
};

/**
   * _0xC2E71D7E0A7B4C89
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xC2E71D7E0A7B4C89 = function (p0) {
  return Citizen.invokeNative('0xc2e71d7e0a7b4c89', p0, _r);
};

/**
   * _0xC3ABCFBC7D74AFA5
   * Returns BOOL in ida
   *
   * @param {number} ped
   * @param {number} p1
   * @param {boolean} p2
   * @return {void}
   */
global.N_0xC3ABCFBC7D74AFA5 = function (ped, p1, p2) {
  return Citizen.invokeNative('0xc3abcfbc7d74afa5', ped, p1, p2);
};

/**
   * _0xC6A1A3D63F122DE7
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xC6A1A3D63F122DE7 = function (p0, p1) {
  return Citizen.invokeNative('0xc6a1a3d63f122de7', p0, p1);
};

/**
   * _0xC76E94A78127412B
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xC76E94A78127412B = function (p0, p1, p2) {
  return Citizen.invokeNative('0xc76e94a78127412b', p0, p1, p2);
};

/**
   * _0xCDB682BB47C02F0A
   *
   * @param {number} entity
   * @param {number} p1
   * @return {void}
   */
global.N_0xCDB682BB47C02F0A = function (entity, p1) {
  return Citizen.invokeNative('0xcdb682bb47c02f0a', entity, _ch(p1));
};

/**
   * _0xD21C7418C590BB40
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xD21C7418C590BB40 = function (p0) {
  return Citizen.invokeNative('0xd21c7418c590bb40', p0, _r);
};

/**
   * _0xD45BB89B53FC0CFD
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.N_0xD45BB89B53FC0CFD = function (p0, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0xd45bb89b53fc0cfd', p0, p1, p2, p3, p4, p5, p6, p7);
};

/**
   * _0xD4636C2EDB0DEA8A
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xD4636C2EDB0DEA8A = function (p0) {
  return Citizen.invokeNative('0xd4636c2edb0dea8a', p0, _r);
};

/**
   * _0xD46BF94C4C66FAB0
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {any}
   */
global.N_0xD46BF94C4C66FAB0 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xd46bf94c4c66fab0', p0, p1, p2, p3, _r);
};

/**
   * _0xDD03FC2089AD093C
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0xDD03FC2089AD093C = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xdd03fc2089ad093c', p0, p1, p2, p3);
};

/**
   * _0xDF8E49EA89A01DB1
   * Hardcoded to return zero/false.
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0xDF8E49EA89A01DB1 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xdf8e49ea89a01db1', p0, p1, p2, _r);
};

/**
   * _0xDFC2B226D56D85F6
   *
   * @param {any} p0
   * @param {any} p1
   * @return {number}
   */
global.N_0xDFC2B226D56D85F6 = function (p0, p1) {
  return Citizen.invokeNative('0xdfc2b226d56d85f6', p0, p1, _r, _rf);
};

/**
   * _0xE19035EB65AB2932
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xE19035EB65AB2932 = function (p0, p1) {
  return Citizen.invokeNative('0xe19035eb65ab2932', p0, p1);
};

/**
   * _0xE31FC20319874CB3
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0xE31FC20319874CB3 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xe31fc20319874cb3', p0, p1, p2, _r);
};

/**
   * _0xE75EEA8DB59A9F39
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.N_0xE75EEA8DB59A9F39 = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xe75eea8db59a9f39', p0, p1, p2, p3, p4, p5);
};

/**
   * _0xE9E7A0BAC7F57746
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xE9E7A0BAC7F57746 = function (p0, p1) {
  return Citizen.invokeNative('0xe9e7a0bac7f57746', p0, p1);
};

/**
   * _0xEAB3D91D30A344F1
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xEAB3D91D30A344F1 = function (p0) {
  return Citizen.invokeNative('0xeab3d91d30a344f1', p0);
};

/**
   * _0xEF259AA1E097E0AD
   *
   * @param {number} entity
   * @param {any} p1
   * @return {void}
   */
global.N_0xEF259AA1E097E0AD = function (entity, p1) {
  return Citizen.invokeNative('0xef259aa1e097e0ad', entity, p1);
};

/**
   * _GET_ENTITY_LOOTING_PED
   * Returns the entity that is looting a ped but only while the looting is active
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityLootingPed = function (entity) {
  return Citizen.invokeNative('0xef2d9ed7ce684f08', entity, _r, _ri);
};

/**
   * _0xF41E2979D5BC5370
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xF41E2979D5BC5370 = function (p0) {
  return Citizen.invokeNative('0xf41e2979d5bc5370', p0);
};

/**
   * _0xF59FDE7B4D31A630
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xF59FDE7B4D31A630 = function (p0) {
  return Citizen.invokeNative('0xf59fde7b4d31a630', p0, _r);
};

/**
   * SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS
   *
   * @param {number} entityIndex
   * @param {boolean} bOnlyDamagedWhenRunningScript
   * @return {void}
   */
global.SetEntityCanOnlyBeDamagedByScriptParticipants = function (entityIndex, bOnlyDamagedWhenRunningScript) {
  return Citizen.invokeNative('0xff83af534156b399', entityIndex, bOnlyDamagedWhenRunningScript);
};

/**
   * _0xFF9965C47FA404DA
   * SET_ENTITY_LO*
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.N_0xFF9965C47FA404DA = function (entity, toggle) {
  return Citizen.invokeNative('0xff9965c47fa404da', entity, toggle);
};

/**
   * _ADD_ENTITY_TRACKING_TRAILS
   *
   * @param {number} entity
   * @return {void}
   */
global.AddEntityTrackingTrails = function (entity) {
  return Citizen.invokeNative('0x1ad922ab5038def3', entity);
};

/**
   * _CHANGE_ENTITY_HEALTH
   * Alters entity's health by 'amount'. Can be negative (to drain health).
   * In the scripts entity2 and weaponHash are unused (zero).
   *
   * @param {number} entity
   * @param {number} amount
   * @param {number} entity2
   * @param {number} weaponHash
   * @return {boolean}
   */
global.ChangeEntityHealth = function (entity, amount, entity2, weaponHash) {
  return Citizen.invokeNative('0x835f131e7dc8f97a', entity, _fv(amount), entity2, _ch(weaponHash), _r);
};

/**
   * _CREATE_FOOTPATH_TRAIL
   *
   * @param {any} p0
   * @param {string | number} waypointRecord
   * @param {boolean} bUseSnowOffset
   * @param {number} p3
   * @param {number} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @param {boolean} bInit
   * @return {any}
   */
global.CreateFootpathTrail = function (p0, waypointRecord, bUseSnowOffset, p3, p4, p5, p6, p7, p8, p9, p10, bInit) {
  return Citizen.invokeNative('0x29ba9f78321e5a6c', p0, _ts(waypointRecord), bUseSnowOffset, _fv(p3), _fv(p4), p5, p6, p7, p8, p9, p10, bInit, _r);
};

/**
   * _DELETE_CARRIABLE
   *
   * @param {number} entity
   * @return {void}
   */
global.DeleteCarriable = function (entity) {
  return Citizen.invokeNative('0x0d0db2b6af19a987', _ii(entity));
};

/**
   * _DELETE_ENTITY_2
   * Must be called from a background script, otherwise it will do nothing.
   *
   * @param {number} entity
   * @return {void}
   */
global.DeleteEntity_2 = function (entity) {
  return Citizen.invokeNative('0x5e94ea09e7207c16', _ii(entity));
};

/**
   * _DOES_THREAD_OWN_THIS_ENTITY
   * Returns true if calling script owns specified entity
   *
   * @param {number} entity
   * @return {boolean}
   */
global.DoesThreadOwnThisEntity = function (entity) {
  return Citizen.invokeNative('0x88ad6cc10d8d35b2', entity, _r);
};

/**
   * _GET_CARRIABLE_FROM_ENTITY
   * Returns a hash of an entity's name. (Alternative Name: _GET_ENTITY_PROMPT_NAME_HASH)
   *
   * @param {number} entity
   * @return {number}
   */
global.GetCarriableFromEntity = function (entity) {
  return Citizen.invokeNative('0x31fef6a20f00b963', entity, _r, _ri);
};

/**
   * _GET_ENTITIES_IN_VOLUME
   *
   * @param {number} volume
   * @param {number} itemSet
   * @param {number} entityType
   * @return {number}
   */
global.GetEntitiesInVolume = function (volume, itemSet, entityType) {
  return Citizen.invokeNative('0x886171a12f400b89', volume, itemSet, entityType, _r, _ri);
};

/**
   * _GET_ENTITIES_NEAR_POINT
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} itemSet
   * @param {number} p5
   * @return {number}
   */
global.GetEntitiesNearPoint = function (x, y, z, radius, itemSet, p5) {
  return Citizen.invokeNative('0x59b57c4b06531e1e', _fv(x), _fv(y), _fv(z), _fv(radius), itemSet, p5, _r, _ri);
};

/**
   * _GET_ENTITY_ANIM_CURRENT_TIME
   * Returns a normalized value between 0.0f and 1.0f. You can get the actual anim time by multiplying this by GET_ANIM_DURATION
   *
   * @param {number} entity
   * @param {string | number} animDict
   * @param {string | number} animName
   * @return {number}
   */
global.GetEntityAnimCurrentTime = function (entity, animDict, animName) {
  return Citizen.invokeNative('0x627520389e288a73', entity, _ts(animDict), _ts(animName), _r, _rf);
};

/**
   * _GET_ENTITY_BY_DOORHASH
   * Params: p1 = 0 in R* Scripts (GET_DOOR_ENTITY_FROM_ID)
   * https://github.com/femga/rdr3_discoveries/blob/master/doorHashes/doorhashes.lua
   *
   * @param {number} doorHash
   * @param {number} p1
   * @return {number}
   */
global.GetEntityByDoorhash = function (doorHash, p1) {
  return Citizen.invokeNative('0xf7424890e4a094c0', _ch(doorHash), p1, _r, _ri);
};

/**
   * GET_ENTITY_CAN_BE_DAMAGED
   * Old name: _GET_ENTITY_CAN_BE_DAMAGED
   *
   * @param {number} entity
   * @return {boolean}
   */
global.GetEntityCanBeDamaged = function (entity) {
  return Citizen.invokeNative('0x75df9e73f2f005fd', entity, _r);
};

/**
   * _GET_ENTITY_CARRYING_FLAG
   * flagId: see _SET_ENTITY_CARRYING_FLAG
   *
   * @param {number} entity
   * @param {number} flagId
   * @return {boolean}
   */
global.GetEntityCarryingFlag = function (entity, flagId) {
  return Citizen.invokeNative('0x808077647856de62', entity, flagId, _r);
};

/**
   * _GET_ENTITY_CARRY_CONFIG
   * Returns zero if the entity is not a carriable
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityCarryConfig = function (entity) {
  return Citizen.invokeNative('0x0fd25587bb306c86', entity, _r, _ri);
};

/**
   * _GET_ENTITY_FORWARD_VECTOR_YX
   * Gets the entity's forward vector in YX(Z) eulers. Similar to GET_ENTITY_FORWARD_VECTOR
   *
   * @param {number} entity
   * @return {Vector3}
   */
global.GetEntityForwardVectorYx = function (entity) {
  return Citizen.invokeNative('0x935a30aa88fb1014', entity, _r, _rv);
};

/**
   * _GET_ENTITY_HEALTH_FLOAT
   * Returns (CUR_HEALTH / MAX_HEALTH)
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityHealthFloat = function (entity) {
  return Citizen.invokeNative('0x96c638784db4c815', entity, _r, _rf);
};

/**
   * GET_ENTITY_PROOFS
   * Note: this native was removed in 1232 but added back in 1311
   * Old name: _GET_ENTITY_PROOFS
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityProofs = function (entity) {
  return Citizen.invokeNative('0x6cf0dad7fa1088ea', entity, _r, _ri);
};

/**
   * _GET_ENTITY_SCRIPT
   *
   * @param {number} entity
   * @param {DataView} argStruct
   * @return {number}
   */
global.GetEntityScript = function (entity, argStruct) {
  return Citizen.invokeNative('0x2a08a32b6d49906f', entity, argStruct, _r, _ri);
};

/**
   * _GET_ENTITY_THREAT_TIER
   *
   * @param {number} entity
   * @return {number}
   */
global.GetEntityThreatTier = function (entity) {
  return Citizen.invokeNative('0xe12f56cb25d9ce23', entity, _r, _ri);
};

/**
   * _GET_ENTITY_WORLD_POSITION_OF_DIMENSIONS
   *
   * @param {number} entity
   * @return {[Vector3, Vector3]}
   */
global.GetEntityWorldPositionOfDimensions = function (entity) {
  return Citizen.invokeNative('0xf3fda9a617a15145', entity, _v, _v);
};

/**
   * _GET_IS_BIRD
   *
   * @param {number} entity
   * @return {boolean}
   */
global.GetIsBird = function (entity) {
  return Citizen.invokeNative('0xc346a546612c49a9', entity, _r);
};

/**
   * _GET_IS_CARRIABLE_PELT
   *
   * @param {number} entity
   * @return {boolean}
   */
global.GetIsCarriablePelt = function (entity) {
  return Citizen.invokeNative('0x255b6db4e3ad3c3e', entity, _r);
};

/**
   * _GET_IS_PREDATOR
   *
   * @param {number} entity
   * @return {boolean}
   */
global.GetIsPredator = function (entity) {
  return Citizen.invokeNative('0x5594afe9de0c01b7', entity, _r);
};

/**
   * _GET_OPTIMAL_CARRY_CONFIG
   * Valid indices: 0 - 3
   * Index 1 always returns a `hogtied` config, doesn't matter the entity.
   * It's for humans only and the ped must be resurrected first if it's dead.
   *
   * @param {number} entity
   * @param {number} index
   * @return {number}
   */
global.GetOptimalCarryConfig = function (entity, index) {
  return Citizen.invokeNative('0x34f008a7e48c496b', entity, index, _r, _ri);
};

/**
   * _GET_PED_ANIMAL_TYPE
   * Returns the ped's animal type hash: https://alloc8or.re/rdr3/doc/enums/eAnimalType.txt
   * Combine this with GET_STRING_FROM_HASH_KEY to display localized entity names
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedAnimalType = function (ped) {
  return Citizen.invokeNative('0x964000d355219fc0', ped, _r, _ri);
};

/**
   * _GET_PINNED_MAP_ENTITY
   *
   * @param {any} p0
   * @return {number}
   */
global.GetPinnedMapEntity = function (p0) {
  return Citizen.invokeNative('0x4735e2a4bb83d9da', p0, _r, _ri);
};

/**
   * _GET_SCRIPT_OVERRIDE_ENTITY_LOOT_TABLE_PERMANENT
   * Returns false if entity is not a ped or object.
   *
   * @param {number} entity
   * @return {[boolean, number]}
   */
global.GetScriptOverrideEntityLootTablePermanent = function (entity) {
  return Citizen.invokeNative('0x1e804ea9b12030a4', entity, _i, _r);
};

/**
   * _IS_CARRIABLE_MODEL
   *
   * @param {number} model
   * @return {boolean}
   */
global.IsCarriableModel = function (model) {
  return Citizen.invokeNative('0x5affa9ddc87846f8', _ch(model), _r);
};

/**
   * _IS_ENTITY_FROZEN
   * Getter for FREEZE_ENTITY_POSITION
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityFrozen = function (entity) {
  return Citizen.invokeNative('0x083d497d57b7400f', entity, _r);
};

/**
   * _IS_ENTITY_FULLY_LOOTED
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityFullyLooted = function (entity) {
  return Citizen.invokeNative('0x8de41e9902e85756', entity, _r);
};

/**
   * _IS_ENTITY_ON_TRAIN_TRACK
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityOnTrainTrack = function (entity) {
  return Citizen.invokeNative('0x857acb0ab4bd0d55', entity, _r);
};

/**
   * _IS_ENTITY_OWNED_BY_PERSISTENCE_SYSTEM
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityOwnedByPersistenceSystem = function (entity) {
  return Citizen.invokeNative('0xa7e51b53309eac97', entity, _r);
};

/**
   * _IS_ENTITY_PLAYING_ANY_ANIM
   * Params: p1 (probably animType) = 1, 0
   *
   * @param {number} entity
   * @param {number} p1
   * @return {boolean}
   */
global.IsEntityPlayingAnyAnim = function (entity, p1) {
  return Citizen.invokeNative('0x0b7cb1300cbfe19c', entity, p1, _r);
};

/**
   * _IS_ENTITY_UNDERWATER
   *
   * @param {number} entity
   * @param {boolean} p1
   * @return {boolean}
   */
global.IsEntityUnderwater = function (entity, p1) {
  return Citizen.invokeNative('0xd4e5c1e93c466127', entity, p1, _r);
};

/**
   * _IS_TRACKED_ENTITY_VISIBLE
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsTrackedEntityVisible = function (entity) {
  return Citizen.invokeNative('0xc8ccdb712fbcba92', entity, _r);
};

/**
   * _PAUSE_ENTITY_TRACKING
   *
   * @param {number} entity
   * @param {boolean} pause
   * @return {void}
   */
global.PauseEntityTracking = function (entity, pause) {
  return Citizen.invokeNative('0x36eb4d34d4a092c5', entity, pause);
};

/**
   * _REQUEST_ENTITY_LOOT_LIST
   *
   * @param {number} mount
   * @param {DataView} argStruct
   * @param {number} visiblelootslotrequestType
   * @param {number} flag
   * @param {number} p4
   * @param {boolean} p5
   * @return {boolean}
   */
global.RequestEntityLootList = function (mount, argStruct, visiblelootslotrequestType, flag, p4, p5) {
  return Citizen.invokeNative('0xa88e215ceb0435c0', mount, argStruct, _ch(visiblelootslotrequestType), flag, p4, p5, _r);
};

/**
   * _SEARCH_BUILDING_POOL_FOR_ENTITY_WITH_THIS_MODEL
   * Alternative Name: _GET_ENTITY_FROM_MAP_OBJECT; You can get existing objects and manipulate them using this native.
   *
   * @param {number} modelHash
   * @return {number}
   */
global.SearchBuildingPoolForEntityWithThisModel = function (modelHash) {
  return Citizen.invokeNative('0x66b2b83b94b22458', _ch(modelHash), _r, _ri);
};

/**
   * _SET_ENTITY_ANIM_CURRENT_TIME
   *
   * @param {number} entity
   * @param {string | number} animDict
   * @param {string | number} animName
   * @param {number} time
   * @return {void}
   */
global.SetEntityAnimCurrentTime = function (entity, animDict, animName, time) {
  return Citizen.invokeNative('0x11cdabdc7783b2bc', entity, _ts(animDict), _ts(animName), _fv(time));
};

/**
   * _SET_ENTITY_ANIM_SPEED
   *
   * @param {number} entity
   * @param {string | number} animDict
   * @param {string | number} animName
   * @param {number} speedMultiplier
   * @return {void}
   */
global.SetEntityAnimSpeed = function (entity, animDict, animName, speedMultiplier) {
  return Citizen.invokeNative('0xeaa885ba3cea4e4a', entity, _ts(animDict), _ts(animName), _fv(speedMultiplier));
};

/**
   * _SET_ENTITY_CARCASS_TYPE
   * Changes type and quality of skins
   * type hashes: https://pastebin.com/C1WvQjCy
   *
   * @param {number} entity
   * @param {number} type
   * @return {void}
   */
global.SetEntityCarcassType = function (entity, type) {
  return Citizen.invokeNative('0x399657ed871b3a6c', entity, _ch(type));
};

/**
   * _SET_ENTITY_CARRYING_FLAG
   * flagId: https://github.com/femga/rdr3_discoveries/tree/master/AI/CARRYING_FLAGS
   * https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CCarryingFlags__Flags
   * 
   * enum eCarryingFlag
   * {
   *   CARRYING_FLAG_CAN_BE_CUT_FREE = 1,
   *   CARRYING_FLAG_CAN_BE_CARRIED_ON_FOOT = 2,
   *   CARRYING_FLAG_CAN_BE_DROPPED = 4,
   *   CARRYING_FLAG_CAN_BE_CARRIED_WHEN_DEAD = 7,
   *   CARRYING_FLAG_CAN_CARRY_ANYTHING = 9,
   *   CARRYING_FLAG_DISABLE_PROMPT_LOS_CHECKS = 19,
   *   CARRYING_FLAG_FORCE_ALLOW_WARP_TO_SAFE_GROUND_LOCATION = 23,
   *   CARRYING_FLAG_PICKUPS_IGNORE_HEIGHT_RESTRICTIONS = 26,
   *   CARRYING_FLAG_CLEAN_UP_WHEN_NOT_CARRIED = 27,
   *   CARRYING_FLAG_BLOCK_KNOCK_OFF_PED_VARIATIONS_FROM_CARRIABLE_INTERACTIONS = 29,
   *   CARRYING_FLAG_HIT_WHEN_CARRIABLE = 31,
   *   CARRYING_FLAG_DISABLE_CARRIABLE_INTERACTIONS_ON_THIS_MOUNT = 34,
   *   CARRYING_FLAG_FORCE_HIDE_PROMPT_GROUP = 37,
   * };
   *
   * @param {number} entity
   * @param {number} flagId
   * @param {boolean} value
   * @return {void}
   */
global.SetEntityCarryingFlag = function (entity, flagId, value) {
  return Citizen.invokeNative('0x18ff3110cf47115d', entity, flagId, value);
};

/**
   * _SET_ENTITY_COORDS_AND_HEADING
   *
   * @param {number} entity
   * @param {number} xPos
   * @param {number} yPos
   * @param {number} zPos
   * @param {number} heading
   * @param {boolean} xAxis
   * @param {boolean} yAxis
   * @param {boolean} zAxis
   * @return {void}
   */
global.SetEntityCoordsAndHeading = function (entity, xPos, yPos, zPos, heading, xAxis, yAxis, zAxis) {
  return Citizen.invokeNative('0x203beffdbe12e96a', entity, _fv(xPos), _fv(yPos), _fv(zPos), _fv(heading), xAxis, yAxis, zAxis);
};

/**
   * _SET_ENTITY_COORDS_AND_HEADING_NO_OFFSET
   *
   * @param {number} entity
   * @param {number} xPos
   * @param {number} yPos
   * @param {number} zPos
   * @param {number} heading
   * @param {boolean} p5
   * @param {boolean} p6
   * @return {void}
   */
global.SetEntityCoordsAndHeadingNoOffset = function (entity, xPos, yPos, zPos, heading, p5, p6) {
  return Citizen.invokeNative('0x0918e3565c20f03c', entity, _fv(xPos), _fv(yPos), _fv(zPos), _fv(heading), p5, p6);
};

/**
   * _SET_ENTITY_CUSTOM_PICKUP_RADIUS
   *
   * @param {number} entity
   * @param {number} radius
   * @return {void}
   */
global.SetEntityCustomPickupRadius = function (entity, radius) {
  return Citizen.invokeNative('0x482d17e45665da44', entity, _fv(radius));
};

/**
   * _SET_ENTITY_FADE_IN
   *
   * @param {number} entity
   * @return {void}
   */
global.SetEntityFadeIn = function (entity) {
  return Citizen.invokeNative('0xa91e6cf94404e8c9', entity);
};

/**
   * _SET_ENTITY_FULLY_LOOTED
   *
   * @param {number} entity
   * @param {boolean} looted
   * @return {void}
   */
global.SetEntityFullyLooted = function (entity, looted) {
  return Citizen.invokeNative('0x6bcf5f3d8ffe988d', entity, looted);
};

/**
   * _SET_ENTITY_LIGHTS_ENABLED
   *
   * @param {number} entity
   * @param {boolean} enabled
   * @return {void}
   */
global.SetEntityLightsEnabled = function (entity, enabled) {
  return Citizen.invokeNative('0xebdc12861d079aba', entity, enabled);
};

/**
   * _SET_ENTITY_THREAT_TIER
   * tier: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEntityThreatTier
   *
   * @param {number} entity
   * @param {number} tier
   * @param {boolean} p2
   * @return {void}
   */
global.SetEntityThreatTier = function (entity, tier, p2) {
  return Citizen.invokeNative('0x4b436bac8cbe9b07', entity, tier, p2);
};

/**
   * _UNPIN_MAP_ENTITY
   *
   * @param {number} entity
   * @return {void}
   */
global.UnpinMapEntity = function (entity) {
  return Citizen.invokeNative('0xd2b9c78537ed5759', entity);
};

/**
   * ADD_SHOCKING_EVENT_AT_POSITION
   * eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
   * https://github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS
   *
   * @param {number} eventType
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @param {number} p8
   * @param {number} p9
   * @param {number} p10
   * @return {number}
   */
global.AddShockingEventAtPosition = function (eventType, x, y, z, p4, p5, p6, p7, p8, p9, p10) {
  return Citizen.invokeNative('0xd9f8455409b525e9', _ch(eventType), _fv(x), _fv(y), _fv(z), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), p9, p10, _r, _ri);
};

/**
   * ADD_SHOCKING_EVENT_FOR_ENTITY
   * eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
   *
   * @param {number} eventType
   * @param {number} entity
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @param {boolean} p8
   * @param {boolean} p9
   * @param {number} p10
   * @param {number} p11
   * @return {number}
   */
global.AddShockingEventForEntity = function (eventType, entity, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
  return Citizen.invokeNative('0x7fd8f3be76f89422', _ch(eventType), entity, _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), p8, p9, p10, p11, _r, _ri);
};

/**
   * IS_SHOCKING_EVENT_IN_SPHERE
   * eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
   *
   * @param {number} eventType
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @return {boolean}
   */
global.IsShockingEventInSphere = function (eventType, x, y, z, radius) {
  return Citizen.invokeNative('0x9db47e16060d6354', _ch(eventType), _fv(x), _fv(y), _fv(z), _fv(radius), _r);
};

/**
   * REMOVE_ALL_SHOCKING_EVENTS
   *
   * @param {boolean} p0
   * @return {void}
   */
global.RemoveAllShockingEvents = function (p0) {
  return Citizen.invokeNative('0xd47a168c2ab90dc4', p0);
};

/**
   * REMOVE_ALL_SHOCKING_EVENTS_OF_TYPE
   * eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
   *
   * @param {number} eventType
   * @param {boolean} scriptCreatedOnly
   * @return {void}
   */
global.RemoveAllShockingEventsOfType = function (eventType, scriptCreatedOnly) {
  return Citizen.invokeNative('0x118873dd538490b4', _ch(eventType), scriptCreatedOnly);
};

/**
   * REMOVE_SHOCKING_EVENT
   *
   * @param {number} event
   * @return {boolean}
   */
global.RemoveShockingEvent = function (event) {
  return Citizen.invokeNative('0xe8bb3cc253a34559', event, _r);
};

/**
   * REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS
   *
  
   * @return {void}
   */
global.RemoveShockingEventSpawnBlockingAreas = function () {
  return Citizen.invokeNative('0xdb249021652420c5');
};

/**
   * SET_DECISION_MAKER
   *
   * @param {number} ped
   * @param {number} name
   * @return {void}
   */
global.SetDecisionMaker = function (ped, name) {
  return Citizen.invokeNative('0x8ae2f981cddb8fa4', ped, _ch(name));
};

/**
   * SET_DECISION_MAKER_TO_DEFAULT
   *
   * @param {number} ped
   * @return {void}
   */
global.SetDecisionMakerToDefault = function (ped) {
  return Citizen.invokeNative('0x6b9c5c38838fb6e6', ped);
};

/**
   * SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME
   *
  
   * @return {void}
   */
global.SuppressShockingEventsNextFrame = function () {
  return Citizen.invokeNative('0x84994fad4e4e4e69');
};

/**
   * _0x18E93EBFC1FCFA48
   * Only used in R* SP Script beat_rat_infestation and homeinvasion
   *
   * @param {number} volume
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {any}
   */
global.N_0x18E93EBFC1FCFA48 = function (volume, p1, p2) {
  return Citizen.invokeNative('0x18e93ebfc1fcfa48', volume, p1, p2, _r);
};

/**
   * _0x1A5C5D350068A673
   * AGGRO_CHECK_PROPERTY_DAMAGE: Property damage found with event
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x1A5C5D350068A673 = function (ped, p1) {
  return Citizen.invokeNative('0x1a5c5d350068a673', ped, p1);
};

/**
   * _0x1D1B448D719415AB
   * _GET*
   *
   * @param {number} ped
   * @return {any}
   */
global.N_0x1D1B448D719415AB = function (ped) {
  return Citizen.invokeNative('0x1d1b448d719415ab', ped, _r);
};

/**
   * _0x26054EB81AC0893B
   *
   * @param {number} object
   * @return {boolean}
   */
global.N_0x26054EB81AC0893B = function (object) {
  return Citizen.invokeNative('0x26054eb81ac0893b', object, _r);
};

/**
   * _0x2DD42FAD06E6F19E
   *
   * @param {number} object
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {any}
   */
global.N_0x2DD42FAD06E6F19E = function (object, p1, p2) {
  return Citizen.invokeNative('0x2dd42fad06e6f19e', object, p1, p2, _r);
};

/**
   * _0x36D0F2BA2C0D9BDE
   * _ADD* (_ADD_SHOCKING_EVENT_* ?)
   *
   * @param {number} entity
   * @param {number} p1
   * @return {any}
   */
global.N_0x36D0F2BA2C0D9BDE = function (entity, p1) {
  return Citizen.invokeNative('0x36d0f2ba2c0d9bde', entity, p1, _r);
};

/**
   * _0x4465C3D1475BD3FD
   *
   * @param {number} model
   * @return {void}
   */
global.N_0x4465C3D1475BD3FD = function (model) {
  return Citizen.invokeNative('0x4465c3d1475bd3fd', _ch(model));
};

/**
   * _0x4B2B1A891D437CA7
   * Only used in R* SP Script coachrobberies
   * _SET_S*
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x4B2B1A891D437CA7 = function (p0) {
  return Citizen.invokeNative('0x4b2b1a891d437ca7', _fv(p0));
};

/**
   * _0x56B3410626A473E7
   * Only used in R* SP Script beat_rat_infestation
   * Params: p0 = value returned by 0x18E93EBFC1FCFA48
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x56B3410626A473E7 = function (p0) {
  return Citizen.invokeNative('0x56b3410626a473e7', p0);
};

/**
   * _0x7C511E91738A0828
   * Only used in R* SP Scripts
   * Hash only used in R* Script mob3.ysc: ROBBERY
   * _ADD_PED*
   *
   * @param {number} ped1
   * @param {number} ped2
   * @param {number} p2
   * @param {number} p3
   * @return {void}
   */
global.N_0x7C511E91738A0828 = function (ped1, ped2, p2, p3) {
  return Citizen.invokeNative('0x7c511e91738a0828', ped1, ped2, p2, _ch(p3));
};

/**
   * _0x83D43F0FD5276E4D
   * _GET*
   *
   * @param {number} entity
   * @param {number} p1
   * @return {any}
   */
global.N_0x83D43F0FD5276E4D = function (entity, p1) {
  return Citizen.invokeNative('0x83d43f0fd5276e4d', entity, p1, _r);
};

/**
   * _0x9520175B35E2268D
   * _SET_P*
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x9520175B35E2268D = function (ped, p1) {
  return Citizen.invokeNative('0x9520175b35e2268d', ped, p1);
};

/**
   * _0xA86B0EE9B39D15D6
   *
   * @param {number} object
   * @return {void}
   */
global.N_0xA86B0EE9B39D15D6 = function (object) {
  return Citizen.invokeNative('0xa86b0ee9b39d15d6', object);
};

/**
   * _0xAD17A18215DD23D6
   * Might return time since some (?) event.
   *
   * @param {number} entity
   * @param {number} p1
   * @param {number} p2
   * @return {number}
   */
global.N_0xAD17A18215DD23D6 = function (entity, p1, p2) {
  return Citizen.invokeNative('0xad17a18215dd23d6', entity, p1, p2, _r, _ri);
};

/**
   * _0xB6F4825153920582
   * _S* (_SUPPRESS_EVENTS_NEXT_FRAME?)
   *
  
   * @return {void}
   */
global.N_0xB6F4825153920582 = function () {
  return Citizen.invokeNative('0xb6f4825153920582');
};

/**
   * _0xE28D7FC9FD32ABEB
   * HAS_ACTOR_RECEIVED_TRACKED_EVENT_THAT_SHOULD_ALERT - iTimeSinceEvent >= iTimeLimitMS
   *
   * @param {number} entity
   * @param {number} eventType
   * @param {number} p2
   * @return {void}
   */
global.N_0xE28D7FC9FD32ABEB = function (entity, eventType, p2) {
  return Citizen.invokeNative('0xe28d7fc9fd32abeb', entity, _ch(eventType), p2);
};

/**
   * _0xE2C2FBB7825FFC66
   *
  
   * @return {void}
   */
global.N_0xE2C2FBB7825FFC66 = function () {
  return Citizen.invokeNative('0xe2c2fbb7825ffc66');
};

/**
   * _ADD_MODEL_TO_EVENT_MONITOR
   * Models used in the scripts: P_REGISTER05X, P_REGISTER06X, P_REGISTER03X, PLAYER_ZERO, PLAYER_THREE, A_C_HORSE_MORGAN_FLAXENCHESTNUT
   *
   * @param {number} model
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {void}
   */
global.AddModelToEventMonitor = function (model, p1, p2) {
  return Citizen.invokeNative('0x608ad36a644a97fe', _ch(model), p1, p2);
};

/**
   * _CREATE_SHOCKING_EVENT
   *
   * @param {DataView} args
   * @return {number}
   */
global.CreateShockingEvent = function (args) {
  return Citizen.invokeNative('0xca1315c33b9a2847', args, _r, _ri);
};

/**
   * _EVENT_FLUSH_ALL_EVENT_TRACKERS
   *
   * @param {number} ped
   * @return {void}
   */
global.EventFlushAllEventTrackers = function (ped) {
  return Citizen.invokeNative('0xad8f2424c6e1e3a8', ped);
};

/**
   * _EVENT_GET_RECENT_EVENT
   * Returns eventType
   *
   * @param {number} entity
   * @param {number} p1
   * @param {number} p2
   * @return {number}
   */
global.EventGetRecentEvent = function (entity, p1, p2) {
  return Citizen.invokeNative('0x796eecff0c6d39be', entity, p1, p2, _r, _ri);
};

/**
   * _EVENT_GET_SOURCE_ENTITY_FROM_EVENT
   *
   * @param {number} entity
   * @param {number} eventType
   * @param {number} p2
   * @param {number} p3
   * @return {number}
   */
global.EventGetSourceEntityFromEvent = function (entity, eventType, p2, p3) {
  return Citizen.invokeNative('0x822a001bcea5bd81', entity, _ch(eventType), p2, p3, _r, _ri);
};

/**
   * _EVENT_GET_TARGET_ENTITY_FROM_EVENT
   *
   * @param {number} entity
   * @param {number} eventType
   * @param {number} p2
   * @param {number} p3
   * @return {number}
   */
global.EventGetTargetEntityFromEvent = function (entity, eventType, p2, p3) {
  return Citizen.invokeNative('0x38497f139981c5c9', entity, _ch(eventType), p2, p3, _r, _ri);
};

/**
   * _EVENT_GET_TIME_SINCE_EVENT
   *
   * @param {number} entity
   * @param {number} eventType
   * @param {number} p2
   * @param {number} p3
   * @return {number}
   */
global.EventGetTimeSinceEvent = function (entity, eventType, p2, p3) {
  return Citizen.invokeNative('0xc6a7dc546e94fed5', entity, _ch(eventType), p2, p3, _r, _ri);
};

/**
   * _IS_EVENT_TRACKER_ACTIVE
   *
   * @param {string | number} eventName
   * @param {number} shockingEvent
   * @return {boolean}
   */
global.IsEventTrackerActive = function (eventName, shockingEvent) {
  return Citizen.invokeNative('0x797b3d4d92e56094', _ts(eventName), _ch(shockingEvent), _r);
};

/**
   * _REMOVE_ALL_SHOCKING_EVENTS_IN_AREA
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {boolean} p4
   * @return {void}
   */
global.RemoveAllShockingEventsInArea = function (x, y, z, radius, p4) {
  return Citizen.invokeNative('0xb4c71ba9cab097bd', _fv(x), _fv(y), _fv(z), _fv(radius), p4);
};

/**
   * _REMOVE_ALL_SHOCKING_EVENTS_OF_TYPE_IN_AREA
   * eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
   *
   * @param {number} eventType
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {boolean} p5
   * @return {void}
   */
global.RemoveAllShockingEventsOfTypeInArea = function (eventType, x, y, z, radius, p5) {
  return Citizen.invokeNative('0x6a648d42bf271dc7', _ch(eventType), _fv(x), _fv(y), _fv(z), _fv(radius), p5);
};

/**
   * _SET_EVENT_TRACKER_FOR_PED
   *
   * @param {number} ped
   * @param {string | number} eventName
   * @param {number} p2
   * @return {void}
   */
global.SetEventTrackerForPed = function (ped, eventName, p2) {
  return Citizen.invokeNative('0xbb1e41dd3d3c6250', ped, _ts(eventName), p2);
};

/**
   * ADD_EXPLOSION
   * https://github.com/femga/rdr3_discoveries/tree/master/graphics/explosions
   * 
   * explosionType:
   * enum eExplosionTag
   * {
   *   EXP_TAG_DONTCARE = -1,
   *   EXP_TAG_GRENADE,
   *   EXP_TAG_STICKYBOMB,
   *   EXP_TAG_MOLOTOV,
   *   EXP_TAG_MOLOTOV_VOLATILE,
   *   EXP_TAG_HI_OCTANE,
   *   EXP_TAG_CAR,
   *   EXP_TAG_PLANE,
   *   EXP_TAG_PETROL_PUMP,
   *   EXP_TAG_DIR_STEAM,
   *   EXP_TAG_DIR_FLAME,
   *   EXP_TAG_DIR_WATER_HYDRANT,
   *   EXP_TAG_BOAT,
   *   EXP_TAG_BULLET,
   *   EXP_TAG_SMOKEGRENADE,
   *   EXP_TAG_BZGAS,
   *   EXP_TAG_GAS_CANISTER,
   *   EXP_TAG_EXTINGUISHER,
   *   EXP_TAG_TRAIN,
   *   EXP_TAG_DIR_FLAME_EXPLODE,
   *   EXP_TAG_VEHICLE_BULLET,
   *   EXP_TAG_BIRD_CRAP,
   *   EXP_TAG_FIREWORK,
   *   EXP_TAG_TORPEDO,
   *   EXP_TAG_TORPEDO_UNDERWATER,
   *   EXP_TAG_LANTERN,
   *   EXP_TAG_DYNAMITE,
   *   EXP_TAG_DYNAMITESTACK,
   *   EXP_TAG_DYNAMITE_VOLATILE,
   *   EXP_TAG_RIVER_BLAST,
   *   EXP_TAG_PLACED_DYNAMITE,
   *   EXP_TAG_FIRE_ARROW,
   *   EXP_TAG_DYNAMITE_ARROW,
   *   EXP_TAG_PHOSPHOROUS_BULLET,
   *   EXP_TAG_LIGHTNING_STRIKE,
   *   EXP_TAG_TRACKING_ARROW,
   *   EXP_TAG_POISON_BOTTLE
   * };
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} explosionType
   * @param {number} damageScale
   * @param {boolean} isAudible
   * @param {boolean} isInvisible
   * @param {number} cameraShake
   * @return {void}
   */
global.AddExplosion = function (x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake) {
  return Citizen.invokeNative('0x7d6f58f69da92530', _fv(x), _fv(y), _fv(z), explosionType, _fv(damageScale), isAudible, isInvisible, _fv(cameraShake));
};

/**
   * ADD_EXPLOSION_WITH_USER_VFX
   * explosionType: see ADD_EXPLOSION
   * Change explosionFx (Visual Effect) for specified explosionType
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} explosionType
   * @param {number} explosionFx
   * @param {number} damageScale
   * @param {boolean} isAudible
   * @param {boolean} isInvisible
   * @param {number} cameraShake
   * @return {void}
   */
global.AddExplosionWithUserVfx = function (x, y, z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake) {
  return Citizen.invokeNative('0x53ba259f3a67a99e', _fv(x), _fv(y), _fv(z), explosionType, _ch(explosionFx), _fv(damageScale), isAudible, isInvisible, _fv(cameraShake));
};

/**
   * ADD_OWNED_EXPLOSION
   * explosionType: see ADD_EXPLOSION
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} explosionType
   * @param {number} damageScale
   * @param {boolean} isAudible
   * @param {boolean} isInvisible
   * @param {number} cameraShake
   * @return {void}
   */
global.AddOwnedExplosion = function (ped, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake) {
  return Citizen.invokeNative('0xd84a917a64d4d016', ped, _fv(x), _fv(y), _fv(z), explosionType, _fv(damageScale), isAudible, isInvisible, _fv(cameraShake));
};

/**
   * GET_CLOSEST_FIRE_POS
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {[boolean, Vector3]}
   */
global.GetClosestFirePos = function (x, y, z) {
  return Citizen.invokeNative('0xb646fb657f448261', _v, _fv(x), _fv(y), _fv(z), _r);
};

/**
   * GET_NUMBER_OF_FIRES_IN_RANGE
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @return {number}
   */
global.GetNumberOfFiresInRange = function (x, y, z, radius) {
  return Citizen.invokeNative('0xf9617bc6fae61e08', _fv(x), _fv(y), _fv(z), _fv(radius), _r, _ri);
};

/**
   * GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA
   * explosionType: see ADD_EXPLOSION
   *
   * @param {number} explosionType
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {number} radius
   * @return {number}
   */
global.GetOwnerOfExplosionInAngledArea = function (explosionType, x1, y1, z1, x2, y2, z2, radius) {
  return Citizen.invokeNative('0x8002ddab58594d78', explosionType, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(radius), _r, _ri);
};

/**
   * IS_ENTITY_ON_FIRE
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityOnFire = function (entity) {
  return Citizen.invokeNative('0x1bd7c371ce257c3e', entity, _r);
};

/**
   * IS_EXPLOSION_ACTIVE_IN_AREA
   * explosionType: see ADD_EXPLOSION
   *
   * @param {number} explosionType
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @return {boolean}
   */
global.IsExplosionActiveInArea = function (explosionType, x1, y1, z1, x2, y2, z2) {
  return Citizen.invokeNative('0xd96e82aebffaaff0', explosionType, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r);
};

/**
   * IS_EXPLOSION_IN_ANGLED_AREA
   * explosionType: see ADD_EXPLOSION
   *
   * @param {number} explosionType
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {number} angle
   * @return {boolean}
   */
global.IsExplosionInAngledArea = function (explosionType, x1, y1, z1, x2, y2, z2, angle) {
  return Citizen.invokeNative('0x5ae661ecd18524c9', explosionType, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(angle), _r);
};

/**
   * IS_EXPLOSION_IN_AREA
   * explosionType: see ADD_EXPLOSION
   *
   * @param {number} explosionType
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @return {boolean}
   */
global.IsExplosionInArea = function (explosionType, x1, y1, z1, x2, y2, z2) {
  return Citizen.invokeNative('0x8391ba4313a25ad3', explosionType, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r);
};

/**
   * IS_EXPLOSION_IN_SPHERE
   * explosionType: see ADD_EXPLOSION
   *
   * @param {number} explosionType
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @return {boolean}
   */
global.IsExplosionInSphere = function (explosionType, x, y, z, radius) {
  return Citizen.invokeNative('0xd62dd846d82cbb90', explosionType, _fv(x), _fv(y), _fv(z), _fv(radius), _r);
};

/**
   * REMOVE_SCRIPT_FIRE
   *
   * @param {FireId} fireHandle
   * @return {void}
   */
global.RemoveScriptFire = function (fireHandle) {
  return Citizen.invokeNative('0x790125c36e194069', fireHandle);
};

/**
   * START_ENTITY_FIRE
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.StartEntityFire = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xc4dc7418a44d6822', p0, p1, p2, p3);
};

/**
   * START_SCRIPT_FIRE
   * Starts a fire:
   * 
   * xyz: Location of fire
   * maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.
   * isGasFire: Whether or not the fire is powered by gasoline.
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p3
   * @param {number} p4
   * @param {boolean} p5
   * @param {string | number} soundsetName
   * @param {number} p7
   * @param {number} p8
   * @return {FireId}
   */
global.StartScriptFire = function (x, y, z, p3, p4, p5, soundsetName, p7, p8) {
  return Citizen.invokeNative('0x6b83617e04503888', _fv(x), _fv(y), _fv(z), p3, _fv(p4), p5, _ts(soundsetName), _fv(p7), p8, _r, _ri);
};

/**
   * STOP_ENTITY_FIRE
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.StopEntityFire = function (p0, p1) {
  return Citizen.invokeNative('0x8390751dc40c1e98', p0, p1);
};

/**
   * STOP_FIRE_IN_RANGE
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @return {void}
   */
global.StopFireInRange = function (x, y, z, radius) {
  return Citizen.invokeNative('0xdb38f247bd421708', _fv(x), _fv(y), _fv(z), _fv(radius));
};

/**
   * _0x24DB6B9F2B719043
   * Only used in R* SP Related Camp Scripts
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x24DB6B9F2B719043 = function (p0) {
  return Citizen.invokeNative('0x24db6b9f2b719043', _fv(p0));
};

/**
   * _ADD_EXPLOSION_WITH_USER_VFX_AND_DAMAGE_CAUSER
   * Add explosion with vfx and assign an entity as damage causer.
   * explosionType: https://github.com/femga/rdr3_discoveries/blob/master/graphics/explosions/README.md
   * explosionFx: https://github.com/femga/rdr3_discoveries/blob/master/graphics/explosions/explosion_vfxTags.lua
   *
   * @param {number} entity
   * @param {boolean} p1
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} explosionType
   * @param {number} explosionFx
   * @param {number} damageScale
   * @param {boolean} isAudible
   * @param {boolean} isInvisible
   * @param {number} cameraShake
   * @return {void}
   */
global.AddExplosionWithUserVfxAndDamageCauser = function (entity, p1, x, y, z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake) {
  return Citizen.invokeNative('0x34ae85c7ca4857aa', entity, p1, _fv(x), _fv(y), _fv(z), explosionType, _ch(explosionFx), _fv(damageScale), isAudible, isInvisible, _fv(cameraShake));
};

/**
   * _0x41B87A6495EE13DD
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @return {any}
   */
global.N_0x41B87A6495EE13DD = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
  return Citizen.invokeNative('0x41b87a6495ee13dd', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, _r);
};

/**
   * _GET_CLOSEST_FIRE_POS_IN_VOLUME
   *
   * @param {number} posX
   * @param {number} posY
   * @param {number} posZ
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} scaleX
   * @param {number} scaleY
   * @param {number} scaleZ
   * @return {[boolean, Vector3]}
   */
global.GetClosestFirePosInVolume = function (posX, posY, posZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ) {
  return Citizen.invokeNative('0x559fc1d310813031', _v, _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scaleX), _fv(scaleY), _fv(scaleZ), _r);
};

/**
   * _0x68F6A75FDF5A70D6
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p3
   * @return {void}
   */
global.N_0x68F6A75FDF5A70D6 = function (x, y, z, p3) {
  return Citizen.invokeNative('0x68f6a75fdf5a70d6', _fv(x), _fv(y), _fv(z), _fv(p3));
};

/**
   * _0x754937C28271BC65
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x754937C28271BC65 = function (p0) {
  return Citizen.invokeNative('0x754937c28271bc65', p0);
};

/**
   * _IS_ENTITY_DAMAGED_BY_FIRE
   * this natives only returns true if entity is damaged by fire , once damaged caused to entity by fire (like burned appearance) has cleared (they clear over time) then returns false
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityDamagedByFire = function (entity) {
  return Citizen.invokeNative('0xa4454592dcf7c992', entity, _r);
};

/**
   * _ADD_EXPLOSION_WITH_DAMAGE_CAUSER
   * Add explosion with and assign an entity as damage causer.
   * explosionType: https://github.com/femga/rdr3_discoveries/blob/master/graphics/explosions/README.md
   *
   * @param {number} entity
   * @param {number} p1
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} explosionType
   * @param {number} damageScale
   * @param {boolean} isAudible
   * @param {boolean} isInvisible
   * @param {number} cameraShake
   * @return {void}
   */
global.AddExplosionWithDamageCauser = function (entity, p1, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake) {
  return Citizen.invokeNative('0xb7df150605eedc9b', entity, p1, _fv(x), _fv(y), _fv(z), explosionType, _fv(damageScale), isAudible, isInvisible, _fv(cameraShake));
};

/**
   * _IS_ENTITY_CONSUMED_BY_FIRE
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityConsumedByFire = function (entity) {
  return Citizen.invokeNative('0xcdc25355c0d65963', entity, _r);
};

/**
   * _IS_EXPLOSION_IN_VOLUME
   * explosionType: see ADD_EXPLOSION
   *
   * @param {number} explosionType
   * @param {number} volume
   * @return {boolean}
   */
global.IsExplosionInVolume = function (explosionType, volume) {
  return Citizen.invokeNative('0xe24822a4cfc9107a', explosionType, volume, _r);
};

/**
   * _IS_PED_SHOCKING_EVENT_ACTIVE
   * Tested with fire & dynamite. Only returns true using value p1 = 1 and when the ped is affected by fire.
   *
   * @param {number} ped
   * @param {number} p1
   * @return {boolean}
   */
global.IsPedShockingEventActive = function (ped, p1) {
  return Citizen.invokeNative('0xab7993ba61a4674f', ped, p1, _r);
};

/**
   * _STOP_FIRE_IN_BOX
   *
   * @param {number} posX
   * @param {number} posY
   * @param {number} posZ
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} scaleX
   * @param {number} scaleY
   * @param {number} scaleZ
   * @return {void}
   */
global.StopFireInBox = function (posX, posY, posZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ) {
  return Citizen.invokeNative('0xb7c7bdc375aea9a4', _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scaleX), _fv(scaleY), _fv(scaleZ));
};

/**
   * GET_ANIMAL_TUNING_BOOL_PARAM
   * index: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eAnimalTuningBools
   * https://github.com/femga/rdr3_discoveries/tree/master/AI/ANIMAL_TUNING_BOOL_PARAMS
   *
   * @param {number} animal
   * @param {number} index
   * @return {boolean}
   */
global.GetAnimalTuningBoolParam = function (animal, index) {
  return Citizen.invokeNative('0x1c1993824a396603', animal, index, _r);
};

/**
   * GET_ANIMAL_TUNING_FLOAT_PARAM
   * index: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eAnimalTuningFloats
   * https://github.com/femga/rdr3_discoveries/tree/master/AI/ANIMAL_TUNING_FLOAT_PARAMS
   *
   * @param {number} animal
   * @param {number} index
   * @return {number}
   */
global.GetAnimalTuningFloatParam = function (animal, index) {
  return Citizen.invokeNative('0x4bc3ecfda0297e27', animal, index, _r, _rf);
};

/**
   * GET_SPECIES_TUNING_FLOAT_PARAM
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @return {number}
   */
global.GetSpeciesTuningFloatParam = function (p0, p1, p2) {
  return Citizen.invokeNative('0xe108489621422f91', _ch(p0), p1, p2, _r, _rf);
};

/**
   * RESET_ANIMAL_TUNING_BOOL_PARAM
   *
   * @param {number} animal
   * @param {number} index
   * @return {void}
   */
global.ResetAnimalTuningBoolParam = function (animal, index) {
  return Citizen.invokeNative('0x96aa1304d30e6bc3', animal, index);
};

/**
   * RESET_ANIMAL_TUNING_FLOAT_PARAM
   *
   * @param {number} animal
   * @param {number} index
   * @return {void}
   */
global.ResetAnimalTuningFloatParam = function (animal, index) {
  return Citizen.invokeNative('0xe776a195488fc520', animal, index);
};

/**
   * SET_ANIMAL_TUNING_BOOL_PARAM
   *
   * @param {number} animal
   * @param {number} index
   * @param {boolean} value
   * @return {void}
   */
global.SetAnimalTuningBoolParam = function (animal, index, value) {
  return Citizen.invokeNative('0x9ff1e042fa597187', animal, index, value);
};

/**
   * SET_ANIMAL_TUNING_FLOAT_PARAM
   *
   * @param {number} animal
   * @param {number} index
   * @param {number} value
   * @return {void}
   */
global.SetAnimalTuningFloatParam = function (animal, index, value) {
  return Citizen.invokeNative('0xcbda22c87977244f', animal, index, _fv(value));
};

/**
   * SET_SPECIES_TUNING_BOOL_PARAM
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {boolean} p3
   * @return {void}
   */
global.SetSpeciesTuningBoolParam = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x6d1d94c2459b42ee', _ch(p0), p1, p2, p3);
};

/**
   * SET_SPECIES_TUNING_FLOAT_PARAM
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @return {void}
   */
global.SetSpeciesTuningFloatParam = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x963240b6c252ba49', _ch(p0), p1, p2, _fv(p3));
};

/**
   * _0x0816C31480764AB0
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x0816C31480764AB0 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x0816c31480764ab0', p0, p1, p2, p3);
};

/**
   * _0x09EE00B8F858E0BE
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {any}
   */
global.N_0x09EE00B8F858E0BE = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0x09ee00b8f858e0be', p0, p1, p2, p3, p4, p5, p6, _r);
};

/**
   * _0x1520626FFAFFFA8F
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x1520626FFAFFFA8F = function (p0, p1) {
  return Citizen.invokeNative('0x1520626ffafffa8f', p0, p1);
};

/**
   * _0x17E3E5C46ECCD308
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x17E3E5C46ECCD308 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x17e3e5c46eccd308', p0, p1, p2);
};

/**
   * _0x19870C40C7EE15BE
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x19870C40C7EE15BE = function (p0, p1) {
  return Citizen.invokeNative('0x19870c40c7ee15be', p0, p1, _r);
};

/**
   * _0x1DA6CB02071055D5
   *
   * @param {any} p0
   * @return {Vector3}
   */
global.N_0x1DA6CB02071055D5 = function (p0) {
  return Citizen.invokeNative('0x1da6cb02071055d5', p0, _r, _rv);
};

/**
   * _0x2DF3D457D86F8E57
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x2DF3D457D86F8E57 = function (p0, p1) {
  return Citizen.invokeNative('0x2df3d457d86f8e57', p0, p1);
};

/**
   * _0x34B9C4D86DF2C2F3
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x34B9C4D86DF2C2F3 = function (p0) {
  return Citizen.invokeNative('0x34b9c4d86df2c2f3', p0, _r);
};

/**
   * _0x36486AF7DA93A464
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x36486AF7DA93A464 = function (p0) {
  return Citizen.invokeNative('0x36486af7da93a464', p0, _r);
};

/**
   * _REMOVE_HERD_PED
   * Remove the ped from a herd.
   *
   * @param {number} herd
   * @param {number} ped
   * @return {void}
   */
global.RemoveHerdPed = function (herd, ped) {
  return Citizen.invokeNative('0x408d1149c5e39c1e', herd, ped);
};

/**
   * _0x53187E563F938E76
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x53187E563F938E76 = function (p0) {
  return Citizen.invokeNative('0x53187e563f938e76', p0, _r);
};

/**
   * _CLEAR_HERD
   * Clear the herd.
   *
   * @param {number} herd
   * @return {void}
   */
global.ClearHerd = function (herd) {
  return Citizen.invokeNative('0x67a43ea3f6fe0076', herd);
};

/**
   * _0x6C57BEA886A20C6B
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x6C57BEA886A20C6B = function (p0, p1) {
  return Citizen.invokeNative('0x6c57bea886a20c6b', p0, p1);
};

/**
   * _0x706B434FEFAD6A24
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x706B434FEFAD6A24 = function (p0) {
  return Citizen.invokeNative('0x706b434fefad6a24', p0);
};

/**
   * _0x8049B17BEC937662
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {any}
   */
global.N_0x8049B17BEC937662 = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0x8049b17bec937662', p0, p1, p2, p3, p4, p5, p6, _r);
};

/**
   * _IS_PED_IN_HERD
   * Return whether the ped is in the herd.
   *
   * @param {number} herd
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedInHerd = function (herd, ped) {
  return Citizen.invokeNative('0x9e13acc38ba8f9c3', herd, ped, _r);
};

/**
   * _0xA881F5C77A560906
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xA881F5C77A560906 = function (p0) {
  return Citizen.invokeNative('0xa881f5c77a560906', p0);
};

/**
   * _0xC3D581A34BC0A1F0
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xC3D581A34BC0A1F0 = function (p0, p1) {
  return Citizen.invokeNative('0xc3d581a34bc0a1f0', p0, p1);
};

/**
   * _0xC72CE37081DAE625
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0xC72CE37081DAE625 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xc72ce37081dae625', p0, p1, p2, p3);
};

/**
   * _0xC95611869E14F8AF
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0xC95611869E14F8AF = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xc95611869e14f8af', p0, p1, p2, p3);
};

/**
   * _0xCC6B5AAFC87BFC7B
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xCC6B5AAFC87BFC7B = function (p0, p1, p2) {
  return Citizen.invokeNative('0xcc6b5aafc87bfc7b', p0, p1, p2);
};

/**
   * _0xD95F04A4E73BE85E
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xD95F04A4E73BE85E = function (p0, p1) {
  return Citizen.invokeNative('0xd95f04a4e73be85e', p0, p1, _r);
};

/**
   * _DELETE_HERD
   * Delete and invalidate the herd.
   *
   * @param {number} herd
   * @return {void}
   */
global.DeleteHerd = function (herd) {
  return Citizen.invokeNative('0xe0961aed72642b80', herd);
};

/**
   * _0xE36D2CB540597EF7
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.N_0xE36D2CB540597EF7 = function (p0, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0xe36d2cb540597ef7', p0, p1, p2, p3, p4, p5, p6, p7);
};

/**
   * _0xE93415B3307208E5
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @return {any}
   */
global.N_0xE93415B3307208E5 = function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
  return Citizen.invokeNative('0xe93415b3307208e5', p0, p1, p2, p3, p4, p5, p6, p7, p8, _r);
};

/**
   * _0xF2CCA7B68CFAB2B9
   * species: SPECIES_BIRD_CROW
   *
   * @param {number} species
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {number} x3
   * @param {number} y3
   * @param {number} z3
   * @param {number} p10
   * @param {number} p11
   * @param {number} p12
   * @param {number} p13
   * @return {void}
   */
global.N_0xF2CCA7B68CFAB2B9 = function (species, x1, y1, z1, x2, y2, z2, x3, y3, z3, p10, p11, p12, p13) {
  return Citizen.invokeNative('0xf2cca7b68cfab2b9', _ch(species), _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3), _fv(p10), _fv(p11), _fv(p12), _fv(p13));
};

/**
   * _0xFA821997794F48E7
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xFA821997794F48E7 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xfa821997794f48e7', p0, p1, p2);
};

/**
   * _0xFB16F08F47B83B4C
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xFB16F08F47B83B4C = function (p0) {
  return Citizen.invokeNative('0xfb16f08f47b83b4c', p0);
};

/**
   * _0xFDB008B3BCF5992F
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xFDB008B3BCF5992F = function (p0, p1, p2) {
  return Citizen.invokeNative('0xfdb008b3bcf5992f', p0, p1, p2);
};

/**
   * _0xFF1E339CE40EAAAF
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xFF1E339CE40EAAAF = function (p0, p1) {
  return Citizen.invokeNative('0xff1e339ce40eaaaf', p0, p1);
};

/**
   * _ADD_PED_TO_FLOCK
   *
   * @param {any} p0
   * @param {number} ped
   * @return {void}
   */
global.AddPedToFlock = function (p0, ped) {
  return Citizen.invokeNative('0x933e5d31a7d13069', p0, ped);
};

/**
   * _CREATE_HERD
   *
  
   * @return {number}
   */
global.CreateHerd = function () {
  return Citizen.invokeNative('0xcb4ef7edae2e16f1', _r, _ri);
};

/**
   * _GET_ANIMAL_IS_WILD
   * Ped (horse) will run away from players and mounting will trigger them to buck until disabled.
   * Used for: REL_DOMESTICATED_ANIMAL
   *
   * @param {number} ped
   * @return {boolean}
   */
global.GetAnimalIsWild = function (ped) {
  return Citizen.invokeNative('0x3b005ff0538ed2a9', ped, _r);
};

/**
   * _GET_ANIMAL_RARITY
   * enum eAnimalRarityLevel
   * {
   *   ARL_COMMON,
   *   ARL_RARE,
   *   ARL_LEGENDARY,
   *   ARL_NUMRARITYLEVELS
   * };
   *
   * @param {number} ped
   * @return {number}
   */
global.GetAnimalRarity = function (ped) {
  return Citizen.invokeNative('0xf8b48a361dc388ae', ped, _r, _ri);
};

/**
   * _IS_HERD_VALID
   *
   * @param {number} herdHandle
   * @return {boolean}
   */
global.IsHerdValid = function (herdHandle) {
  return Citizen.invokeNative('0x8d913e493bafe0a3', herdHandle, _r);
};

/**
   * _SET_ANIMAL_IS_WILD
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetAnimalIsWild = function (ped, toggle) {
  return Citizen.invokeNative('0xaeb97d84cdf3c00b', ped, toggle);
};

/**
   * _SET_ANIMAL_RARITY
   * rarityLevel: see _GET_ANIMAL_RARITY
   *
   * @param {number} ped
   * @param {number} rarityLevel
   * @return {void}
   */
global.SetAnimalRarity = function (ped, rarityLevel) {
  return Citizen.invokeNative('0x8b6f0f59b1b99801', ped, rarityLevel);
};

/**
   * NETWORK_GET_GANG_ID
   *
   * @param {number} player
   * @return {any}
   */
global.NetworkGetGangId = function (player) {
  return Citizen.invokeNative('0x901e0dc25080c8b9', player, _r);
};

/**
   * NETWORK_GET_GANG_LEADER
   *
   * @param {any} gangId
   * @return {number}
   */
global.NetworkGetGangLeader = function (gangId) {
  return Citizen.invokeNative('0x4be6c13a45cca8ec', gangId, _r, _ri);
};

/**
   * NETWORK_GET_NUM_GANG_MEMBERS
   *
   * @param {any} gangId
   * @return {number}
   */
global.NetworkGetNumGangMembers = function (gangId) {
  return Citizen.invokeNative('0x149a2751ab66ac02', gangId, _r, _ri);
};

/**
   * NETWORK_IS_GANG_ACTIVE
   *
   * @param {any} gangId
   * @return {boolean}
   */
global.NetworkIsGangActive = function (gangId) {
  return Citizen.invokeNative('0x0f99f6436528a089', gangId, _r);
};

/**
   * NETWORK_IS_GANG_ID_VALID
   *
   * @param {any} gangId
   * @return {boolean}
   */
global.NetworkIsGangIdValid = function (gangId) {
  return Citizen.invokeNative('0xd6f6acf4392187fb', gangId, _r);
};

/**
   * NETWORK_IS_GANG_IN_SESSION
   *
   * @param {any} gangId
   * @return {boolean}
   */
global.NetworkIsGangInSession = function (gangId) {
  return Citizen.invokeNative('0x93a91a351a07360e', gangId, _r);
};

/**
   * NETWORK_IS_GANG_LEADER
   *
   * @param {number} player
   * @return {boolean}
   */
global.NetworkIsGangLeader = function (player) {
  return Citizen.invokeNative('0x424b17a7dc5c90bc', player, _r);
};

/**
   * NETWORK_IS_IN_SAME_GANG
   *
   * @param {number} player1
   * @param {number} player2
   * @return {boolean}
   */
global.NetworkIsInSameGang = function (player1, player2) {
  return Citizen.invokeNative('0x3f59fe6f37869576', player1, player2, _r);
};

/**
   * _0x0E5C9FB9ED5DFF1C
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x0E5C9FB9ED5DFF1C = function (p0) {
  return Citizen.invokeNative('0x0e5c9fb9ed5dff1c', p0, _r);
};

/**
   * _0x1F11702DDBD915C6
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x1F11702DDBD915C6 = function (p0, p1) {
  return Citizen.invokeNative('0x1f11702ddbd915c6', p0, p1, _r);
};

/**
   * _0x2F7EB8B6F6AFE79C
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x2F7EB8B6F6AFE79C = function (p0) {
  return Citizen.invokeNative('0x2f7eb8b6f6afe79c', p0, _r);
};

/**
   * _0x3ADC71A66356D706
   *
  
   * @return {any}
   */
global.N_0x3ADC71A66356D706 = function () {
  return Citizen.invokeNative('0x3adc71a66356d706', _r);
};

/**
   * _0x48D82C83987E18E4
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x48D82C83987E18E4 = function (p0) {
  return Citizen.invokeNative('0x48d82c83987e18e4', p0, _r);
};

/**
   * _0x51C5EF47086AA0D7
   *
  
   * @return {any}
   */
global.N_0x51C5EF47086AA0D7 = function () {
  return Citizen.invokeNative('0x51c5ef47086aa0d7', _r);
};

/**
   * _0x53A94294FDDCF98C
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x53A94294FDDCF98C = function (p0, p1) {
  return Citizen.invokeNative('0x53a94294fddcf98c', p0, p1, _r);
};

/**
   * _0x6102830F764B3DE1
   *
   * @param {number} player
   * @return {boolean}
   */
global.N_0x6102830F764B3DE1 = function (player) {
  return Citizen.invokeNative('0x6102830f764b3de1', player, _r);
};

/**
   * _0x644E02F24F9D4E98
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x644E02F24F9D4E98 = function (p0, p1) {
  return Citizen.invokeNative('0x644e02f24f9d4e98', p0, p1, _r);
};

/**
   * _0x7933754F260B428A
   *
   * @param {number} player
   * @return {any}
   */
global.N_0x7933754F260B428A = function (player) {
  return Citizen.invokeNative('0x7933754f260b428a', player, _r);
};

/**
   * _0x7BAA30C9BBE8AEE7
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x7BAA30C9BBE8AEE7 = function (p0, p1) {
  return Citizen.invokeNative('0x7baa30c9bbe8aee7', p0, p1, _r);
};

/**
   * _0xA9CEAE8D6637FBAD
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xA9CEAE8D6637FBAD = function (p0) {
  return Citizen.invokeNative('0xa9ceae8d6637fbad', p0);
};

/**
   * _0xAD22AB64FA428DF3
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xAD22AB64FA428DF3 = function (p0) {
  return Citizen.invokeNative('0xad22ab64fa428df3', p0);
};

/**
   * _0xAFD3599A3CC5637D
   *
  
   * @return {any}
   */
global.N_0xAFD3599A3CC5637D = function () {
  return Citizen.invokeNative('0xafd3599a3cc5637d', _r);
};

/**
   * _0xB22B1D9F74095382
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xB22B1D9F74095382 = function (p0) {
  return Citizen.invokeNative('0xb22b1d9f74095382', p0);
};

/**
   * _0xB38C256498748413
   *
  
   * @return {void}
   */
global.N_0xB38C256498748413 = function () {
  return Citizen.invokeNative('0xb38c256498748413');
};

/**
   * _0xC81A9E2C8EFD28D5
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xC81A9E2C8EFD28D5 = function (p0) {
  return Citizen.invokeNative('0xc81a9e2c8efd28d5', p0);
};

/**
   * _0xDA801F7F6A5278D3
   * _NETWORK_GET_* or _NETWORK_IS_*
   *
   * @param {number} player
   * @return {boolean}
   */
global.N_0xDA801F7F6A5278D3 = function (player) {
  return Citizen.invokeNative('0xda801f7f6a5278d3', player, _r);
};

/**
   * _0xE4C64CD37CB176AA
   *
   * @param {number} p0
   * @return {any}
   */
global.N_0xE4C64CD37CB176AA = function (p0) {
  return Citizen.invokeNative('0xe4c64cd37cb176aa', p0, _r);
};

/**
   * _0xEE4F20004D0288B7
   *
  
   * @return {void}
   */
global.N_0xEE4F20004D0288B7 = function () {
  return Citizen.invokeNative('0xee4f20004d0288b7');
};

/**
   * _0xFA7C5B7E087A4CEB
   *
  
   * @return {any}
   */
global.N_0xFA7C5B7E087A4CEB = function () {
  return Citizen.invokeNative('0xfa7c5b7e087a4ceb', _r);
};

/**
   * _NETWORK_GET_GANG_LEADER_HANDLE
   *
   * @param {any} gangId
   * @param {DataView} gamerHandle
   * @return {boolean}
   */
global.NetworkGetGangLeaderHandle = function (gangId, gamerHandle) {
  return Citizen.invokeNative('0xce88a261dcbba0d9', gangId, gamerHandle, _r);
};

/**
   * _NETWORK_GET_GANG_MEMBERS
   *
   * @param {any} gangId
   * @param {DataView} memberHandles
   * @return {number}
   */
global.NetworkGetGangMembers = function (gangId, memberHandles) {
  return Citizen.invokeNative('0xd1bf325c8252a982', gangId, memberHandles, _r, _ri);
};

/**
   * _NETWORK_GET_GANG_PRIVACY
   *
  
   * @return {number}
   */
global.NetworkGetGangPrivacy = function () {
  return Citizen.invokeNative('0x9970ae8c3d706139', _r, _ri);
};

/**
   * _NETWORK_GET_GANG_SIZE
   *
   * @param {any} gangId
   * @return {number}
   */
global.NetworkGetGangSize = function (gangId) {
  return Citizen.invokeNative('0x853b0fa4d8732c57', gangId, _r, _ri);
};

/**
   * _NETWORK_IS_GANG_MEMBER
   *
   * @param {any} gangId
   * @param {number} player
   * @return {boolean}
   */
global.NetworkIsGangMember = function (gangId, player) {
  return Citizen.invokeNative('0x9be7dcb22d32ccbe', gangId, player, _r);
};

/**
   * _NETWORK_IS_GANG_OPEN
   *
   * @param {any} gangId
   * @return {boolean}
   */
global.NetworkIsGangOpen = function (gangId) {
  return Citizen.invokeNative('0xfcf96ccbd81b24c8', gangId, _r);
};

/**
   * _NETWORK_IS_IN_MY_GANG
   *
   * @param {number} player
   * @return {boolean}
   */
global.NetworkIsInMyGang = function (player) {
  return Citizen.invokeNative('0x81fb74c83c2ed69f', player, _r);
};

/**
   * _NETWORK_KICK_GANG_MEMBER
   * banTimeSeconds is 120 in R* Scripts
   *
   * @param {number} player
   * @param {number} banTimeSeconds
   * @return {void}
   */
global.NetworkKickGangMember = function (player, banTimeSeconds) {
  return Citizen.invokeNative('0xcd9e2d9bc52fd80f', player, banTimeSeconds);
};

/**
   * _NETWORK_LEAVE_GANG
   *
   * @param {boolean} disband
   * @return {void}
   */
global.NetworkLeaveGang = function (disband) {
  return Citizen.invokeNative('0x0a04a07bc3074edb', disband);
};

/**
   * _NETWORK_REQUEST_GANG_JOIN
   * Returns true if join succeeded, false if failed.
   *
   * @param {any} gangId
   * @return {boolean}
   */
global.NetworkRequestGangJoin = function (gangId) {
  return Citizen.invokeNative('0xc0474c8bcf6787ad', gangId, _r);
};

/**
   * _NETWORK_SET_GANG_PRIVACY
   *
   * @param {number} privacyType
   * @return {boolean}
   */
global.NetworkSetGangPrivacy = function (privacyType) {
  return Citizen.invokeNative('0xc5bf29f4035277c2', privacyType, _r);
};

/**
   * _NETWORK_SET_GANG_SIZE
   *
   * @param {number} size
   * @return {boolean}
   */
global.NetworkSetGangSize = function (size) {
  return Citizen.invokeNative('0x833d8268d51b4522', size, _r);
};

/**
   * _NETWORK_START_GANG
   * openStatus = true -> sets privacyType = 2 (PUBLIC_ADVERTISED)
   * openStatus = false -> sets privacyType = 1 (INVITE_ONLY)
   * 
   * campSize: NET_CAMP_SIZE_SMALLEST = 4, NET_CAMP_SIZE_LARGEST = 7
   *
   * @param {boolean} openStatus
   * @param {number} campSize
   * @return {void}
   */
global.NetworkStartGang = function (openStatus, campSize) {
  return Citizen.invokeNative('0xd1a226f2e05e58fc', openStatus, campSize);
};

/**
   * _GOOGLE_ANALYTICS_END_EVENT
   *
  
   * @return {boolean}
   */
global.GoogleAnalyticsEndEvent = function () {
  return Citizen.invokeNative('0x87bbcc4360a9bde3', _r);
};

/**
   * _GOOGLE_ANALYTICS_POP_PAGE
   *
   * @param {string | number} pageName
   * @return {void}
   */
global.GoogleAnalyticsPopPage = function (pageName) {
  return Citizen.invokeNative('0xc6de040378364798', _ts(pageName));
};

/**
   * _GOOGLE_ANALYTICS_PUSH_PAGE
   *
   * @param {string | number} pageName
   * @return {void}
   */
global.GoogleAnalyticsPushPage = function (pageName) {
  return Citizen.invokeNative('0xd43a616ae3ac4ef6', _ts(pageName));
};

/**
   * _GOOGLE_ANALYTICS_START_EVENT
   *
   * @param {string | number} eventCategory
   * @param {string | number} eventAction
   * @param {string | number} eventLabel
   * @param {number} eventValue
   * @return {boolean}
   */
global.GoogleAnalyticsStartEvent = function (eventCategory, eventAction, eventLabel, eventValue) {
  return Citizen.invokeNative('0x1c54f031d7c0f7ac', _ts(eventCategory), _ts(eventAction), _ts(eventLabel), eventValue, _r);
};

/**
   * ADD_DECAL
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @param {any} p11
   * @param {any} p12
   * @param {any} p13
   * @param {any} p14
   * @param {any} p15
   * @param {any} p16
   * @param {any} p17
   * @param {any} p18
   * @param {any} p19
   * @param {any} p20
   * @param {any} p21
   * @return {number}
   */
global.AddDecal = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21) {
  return Citizen.invokeNative('0x57cb267624ef85c0', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, _r, _ri);
};

/**
   * ADD_PETROL_TRAIL_DECAL_INFO
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p3
   * @return {void}
   */
global.AddPetrolTrailDecalInfo = function (x, y, z, p3) {
  return Citizen.invokeNative('0x73354fb6d03d2e8a', _fv(x), _fv(y), _fv(z), _fv(p3));
};

/**
   * ADD_VEG_MODIFIER_SPHERE
   * Returns veg modifier handle
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} modType
   * @param {number} flags
   * @param {number} p6
   * @return {number}
   */
global.AddVegModifierSphere = function (x, y, z, radius, modType, flags, p6) {
  return Citizen.invokeNative('0xfa50f79257745e74', _fv(x), _fv(y), _fv(z), _fv(radius), modType, flags, p6, _r, _ri);
};

/**
   * ALLOW_PICKUP_LIGHT_SYNC
   *
   * @param {number} pickupObject
   * @param {boolean} allow
   * @return {void}
   */
global.AllowPickupLightSync = function (pickupObject, allow) {
  return Citizen.invokeNative('0x7c348310a6e2fb91', pickupObject, allow);
};

/**
   * ANIMPOSTFX_HAS_EVENT_TRIGGERED_BY_STACKHASH
   *
   * @param {number} effectNameHash
   * @param {number} p1
   * @param {boolean} p2
   * @return {[boolean, boolean]}
   */
global.AnimpostfxHasEventTriggeredByStackhash = function (effectNameHash, p1, p2) {
  return Citizen.invokeNative('0x9ab192a9ef980eed', _ch(effectNameHash), p1, p2, /* actually bool */ _i, _r);
};

/**
   * ANIMPOSTFX_IS_PRELOADING_BY_STACKHASH
   *
   * @param {number} effectNameHash
   * @return {boolean}
   */
global.AnimpostfxIsPreloadingByStackhash = function (effectNameHash) {
  return Citizen.invokeNative('0x59ea80079b86d8c7', _ch(effectNameHash), _r);
};

/**
   * ANIMPOSTFX_IS_RUNNING
   *
   * @param {string | number} effectName
   * @return {boolean}
   */
global.AnimpostfxIsRunning = function (effectName) {
  return Citizen.invokeNative('0x4a123e85d7c4ca0b', _ts(effectName), _r);
};

/**
   * ANIMPOSTFX_PLAY
   * https://github.com/femga/rdr3_discoveries/blob/master/graphics/animpostfx
   *
   * @param {string | number} effectName
   * @return {void}
   */
global.AnimpostfxPlay = function (effectName) {
  return Citizen.invokeNative('0x4102732df6b4005f', _ts(effectName));
};

/**
   * ANIMPOSTFX_STOP
   *
   * @param {string | number} effectName
   * @return {void}
   */
global.AnimpostfxStop = function (effectName) {
  return Citizen.invokeNative('0xb4fd7446bab2f394', _ts(effectName));
};

/**
   * ANIMPOSTFX_STOP_ALL
   *
  
   * @return {void}
   */
global.AnimpostfxStopAll = function () {
  return Citizen.invokeNative('0x66560a0d4c64fd21');
};

/**
   * ATTACH_TV_AUDIO_TO_ENTITY
   *
   * @param {number} entity
   * @return {void}
   */
global.AttachTvAudioToEntity = function (entity) {
  return Citizen.invokeNative('0x40866a418eb8efde', entity);
};

/**
   * BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO
   * Called together with FREE_MEMORY_FOR_LOW_QUALITY_PHOTO
   *
   * @param {number} p0
   * @return {boolean}
   */
global.BeginCreateLowQualityCopyOfPhoto = function (p0) {
  return Citizen.invokeNative('0x494a9874f17a7d50', p0, _r);
};

/**
   * BEGIN_TAKE_HIGH_QUALITY_PHOTO
   *
  
   * @return {boolean}
   */
global.BeginTakeHighQualityPhoto = function () {
  return Citizen.invokeNative('0xa15bffc0a01b34e1', _r);
};

/**
   * BLOCK_PICKUP_PLACEMENT_LIGHT
   *
   * @param {number} pickup
   * @param {boolean} toggle
   * @return {void}
   */
global.BlockPickupPlacementLight = function (pickup, toggle) {
  return Citizen.invokeNative('0x0552aa3ffc5b87aa', pickup, toggle);
};

/**
   * CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE
   *
  
   * @return {void}
   */
global.CascadeShadowsClearShadowSampleType = function () {
  return Citizen.invokeNative('0xf7c29d7c12c36f03');
};

/**
   * CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER
   * When this is set to ON, shadows only draw as you get nearer.
   * 
   * When OFF, they draw from a further distance.
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.CascadeShadowsEnableEntityTracker = function (toggle) {
  return Citizen.invokeNative('0x8fbfd2aeb196b369', toggle);
};

/**
   * CASCADE_SHADOWS_SET_CASCADE_BOUNDS
   *
   * @param {any} p0
   * @param {boolean} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {boolean} p6
   * @param {number} p7
   * @return {void}
   */
global.CascadeShadowsSetCascadeBounds = function (p0, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0xd9edb2e4512d563e', p0, p1, _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, _fv(p7));
};

/**
   * CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE
   * Possible values:
   * "CSM_ST_POINT"
   * "CSM_ST_LINEAR"
   * "CSM_ST_BOX3x3"
   * "CSM_ST_BOX4x4"
   * "CSM_ST_DITHER2_LINEAR"
   * "CSM_ST_CUBIC"
   * "CSM_ST_POISSON16"
   * "CSM_ST_SOFT8"
   * "CSM_ST_SOFT16"
   * "CSM_ST_SOFT32"
   * "CSM_ST_DITHER16_RPDB"
   * "CSM_ST_POISSON16_RPDB_GNORM"
   * "CSM_ST_HIGHRES_BOX4x4"
   * "CSM_ST_ESM"
   *
   * @param {string | number} type
   * @return {void}
   */
global.CascadeShadowsSetShadowSampleType = function (type) {
  return Citizen.invokeNative('0xce4774e0f9ad48d1', _ts(type));
};

/**
   * CLEAR_TIMECYCLE_MODIFIER
   *
  
   * @return {void}
   */
global.ClearTimecycleModifier = function () {
  return Citizen.invokeNative('0x0e3f4af2d63491fb');
};

/**
   * CREATE_CHECKPOINT_WITH_NAMEHASH
   *
   * @param {number} typeHash
   * @param {number} posX1
   * @param {number} posY1
   * @param {number} posZ1
   * @param {number} posX2
   * @param {number} posY2
   * @param {number} posZ2
   * @param {number} radius
   * @param {number} red
   * @param {number} green
   * @param {number} blue
   * @param {number} alpha
   * @param {number} reserved
   * @return {number}
   */
global.CreateCheckpointWithNamehash = function (typeHash, posX1, posY1, posZ1, posX2, posY2, posZ2, radius, red, green, blue, alpha, reserved) {
  return Citizen.invokeNative('0x175668836b44cbb0', _ch(typeHash), _fv(posX1), _fv(posY1), _fv(posZ1), _fv(posX2), _fv(posY2), _fv(posZ2), _fv(radius), red, green, blue, alpha, reserved, _r, _ri);
};

/**
   * CREATE_TRACKED_POINT
   * Creates a tracked point, useful for checking the visibility of a 3D point on screen.
   *
  
   * @return {number}
   */
global.CreateTrackedPoint = function () {
  return Citizen.invokeNative('0xfb405cb357c69cb9', _r, _ri);
};

/**
   * DELETE_CHECKPOINT
   *
   * @param {number} checkpoint
   * @return {void}
   */
global.DeleteCheckpoint = function (checkpoint) {
  return Citizen.invokeNative('0x0ded5b0c8ebaae12', checkpoint);
};

/**
   * DESTROY_TRACKED_POINT
   *
   * @param {number} point
   * @return {void}
   */
global.DestroyTrackedPoint = function (point) {
  return Citizen.invokeNative('0x37a59922109f8f1c', point);
};

/**
   * DISABLE_ENTITYMASK
   *
  
   * @return {void}
   */
global.DisableEntitymask = function () {
  return Citizen.invokeNative('0x5c9978a2a3dc3d0d');
};

/**
   * DISABLE_HDTEX_THIS_FRAME
   *
  
   * @return {void}
   */
global.DisableHdtexThisFrame = function () {
  return Citizen.invokeNative('0x98a7cd5ea379a854');
};

/**
   * DOES_PARTICLE_FX_LOOPED_EXIST
   *
   * @param {number} ptfxHandle
   * @return {boolean}
   */
global.DoesParticleFxLoopedExist = function (ptfxHandle) {
  return Citizen.invokeNative('0x9dd5aff561e88f2a', ptfxHandle, _r);
};

/**
   * DRAW_LIGHT_WITH_RANGE
   *
   * @param {number} posX
   * @param {number} posY
   * @param {number} posZ
   * @param {number} colorR
   * @param {number} colorG
   * @param {number} colorB
   * @param {number} range
   * @param {number} intensity
   * @return {void}
   */
global.DrawLightWithRange = function (posX, posY, posZ, colorR, colorG, colorB, range, intensity) {
  return Citizen.invokeNative('0xd2d9e04c0df927f4', _fv(posX), _fv(posY), _fv(posZ), colorR, colorG, colorB, _fv(range), _fv(intensity));
};

/**
   * DRAW_LOW_QUALITY_PHOTO_TO_PHONE
   * nullsub, doesn't do anything (GTA5 leftover, there is no phone in RDR3)
   *
   * @param {boolean} p0
   * @param {number} photoRotation
   * @return {void}
   */
global.DrawLowQualityPhotoToPhone = function (p0, photoRotation) {
  return Citizen.invokeNative('0xf1142e5d64b47802', p0, photoRotation);
};

/**
   * DRAW_RECT
   * Draws a rectangle on the screen.
   * 
   * -x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)
   * 
   * -y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)
   * 
   * -width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)
   * 
   * -height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)
   * 
   * -R: Red part of the color. (0-255)
   * 
   * -G: Green part of the color. (0-255)
   * 
   * -B: Blue part of the color. (0-255)
   * 
   * -A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)
   *
   * @param {number} x
   * @param {number} y
   * @param {number} width
   * @param {number} height
   * @param {number} red
   * @param {number} green
   * @param {number} blue
   * @param {number} alpha
   * @param {boolean} p8
   * @param {boolean} p9
   * @return {void}
   */
global.DrawRect = function (x, y, width, height, red, green, blue, alpha, p8, p9) {
  return Citizen.invokeNative('0x405224591df02025', _fv(x), _fv(y), _fv(width), _fv(height), red, green, blue, alpha, p8, p9);
};

/**
   * DRAW_SPRITE
   * Draws a 2D sprite on the screen.
   * 
   * Parameters:
   * textureDict - Name of texture dictionary to load texture from
   * 
   * textureName - Name of texture to load from texture dictionary
   * 
   * screenX/Y - Screen offset (0.5 = center)
   * scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)
   * 
   * heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees
   * 
   * red,green,blue - Sprite color (default = 255/255/255)
   * 
   * alpha - opacity level
   * 
   * https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/textures
   *
   * @param {string | number} textureDict
   * @param {string | number} textureName
   * @param {number} screenX
   * @param {number} screenY
   * @param {number} width
   * @param {number} height
   * @param {number} heading
   * @param {number} red
   * @param {number} green
   * @param {number} blue
   * @param {number} alpha
   * @param {boolean} p11
   * @return {void}
   */
global.DrawSprite = function (textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11) {
  return Citizen.invokeNative('0xc9884ecade94cb34', _ts(textureDict), _ts(textureName), _fv(screenX), _fv(screenY), _fv(width), _fv(height), _fv(heading), red, green, blue, alpha, p11);
};

/**
   * DRAW_TV_CHANNEL
   *
   * @param {number} xPos
   * @param {number} yPos
   * @param {number} xScale
   * @param {number} yScale
   * @param {number} rotation
   * @param {number} red
   * @param {number} green
   * @param {number} blue
   * @param {number} alpha
   * @return {void}
   */
global.DrawTvChannel = function (xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha) {
  return Citizen.invokeNative('0xc0a145540254a840', _fv(xPos), _fv(yPos), _fv(xScale), _fv(yScale), _fv(rotation), red, green, blue, alpha);
};

/**
   * ENABLE_ENTITYMASK
   *
  
   * @return {void}
   */
global.EnableEntitymask = function () {
  return Citizen.invokeNative('0xfaad23de7a54fc14');
};

/**
   * ENABLE_MOON_CYCLE_OVERRIDE
   * Old name: _ENABLE_EXTRA_TIMECYCLE_MODIFIER_STRENGTH
   *
   * @param {number} strength
   * @return {void}
   */
global.EnableMoonCycleOverride = function (strength) {
  return Citizen.invokeNative('0x6fe93bcc7bf12b63', _fv(strength));
};

/**
   * ENABLE_MOVIE_SUBTITLES
   * nullsub, doesn't do anything
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.EnableMovieSubtitles = function (toggle) {
  return Citizen.invokeNative('0x6fc9b065229c0787', toggle);
};

/**
   * END_PETROL_TRAIL_DECALS
   *
  
   * @return {void}
   */
global.EndPetrolTrailDecals = function () {
  return Citizen.invokeNative('0x0e126aae933f3b56');
};

/**
   * FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO
   *
  
   * @return {void}
   */
global.FreeMemoryForHighQualityPhoto = function () {
  return Citizen.invokeNative('0xd45547d8396f002a');
};

/**
   * FREE_MEMORY_FOR_LOW_QUALITY_PHOTO
   *
  
   * @return {void}
   */
global.FreeMemoryForLowQualityPhoto = function () {
  return Citizen.invokeNative('0x614682e715adbaac');
};

/**
   * FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO
   *
  
   * @return {void}
   */
global.FreeMemoryForMissionCreatorPhoto = function () {
  return Citizen.invokeNative('0x7dff8f94937d2659');
};

/**
   * GET_SCREEN_COORD_FROM_WORLD_COORD
   *
   * @param {number} worldX
   * @param {number} worldY
   * @param {number} worldZ
   * @return {[boolean, number, number]}
   */
global.GetScreenCoordFromWorldCoord = function (worldX, worldY, worldZ) {
  return Citizen.invokeNative('0xcb50d7afcc8b0ec6', _fv(worldX), _fv(worldY), _fv(worldZ), _f, _f, _r);
};

/**
   * GET_SCREEN_RESOLUTION
   * Hardcoded to always set x to 1280 and y to 720.
   *
  
   * @return {[number, number]}
   */
global.GetScreenResolution = function () {
  return Citizen.invokeNative('0x66773c92835d0909', _i, _i);
};

/**
   * GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO
   * Old name: _GET_STATUS_OF_DRAW_LOW_QUALITY_PHOTO
   *
   * @param {any} p0
   * @return {number}
   */
global.GetStatusOfCreateLowQualityCopyOfPhoto = function (p0) {
  return Citizen.invokeNative('0x13430d3d5a45f14b', p0, _r, _ri);
};

/**
   * GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO
   * contentId: returned by NETWORK::_UGC_QUERY_GET_CREATOR_PHOTO(uVar0, 0, sParam3)
   *
   * @param {string | number} contentId
   * @return {number}
   */
global.GetStatusOfLoadMissionCreatorPhoto = function (contentId) {
  return Citizen.invokeNative('0xc71b50ae58d07369', _ts(contentId), _r, _ri);
};

/**
   * GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO
   * 0 = succeeded
   * 1 = getting status
   * 2 = failed
   *
  
   * @return {number}
   */
global.GetStatusOfSaveHighQualityPhoto = function () {
  return Citizen.invokeNative('0xd6663ec374092383', _r, _ri);
};

/**
   * GET_STATUS_OF_SORTED_LIST_OPERATION
   * 0 = succeeded
   * 1 = getting status
   * 2 = failed
   *
  
   * @return {number}
   */
global.GetStatusOfSortedListOperation = function () {
  return Citizen.invokeNative('0xb28894cd7408bd0c', _r, _ri);
};

/**
   * GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO
   *
  
   * @return {number}
   */
global.GetStatusOfTakeHighQualityPhoto = function () {
  return Citizen.invokeNative('0x4a3da74c3ccb1725', _r, _ri);
};

/**
   * GET_TIMECYCLE_MODIFIER_INDEX
   *
  
   * @return {number}
   */
global.GetTimecycleModifierIndex = function () {
  return Citizen.invokeNative('0xa705394293e2b3d3', _r, _ri);
};

/**
   * GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX
   *
  
   * @return {number}
   */
global.GetTimecycleTransitionModifierIndex = function () {
  return Citizen.invokeNative('0x2da67ba3c8a6755d', _r, _ri);
};

/**
   * GET_TOGGLE_PAUSED_RENDERPHASES_STATUS
   *
  
   * @return {boolean}
   */
global.GetTogglePausedRenderphasesStatus = function () {
  return Citizen.invokeNative('0x86ed21bdb2791ce8', _r);
};

/**
   * GET_TV_CHANNEL
   *
  
   * @return {number}
   */
global.GetTvChannel = function () {
  return Citizen.invokeNative('0xf90fbfd68f3c59ae', _r, _ri);
};

/**
   * IS_DECAL_ALIVE
   *
   * @param {number} decal
   * @return {boolean}
   */
global.IsDecalAlive = function (decal) {
  return Citizen.invokeNative('0x3e4b4e5cf5d3eeb5', decal, _r);
};

/**
   * IS_PHOTO_FRAME
   *
  
   * @return {boolean}
   */
global.IsPhotoFrame = function () {
  return Citizen.invokeNative('0x86076ae35cbbe55f', _r);
};

/**
   * IS_TRACKED_POINT_VISIBLE
   *
   * @param {number} point
   * @return {boolean}
   */
global.IsTrackedPointVisible = function (point) {
  return Citizen.invokeNative('0xcbb056ba159fb48d', point, _r);
};

/**
   * IS_TVSHOW_CURRENTLY_PLAYING
   * Old name: _IS_TV_PLAYLIST_ITEM_PLAYING
   *
   * @param {number} videoCliphash
   * @return {boolean}
   */
global.IsTvshowCurrentlyPlaying = function (videoCliphash) {
  return Citizen.invokeNative('0x4d562223e0eb65f3', _ch(videoCliphash), _r);
};

/**
   * LOAD_MISSION_CREATOR_PHOTO
   *
   * @param {DataView} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {boolean}
   */
global.LoadMissionCreatorPhoto = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x84f0ba7462ff8d58', p0, p1, p2, p3, _r);
};

/**
   * PEDSHOT_IS_AVAILABLE
   *
  
   * @return {boolean}
   */
global.PedshotIsAvailable = function () {
  return Citizen.invokeNative('0xaf6e67d073d2dce2', _r);
};

/**
   * QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS
   *
  
   * @return {any}
   */
global.QueueOperationToCreateSortedListOfPhotos = function () {
  return Citizen.invokeNative('0xa42edf1e88734a7e', _r);
};

/**
   * REMOVE_DECAL
   *
   * @param {number} decal
   * @return {void}
   */
global.RemoveDecal = function (decal) {
  return Citizen.invokeNative('0x49a720552eb0bb88', decal);
};

/**
   * REMOVE_DECALS_FROM_OBJECT
   *
   * @param {number} obj
   * @return {void}
   */
global.RemoveDecalsFromObject = function (obj) {
  return Citizen.invokeNative('0xfb8972bae0013140', obj);
};

/**
   * REMOVE_DECALS_IN_RANGE
   * Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol...
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} range
   * @return {void}
   */
global.RemoveDecalsInRange = function (x, y, z, range) {
  return Citizen.invokeNative('0x86de59fa02902b40', _fv(x), _fv(y), _fv(z), _fv(range));
};

/**
   * REMOVE_GRASS_CULL_SPHERE
   *
   * @param {number} handle
   * @return {void}
   */
global.RemoveGrassCullSphere = function (handle) {
  return Citizen.invokeNative('0xae7bf7ca9e4ba48d', handle);
};

/**
   * REMOVE_PARTICLE_FX
   *
   * @param {number} ptfxHandle
   * @param {boolean} p1
   * @return {void}
   */
global.RemoveParticleFx = function (ptfxHandle, p1) {
  return Citizen.invokeNative('0x459598f579c98929', ptfxHandle, p1);
};

/**
   * REMOVE_PARTICLE_FX_FROM_ENTITY
   *
   * @param {number} entity
   * @return {void}
   */
global.RemoveParticleFxFromEntity = function (entity) {
  return Citizen.invokeNative('0x92884b4a49d81325', entity);
};

/**
   * REMOVE_PARTICLE_FX_IN_RANGE
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @return {void}
   */
global.RemoveParticleFxInRange = function (x, y, z, radius) {
  return Citizen.invokeNative('0x87b5905eca623b68', _fv(x), _fv(y), _fv(z), _fv(radius));
};

/**
   * REMOVE_VEG_MODIFIER_SPHERE
   * only works by invoking and passing as pointer value Citizen.InvokeNative(0x9CF1836C03FB67A2, Citizen.PointerValueIntInitialized(vegModifierId),1) p1 is 1 or 0
   *
   * @param {number} vegModifierHandle
   * @param {number} p1
   * @return {void}
   */
global.RemoveVegModifierSphere = function (vegModifierHandle, p1) {
  return Citizen.invokeNative('0x9cf1836c03fb67a2', vegModifierHandle, p1);
};

/**
   * RESET_ADAPTATION
   * Sets an unknown value related to timecycles.
   *
   * @param {number} unk
   * @return {void}
   */
global.ResetAdaptation = function (unk) {
  return Citizen.invokeNative('0x297b72e2af094742', unk);
};

/**
   * RESET_PARTICLE_FX_OVERRIDE
   * Resets the effect of SET_PARTICLE_FX_OVERRIDE
   *
   * @param {string | number} name
   * @return {void}
   */
global.ResetParticleFxOverride = function (name) {
  return Citizen.invokeNative('0x274b3dabf7e72def', _ts(name));
};

/**
   * RESET_PAUSED_RENDERPHASES
   *
  
   * @return {void}
   */
global.ResetPausedRenderphases = function () {
  return Citizen.invokeNative('0xccd9aad85e1b559e');
};

/**
   * SAVE_HIGH_QUALITY_PHOTO
   *
   * @param {number} unused
   * @return {boolean}
   */
global.SaveHighQualityPhoto = function (unused) {
  return Citizen.invokeNative('0x57639fd876b68a91', unused, _r);
};

/**
   * SET_ARTIFICIAL_LIGHTS_STATE
   * Does not affect weapons, particles, fire/explosions, flashlights or the sun.
   * When set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.
   * 
   * state: True turns off all artificial light sources in the map: buildings, street lights, car lights, etc. False turns them back on.
   *
   * @param {boolean} state
   * @return {void}
   */
global.SetArtificialLightsState = function (state) {
  return Citizen.invokeNative('0xb2797619a7c7747b', state);
};

/**
   * SET_CHECKPOINT_RGBA
   * Sets the checkpoint color.
   *
   * @param {number} checkpoint
   * @param {number} red
   * @param {number} green
   * @param {number} blue
   * @param {number} alpha
   * @return {void}
   */
global.SetCheckpointRgba = function (checkpoint, red, green, blue, alpha) {
  return Citizen.invokeNative('0xcaafc225e33b1d15', checkpoint, red, green, blue, alpha);
};

/**
   * SET_CHECKPOINT_RGBA2
   * Sets the checkpoint icon color.
   *
   * @param {number} checkpoint
   * @param {number} red
   * @param {number} green
   * @param {number} blue
   * @param {number} alpha
   * @return {void}
   */
global.SetCheckpointRgba2 = function (checkpoint, red, green, blue, alpha) {
  return Citizen.invokeNative('0x99aff17222d4deb4', checkpoint, red, green, blue, alpha);
};

/**
   * SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME
   *
  
   * @return {void}
   */
global.SetDisablePetrolDecalsIgnitingThisFrame = function () {
  return Citizen.invokeNative('0x53ed07bf368eda59');
};

/**
   * SET_GRASS_CULL_SPHERE
   * Returns handle to be used with REMOVE_GRASS_CULL_SPHERE
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p3
   * @param {number} p4
   * @return {number}
   */
global.SetGrassCullSphere = function (x, y, z, p3, p4) {
  return Citizen.invokeNative('0x27219300c36a8d40', _fv(x), _fv(y), _fv(z), _fv(p3), p4, _r, _ri);
};

/**
   * SET_HIDOF_OVERRIDE
   * Old name: _SET_HIDOF_ENV_BLUR_PARAMS
   *
   * @param {boolean} p0
   * @param {boolean} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @return {void}
   */
global.SetHidofOverride = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xcc23aa1a7cbfe840', p0, p1, _fv(p2), _fv(p3), _fv(p4), _fv(p5));
};

/**
   * SET_PARTICLE_FX_AMBIENT_COLOUR
   * Related to Campfires.
   * p1: AMB_BONFIRE_MP, AMB_CAMPFIRE_LRG_MP
   *
   * @param {number} entity
   * @param {string | number} p1
   * @param {number} r
   * @param {number} g
   * @param {number} b
   * @return {void}
   */
global.SetParticleFxAmbientColour = function (entity, p1, r, g, b) {
  return Citizen.invokeNative('0x3c61b52b00848c26', entity, _ts(p1), _fv(r), _fv(g), _fv(b));
};

/**
   * SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE
   *
   * @param {number} p0
   * @return {void}
   */
global.SetParticleFxBulletImpactLodrangeScale = function (p0) {
  return Citizen.invokeNative('0x8dccc98dc0dbf9e4', _fv(p0));
};

/**
   * SET_PARTICLE_FX_BULLET_IMPACT_SCALE
   *
   * @param {number} scale
   * @return {void}
   */
global.SetParticleFxBulletImpactScale = function (scale) {
  return Citizen.invokeNative('0xa53c8d7d0f8c74d0', _fv(scale));
};

/**
   * SET_PARTICLE_FX_FOOT_LODRANGE_SCALE
   *
   * @param {number} p0
   * @return {void}
   */
global.SetParticleFxFootLodrangeScale = function (p0) {
  return Citizen.invokeNative('0x2a1625858887d4e6', _fv(p0));
};

/**
   * SET_PARTICLE_FX_LOOPED_ALPHA
   *
   * @param {number} ptfxHandle
   * @param {number} alpha
   * @return {void}
   */
global.SetParticleFxLoopedAlpha = function (ptfxHandle, alpha) {
  return Citizen.invokeNative('0x88786e76234f7054', ptfxHandle, _fv(alpha));
};

/**
   * SET_PARTICLE_FX_LOOPED_COLOUR
   *
   * @param {number} ptfxHandle
   * @param {number} r
   * @param {number} g
   * @param {number} b
   * @param {boolean} p4
   * @return {void}
   */
global.SetParticleFxLoopedColour = function (ptfxHandle, r, g, b, p4) {
  return Citizen.invokeNative('0x239879fc61c610cc', ptfxHandle, _fv(r), _fv(g), _fv(b), p4);
};

/**
   * SET_PARTICLE_FX_LOOPED_EVOLUTION
   *
   * @param {number} ptfxHandle
   * @param {string | number} propertyName
   * @param {number} amount
   * @param {boolean} noNetwork
   * @return {void}
   */
global.SetParticleFxLoopedEvolution = function (ptfxHandle, propertyName, amount, noNetwork) {
  return Citizen.invokeNative('0x3674f389b0facd80', ptfxHandle, _ts(propertyName), _fv(amount), noNetwork);
};

/**
   * SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST
   *
   * @param {number} ptfxHandle
   * @param {number} range
   * @return {void}
   */
global.SetParticleFxLoopedFarClipDist = function (ptfxHandle, range) {
  return Citizen.invokeNative('0x9b04d471da0ad7aa', ptfxHandle, _fv(range));
};

/**
   * SET_PARTICLE_FX_LOOPED_OFFSETS
   *
   * @param {number} ptfxHandle
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @return {void}
   */
global.SetParticleFxLoopedOffsets = function (ptfxHandle, x, y, z, rotX, rotY, rotZ) {
  return Citizen.invokeNative('0xd3a4a95fc94fe83b', ptfxHandle, _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ));
};

/**
   * SET_PARTICLE_FX_LOOPED_SCALE
   *
   * @param {number} ptfxHandle
   * @param {number} scale
   * @return {void}
   */
global.SetParticleFxLoopedScale = function (ptfxHandle, scale) {
  return Citizen.invokeNative('0x1a9e1c0d98d093b7', ptfxHandle, _fv(scale));
};

/**
   * SET_PARTICLE_FX_NON_LOOPED_ALPHA
   *
   * @param {number} alpha
   * @return {void}
   */
global.SetParticleFxNonLoopedAlpha = function (alpha) {
  return Citizen.invokeNative('0xe8a35938a7026cea', _fv(alpha));
};

/**
   * SET_PARTICLE_FX_NON_LOOPED_COLOUR
   *
   * @param {number} r
   * @param {number} g
   * @param {number} b
   * @return {void}
   */
global.SetParticleFxNonLoopedColour = function (r, g, b) {
  return Citizen.invokeNative('0x60b85bed6577a35b', _fv(r), _fv(g), _fv(b));
};

/**
   * SET_PARTICLE_FX_OVERRIDE
   *
   * @param {string | number} oldAsset
   * @param {string | number} newAsset
   * @return {void}
   */
global.SetParticleFxOverride = function (oldAsset, newAsset) {
  return Citizen.invokeNative('0xbe711a169e9c7e95', _ts(oldAsset), _ts(newAsset));
};

/**
   * SET_PICKUP_LIGHT
   * https://imgur.com/a/I2swSDJ
   * 
   * Old name: _SET_PICKUP_OBJECT_GLOW_ENABLED
   *
   * @param {number} object
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPickupLight = function (object, toggle) {
  return Citizen.invokeNative('0x7dfb49bcdb73089a', object, toggle);
};

/**
   * SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU
   * Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for draw commands that are used with a world render target.
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetScriptGfxDrawBehindPausemenu = function (toggle) {
  return Citizen.invokeNative('0x906b86e6d7896b9e', toggle);
};

/**
   * SET_SCRIPT_GFX_DRAW_ORDER
   * Sets the draw order for script draw commands.
   *
   * @param {number} drawOrder
   * @return {void}
   */
global.SetScriptGfxDrawOrder = function (drawOrder) {
  return Citizen.invokeNative('0xcfcc78391c8b3814', drawOrder);
};

/**
   * SET_TIMECYCLE_MODIFIER
   * https://github.com/femga/rdr3_discoveries/blob/master/graphics/timecycles
   *
   * @param {string | number} modifierName
   * @return {void}
   */
global.SetTimecycleModifier = function (modifierName) {
  return Citizen.invokeNative('0xfa08722a5ea82da7', _ts(modifierName));
};

/**
   * SET_TIMECYCLE_MODIFIER_STRENGTH
   *
   * @param {number} strength
   * @return {void}
   */
global.SetTimecycleModifierStrength = function (strength) {
  return Citizen.invokeNative('0xfdb74c9cc54c3f37', _fv(strength));
};

/**
   * SET_TRACKED_POINT_INFO
   *
   * @param {number} point
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @return {void}
   */
global.SetTrackedPointInfo = function (point, x, y, z, radius) {
  return Citizen.invokeNative('0xf6fda3d4404d4f2c', point, _fv(x), _fv(y), _fv(z), _fv(radius));
};

/**
   * SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER
   *
   * @param {number} strength
   * @return {void}
   */
global.SetTransitionOutOfTimecycleModifier = function (strength) {
  return Citizen.invokeNative('0xbb6c707f20d955d4', _fv(strength));
};

/**
   * SET_TRANSITION_TIMECYCLE_MODIFIER
   *
   * @param {string | number} modifierName
   * @param {number} transitionBlend
   * @return {void}
   */
global.SetTransitionTimecycleModifier = function (modifierName, transitionBlend) {
  return Citizen.invokeNative('0xff927a09f481d80c', _ts(modifierName), _fv(transitionBlend));
};

/**
   * SET_TV_AUDIO_FRONTEND
   * Probably changes tvs from being a 3d audio to being "global" audio
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetTvAudioFrontend = function (toggle) {
  return Citizen.invokeNative('0x64437c98fcc5f291', toggle);
};

/**
   * SET_TV_CHANNEL
   *
   * @param {number} channel
   * @return {void}
   */
global.SetTvChannel = function (channel) {
  return Citizen.invokeNative('0x593faf7fc9401a56', channel);
};

/**
   * SET_TV_CHANNEL_PLAYLIST
   *
   * @param {number} tvChannel
   * @param {string | number} playlistName
   * @param {boolean} restart
   * @return {void}
   */
global.SetTvChannelPlaylist = function (tvChannel, playlistName, restart) {
  return Citizen.invokeNative('0xdec6b25f5dc8925b', tvChannel, _ts(playlistName), restart);
};

/**
   * SET_TV_VOLUME
   *
   * @param {number} volume
   * @return {void}
   */
global.SetTvVolume = function (volume) {
  return Citizen.invokeNative('0x73a97068787d7231', _fv(volume));
};

/**
   * START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY
   *
   * @param {string | number} effectName
   * @param {number} entity
   * @param {number} xOffset
   * @param {number} yOffset
   * @param {number} zOffset
   * @param {number} xRot
   * @param {number} yRot
   * @param {number} zRot
   * @param {number} scale
   * @param {boolean} xAxis
   * @param {boolean} yAxis
   * @param {boolean} zAxis
   * @return {number}
   */
global.StartNetworkedParticleFxLoopedOnEntity = function (effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis) {
  return Citizen.invokeNative('0x8f90ab32e1944bde', _ts(effectName), entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), xAxis, yAxis, zAxis, _r, _ri);
};

/**
   * START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE
   *
   * @param {string | number} effectName
   * @param {number} entity
   * @param {number} xOffset
   * @param {number} yOffset
   * @param {number} zOffset
   * @param {number} xRot
   * @param {number} yRot
   * @param {number} zRot
   * @param {number} boneIndex
   * @param {number} scale
   * @param {boolean} xAxis
   * @param {boolean} yAxis
   * @param {boolean} zAxis
   * @return {number}
   */
global.StartNetworkedParticleFxLoopedOnEntityBone = function (effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis) {
  return Citizen.invokeNative('0x9c56621462ffe7a6', _ts(effectName), entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), boneIndex, _fv(scale), xAxis, yAxis, zAxis, _r, _ri);
};

/**
   * START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD
   *
   * @param {string | number} effectName
   * @param {number} xPos
   * @param {number} yPos
   * @param {number} zPos
   * @param {number} xRot
   * @param {number} yRot
   * @param {number} zRot
   * @param {number} scale
   * @param {boolean} xAxis
   * @param {boolean} yAxis
   * @param {boolean} zAxis
   * @return {boolean}
   */
global.StartNetworkedParticleFxNonLoopedAtCoord = function (effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis) {
  return Citizen.invokeNative('0xfb97618457994a62', _ts(effectName), _fv(xPos), _fv(yPos), _fv(zPos), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), xAxis, yAxis, zAxis, _r);
};

/**
   * START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY
   *
   * @param {string | number} effectName
   * @param {number} entity
   * @param {number} offsetX
   * @param {number} offsetY
   * @param {number} offsetZ
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} scale
   * @param {boolean} axisX
   * @param {boolean} axisY
   * @param {boolean} axisZ
   * @return {boolean}
   */
global.StartNetworkedParticleFxNonLoopedOnEntity = function (effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ) {
  return Citizen.invokeNative('0xe6cfe43937061143', _ts(effectName), entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scale), axisX, axisY, axisZ, _r);
};

/**
   * START_PARTICLE_FX_LOOPED_AT_COORD
   * https://github.com/femga/rdr3_discoveries/blob/master/graphics/ptfx/ptfx_assets_looped.lua
   *
   * @param {string | number} effectName
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} xRot
   * @param {number} yRot
   * @param {number} zRot
   * @param {number} scale
   * @param {boolean} xAxis
   * @param {boolean} yAxis
   * @param {boolean} zAxis
   * @param {boolean} p11
   * @return {number}
   */
global.StartParticleFxLoopedAtCoord = function (effectName, x, y, z, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11) {
  return Citizen.invokeNative('0xba32867e86125d3a', _ts(effectName), _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), xAxis, yAxis, zAxis, p11, _r, _ri);
};

/**
   * START_PARTICLE_FX_LOOPED_ON_ENTITY
   *
   * @param {string | number} effectName
   * @param {number} entity
   * @param {number} xOffset
   * @param {number} yOffset
   * @param {number} zOffset
   * @param {number} xRot
   * @param {number} yRot
   * @param {number} zRot
   * @param {number} scale
   * @param {boolean} xAxis
   * @param {boolean} yAxis
   * @param {boolean} zAxis
   * @return {number}
   */
global.StartParticleFxLoopedOnEntity = function (effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis) {
  return Citizen.invokeNative('0xbd41e1440ce39800', _ts(effectName), entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), xAxis, yAxis, zAxis, _r, _ri);
};

/**
   * START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE
   *
   * @param {string | number} effectName
   * @param {number} entity
   * @param {number} xOffset
   * @param {number} yOffset
   * @param {number} zOffset
   * @param {number} xRot
   * @param {number} yRot
   * @param {number} zRot
   * @param {number} boneIndex
   * @param {number} scale
   * @param {boolean} xAxis
   * @param {boolean} yAxis
   * @param {boolean} zAxis
   * @return {number}
   */
global.StartParticleFxLoopedOnEntityBone = function (effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis) {
  return Citizen.invokeNative('0xd3ba6ec7f2fbd5e9', _ts(effectName), entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), boneIndex, _fv(scale), xAxis, yAxis, zAxis, _r, _ri);
};

/**
   * START_PARTICLE_FX_LOOPED_ON_PED_BONE
   *
   * @param {string | number} effectName
   * @param {number} ped
   * @param {number} xOffset
   * @param {number} yOffset
   * @param {number} zOffset
   * @param {number} xRot
   * @param {number} yRot
   * @param {number} zRot
   * @param {number} boneIndex
   * @param {number} scale
   * @param {boolean} xAxis
   * @param {boolean} yAxis
   * @param {boolean} zAxis
   * @return {number}
   */
global.StartParticleFxLoopedOnPedBone = function (effectName, ped, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis) {
  return Citizen.invokeNative('0xe689c1b1432bb8af', _ts(effectName), ped, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), boneIndex, _fv(scale), xAxis, yAxis, zAxis, _r, _ri);
};

/**
   * START_PARTICLE_FX_NON_LOOPED_AT_COORD
   * https://github.com/femga/rdr3_discoveries/blob/master/graphics/ptfx/ptfx_assets_non_looped.lua
   *
   * @param {string | number} effectName
   * @param {number} xPos
   * @param {number} yPos
   * @param {number} zPos
   * @param {number} xRot
   * @param {number} yRot
   * @param {number} zRot
   * @param {number} scale
   * @param {number} eventType
   * @param {boolean} bPeekOnly
   * @param {boolean} bIsRegistered
   * @return {boolean}
   */
global.StartParticleFxNonLoopedAtCoord = function (effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, eventType, bPeekOnly, bIsRegistered) {
  return Citizen.invokeNative('0x2e80bf72ef7c87ac', _ts(effectName), _fv(xPos), _fv(yPos), _fv(zPos), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), eventType, bPeekOnly, bIsRegistered, _r);
};

/**
   * START_PARTICLE_FX_NON_LOOPED_ON_ENTITY
   *
   * @param {string | number} effectName
   * @param {number} entity
   * @param {number} offsetX
   * @param {number} offsetY
   * @param {number} offsetZ
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} scale
   * @param {boolean} axisX
   * @param {boolean} axisY
   * @param {boolean} axisZ
   * @return {boolean}
   */
global.StartParticleFxNonLoopedOnEntity = function (effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ) {
  return Citizen.invokeNative('0xff4c64c513388c12', _ts(effectName), entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scale), axisX, axisY, axisZ, _r);
};

/**
   * START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE
   *
   * @param {string | number} effectName
   * @param {number} ped
   * @param {number} offsetX
   * @param {number} offsetY
   * @param {number} offsetZ
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} boneIndex
   * @param {number} scale
   * @param {boolean} axisX
   * @param {boolean} axisY
   * @param {boolean} axisZ
   * @return {boolean}
   */
global.StartParticleFxNonLoopedOnPedBone = function (effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ) {
  return Citizen.invokeNative('0x3faa72bd940c3ac0', _ts(effectName), ped, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), boneIndex, _fv(scale), axisX, axisY, axisZ, _r);
};

/**
   * START_PETROL_TRAIL_DECALS
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.StartPetrolTrailDecals = function (p0, p1) {
  return Citizen.invokeNative('0x46f246d6504f0031', p0, p1);
};

/**
   * STOP_PARTICLE_FX_LOOPED
   *
   * @param {number} ptfxHandle
   * @param {boolean} p1
   * @return {void}
   */
global.StopParticleFxLooped = function (ptfxHandle, p1) {
  return Citizen.invokeNative('0x22970f3a088b133b', ptfxHandle, p1);
};

/**
   * TOGGLE_PAUSED_RENDERPHASES
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.TogglePausedRenderphases = function (toggle) {
  return Citizen.invokeNative('0xef9e1c45732f55fa', toggle);
};

/**
   * UPDATE_LIGHTS_ON_ENTITY
   *
   * @param {number} entity
   * @return {void}
   */
global.UpdateLightsOnEntity = function (entity) {
  return Citizen.invokeNative('0xbdbacb52a03cc760', entity);
};

/**
   * USE_PARTICLE_FX_ASSET
   * fxName: see data_0/data/effects/ptfx/fxlists/
   *
   * @param {string | number} fxName
   * @return {void}
   */
global.UseParticleFxAsset = function (fxName) {
  return Citizen.invokeNative('0xa10db07fc234dd12', _ts(fxName));
};

/**
   * _0x085C5B61A0114F32
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x085C5B61A0114F32 = function (p0, p1) {
  return Citizen.invokeNative('0x085c5b61a0114f32', p0, p1);
};

/**
   * _0x0D5B19C34068FEE7
   * Gets set to 1 when GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO = PHOTO_OPERATION_SUCCEEDED
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x0D5B19C34068FEE7 = function (p0) {
  return Citizen.invokeNative('0x0d5b19c34068fee7', p0);
};

/**
   * _0x1460B644397453EB
   * _RESET_*
   *
  
   * @return {void}
   */
global.N_0x1460B644397453EB = function () {
  return Citizen.invokeNative('0x1460b644397453eb');
};

/**
   * _0x171C18E994C1A395
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0x171C18E994C1A395 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x171c18e994c1a395', p0, p1, p2, p3, p4);
};

/**
   * _0x1A9F09AB458D49C6
   * Used in shop scripts for CATALOG_BOOK
   * false = Normal -> [CATALOG_BOOK_SHUTDOWN]
   * true = Trees flickering? -> [CATALOG_BOOK_OPEN]
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0x1A9F09AB458D49C6 = function (p0) {
  return Citizen.invokeNative('0x1a9f09ab458d49c6', p0);
};

/**
   * _0x1C6306E5BC25C29C
   *
  
   * @return {void}
   */
global.N_0x1C6306E5BC25C29C = function () {
  return Citizen.invokeNative('0x1c6306e5bc25c29c');
};

/**
   * _0x1FF8731BE1DFC0C0
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x1FF8731BE1DFC0C0 = function (p0, p1) {
  return Citizen.invokeNative('0x1ff8731be1dfc0c0', p0, p1);
};

/**
   * _0x21F00E08CBB5F37B
   * Params: component - used in odriscolls1 and sean1 R* SP Script: COMPONENT_BINOCULARS_SCOPE01
   * Triggers the binocular scaleform
   *
   * @param {string | number} component
   * @return {void}
   */
global.N_0x21F00E08CBB5F37B = function (component) {
  return Citizen.invokeNative('0x21f00e08cbb5f37b', _ts(component));
};

/**
   * _0x26DD2FB0A88CC412
   * effectName2, p2 and p3 are unused
   * 
   * ANIMPOSTFX_*
   *
   * @param {string | number} effectName
   * @param {string | number} effectName2
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x26DD2FB0A88CC412 = function (effectName, effectName2, p2, p3) {
  return Citizen.invokeNative('0x26dd2fb0a88cc412', _ts(effectName), _ts(effectName2), p2, p3);
};

/**
   * _0x285438C26C732F9D
   *
  
   * @return {any}
   */
global.N_0x285438C26C732F9D = function () {
  return Citizen.invokeNative('0x285438c26c732f9d', _r);
};

/**
   * _0x32DE2BFFDA43E62A
   *
  
   * @return {void}
   */
global.N_0x32DE2BFFDA43E62A = function () {
  return Citizen.invokeNative('0x32de2bffda43e62a');
};

/**
   * _0x38D9D50F2085E9B3
   * ANIMPOSTFX_*
   *
   * @param {number} effectNameHash
   * @return {void}
   */
global.N_0x38D9D50F2085E9B3 = function (effectNameHash) {
  return Citizen.invokeNative('0x38d9d50f2085e9b3', _ch(effectNameHash));
};

/**
   * _0x3DA7A10583A4BEC0
   * ANIMPOSTFX_*
   *
  
   * @return {boolean}
   */
global.N_0x3DA7A10583A4BEC0 = function () {
  return Citizen.invokeNative('0x3da7a10583a4bec0', _r);
};

/**
   * _0x402E1A61D2587FCD
   * Only used in R* SP Script spd_agnesdown1
   *
   * @param {any} p0
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p4
   * @param {number} p5
   * @param {number} heading
   * @return {boolean}
   */
global.N_0x402E1A61D2587FCD = function (p0, x, y, z, p4, p5, heading) {
  return Citizen.invokeNative('0x402e1a61d2587fcd', p0, _fv(x), _fv(y), _fv(z), _fv(p4), _fv(p5), _fv(heading), _r);
};

/**
   * _0x4046493D2EEACA0E
   * _DISABLE_*
   *
  
   * @return {void}
   */
global.N_0x4046493D2EEACA0E = function () {
  return Citizen.invokeNative('0x4046493d2eeaca0e');
};

/**
   * _0x41F88A85A579A61D
   * Used in CREATE_BEZIER_BLOOD_TRAIL_OF_TYPE
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x41F88A85A579A61D = function (p0) {
  return Citizen.invokeNative('0x41f88a85a579a61d', _fv(p0));
};

/**
   * _0x453D16D41FC51D3E
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0x453D16D41FC51D3E = function (p0) {
  return Citizen.invokeNative('0x453d16d41fc51d3e', p0);
};

/**
   * _0x48FE0DB54045B975
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.N_0x48FE0DB54045B975 = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0x48fe0db54045b975', p0, p1, p2, p3, p4, p5, p6);
};

/**
   * _0x4BD66B4E3427689B
   * Used in CREATE_BEZIER_BLOOD_TRAIL_OF_TYPE
   *
   * @param {string | number} p0
   * @return {void}
   */
global.N_0x4BD66B4E3427689B = function (p0) {
  return Citizen.invokeNative('0x4bd66b4e3427689b', _ts(p0));
};

/**
   * _0x4FB67D172C4476F3
   * p1: AMB_ANN_COAL_CHUTE_DIVE, AMB_ANN_COAL_CHUTE
   * p2: EMIT
   * p3: either 0.0f or 1.0f
   *
   * @param {number} entity
   * @param {string | number} p1
   * @param {string | number} p2
   * @param {number} p3
   * @return {void}
   */
global.N_0x4FB67D172C4476F3 = function (entity, p1, p2, p3) {
  return Citizen.invokeNative('0x4fb67d172c4476f3', entity, _ts(p1), _ts(p2), _fv(p3));
};

/**
   * _0x503941F65DBA24EC
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x503941F65DBA24EC = function (p0) {
  return Citizen.invokeNative('0x503941f65dba24ec', p0);
};

/**
   * _0x519928DF02EB5101
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x519928DF02EB5101 = function (p0) {
  return Citizen.invokeNative('0x519928df02eb5101', p0);
};

/**
   * _0x5AC6E0FA028369DE
   * Closes the the binocular scaleform
   *
  
   * @return {void}
   */
global.N_0x5AC6E0FA028369DE = function () {
  return Citizen.invokeNative('0x5ac6e0fa028369de');
};

/**
   * _0x5C674EB487891F6B
   *
  
   * @return {any}
   */
global.N_0x5C674EB487891F6B = function () {
  return Citizen.invokeNative('0x5c674eb487891f6b', _r);
};

/**
   * _0x5C9C3A466B3296A8
   * Only used in R* SP Script spd_agnesdown1
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x5C9C3A466B3296A8 = function (p0) {
  return Citizen.invokeNative('0x5c9c3a466b3296a8', p0, _r);
};

/**
   * _SET_PHOTO_MODE_EXPOSURE_LOCKED
   *
   * @param {boolean} lock
   * @return {void}
   */
global.SetPhotoModeExposureLocked = function (lock) {
  return Citizen.invokeNative('0x5cd6a2cce5087161', lock);
};

/**
   * _CHANGE_PHOTO_MODE_CONTRAST
   *
   * @param {number} value
   * @return {void}
   */
global.ChangePhotoModeContrast = function (value) {
  return Citizen.invokeNative('0x62b9f9a1272aed80', _fv(value));
};

/**
   * _0x67B0778C62E74423
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x67B0778C62E74423 = function (p0) {
  return Citizen.invokeNative('0x67b0778c62e74423', p0);
};

/**
   * _0x6C03118E9E5C1A14
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x6C03118E9E5C1A14 = function (p0) {
  return Citizen.invokeNative('0x6c03118e9e5c1a14', p0);
};

/**
   * _0x71845905BCCDE781
   * ANIMPOSTFX_*
   *
   * @param {number} effectNameHash
   * @return {void}
   */
global.N_0x71845905BCCDE781 = function (effectNameHash) {
  return Citizen.invokeNative('0x71845905bccde781', _ch(effectNameHash));
};

/**
   * _0x735762E8D7573E42
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x735762E8D7573E42 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x735762e8d7573e42', p0, p1, p2);
};

/**
   * _0x812C1563185C6FB2
   * Used in CREATE_BEZIER_BLOOD_TRAIL_OF_TYPE
   * _ENABLE_*
   *
  
   * @return {void}
   */
global.N_0x812C1563185C6FB2 = function () {
  return Citizen.invokeNative('0x812c1563185c6fb2');
};

/**
   * _0x815653A42C5ABE76
   *
  
   * @return {void}
   */
global.N_0x815653A42C5ABE76 = function () {
  return Citizen.invokeNative('0x815653a42c5abe76');
};

/**
   * _0x8996FA6AD9FE4E90
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x8996FA6AD9FE4E90 = function (p0) {
  return Citizen.invokeNative('0x8996fa6ad9fe4e90', p0);
};

/**
   * _0x910E260AEAD855DE
   *
  
   * @return {void}
   */
global.N_0x910E260AEAD855DE = function () {
  return Citizen.invokeNative('0x910e260aead855de');
};

/**
   * _UPDATE_PHOTO_MODE_EXPOSURE
   * Resets the exposure to the value when exposure lock was enabled
   *
  
   * @return {void}
   */
global.UpdatePhotoModeExposure = function () {
  return Citizen.invokeNative('0x9229ed770975bd9e');
};

/**
   * _0x94B261F1F35293E1
   * nullsub, doesn't do anything
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x94B261F1F35293E1 = function (p0) {
  return Citizen.invokeNative('0x94b261f1f35293e1', p0);
};

/**
   * _0x981C7D863980FA51
   *
  
   * @return {void}
   */
global.N_0x981C7D863980FA51 = function () {
  return Citizen.invokeNative('0x981c7d863980fa51');
};

/**
   * _0x9D1B0B5066205692
   *
  
   * @return {void}
   */
global.N_0x9D1B0B5066205692 = function () {
  return Citizen.invokeNative('0x9d1b0b5066205692');
};

/**
   * _0x9F158A49B0D84C3C
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x9F158A49B0D84C3C = function (p0) {
  return Citizen.invokeNative('0x9f158a49b0d84c3c', p0);
};

/**
   * _0x9F6D859C80708B26
   *
   * @param {boolean} p0
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x9F6D859C80708B26 = function (p0, p1) {
  return Citizen.invokeNative('0x9f6d859c80708b26', p0, p1);
};

/**
   * _0xA04EF43030593ABC
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xA04EF43030593ABC = function (p0, p1) {
  return Citizen.invokeNative('0xa04ef43030593abc', p0, p1);
};

/**
   * _0xA0F4D12D6042F6D5
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xA0F4D12D6042F6D5 = function (p0, p1) {
  return Citizen.invokeNative('0xa0f4d12d6042f6d5', p0, p1);
};

/**
   * _0xA15CCAB8AD038291
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {any}
   */
global.N_0xA15CCAB8AD038291 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xa15ccab8ad038291', p0, p1, p2, p3, _r);
};

/**
   * _0xA1A86055792FB249
   *
   * @param {number} personaPhotoLocalCacheType
   * @return {void}
   */
global.N_0xA1A86055792FB249 = function (personaPhotoLocalCacheType) {
  return Citizen.invokeNative('0xa1a86055792fb249', personaPhotoLocalCacheType);
};

/**
   * _0xA201A3D0AC087C37
   * ANIMPOSTFX_*
   *
   * @param {string | number} effectName
   * @return {void}
   */
global.N_0xA201A3D0AC087C37 = function (effectName) {
  return Citizen.invokeNative('0xa201a3d0ac087c37', _ts(effectName));
};

/**
   * _0xA21AF60C9F99CCC5
   *
  
   * @return {void}
   */
global.N_0xA21AF60C9F99CCC5 = function () {
  return Citizen.invokeNative('0xa21af60c9f99ccc5');
};

/**
   * _0xB032C085D9A03907
   * _SET_D* or _SET_E*
   *
  
   * @return {void}
   */
global.N_0xB032C085D9A03907 = function () {
  return Citizen.invokeNative('0xb032c085d9a03907');
};

/**
   * _0xB958D97A0DFAA0C2
   * ANIMPOSTFX_*
   *
   * @param {string | number} effectName
   * @return {boolean}
   */
global.N_0xB958D97A0DFAA0C2 = function (effectName) {
  return Citizen.invokeNative('0xb958d97a0dfaa0c2', _ts(effectName), _r);
};

/**
   * _0xC06F2F45A73EABCD
   * Used in NET_CAMP_SPIRIT_ANIMAL_CLEAR_ANIMAL_VISIBILITY
   *
   * @param {number} entity
   * @return {void}
   */
global.N_0xC06F2F45A73EABCD = function (entity) {
  return Citizen.invokeNative('0xc06f2f45a73eabcd', entity);
};

/**
   * _0xC28F62AC9774FC1B
   *
  
   * @return {any}
   */
global.N_0xC28F62AC9774FC1B = function () {
  return Citizen.invokeNative('0xc28f62ac9774fc1b', _r);
};

/**
   * _0xC37792A3F9C90771
   * Doesn't actually return anything.
   * 
   * ANIMPOSTFX_*
   *
  
   * @return {any}
   */
global.N_0xC37792A3F9C90771 = function () {
  return Citizen.invokeNative('0xc37792a3f9c90771', _r);
};

/**
   * _0xC489FE31AC726512
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xC489FE31AC726512 = function (p0, p1) {
  return Citizen.invokeNative('0xc489fe31ac726512', p0, p1);
};

/**
   * _0xC76FC4C2FC5F4405
   * ANIMPOSTFX_*
   *
   * @param {number} effectNameHash
   * @return {void}
   */
global.N_0xC76FC4C2FC5F4405 = function (effectNameHash) {
  return Citizen.invokeNative('0xc76fc4c2fc5f4405', _ch(effectNameHash));
};

/**
   * _CHANGE_PHOTO_MODE_EXPOSURE
   *
   * @param {number} value
   * @return {void}
   */
global.ChangePhotoModeExposure = function (value) {
  return Citizen.invokeNative('0xc8d0611d9a0cf5d3', _fv(value));
};

/**
   * _0xCC3B787E73E64160
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0xCC3B787E73E64160 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xcc3b787e73e64160', p0, p1, p2, p3, p4);
};

/**
   * _0xD1472AFF30C103D6
   * Only used in R* Script nb_stalking_hunter
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0xD1472AFF30C103D6 = function (p0) {
  return Citizen.invokeNative('0xd1472aff30c103d6', _fv(p0));
};

/**
   * _0xD543487A1F12828F
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0xD543487A1F12828F = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xd543487a1f12828f', p0, p1, p2, p3);
};

/**
   * _0xD9BC98B55BCFAA9B
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xD9BC98B55BCFAA9B = function (p0) {
  return Citizen.invokeNative('0xd9bc98b55bcfaa9b', p0);
};

/**
   * _0xDFE332A5DA6FE7C9
   * Returns iNumPixels, iPixelsVisible
   *
   * @param {number} iTrackedPoint
   * @return {number}
   */
global.N_0xDFE332A5DA6FE7C9 = function (iTrackedPoint) {
  return Citizen.invokeNative('0xdfe332a5da6fe7c9', iTrackedPoint, _r, _ri);
};

/**
   * _0xE63D68F455CA0B47
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {any}
   */
global.N_0xE63D68F455CA0B47 = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xe63d68f455ca0b47', p0, p1, p2, p3, p4, p5, p6, _r);
};

/**
   * _0xE75CDDEBF618C8FF
   * ANIMPOSTFX_*
   *
   * @param {number} effectNameHash
   * @return {boolean}
   */
global.N_0xE75CDDEBF618C8FF = function (effectNameHash) {
  return Citizen.invokeNative('0xe75cddebf618c8ff', _ch(effectNameHash), _r);
};

/**
   * _0xEB48CE48EEC41FD4
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xEB48CE48EEC41FD4 = function (p0) {
  return Citizen.invokeNative('0xeb48ce48eec41fd4', p0);
};

/**
   * _0xEC3D8C228FE553D7
   *
   * @param {boolean} p0
   * @return {boolean}
   */
global.N_0xEC3D8C228FE553D7 = function (p0) {
  return Citizen.invokeNative('0xec3d8c228fe553d7', p0, _r);
};

/**
   * _0xEC3F7F24EEEB3BA3
   *
  
   * @return {void}
   */
global.N_0xEC3F7F24EEEB3BA3 = function () {
  return Citizen.invokeNative('0xec3f7f24eeeb3ba3');
};

/**
   * _0xF2F543D48F319A3A
   *
  
   * @return {void}
   */
global.N_0xF2F543D48F319A3A = function () {
  return Citizen.invokeNative('0xf2f543d48f319a3a');
};

/**
   * _0xF5793BB386E1FF9C
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xF5793BB386E1FF9C = function (p0) {
  return Citizen.invokeNative('0xf5793bb386e1ff9c', p0);
};

/**
   * _0xFB680A9B33D0EDBE
   * _DISABLE_*
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0xFB680A9B33D0EDBE = function (p0) {
  return Citizen.invokeNative('0xfb680a9b33d0edbe', p0);
};

/**
   * _0xFBF161FCFEC8589E
   * ANIMPOSTFX_*
   *
   * @param {string | number} effectName
   * @param {number} p1
   * @param {boolean} p2
   * @return {[boolean, boolean]}
   */
global.N_0xFBF161FCFEC8589E = function (effectName, p1, p2) {
  return Citizen.invokeNative('0xfbf161fcfec8589e', _ts(effectName), p1, p2, /* actually bool */ _i, _r);
};

/**
   * _0xFC9B53C072F418E0
   *
  
   * @return {any}
   */
global.N_0xFC9B53C072F418E0 = function () {
  return Citizen.invokeNative('0xfc9b53c072f418e0', _r);
};

/**
   * _0xFD05B1DDE83749FA
   * R* Script spd_agnesdow1: p0 = SPD_AGNES_DOWD_01
   *
   * @param {string | number} p0
   * @return {boolean}
   */
global.N_0xFD05B1DDE83749FA = function (p0) {
  return Citizen.invokeNative('0xfd05b1dde83749fa', _ts(p0), _r);
};

/**
   * _0xFF584F097C17FA8F
   * Returns whether the 'killFX' setting is enabled.
   * 
   * ANIMPOSTFX_*
   *
  
   * @return {boolean}
   */
global.N_0xFF584F097C17FA8F = function () {
  return Citizen.invokeNative('0xff584f097c17fa8f', _r);
};

/**
   * _0xFF8018C778349234
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xFF8018C778349234 = function (p0) {
  return Citizen.invokeNative('0xff8018c778349234', p0);
};

/**
   * _ADD_BLOOD_POOL
   * https://i.imgur.com/ULQU9US.jpg
   * More rounded and small puddle
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {boolean} unused
   * @return {void}
   */
global.AddBloodPool = function (x, y, z, unused) {
  return Citizen.invokeNative('0xfa2ecc78a6014d4f', _fv(x), _fv(y), _fv(z), unused);
};

/**
   * _ADD_BLOOD_POOLS_FOR_PED
   * Creates blood pools for the given ped in some interval for a few seconds.
   *
   * @param {number} ped
   * @return {void}
   */
global.AddBloodPoolsForPed = function (ped) {
  return Citizen.invokeNative('0xdfce8ce9f3ebe93f', ped);
};

/**
   * _ADD_BLOOD_POOLS_FOR_PED_WITH_PARAMS
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} size
   * @param {number} p3
   * @return {void}
   */
global.AddBloodPoolsForPedWithParams = function (ped, p1, size, p3) {
  return Citizen.invokeNative('0xc349ee1e6efa494b', ped, _fv(p1), _fv(size), _fv(p3));
};

/**
   * _ADD_BLOOD_POOL_2
   * https://i.imgur.com/rPITUCV.jpg
   * More customizable and more like quadrants
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p3
   * @param {number} size
   * @param {number} p5
   * @param {boolean} permanent
   * @param {number} p7
   * @param {boolean} p8
   * @return {void}
   */
global.AddBloodPool_2 = function (x, y, z, p3, size, p5, permanent, p7, p8) {
  return Citizen.invokeNative('0xf708298675abdc6a', _fv(x), _fv(y), _fv(z), _fv(p3), _fv(size), _fv(p5), permanent, _fv(p7), p8);
};

/**
   * _ADD_BLOOD_TRAIL_POINT
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.AddBloodTrailPoint = function (x, y, z) {
  return Citizen.invokeNative('0xdd9dc1ab63d513ce', _fv(x), _fv(y), _fv(z));
};

/**
   * _ADD_BLOOD_TRAIL_SPLAT
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.AddBloodTrailSplat = function (x, y, z) {
  return Citizen.invokeNative('0xf5e45cb1cf965d2d', _fv(x), _fv(y), _fv(z));
};

/**
   * _ADD_ENTITY_TO_ENTITY_MASK
   *
   * @param {number} entity
   * @param {number} mask
   * @return {void}
   */
global.AddEntityToEntityMask = function (entity, mask) {
  return Citizen.invokeNative('0xc6f81fcd15350323', entity, mask);
};

/**
   * _ADD_ENTITY_TO_ENTITY_MASK_WITH_INTENSITY
   *
   * @param {number} entity
   * @param {number} mask
   * @param {number} intensity
   * @return {void}
   */
global.AddEntityToEntityMaskWithIntensity = function (entity, mask, intensity) {
  return Citizen.invokeNative('0x958debd9353c0935', entity, mask, _fv(intensity));
};

/**
   * _ADD_VEG_MODIFIER_ZONE
   * Adds Vegetation Blocking Zone, Added Snow Flattening veg mod Zone
   * Returns veg modifier handle
   *
   * @param {number} volume
   * @param {number} p1
   * @param {number} flags
   * @param {number} p3
   * @return {number}
   */
global.AddVegModifierZone = function (volume, p1, flags, p3) {
  return Citizen.invokeNative('0xbd3324281e8b9933', volume, p1, flags, p3, _r, _ri);
};

/**
   * _ANIMPOSTFX_CLEAR_EFFECT
   *
   * @param {string | number} effectName
   * @return {void}
   */
global.AnimpostfxClearEffect = function (effectName) {
  return Citizen.invokeNative('0xc5cb91d65852ed7e', _ts(effectName));
};

/**
   * _ANIMPOSTFX_GET_STACKHASH
   * Known effects: MP_Trans_SceneToPhoto
   * MP_Trans_WinLose
   * SpectateFilter
   * MP_CharacterCreatorPhoto
   * MP_Trans_PhotoToScene
   * InterrogationHit
   *
   * @param {string | number} effectName
   * @return {number}
   */
global.AnimpostfxGetStackhash = function (effectName) {
  return Citizen.invokeNative('0x842ccc9491ffcd9b', _ts(effectName), _r, _ri);
};

/**
   * _ANIMPOSTFX_HAS_LOADED
   *
   * @param {string | number} effectName
   * @return {boolean}
   */
global.AnimpostfxHasLoaded = function (effectName) {
  return Citizen.invokeNative('0xbf2dd155b2adcd0a', _ts(effectName), _r);
};

/**
   * _ANIMPOSTFX_IS_STACKHASH_PLAYING
   *
   * @param {number} effectNameHash
   * @return {boolean}
   */
global.AnimpostfxIsStackhashPlaying = function (effectNameHash) {
  return Citizen.invokeNative('0xeef83a759ae06a27', _ch(effectNameHash), _r);
};

/**
   * _ANIMPOSTFX_IS_TAG_PLAYING
   *
   * @param {string | number} effectName
   * @return {boolean}
   */
global.AnimpostfxIsTagPlaying = function (effectName) {
  return Citizen.invokeNative('0x2d4f9c852ce8a253', _ts(effectName), _r);
};

/**
   * _ANIMPOSTFX_PLAY_TAG
   *
   * @param {number} effectNameHash
   * @return {void}
   */
global.AnimpostfxPlayTag = function (effectNameHash) {
  return Citizen.invokeNative('0x9b8d5d4cb8af58b3', _ch(effectNameHash));
};

/**
   * _ANIMPOSTFX_PLAY_TIMED
   *
   * @param {string | number} effectName
   * @param {number} duration
   * @return {void}
   */
global.AnimpostfxPlayTimed = function (effectName, duration) {
  return Citizen.invokeNative('0x3a9a281ff71249e9', _ts(effectName), duration);
};

/**
   * _ANIMPOSTFX_PRELOAD_POSTFX
   *
   * @param {string | number} effectName
   * @return {void}
   */
global.AnimpostfxPreloadPostfx = function (effectName) {
  return Citizen.invokeNative('0x5199405eabfbd7f0', _ts(effectName));
};

/**
   * _ANIMPOSTFX_PRELOAD_POSTFX_BY_STACKHASH
   *
   * @param {number} effectNameHash
   * @return {void}
   */
global.AnimpostfxPreloadPostfxByStackhash = function (effectNameHash) {
  return Citizen.invokeNative('0xf3e039322bfbd4d8', _ch(effectNameHash));
};

/**
   * _ANIMPOSTFX_SET_POSTFX_COLOR
   *
   * @param {string | number} effectName
   * @param {number} p1
   * @param {number} red
   * @param {number} green
   * @param {number} blue
   * @param {number} alpha
   * @return {void}
   */
global.AnimpostfxSetPostfxColor = function (effectName, p1, red, green, blue, alpha) {
  return Citizen.invokeNative('0x63011d0c7c6519e0', _ts(effectName), p1, red, green, blue, alpha);
};

/**
   * _ANIMPOSTFX_SET_POTENCY
   * Health Core Effect Filter Potency: p1 = 1
   * Stamina Core Effect Filter Potency: p1 = 2
   * Multiple Core Effect Filter Potency: p1 = 3
   *
   * @param {string | number} effectName
   * @param {number} p1
   * @param {number} potency
   * @return {void}
   */
global.AnimpostfxSetPotency = function (effectName, p1, potency) {
  return Citizen.invokeNative('0xf972f0ab16dc5260', _ts(effectName), p1, _fv(potency));
};

/**
   * _ANIMPOSTFX_SET_STRENGTH
   * must be called after ANIMPOSTFX_PLAY, strength 0.0f - 1.0f
   *
   * @param {string | number} effectName
   * @param {number} strength
   * @return {void}
   */
global.AnimpostfxSetStrength = function (effectName, strength) {
  return Citizen.invokeNative('0xcab4dd2d5b2b7246', _ts(effectName), _fv(strength));
};

/**
   * _ANIMPOSTFX_SET_TO_UNLOAD
   *
   * @param {string | number} effectName
   * @return {void}
   */
global.AnimpostfxSetToUnload = function (effectName) {
  return Citizen.invokeNative('0x37d7bdba89f13959', _ts(effectName));
};

/**
   * _ANIMPOSTFX_STOP_STACKHASH_POSTFX
   *
   * @param {number} effectNameHash
   * @return {void}
   */
global.AnimpostfxStopStackhashPostfx = function (effectNameHash) {
  return Citizen.invokeNative('0xeda5cbecf56e1386', _ch(effectNameHash));
};

/**
   * _ANIMPOSTFX_STOP_TAG
   *
   * @param {string | number} effectName
   * @return {void}
   */
global.AnimpostfxStopTag = function (effectName) {
  return Citizen.invokeNative('0xad74c22a541ab987', _ts(effectName));
};

/**
   * _BLOCK_PICKUP_OBJECT_LIGHT
   *
   * @param {number} pickupObject
   * @param {boolean} toggle
   * @return {void}
   */
global.BlockPickupObjectLight = function (pickupObject, toggle) {
  return Citizen.invokeNative('0x50c14328119e1dd1', pickupObject, toggle);
};

/**
   * _BLOOD_TRAIL_FOR_WAYPOINT
   * p1: 0.3f in R* Scripts
   *
   * @param {string | number} waypointRecording
   * @param {number} p1
   * @return {void}
   */
global.BloodTrailForWaypoint = function (waypointRecording, p1) {
  return Citizen.invokeNative('0xb9c92616929cc25d', _ts(waypointRecording), _fv(p1));
};

/**
   * _CREATE_SWATCH_TEXTURE_DICT
   *
   * @param {number} slots
   * @return {boolean}
   */
global.CreateSwatchTextureDict = function (slots) {
  return Citizen.invokeNative('0x3d084d5568fb4028', slots, _r);
};

/**
   * _DESTROY_SWATCH_TEXTURE_DICT
   *
  
   * @return {void}
   */
global.DestroySwatchTextureDict = function () {
  return Citizen.invokeNative('0xdad7fb8402651654');
};

/**
   * _DISABLE_FAR_ARTIFICIAL_LIGHTS
   * Only used in guama1 R* Script
   * Disables lod/distant lights when BOOL is set to true
   *
   * @param {boolean} disable
   * @return {void}
   */
global.DisableFarArtificialLights = function (disable) {
  return Citizen.invokeNative('0xcd284e2f6ac27ee9', disable);
};

/**
   * _DISABLE_STATIC_VEG_MODIFIER
   *
   * @param {number} p0
   * @return {void}
   */
global.DisableStaticVegModifier = function (p0) {
  return Citizen.invokeNative('0xdd0bc0edcb2162f6', _ch(p0));
};

/**
   * _DOES_CHECKPOINT_HAVE_FX
   *
   * @param {number} checkpoint
   * @return {boolean}
   */
global.DoesCheckpointHaveFx = function (checkpoint) {
  return Citizen.invokeNative('0x4c11ccacb7c02b6e', checkpoint, _r);
};

/**
   * DRAW_MARKER
   * https://github.com/femga/rdr3_discoveries/blob/master/graphics/markers/marker_types.lua
   * Old name: _DRAW_MARKER
   *
   * @param {number} type
   * @param {number} posX
   * @param {number} posY
   * @param {number} posZ
   * @param {number} dirX
   * @param {number} dirY
   * @param {number} dirZ
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} scaleX
   * @param {number} scaleY
   * @param {number} scaleZ
   * @param {number} red
   * @param {number} green
   * @param {number} blue
   * @param {number} alpha
   * @param {boolean} bobUpAndDown
   * @param {boolean} faceCamera
   * @param {number} p19
   * @param {boolean} rotate
   * @param {string | number} textureDict
   * @param {string | number} textureName
   * @param {boolean} drawOnEnts
   * @return {void}
   */
global.DrawMarker = function (type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts) {
  return Citizen.invokeNative('0x2a32faa57b937173', _ch(type), _fv(posX), _fv(posY), _fv(posZ), _fv(dirX), _fv(dirY), _fv(dirZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scaleX), _fv(scaleY), _fv(scaleZ), red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, _ts(textureDict), _ts(textureName), drawOnEnts);
};

/**
   * _ENABLE_STATIC_VEG_MODIFIER
   *
   * @param {number} p0
   * @return {void}
   */
global.EnableStaticVegModifier = function (p0) {
  return Citizen.invokeNative('0xdfea23ec90113657', _ch(p0));
};

/**
   * _GENERATE_SWATCH_TEXTURE
   * Example:
   * local hash = GetHashKey("CLOTHING_ITEM_M_EYES_001_TINT_001")
   * _GENERATE_SWATCH_TEXTURE(0, hash, 0, true)
   * metapedType: see 0xEC9A1261BF0CE510
   *
   * @param {number} slotId
   * @param {number} componentHash
   * @param {number} metapedType
   * @param {boolean} p3
   * @return {void}
   */
global.GenerateSwatchTexture = function (slotId, componentHash, metapedType, p3) {
  return Citizen.invokeNative('0x160921255327c591', slotId, _ch(componentHash), metapedType, p3);
};

/**
   * _GENERATE_SWATCH_TEXTURE_DIRECTLY
   * Example: https://pastebin.com/tTgpER9A
   *
   * @param {number} slot
   * @param {any} p1
   * @return {void}
   */
global.GenerateSwatchTextureDirectly = function (slot, p1) {
  return Citizen.invokeNative('0x646ed1a1d28487df', slot, p1);
};

/**
   * _GET_CURRENT_NUMBER_OF_LOCAL_PHOTOS
   *
  
   * @return {number}
   */
global.GetCurrentNumberOfLocalPhotos = function () {
  return Citizen.invokeNative('0x78c56b8a7b1d000c', _r, _ri);
};

/**
   * _GET_ENTITY_MASK_LAYERS
   *
   * @param {number} entity
   * @return {[boolean, number, number, number, number]}
   */
global.GetEntityMaskLayers = function (entity) {
  return Citizen.invokeNative('0xe8a8378bf651079c', entity, _f, _f, _f, _f, _r);
};

/**
   * _GET_MAX_NUMBER_OF_LOCAL_PHOTOS
   * Always returns 200.
   *
  
   * @return {number}
   */
global.GetMaxNumberOfLocalPhotos = function () {
  return Citizen.invokeNative('0x8e587fcd30e05592', _r, _ri);
};

/**
   * _GET_MODIFIED_VISIBILITY_DISTANCE
   * _GET_C* - _GET_E*
   *
  
   * @return {number}
   */
global.GetModifiedVisibilityDistance = function () {
  return Citizen.invokeNative('0x25ca89b2a39dcc69', _r, _rf);
};

/**
   * _GET_PHOTO_MODE_CONTRAST
   *
  
   * @return {number}
   */
global.GetPhotoModeContrast = function () {
  return Citizen.invokeNative('0x98f4154989b81ec6', _r, _rf);
};

/**
   * _GET_PHOTO_MODE_EXPOSURE
   *
  
   * @return {number}
   */
global.GetPhotoModeExposure = function () {
  return Citizen.invokeNative('0x06c0d8bb6b04a709', _r, _rf);
};

/**
   * _GET_PROXY_INTERIOR_INDEX
   * Returns proxyInteriorIndex
   *
   * @param {number} interiorId
   * @return {number}
   */
global.GetProxyInteriorIndex = function (interiorId) {
  return Citizen.invokeNative('0x5d1c5d8e62e8ee1c', interiorId, _r, _ri);
};

/**
   * _IS_PROXY_INTERIOR_INDEX_ARTIFICIAL_LIGHTS_ENABLED
   *
   * @param {number} proxyInteriorIndex
   * @return {boolean}
   */
global.IsProxyInteriorIndexArtificialLightsEnabled = function (proxyInteriorIndex) {
  return Citizen.invokeNative('0x113857d66a9cabe6', proxyInteriorIndex, _r);
};

/**
   * _IS_STATIC_VEG_MODIFIER_ENABLED
   *
   * @param {number} p0
   * @return {boolean}
   */
global.IsStaticVegModifierEnabled = function (p0) {
  return Citizen.invokeNative('0xde9bad3292aa6d5e', _ch(p0), _r);
};

/**
   * _IS_TEXTURE_IN_DICT
   *
   * @param {number} txdHash
   * @param {number} dict
   * @return {boolean}
   */
global.IsTextureInDict = function (txdHash, dict) {
  return Citizen.invokeNative('0xa2a51869bded733b', _ch(txdHash), _ch(dict), _r);
};

/**
   * _IS_TRACKED_POINT_VALID
   *
   * @param {number} point
   * @return {boolean}
   */
global.IsTrackedPointValid = function (point) {
  return Citizen.invokeNative('0xf2fddcc8c6bae1b3', point, _r);
};

/**
   * _PEDSHOT_FINISH_CLEANUP_DATA
   *
  
   * @return {void}
   */
global.PedshotFinishCleanupData = function () {
  return Citizen.invokeNative('0xc2b8164c3be871a4');
};

/**
   * _PEDSHOT_GENERATE_PERSONA_PHOTO
   *
   * @param {string | number} texture
   * @param {number} ped
   * @param {number} playerSlot
   * @return {boolean}
   */
global.PedshotGeneratePersonaPhoto = function (texture, ped, playerSlot) {
  return Citizen.invokeNative('0xd9c24f53631f2372', _ts(texture), ped, playerSlot, _r);
};

/**
   * _PEDSHOT_INIT_CLEANUP_DATA
   *
  
   * @return {void}
   */
global.PedshotInitCleanupData = function () {
  return Citizen.invokeNative('0x55285f885f662169');
};

/**
   * _PEDSHOT_PREVIOUS_PERSONA_PHOTO_DATA_CLEANUP
   *
  
   * @return {void}
   */
global.PedshotPreviousPersonaPhotoDataCleanup = function () {
  return Citizen.invokeNative('0x3e2fddbe435a8787');
};

/**
   * _PEDSHOT_SET_PERSONA_PHOTO_TYPE
   *
   * @param {number} personaPhotoLocalCacheType
   * @return {void}
   */
global.PedshotSetPersonaPhotoType = function (personaPhotoLocalCacheType) {
  return Citizen.invokeNative('0x196d3acbeba4a44b', personaPhotoLocalCacheType);
};

/**
   * _REMOVE_ENTITY_FROM_ENTITY_MASK
   *
   * @param {number} entity
   * @return {void}
   */
global.RemoveEntityFromEntityMask = function (entity) {
  return Citizen.invokeNative('0x56a786e87ff53478', entity);
};

/**
   * _RESET_ENTITY_AURA
   * Used for script function RPG_GLOBAL_STATS__PRIVATE__DEACTIVATE_STAT_FLAG - Inspiration Aura unequip
   *
  
   * @return {void}
   */
global.ResetEntityAura = function () {
  return Citizen.invokeNative('0xaf4d239b8903fcbe');
};

/**
   * _SET_CLOUD_HEIGHT
   *
   * @param {number} height
   * @return {void}
   */
global.SetCloudHeight = function (height) {
  return Citizen.invokeNative('0xc332c91388f5580b', _fv(height));
};

/**
   * _SET_CLOUD_LAYER
   *
   * @param {number} x
   * @param {number} y
   * @param {number} p2
   * @return {void}
   */
global.SetCloudLayer = function (x, y, p2) {
  return Citizen.invokeNative('0xb8c984c0d47f4f07', _fv(x), _fv(y), p2);
};

/**
   * _SET_CLOUD_NOISE
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.SetCloudNoise = function (x, y, z) {
  return Citizen.invokeNative('0xfe7966df01452f32', _fv(x), _fv(y), _fv(z));
};

/**
   * _SET_CLOUD_POSITION
   * Only used in finale2, smuggler2, winter4
   * _SET_CLOUD_A* - _SET_CLOUD_H*
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.SetCloudPosition = function (x, y, z) {
  return Citizen.invokeNative('0x10c1767b93257480', _fv(x), _fv(y), _fv(z));
};

/**
   * _SET_DISTRICT_PHOTO_TAKEN_STAT
   *
   * @param {string | number} p0
   * @return {void}
   */
global.SetDistrictPhotoTakenStat = function (p0) {
  return Citizen.invokeNative('0x9937facbbf267244', _ts(p0));
};

/**
   * _SET_ENTITY_AURA
   * Used for script function RPG_GLOBAL_STATS__PRIVATE__ACTIVATE_STAT_FLAG - Quite and Inspiration Aura equip
   * Params: 0f, 2f, 2f
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.SetEntityAura = function (p0, p1, p2) {
  return Citizen.invokeNative('0x249cd6b7285536f2', _fv(p0), _fv(p1), _fv(p2));
};

/**
   * _SET_ENTITY_MASK_LAYERS
   *
   * @param {number} entity
   * @return {[number, number, number, number]}
   */
global.SetEntityMaskLayers = function (entity) {
  return Citizen.invokeNative('0xe92012611461a42a', entity, _f, _f, _f, _f);
};

/**
   * _SET_ENTITY_RENDER_GUARMA_SHIP
   * Only used in guama1 R* SP Script while spawning the ship
   * _SET_ENTITY_QUATERNION_* - SET_ENTITY_RENDER_*
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetEntityRenderGuarmaShip = function (vehicle, toggle) {
  return Citizen.invokeNative('0xc38b4952b728397a', vehicle, toggle);
};

/**
   * _SET_LIGHTS_COLOR_FOR_ENTITY
   * https://gfycat.com/meagerfaireyra
   *
   * @param {number} entity
   * @param {number} red
   * @param {number} green
   * @param {number} blue
   * @return {void}
   */
global.SetLightsColorForEntity = function (entity, red, green, blue) {
  return Citizen.invokeNative('0x6ec2a67962296f49', entity, red, green, blue);
};

/**
   * _SET_LIGHTS_INTENSITY_FOR_ENTITY
   *
   * @param {number} entity
   * @param {number} intensity
   * @return {void}
   */
global.SetLightsIntensityForEntity = function (entity, intensity) {
  return Citizen.invokeNative('0x07c0f87aac57f2e4', entity, _fv(intensity));
};

/**
   * _SET_LIGHTS_TYPE_FOR_ENTITY
   * type must be less than or equal to 20
   *
   * @param {number} entity
   * @param {number} type
   * @return {void}
   */
global.SetLightsTypeForEntity = function (entity, type) {
  return Citizen.invokeNative('0xab72c67163dc4db4', entity, type);
};

/**
   * _SET_PARTICLE_FX_LOOPED_UPDATE_DISTANT_SMOKE
   * _SET_PARTICLE_FX_LOOPED_FA* - _SET_PARTICLE_FX_LOOPED_OF*
   *
   * @param {number} ptfxHandle
   * @param {number} scalar
   * @return {void}
   */
global.SetParticleFxLoopedUpdateDistantSmoke = function (ptfxHandle, scalar) {
  return Citizen.invokeNative('0x9ddc222d85d5af2a', ptfxHandle, _fv(scalar));
};

/**
   * _SET_PARTICLE_FX_NON_LOOPED_EMITTER_SCALE
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.SetParticleFxNonLoopedEmitterScale = function (p0, p1, p2) {
  return Citizen.invokeNative('0x56c392c2bd78b024', _fv(p0), _fv(p1), _fv(p2));
};

/**
   * _SET_PEARLESCENT_FX_ENABLED
   * Enables/disables a kind of 'shiny' effect on metals.
   *
   * @param {number} object
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPearlescentFxEnabled = function (object, toggle) {
  return Citizen.invokeNative('0x72e30372e7cc4415', object, toggle);
};

/**
   * _SET_PHOTO_IN_PHOTOMODE_STAT
   *
   * @param {boolean} p0
   * @return {void}
   */
global.SetPhotoInPhotomodeStat = function (p0) {
  return Citizen.invokeNative('0xfa91736933ab3d93', p0);
};

/**
   * _SET_PHOTO_OVERLAY_EFFECT_STAT
   *
   * @param {number} p0
   * @return {void}
   */
global.SetPhotoOverlayEffectStat = function (p0) {
  return Citizen.invokeNative('0x8b3296278328b5eb', p0);
};

/**
   * _SET_PHOTO_SELF_STAT
   *
   * @param {boolean} p0
   * @return {void}
   */
global.SetPhotoSelfStat = function (p0) {
  return Citizen.invokeNative('0x2705d18c11b61046', p0);
};

/**
   * _SET_PHOTO_STUDIO_STAT
   *
   * @param {number} p0
   * @return {void}
   */
global.SetPhotoStudioStat = function (p0) {
  return Citizen.invokeNative('0x8e6aff353c09652e', p0);
};

/**
   * _SET_PLAYER_APPEAR_IN_PHOTO
   *
   * @param {number} player
   * @return {void}
   */
global.SetPlayerAppearInPhoto = function (player) {
  return Citizen.invokeNative('0x75d568607909333e', player);
};

/**
   * _SET_POSSE_ID_FOR_PHOTO
   *
   * @param {any} posseId
   * @return {void}
   */
global.SetPosseIdForPhoto = function (posseId) {
  return Citizen.invokeNative('0x564837d4a9ede296', posseId);
};

/**
   * _SET_PROXY_INTERIOR_INDEX_ARTIFICIAL_LIGHTS_STATE
   * state: false disables artificial interior light sources for specific proxyInteriorIndex
   *
   * @param {number} proxyInteriorIndex
   * @param {boolean} state
   * @return {void}
   */
global.SetProxyInteriorIndexArtificialLightsState = function (proxyInteriorIndex, state) {
  return Citizen.invokeNative('0xbfcb17895bb99e4e', proxyInteriorIndex, state);
};

/**
   * _SET_REGION_PHOTO_TAKEN_STAT
   *
   * @param {string | number} p0
   * @return {void}
   */
global.SetRegionPhotoTakenStat = function (p0) {
  return Citizen.invokeNative('0xd1031b83ac093bc7', _ts(p0));
};

/**
   * _SET_SNIPER_GLINTS_ENABLED
   *
   * @param {boolean} enabled
   * @return {void}
   */
global.SetSniperGlintsEnabled = function (enabled) {
  return Citizen.invokeNative('0x6e8eb45a4f4460eb', enabled);
};

/**
   * _SET_SNOW_COVERAGE_TYPE
   * enum class eSnowCoverageType
   * {
   *   Primary,
   *   Secondary,
   *   Xmas,
   *   XmasSecondary // since b1232
   * };
   *
   * @param {number} type
   * @return {void}
   */
global.SetSnowCoverageType = function (type) {
  return Citizen.invokeNative('0xf02a9c330bbfc5c7', type);
};

/**
   * _SET_STATE_PHOTO_TAKEN_STAT
   *
   * @param {string | number} p0
   * @return {void}
   */
global.SetStatePhotoTakenStat = function (p0) {
  return Citizen.invokeNative('0x8952e857696b8a79', _ts(p0));
};

/**
   * _START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE_2
   *
   * @param {string | number} effectName
   * @param {number} ped
   * @param {number} offsetX
   * @param {number} offsetY
   * @param {number} offsetZ
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} boneIndex
   * @param {number} scale
   * @param {boolean} axisX
   * @param {boolean} axisY
   * @param {boolean} axisZ
   * @return {boolean}
   */
global.StartParticleFxNonLoopedOnPedBone_2 = function (effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ) {
  return Citizen.invokeNative('0xc695870b8a149b96', _ts(effectName), ped, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), boneIndex, _fv(scale), axisX, axisY, axisZ, _r);
};

/**
   * ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME
   * Old name: _ALLOW_PAUSE_MENU_WHEN_DEAD_THIS_FRAME
   *
  
   * @return {void}
   */
global.AllowPauseWhenNotInStateOfPlayThisFrame = function () {
  return Citizen.invokeNative('0x30996422df1ee561');
};

/**
   * BUSYSPINNER_IS_ON
   *
  
   * @return {boolean}
   */
global.BusyspinnerIsOn = function () {
  return Citizen.invokeNative('0x823bf7b1df613a21', _r);
};

/**
   * BUSYSPINNER_OFF
   * Removes the loading prompt at the bottom right of the screen.
   *
  
   * @return {void}
   */
global.BusyspinnerOff = function () {
  return Citizen.invokeNative('0x58f441b90ea84d06');
};

/**
   * CLEAR_ALL_HELP_MESSAGES
   *
  
   * @return {void}
   */
global.ClearAllHelpMessages = function () {
  return Citizen.invokeNative('0x916ed8321f087059');
};

/**
   * CREATE_FAKE_MP_GAMER_TAG
   *
   * @param {number} ped
   * @param {string | number} username
   * @param {boolean} pointedClanTag
   * @param {boolean} isRockstarClan
   * @param {string | number} clanTag
   * @param {number} clanFlag
   * @return {number}
   */
global.CreateFakeMpGamerTag = function (ped, username, pointedClanTag, isRockstarClan, clanTag, clanFlag) {
  return Citizen.invokeNative('0x53cb4b502e1c57ea', ped, _ts(username), pointedClanTag, isRockstarClan, _ts(clanTag), clanFlag, _r, _ri);
};

/**
   * DISABLE_FRONTEND_THIS_FRAME
   *
  
   * @return {void}
   */
global.DisableFrontendThisFrame = function () {
  return Citizen.invokeNative('0x56ce42a528156a67');
};

/**
   * DISPLAY_HUD
   * If Hud should be displayed
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.DisplayHud = function (toggle) {
  return Citizen.invokeNative('0xd63fe3af9fb3d53f', toggle);
};

/**
   * DOES_TEXT_LABEL_EXIST
   * Checks if the passed gxt name exists in the game files.
   *
   * @param {string | number} label
   * @return {boolean}
   */
global.DoesTextLabelExist = function (label) {
  return Citizen.invokeNative('0x73c258c68d6f55b6', _ts(label), _r);
};

/**
   * GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME
   * Note: you must use VAR_STRING. Byte code very similar to TEXT_COMMAND_DISPLAY_TEXT in V
   * Old name: _GET_TEXT_SUBSTRING
   *
   * @param {string | number} text
   * @param {number} position
   * @param {number} length
   * @return {string | number}
   */
global.GetCharacterFromAudioConversationFilename = function (text, position, length) {
  return Citizen.invokeNative('0x9d7e12ec6a1ee4e5', _ts(text), position, length, _r, _s);
};

/**
   * GET_FILENAME_FOR_AUDIO_CONVERSATION
   * Gets a string literal from a label name.
   * 
   * Old name: _GET_LABEL_TEXT
   *
   * @param {string | number} labelName
   * @return {string | number}
   */
global.GetFilenameForAudioConversation = function (labelName) {
  return Citizen.invokeNative('0xcfedccad3c5ba90d', _ts(labelName), _r, _s);
};

/**
   * GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION
   *
   * @param {number} worldX
   * @param {number} worldY
   * @param {number} worldZ
   * @return {[number, number, number]}
   */
global.GetHudScreenPositionFromWorldPosition = function (worldX, worldY, worldZ) {
  return Citizen.invokeNative('0xb39c81628ef10b42', _fv(worldX), _fv(worldY), _fv(worldZ), _f, _f, _r, _ri);
};

/**
   * GET_LENGTH_OF_LITERAL_STRING
   * Returns the length of the string passed (much like strlen).
   *
   * @param {string | number} string
   * @return {number}
   */
global.GetLengthOfLiteralString = function (string) {
  return Citizen.invokeNative('0x481fbf588b0b76db', _ts(string), _r, _ri);
};

/**
   * GET_LENGTH_OF_LITERAL_STRING_IN_BYTES
   *
   * @param {string | number} string
   * @return {number}
   */
global.GetLengthOfLiteralStringInBytes = function (string) {
  return Citizen.invokeNative('0xdc5ad6b7ab8184f5', _ts(string), _r, _ri);
};

/**
   * GET_NAMED_RENDERTARGET_RENDER_ID
   *
   * @param {string | number} name
   * @return {number}
   */
global.GetNamedRendertargetRenderId = function (name) {
  return Citizen.invokeNative('0xb6762a85ee29aa60', _ts(name), _r, _ri);
};

/**
   * GET_STRING_FROM_HASH_KEY
   * Returns the label text given the hash.
   * 
   * Old name: _GET_LABEL_TEXT_BY_HASH
   *
   * @param {number} labelHash
   * @return {string | number}
   */
global.GetStringFromHashKey = function (labelHash) {
  return Citizen.invokeNative('0xbd5dd5eae2b6ce14', _ch(labelHash), _r, _s);
};

/**
   * HIDE_HUD_AND_RADAR_THIS_FRAME
   *
  
   * @return {void}
   */
global.HideHudAndRadarThisFrame = function () {
  return Citizen.invokeNative('0x36cdd81627a6fcd2');
};

/**
   * HIDE_LOADING_ON_FADE_THIS_FRAME
   *
  
   * @return {void}
   */
global.HideLoadingOnFadeThisFrame = function () {
  return Citizen.invokeNative('0xea600aabaf4b9084');
};

/**
   * IS_HUD_HIDDEN
   *
  
   * @return {boolean}
   */
global.IsHudHidden = function () {
  return Citizen.invokeNative('0x71b72b478f8189dc', _r);
};

/**
   * IS_MP_GAMER_TAG_ACTIVE
   *
   * @param {number} gamerTagId
   * @return {boolean}
   */
global.IsMpGamerTagActive = function (gamerTagId) {
  return Citizen.invokeNative('0x6e1c31e14c7a5f97', gamerTagId, _r);
};

/**
   * IS_NAMED_RENDERTARGET_LINKED
   *
   * @param {number} modelHash
   * @return {boolean}
   */
global.IsNamedRendertargetLinked = function (modelHash) {
  return Citizen.invokeNative('0x707032835ff09ae7', _ch(modelHash), _r);
};

/**
   * IS_NAMED_RENDERTARGET_REGISTERED
   *
   * @param {string | number} name
   * @return {boolean}
   */
global.IsNamedRendertargetRegistered = function (name) {
  return Citizen.invokeNative('0x3ee32f7964c40fe6', _ts(name), _r);
};

/**
   * IS_PAUSE_MENU_ACTIVE
   * Returns true when either Pause Menu, a Frontend Menu, Online Policies menu or Social Club menu is active.
   *
  
   * @return {boolean}
   */
global.IsPauseMenuActive = function () {
  return Citizen.invokeNative('0x535384d6067ba42e', _r);
};

/**
   * IS_RADAR_HIDDEN
   *
  
   * @return {boolean}
   */
global.IsRadarHidden = function () {
  return Citizen.invokeNative('0x1b82fd5ffa4d666e', _r);
};

/**
   * IS_RADAR_HIDDEN_BY_SCRIPT
   *
  
   * @return {boolean}
   */
global.IsRadarHiddenByScript = function () {
  return Citizen.invokeNative('0x66f35dd9d2b58579', _r);
};

/**
   * IS_RADAR_PREFERENCE_SWITCHED_ON
   *
  
   * @return {boolean}
   */
global.IsRadarPreferenceSwitchedOn = function () {
  return Citizen.invokeNative('0x81e47f0ee1f2b21e', _r);
};

/**
   * IS_SUBTITLE_PREFERENCE_SWITCHED_ON
   *
  
   * @return {boolean}
   */
global.IsSubtitlePreferenceSwitchedOn = function () {
  return Citizen.invokeNative('0x7c4ac9573587f2df', _r);
};

/**
   * LINK_NAMED_RENDERTARGET
   *
   * @param {number} modelHash
   * @return {void}
   */
global.LinkNamedRendertarget = function (modelHash) {
  return Citizen.invokeNative('0x2f506b8556242ddb', _ch(modelHash));
};

/**
   * REGISTER_NAMED_RENDERTARGET
   *
   * @param {string | number} name
   * @param {boolean} p1
   * @return {boolean}
   */
global.RegisterNamedRendertarget = function (name, p1) {
  return Citizen.invokeNative('0x98af2bb6f62bd588', _ts(name), p1, _r);
};

/**
   * RELEASE_NAMED_RENDERTARGET
   *
   * @param {string | number} name
   * @return {boolean}
   */
global.ReleaseNamedRendertarget = function (name) {
  return Citizen.invokeNative('0x0e692ee61761361f', _ts(name), _r);
};

/**
   * REMOVE_MP_GAMER_TAG
   * only works by invoking and passing as pointer value Citizen.InvokeNative(0x839BFD7D7E49FE09, Citizen.PointerValueIntInitialized(gamerTagId))
   *
   * @param {number} gamerTagId
   * @return {void}
   */
global.RemoveMpGamerTag = function (gamerTagId) {
  return Citizen.invokeNative('0x839bfd7d7e49fe09', gamerTagId);
};

/**
   * SET_FRONTEND_ACTIVE
   *
   * @param {boolean} active
   * @return {void}
   */
global.SetFrontendActive = function (active) {
  return Citizen.invokeNative('0xce47c21c0687ebc2', active);
};

/**
   * SET_MISSION_NAME
   *
   * @param {boolean} p0
   * @param {string | number} name
   * @return {void}
   */
global.SetMissionName = function (p0, name) {
  return Citizen.invokeNative('0x402669a4bdaa72da', p0, _ts(name));
};

/**
   * SET_MISSION_NAME_FOR_UGC_MISSION
   *
   * @param {boolean} p0
   * @param {string | number} name
   * @return {void}
   */
global.SetMissionNameForUgcMission = function (p0, name) {
  return Citizen.invokeNative('0xd98630ce73c61e98', p0, _ts(name));
};

/**
   * SET_MP_GAMER_TAG_BIG_TEXT
   *
   * @param {number} gamerTagId
   * @param {string | number} string
   * @return {void}
   */
global.SetMpGamerTagBigText = function (gamerTagId, string) {
  return Citizen.invokeNative('0xa0d7ce5f83259663', gamerTagId, _ts(string));
};

/**
   * SET_MP_GAMER_TAG_NAME
   *
   * @param {number} gamerTagId
   * @param {string | number} string
   * @return {void}
   */
global.SetMpGamerTagName = function (gamerTagId, string) {
  return Citizen.invokeNative('0xea6f4b8d4b4b5b3e', gamerTagId, _ts(string));
};

/**
   * SET_TEXT_RENDER_ID
   *
   * @param {number} renderId
   * @return {void}
   */
global.SetTextRenderId = function (renderId) {
  return Citizen.invokeNative('0xe550cde128d56757', renderId);
};

/**
   * TEXT_BLOCK_IS_LOADED
   *
   * @param {string | number} textBlock
   * @return {boolean}
   */
global.TextBlockIsLoaded = function (textBlock) {
  return Citizen.invokeNative('0xd0976cc34002db57', _ts(textBlock), _r);
};

/**
   * TEXT_BLOCK_REQUEST
   *
   * @param {string | number} textBlock
   * @return {void}
   */
global.TextBlockRequest = function (textBlock) {
  return Citizen.invokeNative('0xf66090013de648d5', _ts(textBlock));
};

/**
   * UI_GET_SCENE_UIOBJECT
   *
   * @param {any} p0
   * @return {any}
   */
global.UiGetSceneUiobject = function (p0) {
  return Citizen.invokeNative('0xbe1067cd1c9570f6', p0, _r);
};

/**
   * UI_MOVIEVIEW_SET_RENDER_TARGET
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.UiMovieviewSetRenderTarget = function (p0, p1) {
  return Citizen.invokeNative('0x51de09a2196bd951', p0, p1);
};

/**
   * UI_PROMPT_IS_CONTROL_ACTION_ACTIVE
   *
   * @param {number} controlAction
   * @return {boolean}
   */
global.UiPromptIsControlActionActive = function (controlAction) {
  return Citizen.invokeNative('0x1be19185b8afe299', _ch(controlAction), _r);
};

/**
   * UI_REQUEST_SCENE
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.UiRequestScene = function (p0, p1) {
  return Citizen.invokeNative('0xb6857100f8fd433c', p0, p1, _r);
};

/**
   * _GET_NEAR_HORSE
   * This native accepts 1 as parameter in the decompiles
   * returns the nearest horse handle if within 2 3 meters of the player, if not close enough returns false
   * 
   * NOTE: if type is 0 returns PlayerPedId always?
   *
   * @param {number} p0
   * @return {number}
   */
global.GetNearHorse = function (p0) {
  return Citizen.invokeNative('0x0501d52d24ea8934', p0, _r, _ri);
};

/**
   * _0x052D4AC0922AF91A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x052D4AC0922AF91A = function (p0, p1) {
  return Citizen.invokeNative('0x052d4ac0922af91a', p0, p1);
};

/**
   * _0x066725A9D52B3641
   *
  
   * @return {any}
   */
global.N_0x066725A9D52B3641 = function () {
  return Citizen.invokeNative('0x066725a9d52b3641', _r);
};

/**
   * _0x100157D6D7FE32CA
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x100157D6D7FE32CA = function (p0, p1) {
  return Citizen.invokeNative('0x100157d6d7fe32ca', p0, p1, _r);
};

/**
   * _0x160825DADF1B04B3
   *
  
   * @return {void}
   */
global.N_0x160825DADF1B04B3 = function () {
  return Citizen.invokeNative('0x160825dadf1b04b3');
};

/**
   * _0x28AE29D909C8FDCE
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x28AE29D909C8FDCE = function (p0) {
  return Citizen.invokeNative('0x28ae29d909c8fdce', p0, _r);
};

/**
   * _0x2F7BB105144ACF30
   * nullsub, doesn't do anything
   *
  
   * @return {void}
   */
global.N_0x2F7BB105144ACF30 = function () {
  return Citizen.invokeNative('0x2f7bb105144acf30');
};

/**
   * _0x3FE4FB41EF7D2196
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x3FE4FB41EF7D2196 = function (p0) {
  return Citizen.invokeNative('0x3fe4fb41ef7d2196', p0);
};

/**
   * _0x53CE46C01A089DA1
   *
   * @param {number} prompt
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x53CE46C01A089DA1 = function (prompt, p1) {
  return Citizen.invokeNative('0x53ce46c01a089da1', prompt, p1);
};

/**
   * _0x5651516D947ABC53
   *
  
   * @return {void}
   */
global.N_0x5651516D947ABC53 = function () {
  return Citizen.invokeNative('0x5651516d947abc53');
};

/**
   * _0x7EC0D68233E391AC
   *
   * @param {number} p0
   * @return {number}
   */
global.N_0x7EC0D68233E391AC = function (p0) {
  return Citizen.invokeNative('0x7ec0d68233e391ac', p0, _r, _ri);
};

/**
   * _0x806862E5D266CF38
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0x806862E5D266CF38 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x806862e5d266cf38', p0, p1, p2, _r);
};

/**
   * _0x8A59D44189AF2BC5
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x8A59D44189AF2BC5 = function (p0, p1) {
  return Citizen.invokeNative('0x8a59d44189af2bc5', p0, p1);
};

/**
   * _0x8B55B324A9123F6B
   *
   * @param {number} groupId
   * @param {number} volume
   * @param {string | number} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {any}
   */
global.N_0x8B55B324A9123F6B = function (groupId, volume, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x8b55b324a9123f6b', groupId, volume, _ts(p2), p3, p4, p5, _r);
};

/**
   * _0x958278B97C4AFFD8
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x958278B97C4AFFD8 = function (p0, p1) {
  return Citizen.invokeNative('0x958278b97c4affd8', p0, p1);
};

/**
   * _HUD_WEAPON_WHEEL_GET_SELECTED_ITEM_HASH
   * Returns the hash of the currently highlighted item in the weapon wheel.
   * Only works while the wheel is open will return false
   * 
   * Use in conjunction with IS_CONTROL_JUST_RELEASED(0, 'INPUT_OPEN_WHEEL_MENU') to detect item selection/usage.
   *
  
   * @return {any}
   */
global.HudWeaponWheelGetSelectedItemHash = function () {
  return Citizen.invokeNative('0x9c409bbc492cb5b1', _r);
};

/**
   * _0x9D37EB5003E0F2CF
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x9D37EB5003E0F2CF = function (p0, p1) {
  return Citizen.invokeNative('0x9d37eb5003e0f2cf', p0, p1);
};

/**
   * _0xB0E8599243B3F568
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xB0E8599243B3F568 = function (p0) {
  return Citizen.invokeNative('0xb0e8599243b3f568', p0, _r);
};

/**
   * _0xBFFF81E12A745A5F
   * nullsub, doesn't do anything
   *
  
   * @return {void}
   */
global.N_0xBFFF81E12A745A5F = function () {
  return Citizen.invokeNative('0xbfff81e12a745a5f');
};

/**
   * _SET_CURRENT_UGC_MISSION_DESCRIPTION
   * string1 is the only string used in the scripts, the others are null (0)
   *
   * @param {boolean} active
   * @param {string | number} string1
   * @param {string | number} string2
   * @param {string | number} string3
   * @param {string | number} string4
   * @return {void}
   */
global.SetCurrentUgcMissionDescription = function (active, string1, string2, string3, string4) {
  return Citizen.invokeNative('0xce0d2f5586627cce', active, _ts(string1), _ts(string2), _ts(string3), _ts(string4));
};

/**
   * _0xD6BD313CFA41E57A
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xD6BD313CFA41E57A = function (p0) {
  return Citizen.invokeNative('0xd6bd313cfa41e57a', p0, _r);
};

/**
   * _0xF1E6979C0B779985
   *
   * @param {number} uiscene
   * @return {void}
   */
global.N_0xF1E6979C0B779985 = function (uiscene) {
  return Citizen.invokeNative('0xf1e6979c0b779985', uiscene);
};

/**
   * _BUSYSPINNER_SET_TEXT
   *
   * @param {string | number} text
   * @return {void}
   */
global.BusyspinnerSetText = function (text) {
  return Citizen.invokeNative('0x7f78cd75cc4539e4', _ts(text));
};

/**
   * _CREATE_MP_GAMER_TAG
   *
   * @param {number} player
   * @param {string | number} username
   * @param {boolean} pointedClanTag
   * @param {boolean} isRockstarClan
   * @param {string | number} clanTag
   * @param {number} clanFlag
   * @return {number}
   */
global.CreateMpGamerTag = function (player, username, pointedClanTag, isRockstarClan, clanTag, clanFlag) {
  return Citizen.invokeNative('0xd877af112ad2b41b', player, _ts(username), pointedClanTag, isRockstarClan, _ts(clanTag), clanFlag, _r, _ri);
};

/**
   * _CREATE_MP_GAMER_TAG_ON_ENTITY
   *
   * @param {number} entity
   * @param {string | number} text
   * @return {number}
   */
global.CreateMpGamerTagOnEntity = function (entity, text) {
  return Citizen.invokeNative('0xe961bf23eab76b12', entity, _ts(text), _r, _ri);
};

/**
   * _DISABLE_HUD_CONTEXT
   * Old name: _DISPLAY_HUD_COMPONENT
   *
   * @param {number} component
   * @return {void}
   */
global.DisableHudContext = function (component) {
  return Citizen.invokeNative('0x8bc7c1f929d07bf3', _ch(component));
};

/**
   * _DISABLE_REDUCED_MENU_TIME_SCALE
   * Disables reduced time scale while menus such as weapon wheel and satchel are open.
   *
  
   * @return {void}
   */
global.DisableReducedMenuTimeScale = function () {
  return Citizen.invokeNative('0xc5c7a2f6567fccbc');
};

/**
   * _DISPLAY_TEXT
   * nullsub, this native does nothing since build 1436, use _BG_DISPLAY_TEXT (0x16794E044C9EFB58) instead.
   *
   * @param {string | number} text
   * @param {number} xPos
   * @param {number} yPos
   * @return {void}
   */
global.DisplayText = function (text, xPos, yPos) {
  return Citizen.invokeNative('0xd79334a4bb99bad1', _ts(text), _fv(xPos), _fv(yPos));
};

/**
   * _DOES_TEXT_BLOCK_EXIST
   *
   * @param {string | number} textDatabase
   * @return {boolean}
   */
global.DoesTextBlockExist = function (textDatabase) {
  return Citizen.invokeNative('0x2c729f2b94cea911', _ts(textDatabase), _r);
};

/**
   * _ENABLE_HUD_CONTEXT
   * https://github.com/femga/rdr3_discoveries/tree/master/graphics/HUD/hud_presets
   * Old name: _HIDE_HUD_COMPONENT
   *
   * @param {number} component
   * @return {void}
   */
global.EnableHudContext = function (component) {
  return Citizen.invokeNative('0x4cc5f2fc1332577f', _ch(component));
};

/**
   * _ENABLE_HUD_CONTEXT_THIS_FRAME
   *
   * @param {number} component
   * @return {void}
   */
global.EnableHudContextThisFrame = function (component) {
  return Citizen.invokeNative('0xc9caeaeec1256e54', _ch(component));
};

/**
   * _ENABLE_REDUCED_MENU_TIME_SCALE
   * Enables reduced time scale while menus such as weapon wheel and satchel are open.
   *
  
   * @return {void}
   */
global.EnableReducedMenuTimeScale = function () {
  return Citizen.invokeNative('0x26f6bbea2ce3e3dc');
};

/**
   * _GET_COLOR_FROM_NAME
   * colorNameHash: https://alloc8or.re/rdr3/doc/enums/eColor.txt
   *
   * @param {number} colorNameHash
   * @return {[number, number, number, number]}
   */
global.GetColorFromName = function (colorNameHash) {
  return Citizen.invokeNative('0xb981dd2dfaf9b1c9', _ch(colorNameHash), _i, _i, _i, _i);
};

/**
   * _GET_LABEL_TEXT_2
   *
   * @param {string | number} label
   * @return {string | number}
   */
global.GetLabelText_2 = function (label) {
  return Citizen.invokeNative('0x3429670f9b9ef2d3', _ts(label), _r, _s);
};

/**
   * _GET_TEXT_SUBSTRING_2
   * Similar to 0x9D7E12EC6A1EE4E5(GET_TEXT_SUBSTRING) but starts at the beginning of the string
   *
   * @param {string | number} text
   * @param {number} length
   * @return {string | number}
   */
global.GetTextSubstring_2 = function (text, length) {
  return Citizen.invokeNative('0xd8402b858f4ddd88', _ts(text), length, _r, _s);
};

/**
   * _HIDE_HUD_THIS_FRAME
   *
  
   * @return {void}
   */
global.HideHudThisFrame = function () {
  return Citizen.invokeNative('0xbf4f34a85ca2970d');
};

/**
   * _IS_MP_GAMER_TAG_ACTIVE_ON_ENTITY
   *
   * @param {number} gamerTagId
   * @param {number} entity
   * @return {boolean}
   */
global.IsMpGamerTagActiveOnEntity = function (gamerTagId, entity) {
  return Citizen.invokeNative('0x502e1591a504f843', gamerTagId, entity, _r);
};

/**
   * _JOURNAL_CAN_WRITE_ENTRY
   *
   * @param {any} p0
   * @return {any}
   */
global.JournalCanWriteEntry = function (p0) {
  return Citizen.invokeNative('0xcf782691d91f270e', p0, _r);
};

/**
   * _JOURNAL_CLEAR_ALL_PROGRESS
   *
  
   * @return {void}
   */
global.JournalClearAllProgress = function () {
  return Citizen.invokeNative('0xf402978de6f88d6e');
};

/**
   * _JOURNAL_GET_ENTRY_AT_INDEX
   *
   * @param {any} p0
   * @return {any}
   */
global.JournalGetEntryAtIndex = function (p0) {
  return Citizen.invokeNative('0x3d16abd7a1fd8c96', p0, _r);
};

/**
   * _JOURNAL_GET_ENTRY_COUNT
   *
  
   * @return {any}
   */
global.JournalGetEntryCount = function () {
  return Citizen.invokeNative('0xe65b5de53351be22', _r);
};

/**
   * _JOURNAL_GET_ENTRY_INFO
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.JournalGetEntryInfo = function (p0, p1) {
  return Citizen.invokeNative('0x5514c3e60673530f', p0, p1, _r);
};

/**
   * _JOURNAL_GET_GRIME_AT_INDEX
   *
   * @param {any} p0
   * @return {any}
   */
global.JournalGetGrimeAtIndex = function (p0) {
  return Citizen.invokeNative('0xcb5945e1b855852f', p0, _r);
};

/**
   * _JOURNAL_GET_TEXTURE_WITH_LAYOUT
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.JournalGetTextureWithLayout = function (p0, p1, p2) {
  return Citizen.invokeNative('0x62cc549b3b8ea2aa', p0, p1, p2, _r);
};

/**
   * _JOURNAL_MARK_READ
   *
   * @param {any} p0
   * @return {void}
   */
global.JournalMarkRead = function (p0) {
  return Citizen.invokeNative('0xe4509babe59bd24e', p0);
};

/**
   * _JOURNAL_WRITE_ENTRY
   *
   * @param {any} p0
   * @return {void}
   */
global.JournalWriteEntry = function (p0) {
  return Citizen.invokeNative('0x6dfdd665e416b093', p0);
};

/**
   * _MP_GAMER_TAG_DISABLE_REVIVE_TOP_ICON
   *
   * @param {number} gamerTagId
   * @return {void}
   */
global.MpGamerTagDisableReviveTopIcon = function (gamerTagId) {
  return Citizen.invokeNative('0x1f9a64c2804b3471', gamerTagId);
};

/**
   * _MP_GAMER_TAG_ENABLE_REVIVE_TOP_ICON
   *
   * @param {number} gamerTagId
   * @return {void}
   */
global.MpGamerTagEnableReviveTopIcon = function (gamerTagId) {
  return Citizen.invokeNative('0xfff6579cf0139fce', gamerTagId);
};

/**
   * _SET_MP_GAMER_TAG_COLOUR
   *
   * @param {number} gamerTagId
   * @param {number} colour
   * @return {void}
   */
global.SetMpGamerTagColour = function (gamerTagId, colour) {
  return Citizen.invokeNative('0x84bd27ddf9575816', gamerTagId, _ch(colour));
};

/**
   * _SET_MP_GAMER_TAG_NAME_POSSE
   *
   * @param {number} gamerTagId
   * @param {string | number} text
   * @return {void}
   */
global.SetMpGamerTagNamePosse = function (gamerTagId, text) {
  return Citizen.invokeNative('0x1ea716e0628a6f44', gamerTagId, _ts(text));
};

/**
   * _SET_MP_GAMER_TAG_SECONDARY_ICON
   * Found icons: SPEAKER, THROPY
   *
   * @param {number} gamerTagId
   * @param {number} icon
   * @return {void}
   */
global.SetMpGamerTagSecondaryIcon = function (gamerTagId, icon) {
  return Citizen.invokeNative('0x95384c6ce1526eff', gamerTagId, _ch(icon));
};

/**
   * _SET_MP_GAMER_TAG_TOP_ICON
   * Found icons: https://pastebin.com/xx6rEgiG
   *
   * @param {number} gamerTagId
   * @param {number} icon
   * @return {void}
   */
global.SetMpGamerTagTopIcon = function (gamerTagId, icon) {
  return Citizen.invokeNative('0x5f57522bc1eb9d9d', gamerTagId, _ch(icon));
};

/**
   * _SET_MP_GAMER_TAG_TYPE
   * Found types: GENERIC_PLAYER, DEADDROP, HOTPROPERTY, MINIGAMES
   *
   * @param {number} gamerTagId
   * @param {number} type
   * @return {void}
   */
global.SetMpGamerTagType = function (gamerTagId, type) {
  return Citizen.invokeNative('0x25b9c78a25105c35', gamerTagId, _ch(type));
};

/**
   * _SET_MP_GAMER_TAG_UNK_ALLOW_LOCALIZED
   * nullsub, doesn't do anything
   *
   * @param {number} gamerTagId
   * @param {boolean} allow
   * @return {void}
   */
global.SetMpGamerTagUnkAllowLocalized = function (gamerTagId, allow) {
  return Citizen.invokeNative('0xef7ab1a0e8c86170', gamerTagId, allow);
};

/**
   * _SET_MP_GAMER_TAG_VISIBILITY
   * visibility:
   * enum eUIGamertagVisibility
   * {
   *   UIGAMERTAGVISIBILITY_NONE,
   *   UIGAMERTAGVISIBILITY_ICON,
   *   UIGAMERTAGVISIBILITY_SIMPLE,
   *   UIGAMERTAGVISIBILITY_COMPLEX
   * };
   *
   * @param {number} gamerTagId
   * @param {number} visibility
   * @return {void}
   */
global.SetMpGamerTagVisibility = function (gamerTagId, visibility) {
  return Citizen.invokeNative('0x93171dddab274eb8', gamerTagId, visibility);
};

/**
   * _SET_TEXT_COLOR
   * This native does nothing since build 1436, use _BG_SET_TEXT_COLOR (0x16FA5CE47F184F1E) instead.
   *
   * @param {number} r
   * @param {number} g
   * @param {number} b
   * @param {number} a
   * @return {void}
   */
global.SetTextColor = function (r, g, b, a) {
  return Citizen.invokeNative('0x50a41ad966910f03', r, g, b, a);
};

/**
   * _SHOW_HORSE_CORES
   *
   * @param {boolean} state
   * @return {void}
   */
global.ShowHorseCores = function (state) {
  return Citizen.invokeNative('0xd4ee21b7cc7fd350', state);
};

/**
   * _SHOW_PLAYER_CORES
   *
   * @param {boolean} state
   * @return {void}
   */
global.ShowPlayerCores = function (state) {
  return Citizen.invokeNative('0x50c803a4cd5932c5', state);
};

/**
   * _TEXT_BLOCK_DELETE
   *
   * @param {string | number} textBlock
   * @return {void}
   */
global.TextBlockDelete = function (textBlock) {
  return Citizen.invokeNative('0xaa03f130a637d923', _ts(textBlock));
};

/**
   * _TEXT_BLOCK_IS_STREAMED
   *
   * @param {string | number} textBlock
   * @return {boolean}
   */
global.TextBlockIsStreamed = function (textBlock) {
  return Citizen.invokeNative('0x3cf96e16265b7dc8', _ts(textBlock), _r);
};

/**
   * _UI_PROMPT_ADD_GROUP_LINK
   *
   * @param {any} p0
   * @param {number} prompt
   * @param {any} p2
   * @return {void}
   */
global.UiPromptAddGroupLink = function (p0, prompt, p2) {
  return Citizen.invokeNative('0x684c96cc7c66e8ef', p0, prompt, p2);
};

/**
   * _UI_PROMPT_ADD_GROUP_RETURN_LINK
   *
   * @param {any} p0
   * @param {number} prompt
   * @return {void}
   */
global.UiPromptAddGroupReturnLink = function (p0, prompt) {
  return Citizen.invokeNative('0x837972ed28159536', p0, prompt);
};

/**
   * _UI_PROMPT_CLEAR_HORIZONTAL_ORIENTATION
   * id is the return value from 0xD9459157EB22C895.
   *
   * @param {number} id
   * @return {void}
   */
global.UiPromptClearHorizontalOrientation = function (id) {
  return Citizen.invokeNative('0x6095358c4142932a', id);
};

/**
   * _UI_PROMPT_CLEAR_PROMPT_PRIORITY_PREFERENCE
   *
  
   * @return {void}
   */
global.UiPromptClearPromptPriorityPreference = function () {
  return Citizen.invokeNative('0x51259ae5c72d4a1b');
};

/**
   * _UI_PROMPT_CONTEXT_SET_POINT
   *
   * @param {number} prompt
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.UiPromptContextSetPoint = function (prompt, x, y, z) {
  return Citizen.invokeNative('0xae84c5ee2c384fb3', prompt, _fv(x), _fv(y), _fv(z));
};

/**
   * _UI_PROMPT_CONTEXT_SET_RADIUS
   *
   * @param {number} prompt
   * @param {number} radius
   * @return {void}
   */
global.UiPromptContextSetRadius = function (prompt, radius) {
  return Citizen.invokeNative('0x0c718001b77ca468', prompt, _fv(radius));
};

/**
   * _UI_PROMPT_CONTEXT_SET_VOLUME
   * Attaches a Volume
   *
   * @param {number} prompt
   * @param {number} volume
   * @return {void}
   */
global.UiPromptContextSetVolume = function (prompt, volume) {
  return Citizen.invokeNative('0x4d107406667423be', prompt, volume);
};

/**
   * _UI_PROMPT_CREATE
   *
   * @param {number} inputHash
   * @param {string | number} labelName
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {number} p5
   * @return {number}
   */
global.UiPromptCreate = function (inputHash, labelName, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x29fa7910726c3889', _ch(inputHash), _ts(labelName), p2, p3, p4, p5, _r, _ri);
};

/**
   * _UI_PROMPT_DELETE
   *
   * @param {number} prompt
   * @return {void}
   */
global.UiPromptDelete = function (prompt) {
  return Citizen.invokeNative('0x00ede88d4d13cf59', prompt);
};

/**
   * _UI_PROMPT_DISABLE_PROMPTS_THIS_FRAME
   *
  
   * @return {void}
   */
global.UiPromptDisablePromptsThisFrame = function () {
  return Citizen.invokeNative('0xf1622ce88a1946fb');
};

/**
   * _UI_PROMPT_DISABLE_PROMPT_TYPE_THIS_FRAME
   *
   * @param {number} p0
   * @return {void}
   */
global.UiPromptDisablePromptTypeThisFrame = function (p0) {
  return Citizen.invokeNative('0xfc094ef26dd153fa', p0);
};

/**
   * _UI_PROMPT_DOES_AMBIENT_GROUP_EXIST
   *
   * @param {number} hash
   * @return {boolean}
   */
global.UiPromptDoesAmbientGroupExist = function (hash) {
  return Citizen.invokeNative('0xeb550b927b34a1bb', _ch(hash), _r);
};

/**
   * _UI_PROMPT_ENABLE_PROMPT_TYPE_THIS_FRAME
   * https://github.com/femga/rdr3_discoveries/tree/master/graphics/HUD/prompts/prompt_types
   *
   * @param {number} p0
   * @return {void}
   */
global.UiPromptEnablePromptTypeThisFrame = function (p0) {
  return Citizen.invokeNative('0x06565032897ba861', p0);
};

/**
   * _UI_PROMPT_FILTER_CLEAR
   *
  
   * @return {void}
   */
global.UiPromptFilterClear = function () {
  return Citizen.invokeNative('0x6a2f820452017ea2');
};

/**
   * _UI_PROMPT_GET_GROUP_ACTIVE_PAGE
   *
   * @param {number} hash
   * @return {number}
   */
global.UiPromptGetGroupActivePage = function (hash) {
  return Citizen.invokeNative('0xc1fcc36c3f7286c8', _ch(hash), _r, _ri);
};

/**
   * _UI_PROMPT_GET_GROUP_ID_FOR_SCENARIO_POINT
   *
   * @param {any} p0
   * @param {number} p1
   * @return {number}
   */
global.UiPromptGetGroupIdForScenarioPoint = function (p0, p1) {
  return Citizen.invokeNative('0xcb73d7521e7103f0', p0, p1, _r, _ri);
};

/**
   * _UI_PROMPT_GET_GROUP_ID_FOR_TARGET_ENTITY
   *
   * @param {number} entity
   * @return {number}
   */
global.UiPromptGetGroupIdForTargetEntity = function (entity) {
  return Citizen.invokeNative('0xb796970bd125fce8', entity, _r, _ri);
};

/**
   * _UI_PROMPT_GET_MASH_MODE_PROGRESS
   *
   * @param {number} prompt
   * @return {number}
   */
global.UiPromptGetMashModeProgress = function (prompt) {
  return Citizen.invokeNative('0x8a9585293863b8a5', prompt, _r, _rf);
};

/**
   * _UI_PROMPT_GET_PROGRESS
   *
   * @param {number} prompt
   * @return {number}
   */
global.UiPromptGetProgress = function (prompt) {
  return Citizen.invokeNative('0x81801291806dbc50', prompt, _r, _rf);
};

/**
   * _UI_PROMPT_GET_URGENT_PULSING_ENABLED
   *
   * @param {number} prompt
   * @return {boolean}
   */
global.UiPromptGetUrgentPulsingEnabled = function (prompt) {
  return Citizen.invokeNative('0x1fba0dabecddb52b', prompt, _r);
};

/**
   * _UI_PROMPT_HAS_HOLD_AUTO_FILL_MODE
   *
   * @param {number} prompt
   * @return {boolean}
   */
global.UiPromptHasHoldAutoFillMode = function (prompt) {
  return Citizen.invokeNative('0x8010bebd0d5ed5bc', prompt, _r);
};

/**
   * _UI_PROMPT_HAS_HOLD_MODE
   *
   * @param {number} prompt
   * @return {boolean}
   */
global.UiPromptHasHoldMode = function (prompt) {
  return Citizen.invokeNative('0xb60c9f9ed47abb76', prompt, _r);
};

/**
   * _UI_PROMPT_HAS_HOLD_MODE_COMPLETED
   *
   * @param {number} prompt
   * @return {boolean}
   */
global.UiPromptHasHoldModeCompleted = function (prompt) {
  return Citizen.invokeNative('0xe0f65f0640ef0617', prompt, _r);
};

/**
   * _UI_PROMPT_HAS_MANUAL_MASH_MODE
   *
   * @param {number} prompt
   * @return {boolean}
   */
global.UiPromptHasManualMashMode = function (prompt) {
  return Citizen.invokeNative('0xa6c6a4adb3bac409', prompt, _r);
};

/**
   * _UI_PROMPT_HAS_MASH_MODE
   *
   * @param {number} prompt
   * @return {boolean}
   */
global.UiPromptHasMashMode = function (prompt) {
  return Citizen.invokeNative('0xcd072523791ddc1b', prompt, _r);
};

/**
   * _UI_PROMPT_HAS_MASH_MODE_COMPLETED
   *
   * @param {number} prompt
   * @return {boolean}
   */
global.UiPromptHasMashModeCompleted = function (prompt) {
  return Citizen.invokeNative('0x845ce958416dc473', prompt, _r);
};

/**
   * _UI_PROMPT_HAS_MASH_MODE_FAILED
   *
   * @param {number} prompt
   * @return {boolean}
   */
global.UiPromptHasMashModeFailed = function (prompt) {
  return Citizen.invokeNative('0x25b18e530cf39d6f', prompt, _r);
};

/**
   * _UI_PROMPT_HAS_PRESSED_TIMED_MODE_COMPLETED
   *
   * @param {number} prompt
   * @return {boolean}
   */
global.UiPromptHasPressedTimedModeCompleted = function (prompt) {
  return Citizen.invokeNative('0x3ce854d250a88daf', prompt, _r);
};

/**
   * _UI_PROMPT_HAS_PRESSED_TIMED_MODE_FAILED
   *
   * @param {number} prompt
   * @return {boolean}
   */
global.UiPromptHasPressedTimedModeFailed = function (prompt) {
  return Citizen.invokeNative('0x1a17b9ecff617562', prompt, _r);
};

/**
   * _UI_PROMPT_HAS_STANDARD_MODE_COMPLETED
   * Params: p1 is 0
   *
   * @param {number} prompt
   * @param {number} p1
   * @return {boolean}
   */
global.UiPromptHasStandardModeCompleted = function (prompt, p1) {
  return Citizen.invokeNative('0xc92ac953f0a982ae', prompt, p1, _r);
};

/**
   * _UI_PROMPT_IS_ACTIVE
   *
   * @param {number} prompt
   * @return {boolean}
   */
global.UiPromptIsActive = function (prompt) {
  return Citizen.invokeNative('0x546e342e01de71cf', prompt, _r);
};

/**
   * _UI_PROMPT_IS_ENABLED
   *
   * @param {number} prompt
   * @return {boolean}
   */
global.UiPromptIsEnabled = function (prompt) {
  return Citizen.invokeNative('0x0d00eddfb58b7f28', prompt, _r);
};

/**
   * _UI_PROMPT_IS_HOLD_MODE_RUNNING
   *
   * @param {number} prompt
   * @return {boolean}
   */
global.UiPromptIsHoldModeRunning = function (prompt) {
  return Citizen.invokeNative('0xc7d70eaef92eff48', prompt, _r);
};

/**
   * _UI_PROMPT_IS_JUST_PRESSED
   *
   * @param {number} prompt
   * @return {boolean}
   */
global.UiPromptIsJustPressed = function (prompt) {
  return Citizen.invokeNative('0x2787cc611d3facc5', prompt, _r);
};

/**
   * _UI_PROMPT_IS_JUST_RELEASED
   *
   * @param {number} prompt
   * @return {boolean}
   */
global.UiPromptIsJustReleased = function (prompt) {
  return Citizen.invokeNative('0x635cc82fa297a827', prompt, _r);
};

/**
   * _UI_PROMPT_IS_PRESSED
   *
   * @param {number} prompt
   * @return {boolean}
   */
global.UiPromptIsPressed = function (prompt) {
  return Citizen.invokeNative('0x21e60e230086697f', prompt, _r);
};

/**
   * _UI_PROMPT_IS_RELEASED
   *
   * @param {number} prompt
   * @return {boolean}
   */
global.UiPromptIsReleased = function (prompt) {
  return Citizen.invokeNative('0xafc887ba7a7756d6', prompt, _r);
};

/**
   * _UI_PROMPT_IS_VALID
   *
   * @param {number} prompt
   * @return {boolean}
   */
global.UiPromptIsValid = function (prompt) {
  return Citizen.invokeNative('0x347469fbdd1589a9', prompt, _r);
};

/**
   * _UI_PROMPT_REGISTER_BEGIN
   *
  
   * @return {number}
   */
global.UiPromptRegisterBegin = function () {
  return Citizen.invokeNative('0x04f97de45a519419', _r, _ri);
};

/**
   * _UI_PROMPT_REGISTER_END
   *
   * @param {number} prompt
   * @return {void}
   */
global.UiPromptRegisterEnd = function (prompt) {
  return Citizen.invokeNative('0xf7aa2696a22ad8b9', prompt);
};

/**
   * _UI_PROMPT_REMOVE_GROUP
   *
   * @param {number} prompt
   * @param {any} p1
   * @return {void}
   */
global.UiPromptRemoveGroup = function (prompt, p1) {
  return Citizen.invokeNative('0x4e52c800a28f7be8', prompt, p1);
};

/**
   * _UI_PROMPT_RESTART_MODES
   *
   * @param {number} prompt
   * @return {void}
   */
global.UiPromptRestartModes = function (prompt) {
  return Citizen.invokeNative('0xdc6c55dfa2c24ee5', prompt);
};

/**
   * _UI_PROMPT_SET_ACTIVE_GROUP_THIS_FRAME
   * Note: you must use VAR_STRING for p1 if string is not part of text database
   * tabAmount: specifies number of tabs in prompt group
   * tabDefaultIndex: specifies starting index
   * p3 if is set > 3 you can no longer press Q to change tab if there are more than one tab set in tabAmount
   *
   * @param {number} hash
   * @param {string | number} name
   * @param {number} tabAmount
   * @param {number} tabDefaultIndex
   * @param {number} p4
   * @param {number} prompt
   * @return {any}
   */
global.UiPromptSetActiveGroupThisFrame = function (hash, name, tabAmount, tabDefaultIndex, p4, prompt) {
  return Citizen.invokeNative('0xc65a45d4453c2627', _ch(hash), _ts(name), tabAmount, tabDefaultIndex, p4, prompt, _r);
};

/**
   * _UI_PROMPT_SET_ALLOWED_ACTION
   *
   * @param {number} prompt
   * @param {number} action
   * @return {void}
   */
global.UiPromptSetAllowedAction = function (prompt, action) {
  return Citizen.invokeNative('0x565c1ce183cb0eaf', prompt, _ch(action));
};

/**
   * _UI_PROMPT_SET_AMBIENT_GROUP_THIS_FRAME
   *
   * @param {number} entity
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {string | number} name
   * @param {number} p6
   * @return {any}
   */
global.UiPromptSetAmbientGroupThisFrame = function (entity, p1, p2, p3, p4, name, p6) {
  return Citizen.invokeNative('0x315c81d760609108', entity, _fv(p1), p2, p3, _ch(p4), _ts(name), p6, _r);
};

/**
   * _UI_PROMPT_SET_ATTRIBUTE
   * attribute: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIPromptAttribute
   *
   * @param {number} prompt
   * @param {number} attribute
   * @param {boolean} enabled
   * @return {void}
   */
global.UiPromptSetAttribute = function (prompt, attribute, enabled) {
  return Citizen.invokeNative('0x560e76d5e2e1803f', prompt, attribute, enabled);
};

/**
   * _UI_PROMPT_SET_BEAT_MODE
   *
   * @param {number} prompt
   * @param {boolean} toggle
   * @return {void}
   */
global.UiPromptSetBeatMode = function (prompt, toggle) {
  return Citizen.invokeNative('0xf957a1654c6322fe', prompt, toggle);
};

/**
   * _UI_PROMPT_SET_BEAT_MODE_GRAYED_OUT
   *
   * @param {number} prompt
   * @param {any} p1
   * @return {void}
   */
global.UiPromptSetBeatModeGrayedOut = function (prompt, p1) {
  return Citizen.invokeNative('0xb487a4936fbf40ac', prompt, p1);
};

/**
   * _UI_PROMPT_SET_CONTROL_ACTION
   *
   * @param {number} prompt
   * @param {number} action
   * @return {any}
   */
global.UiPromptSetControlAction = function (prompt, action) {
  return Citizen.invokeNative('0xb5352b7494a08258', prompt, _ch(action), _r);
};

/**
   * _UI_PROMPT_SET_ENABLED
   *
   * @param {number} prompt
   * @param {boolean} toggle
   * @return {void}
   */
global.UiPromptSetEnabled = function (prompt, toggle) {
  return Citizen.invokeNative('0x8a0fb4d03a630d21', prompt, toggle);
};

/**
   * _UI_PROMPT_SET_GROUP
   * tabIndex: specifies tab of prompt
   *
   * @param {number} prompt
   * @param {number} groupId
   * @param {number} tabIndex
   * @return {void}
   */
global.UiPromptSetGroup = function (prompt, groupId, tabIndex) {
  return Citizen.invokeNative('0x2f11d3a254169ea4', prompt, groupId, tabIndex);
};

/**
   * _UI_PROMPT_SET_HOLD_AUTO_FILL_MODE
   *
   * @param {number} prompt
   * @param {number} autoFillTimeMs
   * @param {number} holdTimeMs
   * @return {void}
   */
global.UiPromptSetHoldAutoFillMode = function (prompt, autoFillTimeMs, holdTimeMs) {
  return Citizen.invokeNative('0x3ce932e737c145d6', prompt, autoFillTimeMs, holdTimeMs);
};

/**
   * _UI_PROMPT_SET_HOLD_AUTO_FILL_WITH_DECAY_MODE
   *
   * @param {number} prompt
   * @param {number} autoFillTimeMs
   * @param {number} holdTimeMs
   * @return {void}
   */
global.UiPromptSetHoldAutoFillWithDecayMode = function (prompt, autoFillTimeMs, holdTimeMs) {
  return Citizen.invokeNative('0xa3f2149aa24f3d8e', prompt, autoFillTimeMs, holdTimeMs);
};

/**
   * _UI_PROMPT_SET_HOLD_INDEFINITELY_MODE
   *
   * @param {number} prompt
   * @return {void}
   */
global.UiPromptSetHoldIndefinitelyMode = function (prompt) {
  return Citizen.invokeNative('0xea5ccf4eeb2f82d1', prompt);
};

/**
   * _UI_PROMPT_SET_HOLD_MODE
   * Params: p2 is 304000 in R* SP Script coachrobberies
   *
   * @param {number} prompt
   * @param {number} holdTimeMs
   * @return {void}
   */
global.UiPromptSetHoldMode = function (prompt, holdTimeMs) {
  return Citizen.invokeNative('0x94073d5ca3f16b7b', prompt, holdTimeMs);
};

/**
   * _UI_PROMPT_SET_MANUAL_RESOLVED
   *
   * @param {number} prompt
   * @param {any} p1
   * @return {void}
   */
global.UiPromptSetManualResolved = function (prompt, p1) {
  return Citizen.invokeNative('0xa520c7b05fa4eb2a', prompt, p1);
};

/**
   * _UI_PROMPT_SET_MASH_AUTO_FILL_MODE
   *
   * @param {number} prompt
   * @param {number} autoFillTimeMs
   * @param {number} mashes
   * @return {void}
   */
global.UiPromptSetMashAutoFillMode = function (prompt, autoFillTimeMs, mashes) {
  return Citizen.invokeNative('0x6c39587d7cc66801', prompt, autoFillTimeMs, mashes);
};

/**
   * _UI_PROMPT_SET_MASH_INDEFINITELY_MODE
   *
   * @param {number} prompt
   * @return {void}
   */
global.UiPromptSetMashIndefinitelyMode = function (prompt) {
  return Citizen.invokeNative('0x7b66e89312727274', prompt);
};

/**
   * _UI_PROMPT_SET_MASH_MANUAL_CAN_FAIL_MODE
   *
   * @param {number} prompt
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {any} p4
   * @return {void}
   */
global.UiPromptSetMashManualCanFailMode = function (prompt, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x179dcf71f705da20', prompt, _fv(p1), _fv(p2), _fv(p3), p4);
};

/**
   * _UI_PROMPT_SET_MASH_MANUAL_MODE
   *
   * @param {number} prompt
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {any} p4
   * @return {void}
   */
global.UiPromptSetMashManualMode = function (prompt, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x32df729d8bd3c1c6', prompt, _fv(p1), _fv(p2), _fv(p3), p4);
};

/**
   * _UI_PROMPT_SET_MASH_MANUAL_MODE_DECAY_SPEED
   * standard (prompt not held) rate: 0.035f
   * fast (prompt held) rate: 0.015f
   * punitive (been hit) rate: 0.14f
   *
   * @param {number} prompt
   * @param {number} speed
   * @return {void}
   */
global.UiPromptSetMashManualModeDecaySpeed = function (prompt, speed) {
  return Citizen.invokeNative('0x7d393c247fb9b431', prompt, _fv(speed));
};

/**
   * _UI_PROMPT_SET_MASH_MANUAL_MODE_INCREASE_PER_PRESS
   * standard (prompt not held) rate: (1f / 128f)
   * fast (prompt held) rate: (1f / 64f)
   * punitive (been hit) rate: (1f / 128f)
   *
   * @param {number} prompt
   * @param {number} rate
   * @return {void}
   */
global.UiPromptSetMashManualModeIncreasePerPress = function (prompt, rate) {
  return Citizen.invokeNative('0xa0d1d79c6036a855', prompt, _fv(rate));
};

/**
   * _UI_PROMPT_SET_MASH_MANUAL_MODE_PRESSED_GROWTH_SPEED
   *
   * @param {number} prompt
   * @param {number} speed
   * @return {void}
   */
global.UiPromptSetMashManualModePressedGrowthSpeed = function (prompt, speed) {
  return Citizen.invokeNative('0x56dbb26f98582c29', prompt, _fv(speed));
};

/**
   * _UI_PROMPT_SET_MASH_MODE
   *
   * @param {number} prompt
   * @param {number} mashes
   * @return {void}
   */
global.UiPromptSetMashMode = function (prompt, mashes) {
  return Citizen.invokeNative('0xdf6423bf071c7f71', prompt, mashes);
};

/**
   * _UI_PROMPT_SET_MASH_WITH_RESISTANCE_CAN_FAIL_MODE
   * For startProgress, 0.0f - 1.0f is a percentage value, so 0.5f = 50% progress. Range: 0.0f - 1.0f
   * For decreaseSpeed, 0.0f will result in the prompt not showing the mash progress at all. 0.01f - ?.0f. At speeds around 7.0f to 8.0f the prompt basically fails immediately if you don't start mashing right away.
   *
   * @param {number} prompt
   * @param {number} mashes
   * @param {number} decreaseSpeed
   * @param {number} startProgress
   * @return {void}
   */
global.UiPromptSetMashWithResistanceCanFailMode = function (prompt, mashes, decreaseSpeed, startProgress) {
  return Citizen.invokeNative('0xdc0cb602deadba53', prompt, mashes, _fv(decreaseSpeed), _fv(startProgress));
};

/**
   * _UI_PROMPT_SET_MASH_WITH_RESISTANCE_MODE
   *
   * @param {number} prompt
   * @param {number} mashes
   * @param {number} p2
   * @param {number} p3
   * @return {void}
   */
global.UiPromptSetMashWithResistanceMode = function (prompt, mashes, p2, p3) {
  return Citizen.invokeNative('0xcd1bdff15efa79f5', prompt, mashes, _fv(p2), _fv(p3));
};

/**
   * _UI_PROMPT_SET_ORDERING_AS_INPUT_TYPE
   *
   * @param {number} prompt
   * @param {any} p1
   * @return {void}
   */
global.UiPromptSetOrderingAsInputType = function (prompt, p1) {
  return Citizen.invokeNative('0x2f385ecc5200938d', prompt, p1);
};

/**
   * _UI_PROMPT_SET_PRESSED_TIMED_MODE
   *
   * @param {number} prompt
   * @param {number} depletionTimeMs
   * @return {void}
   */
global.UiPromptSetPressedTimedMode = function (prompt, depletionTimeMs) {
  return Citizen.invokeNative('0x1473d3af51d54276', prompt, depletionTimeMs);
};

/**
   * _UI_PROMPT_SET_PRIORITY
   * priority: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePromptPriority
   *
   * @param {number} prompt
   * @param {number} priority
   * @return {void}
   */
global.UiPromptSetPriority = function (prompt, priority) {
  return Citizen.invokeNative('0xca24f528d0d16289', prompt, priority);
};

/**
   * _UI_PROMPT_SET_PROMPT_PRIORITY_PREFERENCE
   *
   * @param {number} ped
   * @return {void}
   */
global.UiPromptSetPromptPriorityPreference = function (ped) {
  return Citizen.invokeNative('0x530a428705be5def', ped);
};

/**
   * _UI_PROMPT_SET_REGISTER_HORIZONTAL_ORIENTATION
   * This returns an id that can be used with 0x6095358C4142932A.
   *
  
   * @return {number}
   */
global.UiPromptSetRegisterHorizontalOrientation = function () {
  return Citizen.invokeNative('0xd9459157eb22c895', _r, _ri);
};

/**
   * _UI_PROMPT_SET_ROTATE_MODE
   * Used for controllers
   *
   * @param {number} prompt
   * @param {number} p1
   * @param {boolean} counterclockwise
   * @return {void}
   */
global.UiPromptSetRotateMode = function (prompt, p1, counterclockwise) {
  return Citizen.invokeNative('0x7abe7095fb3d2581', prompt, _fv(p1), counterclockwise);
};

/**
   * _UI_PROMPT_SET_SPINNER_POSITION
   *
   * @param {number} prompt
   * @param {any} p1
   * @return {void}
   */
global.UiPromptSetSpinnerPosition = function (prompt, p1) {
  return Citizen.invokeNative('0x832cb510de546282', prompt, p1);
};

/**
   * _UI_PROMPT_SET_SPINNER_SPEED
   *
   * @param {number} prompt
   * @param {any} p1
   * @return {void}
   */
global.UiPromptSetSpinnerSpeed = function (prompt, p1) {
  return Citizen.invokeNative('0xac6586a7fdcd4b68', prompt, p1);
};

/**
   * _UI_PROMPT_SET_STANDARDIZED_HOLD_MODE
   * Hashes: SHORT_TIMED_EVENT_MP, SHORT_TIMED_EVENT, MEDIUM_TIMED_EVENT, LONG_TIMED_EVENT, RUSTLING_CALM_TIMING, PLAYER_FOCUS_TIMING, PLAYER_REACTION_TIMING
   *
   * @param {number} prompt
   * @param {number} timedEventHash
   * @return {void}
   */
global.UiPromptSetStandardizedHoldMode = function (prompt, timedEventHash) {
  return Citizen.invokeNative('0x74c7d7b72ed0d3cf', prompt, _ch(timedEventHash));
};

/**
   * _UI_PROMPT_SET_STANDARD_MODE
   *
   * @param {number} prompt
   * @param {boolean} releaseMode
   * @return {void}
   */
global.UiPromptSetStandardMode = function (prompt, releaseMode) {
  return Citizen.invokeNative('0xcc6656799977741b', prompt, releaseMode);
};

/**
   * _UI_PROMPT_SET_TAG
   *
   * @param {number} prompt
   * @param {any} p1
   * @return {void}
   */
global.UiPromptSetTag = function (prompt, p1) {
  return Citizen.invokeNative('0xdec85c174751292b', prompt, p1);
};

/**
   * _UI_PROMPT_SET_TARGET_MODE
   *
   * @param {number} prompt
   * @param {number} p1
   * @param {number} p2
   * @param {any} p3
   * @return {void}
   */
global.UiPromptSetTargetMode = function (prompt, p1, p2, p3) {
  return Citizen.invokeNative('0x5f6503d9cd2754eb', prompt, _fv(p1), _fv(p2), p3);
};

/**
   * _UI_PROMPT_SET_TARGET_MODE_PROGRESS
   *
   * @param {number} prompt
   * @param {number} progress
   * @return {void}
   */
global.UiPromptSetTargetModeProgress = function (prompt, progress) {
  return Citizen.invokeNative('0x00123054bec8a30f', prompt, _fv(progress));
};

/**
   * _UI_PROMPT_SET_TARGET_MODE_TARGET
   *
   * @param {number} prompt
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.UiPromptSetTargetModeTarget = function (prompt, p1, p2) {
  return Citizen.invokeNative('0x5e019c45dd3b6a14', prompt, _fv(p1), _fv(p2));
};

/**
   * _UI_PROMPT_SET_TEXT
   *
   * @param {number} prompt
   * @param {string | number} text
   * @return {void}
   */
global.UiPromptSetText = function (prompt, text) {
  return Citizen.invokeNative('0x5dd02a8318420dd7', prompt, _ts(text));
};

/**
   * _UI_PROMPT_SET_TRANSPORT_MODE
   * TM_ANY = 0,
   * TM_ON_FOOT,
   * TM_IN_VEHICLE
   *
   * @param {number} prompt
   * @param {number} mode
   * @return {void}
   */
global.UiPromptSetTransportMode = function (prompt, mode) {
  return Citizen.invokeNative('0x876e4a35c73a6655', prompt, mode);
};

/**
   * _UI_PROMPT_SET_TYPE
   * Params: type = mostly 0, 6 (net_mission_intro_story_gvo), 7 (fm_mission_controller), 14 (net_ugc_end_flow_transition_online), 15 (net_main_[tlg_]offline)
   *
   * @param {number} prompt
   * @param {number} type
   * @return {void}
   */
global.UiPromptSetType = function (prompt, type) {
  return Citizen.invokeNative('0xf4a5c4509bf923b1', prompt, type);
};

/**
   * _UI_PROMPT_SET_URGENT_PULSING_ENABLED
   *
   * @param {number} prompt
   * @param {boolean} toggle
   * @return {void}
   */
global.UiPromptSetUrgentPulsingEnabled = function (prompt, toggle) {
  return Citizen.invokeNative('0xc5f428ee08fa7f2c', prompt, toggle);
};

/**
   * _UI_PROMPT_SET_VISIBLE
   *
   * @param {number} prompt
   * @param {boolean} toggle
   * @return {void}
   */
global.UiPromptSetVisible = function (prompt, toggle) {
  return Citizen.invokeNative('0x71215accfde075ee', prompt, toggle);
};

/**
   * _UI_PROMPT_WAS_BEAT_MODE_PRESSED_IN_TIME_WINDOW
   *
   * @param {number} prompt
   * @return {boolean}
   */
global.UiPromptWasBeatModePressedInTimeWindow = function (prompt) {
  return Citizen.invokeNative('0x1fe4788ab1430c55', prompt, _r);
};

/**
   * _0x0B9F7A01EC50448D
   *
   * @param {number} ped
   * @param {DataView} args
   * @return {void}
   */
global.N_0x0B9F7A01EC50448D = function (ped, args) {
  return Citizen.invokeNative('0x0b9f7a01ec50448d', ped, args);
};

/**
   * _0x6098139150DCC745
   *
   * @param {number} ped
   * @param {number} p1
   * @return {boolean}
   */
global.N_0x6098139150DCC745 = function (ped, p1) {
  return Citizen.invokeNative('0x6098139150dcc745', ped, p1, _r);
};

/**
   * _0x873C792E07A32C8B
   *
   * @param {number} ped1
   * @param {number} ped2
   * @return {void}
   */
global.N_0x873C792E07A32C8B = function (ped1, ped2) {
  return Citizen.invokeNative('0x873c792e07a32c8b', ped1, ped2);
};

/**
   * _INVERSE_KINEMATICS_REQUEST_LOOK_AT
   *
   * @param {number} ped
   * @param {DataView} args
   * @return {void}
   */
global.InverseKinematicsRequestLookAt = function (ped, args) {
  return Citizen.invokeNative('0x66f9eb44342bb4c5', ped, args);
};

/**
   * _INVERSE_KINEMATICS_SET_DISABLED_FOR_PED
   * Seems to disable IK on ped
   *
   * @param {number} ped
   * @param {number} p1
   * @param {boolean} p2
   * @return {void}
   */
global.InverseKinematicsSetDisabledForPed = function (ped, p1, p2) {
  return Citizen.invokeNative('0x0eabf182fbb63d72', ped, p1, p2);
};

/**
   * SET_MOUSE_CURSOR_STYLE
   * Changes the mouse cursor's sprite.
   * 
   * spriteId's: https://github.com/femga/rdr3_discoveries/tree/master/graphics/HUD/cursor_sprites#readme
   * 
   * Old name: _SET_MOUSE_CURSOR_SPRITE
   *
   * @param {number} spriteId
   * @return {void}
   */
global.SetMouseCursorStyle = function (spriteId) {
  return Citizen.invokeNative('0x7f5858aab5a58cce', spriteId);
};

/**
   * SET_MOUSE_CURSOR_THIS_FRAME
   * Shows the cursor on screen for one frame.
   * 
   * Old name: _SET_MOUSE_CURSOR_ACTIVE_THIS_FRAME
   *
  
   * @return {void}
   */
global.SetMouseCursorThisFrame = function () {
  return Citizen.invokeNative('0xf12e4ccaf249dc10');
};

/**
   * _POINTER_IS_BEING_MOVED
   * Returns true if player is moving mouse while cursor is active
   * _PI* - _PO*
   *
  
   * @return {boolean}
   */
global.PointerIsBeingMoved = function () {
  return Citizen.invokeNative('0x2b8b605f2a9e64bf', _r);
};

/**
   * _POINTER_IS_LEFT_BUTTON_HELD
   * Returns true if player is holding LMB while cursor is active
   * _PI* - _PO*
   *
  
   * @return {boolean}
   */
global.PointerIsLeftButtonHeld = function () {
  return Citizen.invokeNative('0x61cae9d1fd055e44', _r);
};

/**
   * _POINTER_IS_LEFT_BUTTON_JUST_RELEASED
   * Returns true if player releases LMB if cursor is active
   * _PI* - _PO*
   *
  
   * @return {boolean}
   */
global.PointerIsLeftButtonJustReleased = function () {
  return Citizen.invokeNative('0xf7f51a57349739f2', _r);
};

/**
   * _SET_ALLOW_FIRST_PERSON_MOUSE_CAMERA_MOVEMENT
   * Allows camera to be moved if middle mouse button is held while in first person
   * Must be called every frame
   * _SET*
   *
  
   * @return {void}
   */
global.SetAllowFirstPersonMouseCameraMovement = function () {
  return Citizen.invokeNative('0x0546b117bb17548b');
};

/**
   * ACTIVATE_INTERIOR_ENTITY_SET
   * https://github.com/femga/rdr3_discoveries/tree/master/interiors/interior_sets
   *
   * @param {number} interior
   * @param {string | number} entitySetName
   * @param {number} p2
   * @return {void}
   */
global.ActivateInteriorEntitySet = function (interior, entitySetName, p2) {
  return Citizen.invokeNative('0x174d0aab11ced739', interior, _ts(entitySetName), p2);
};

/**
   * CLEAR_ROOM_FOR_ENTITY
   *
   * @param {number} entity
   * @return {void}
   */
global.ClearRoomForEntity = function (entity) {
  return Citizen.invokeNative('0xa1762d5bbfca13a8', entity);
};

/**
   * CLEAR_ROOM_FOR_GAME_VIEWPORT
   *
  
   * @return {void}
   */
global.ClearRoomForGameViewport = function () {
  return Citizen.invokeNative('0x951a049765e0d450');
};

/**
   * DEACTIVATE_INTERIOR_ENTITY_SET
   *
   * @param {number} interior
   * @param {string | number} entitySetName
   * @param {boolean} p2
   * @return {void}
   */
global.DeactivateInteriorEntitySet = function (interior, entitySetName, p2) {
  return Citizen.invokeNative('0x33b81a2c07a51fff', interior, _ts(entitySetName), p2);
};

/**
   * DISABLE_INTERIOR
   *
   * @param {number} interior
   * @param {boolean} toggle
   * @return {void}
   */
global.DisableInterior = function (interior, toggle) {
  return Citizen.invokeNative('0x3c2b92a1a07d4fce', interior, toggle);
};

/**
   * FORCE_ROOM_FOR_ENTITY
   *
   * @param {number} entity
   * @param {number} interior
   * @param {number} roomHashKey
   * @return {void}
   */
global.ForceRoomForEntity = function (entity, interior, roomHashKey) {
  return Citizen.invokeNative('0xbc29a9894c976945', entity, interior, _ch(roomHashKey));
};

/**
   * FORCE_ROOM_FOR_GAME_VIEWPORT
   *
   * @param {number} interiorId
   * @param {number} roomHashKey
   * @return {void}
   */
global.ForceRoomForGameViewport = function (interiorId, roomHashKey) {
  return Citizen.invokeNative('0x115b4aa8fb28ab43', interiorId, _ch(roomHashKey));
};

/**
   * GET_INTERIOR_AT_COORDS
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {number}
   */
global.GetInteriorAtCoords = function (x, y, z) {
  return Citizen.invokeNative('0xcdd36c9e5c469070', _fv(x), _fv(y), _fv(z), _r, _ri);
};

/**
   * GET_INTERIOR_AT_COORDS_WITH_TYPE
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {string | number} interiorType
   * @return {number}
   */
global.GetInteriorAtCoordsWithType = function (x, y, z, interiorType) {
  return Citizen.invokeNative('0xaad6170aa33b13c0', _fv(x), _fv(y), _fv(z), _ts(interiorType), _r, _ri);
};

/**
   * GET_INTERIOR_AT_COORDS_WITH_TYPEHASH
   * Hashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} typeHash
   * @return {number}
   */
global.GetInteriorAtCoordsWithTypehash = function (x, y, z, typeHash) {
  return Citizen.invokeNative('0x3543aea1816d1d2b', _fv(x), _fv(y), _fv(z), _ch(typeHash), _r, _ri);
};

/**
   * GET_INTERIOR_FROM_COLLISION
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {number}
   */
global.GetInteriorFromCollision = function (x, y, z) {
  return Citizen.invokeNative('0x5054d1a5218fa696', _fv(x), _fv(y), _fv(z), _r, _ri);
};

/**
   * GET_INTERIOR_FROM_ENTITY
   * Returns the handle of the interior that the entity is in. Returns 0 if outside.
   *
   * @param {number} entity
   * @return {number}
   */
global.GetInteriorFromEntity = function (entity) {
  return Citizen.invokeNative('0xb417689857646f61', entity, _r, _ri);
};

/**
   * GET_INTERIOR_FROM_PRIMARY_VIEW
   *
  
   * @return {number}
   */
global.GetInteriorFromPrimaryView = function () {
  return Citizen.invokeNative('0xbc8a281ff125c655', _r, _ri);
};

/**
   * GET_INTERIOR_LOCATION_AND_NAMEHASH
   *
   * @param {number} interior
   * @return {[Vector3, number]}
   */
global.GetInteriorLocationAndNamehash = function (interior) {
  return Citizen.invokeNative('0x8451e87d3c2b0286', interior, _v, _i);
};

/**
   * GET_KEY_FOR_ENTITY_IN_ROOM
   * Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY
   *
   * @param {number} entity
   * @return {number}
   */
global.GetKeyForEntityInRoom = function (entity) {
  return Citizen.invokeNative('0x27d7b6f79e1f4603', entity, _r, _ri);
};

/**
   * GET_ROOM_KEY_FROM_ENTITY
   * Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.
   *
   * @param {number} entity
   * @return {number}
   */
global.GetRoomKeyFromEntity = function (entity) {
  return Citizen.invokeNative('0x076e46e0eb52afc6', entity, _r, _ri);
};

/**
   * IS_COLLISION_MARKED_OUTSIDE
   * Returns true if the collision at the specified coords is marked as being outside (false if there's an interior)
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {boolean}
   */
global.IsCollisionMarkedOutside = function (x, y, z) {
  return Citizen.invokeNative('0xf291396b517e25b2', _fv(x), _fv(y), _fv(z), _r);
};

/**
   * IS_INTERIOR_ENTITY_SET_ACTIVE
   *
   * @param {number} interior
   * @param {string | number} entitySetName
   * @return {boolean}
   */
global.IsInteriorEntitySetActive = function (interior, entitySetName) {
  return Citizen.invokeNative('0x32810ca2125f5842', interior, _ts(entitySetName), _r);
};

/**
   * IS_INTERIOR_READY
   *
   * @param {number} interior
   * @return {boolean}
   */
global.IsInteriorReady = function (interior) {
  return Citizen.invokeNative('0x941560d2d45dbfc8', interior, _r);
};

/**
   * IS_INTERIOR_SCENE
   *
  
   * @return {boolean}
   */
global.IsInteriorScene = function () {
  return Citizen.invokeNative('0x4200f14d6f840a9a', _r);
};

/**
   * IS_VALID_INTERIOR
   *
   * @param {number} interior
   * @return {boolean}
   */
global.IsValidInterior = function (interior) {
  return Citizen.invokeNative('0x017c1b3159f79f6c', interior, _r);
};

/**
   * PIN_INTERIOR_IN_MEMORY
   *
   * @param {number} interior
   * @return {void}
   */
global.PinInteriorInMemory = function (interior) {
  return Citizen.invokeNative('0xbd3d33eabf680168', interior);
};

/**
   * RETAIN_ENTITY_IN_INTERIOR
   *
   * @param {number} entity
   * @param {number} interior
   * @return {void}
   */
global.RetainEntityInInterior = function (entity, interior) {
  return Citizen.invokeNative('0x5bd616735f16bf5c', entity, interior);
};

/**
   * SET_INTERIOR_IN_USE
   * Actually returns void in IDA but the script header defines a BOOL return type
   *
   * @param {number} interior
   * @return {boolean}
   */
global.SetInteriorInUse = function (interior) {
  return Citizen.invokeNative('0xb5ef6fef2dc9ebed', interior, _r);
};

/**
   * UNPIN_INTERIOR
   * Does something similar to INTERIOR::DISABLE_INTERIOR.
   * 
   * You don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside. 
   *
   * @param {number} interior
   * @return {void}
   */
global.UnpinInterior = function (interior) {
  return Citizen.invokeNative('0x07fd1a0b814f6055', interior);
};

/**
   * _0x2533F2AB0EB9C6F9
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x2533F2AB0EB9C6F9 = function (p0, p1) {
  return Citizen.invokeNative('0x2533f2ab0eb9c6f9', p0, p1);
};

/**
   * _0xFE2B3D5500B1B2E4
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xFE2B3D5500B1B2E4 = function (p0, p1) {
  return Citizen.invokeNative('0xfe2b3d5500b1b2e4', p0, p1);
};

/**
   * _GET_INTERIOR_MINIMAP_HASH
   *
   * @param {number} interior
   * @return {number}
   */
global.GetInteriorMinimapHash = function (interior) {
  return Citizen.invokeNative('0x3039be60b3749716', interior, _r, _ri);
};

/**
   * _GET_INTERIOR_POSITION
   *
   * @param {number} interior
   * @return {Vector3}
   */
global.GetInteriorPosition = function (interior) {
  return Citizen.invokeNative('0x2c9746d0ca15be1c', interior, _r, _rv);
};

/**
   * _IS_INTERIOR_ENTITY_SET_VALID
   *
   * @param {number} interior
   * @param {string | number} entitySetName
   * @return {boolean}
   */
global.IsInteriorEntitySetValid = function (interior, entitySetName) {
  return Citizen.invokeNative('0xd56ff170710fc826', interior, _ts(entitySetName), _r);
};

/**
   * INVENTORY_COPY_MP_INVENTORY_TO_MISSION_INVENTORY
   *
   * @param {boolean} p0
   * @param {boolean} p1
   * @param {boolean} bCopySatchelItems
   * @param {boolean} bCopyEmotes
   * @param {boolean} bCopyHorse
   * @param {boolean} p5
   * @return {void}
   */
global.InventoryCopyMpInventoryToMissionInventory = function (p0, p1, bCopySatchelItems, bCopyEmotes, bCopyHorse, p5) {
  return Citizen.invokeNative('0x644ccb76a76cfbd6', p0, p1, bCopySatchelItems, bCopyEmotes, bCopyHorse, p5);
};

/**
   * INVENTORY_DISABLE_MISSION_INVENTORY_PICKUPS
   *
  
   * @return {void}
   */
global.InventoryDisableMissionInventoryPickups = function () {
  return Citizen.invokeNative('0xe1f389f03dc83673');
};

/**
   * INVENTORY_GET_CHILDREN_IN_SLOT_COUNT
   *
   * @param {number} inventoryId
   * @param {DataView} guid
   * @param {number} slotId
   * @return {number}
   */
global.InventoryGetChildrenInSlotCount = function (inventoryId, guid, slotId) {
  return Citizen.invokeNative('0x033ee4b89f3ac545', inventoryId, guid, _ch(slotId), _r, _ri);
};

/**
   * INVENTORY_GET_GUID_FROM_ITEMID
   *
   * @param {number} inventoryId
   * @param {DataView} guid
   * @param {number} p2
   * @param {number} slotId
   * @param {DataView} outGuid
   * @return {boolean}
   */
global.InventoryGetGuidFromItemid = function (inventoryId, guid, p2, slotId, outGuid) {
  return Citizen.invokeNative('0x886dfd3e185c8a89', inventoryId, guid, _ch(p2), _ch(slotId), outGuid, _r);
};

/**
   * INVENTORY_GET_INVENTORY_ITEM
   *
   * @param {number} inventoryId
   * @param {DataView} inData
   * @param {DataView} outData
   * @param {boolean} p3
   * @return {boolean}
   */
global.InventoryGetInventoryItem = function (inventoryId, inData, outData, p3) {
  return Citizen.invokeNative('0x9700e8efc4ab9089', inventoryId, inData, outData, p3, _r);
};

/**
   * _0x0349404A22736740
   * Params: p0 is only 0 or 1
   * Only used in R* SP Scripts
   *
   * @param {boolean} p0
   * @param {number} inventoryId
   * @param {DataView} guid
   * @return {void}
   */
global.N_0x0349404A22736740 = function (p0, inventoryId, guid) {
  return Citizen.invokeNative('0x0349404a22736740', p0, inventoryId, guid);
};

/**
   * _0x112BCA290D2EB53C
   * Only used in R* SP Scripts
   *
   * @param {number} inventoryId
   * @param {number} p1
   * @return {[boolean, number, number, number, number, number, number]}
   */
global.N_0x112BCA290D2EB53C = function (inventoryId, p1) {
  return Citizen.invokeNative('0x112bca290d2eb53c', inventoryId, _ch(p1), _i, _i, _i, _i, _i, _i, _r);
};

/**
   * _INVENTORY_USE_SATCHEL_ITEM
   * eInventoryItem: CLOTHING_FANCY_SUIT, CLOTHING_GUNSLINGER_OUTFIT, etc.
   * Only used in R* SP Scripts
   *
   * @param {number} inventoryId
   * @param {number} eInventoryItem
   * @param {boolean} p2
   * @return {void}
   */
global.InventoryUseSatchelItem = function (inventoryId, eInventoryItem, p2) {
  return Citizen.invokeNative('0x46743bbfedbc859e', inventoryId, _ch(eInventoryItem), p2);
};

/**
   * _0x46DB71883EE9D5AF
   * Returns databindingEntryId to be used with 0x951847CEF3D829FF (p0)
   *
   * @param {any} data
   * @param {string | number} stats
   * @param {DataView} guid
   * @param {number} ped
   * @return {number}
   */
global.N_0x46DB71883EE9D5AF = function (data, stats, guid, ped) {
  return Citizen.invokeNative('0x46db71883ee9d5af', data, _ts(stats), guid, ped, _r, _ri);
};

/**
   * _INVENTORY_REMOVE_INVENTORY_ITEMS
   * removeReason: REMOVE_REASON_DEFAULT (eRemoveItemReason)
   * Example: INVENTORY::_0x5D6182F3BCE1333B(1, joaat("REMOVE_REASON_DEFAULT")); -> clears weapon wheel
   * Only used in R* SP Scripts
   *
   * @param {number} inventoryId
   * @param {number} removeReason
   * @return {boolean}
   */
global.InventoryRemoveInventoryItems = function (inventoryId, removeReason) {
  return Citizen.invokeNative('0x5d6182f3bce1333b', inventoryId, _ch(removeReason), _r);
};

/**
   * _0x6862E4D93F64CF01
   * Only used in R* SP Scripts
   *
   * @param {number} inventoryId
   * @param {DataView} guid
   * @param {number} p2
   * @param {DataView} p3
   * @return {boolean}
   */
global.N_0x6862E4D93F64CF01 = function (inventoryId, guid, p2, p3) {
  return Citizen.invokeNative('0x6862e4d93f64cf01', inventoryId, guid, _ch(p2), p3, _r);
};

/**
   * _0x6968CE7AC32F6788
   * Only used in R* SP Scripts
   *
   * @param {number} inventoryId
   * @return {void}
   */
global.N_0x6968CE7AC32F6788 = function (inventoryId) {
  return Citizen.invokeNative('0x6968ce7ac32f6788', inventoryId);
};

/**
   * _INVENTORY_APPLY_WEAPON_STATS_TO_ENTRY
   * Apply the weapon stats to the CatalogItemInspection stats entry id. get entryId with _INVENTORY_GET_CATALOG_ITEM_INSPECTION_STATS_ENTRY
   *
   * @param {number} entryId
   * @param {number} weapon
   * @param {number} ped
   * @return {void}
   */
global.InventoryApplyWeaponStatsToEntry = function (entryId, weapon, ped) {
  return Citizen.invokeNative('0x75cfac49301e134e', entryId, _ch(weapon), ped);
};

/**
   * _0x75CFAC49301E134F
   * p1, p2: 0
   *
   * @param {number} databindingEntryId
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {void}
   */
global.N_0x75CFAC49301E134F = function (databindingEntryId, p1, p2) {
  return Citizen.invokeNative('0x75cfac49301e134f', _ch(databindingEntryId), p1, p2);
};

/**
   * _0x951847CEF3D829FF
   * p0: value returned by 0x46DB71883EE9D5AF
   *
   * @param {any} p0
   * @param {DataView} outGuid
   * @param {number} ped
   * @return {void}
   */
global.N_0x951847CEF3D829FF = function (p0, outGuid, ped) {
  return Citizen.invokeNative('0x951847cef3d829ff', p0, outGuid, ped);
};

/**
   * _0x9AC53CB6907B4428
   * p1 (out) and p2 (in) are both script arrays?
   * item: can be a component item, see SHOP_CATALOG_BUILD_LIST_OF_WEAPON_COMPONENTS
   *
   * @param {number} item
   * @param {DataView} p1
   * @param {DataView} p2
   * @return {boolean}
   */
global.N_0x9AC53CB6907B4428 = function (item, p1, p2) {
  return Citizen.invokeNative('0x9ac53cb6907b4428', _ch(item), p1, p2, _r);
};

/**
   * _0x9B4E793B1CB6550A
   * Used in function SET_SHOP_BEING_ROBBED and many other shop related scripts and functions.
   * INVENTORY_A*
   *
  
   * @return {void}
   */
global.N_0x9B4E793B1CB6550A = function () {
  return Citizen.invokeNative('0x9b4e793b1cb6550a');
};

/**
   * _INVENTORY_GET_CATALOG_ITEM_INSPECTION_EFFECTS_ENTRY
   * Returns effects entry id of CatalogItemInspection container.
   *
   * @param {number} entryId
   * @param {string | number} name
   * @param {boolean} unk1
   * @param {boolean} unk2
   * @return {number}
   */
global.InventoryGetCatalogItemInspectionEffectsEntry = function (entryId, name, unk1, unk2) {
  return Citizen.invokeNative('0x9d21b185abc2dbc4', entryId, _ts(name), unk1, unk2, _r, _ri);
};

/**
   * _INVENTORY_GET_CATALOG_ITEM_INSPECTION_STATS_ENTRY
   * Returns stats entry id of CatalogItemInspection container
   *
   * @param {number} entryId
   * @param {string | number} name
   * @param {number} unk1
   * @param {number} playerid
   * @return {number}
   */
global.InventoryGetCatalogItemInspectionStatsEntry = function (entryId, name, unk1, playerid) {
  return Citizen.invokeNative('0x9d21b185abc2dbc5', entryId, _ts(name), unk1, playerid, _r, _ri);
};

/**
   * _0x9E58207B194488AC
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x9E58207B194488AC = function (ped, p1) {
  return Citizen.invokeNative('0x9e58207b194488ac', ped, p1);
};

/**
   * _0xB1DD74A1F5536622
   *
   * @param {number} inventoryId
   * @param {DataView} itemGuid
   * @return {boolean}
   */
global.N_0xB1DD74A1F5536622 = function (inventoryId, itemGuid) {
  return Citizen.invokeNative('0xb1dd74a1f5536622', inventoryId, itemGuid, _r);
};

/**
   * _0xD08685BA892DBFAB
   * Params: p3 returns an int between 0 and 20 (?)
   * Only used in R* SP Scripts
   *
   * @param {number} inventoryId
   * @param {DataView} guid
   * @return {[boolean, number, number]}
   */
global.N_0xD08685BA892DBFAB = function (inventoryId, guid) {
  return Citizen.invokeNative('0xd08685ba892dbfab', inventoryId, guid, _i, _i, _r);
};

/**
   * _0xE1F45A67A9F0DCBC
   * Only used in R* SP Scripts
   *
   * @param {number} inventoryId
   * @return {void}
   */
global.N_0xE1F45A67A9F0DCBC = function (inventoryId) {
  return Citizen.invokeNative('0xe1f45a67a9f0dcbc', inventoryId);
};

/**
   * _INVENTORY_USE_BACKUP_INVENTORY
   * Only used in R* SP Scripts
   *
   * @param {boolean} p0
   * @return {void}
   */
global.InventoryUseBackupInventory = function (p0) {
  return Citizen.invokeNative('0xe36d4a38d28d9cfb', p0);
};

/**
   * _GET_DEFAULT_ITEM_SLOT_INFO
   * p1: WARDROBE, KIT_CAMP, CHARACTER, KIT_MOONSHINER_PROPERTY
   * Returns slot hash
   *
   * @param {number} item
   * @param {number} p1
   * @return {number}
   */
global.GetDefaultItemSlotInfo = function (item, p1) {
  return Citizen.invokeNative('0x6452b1d357d81742', _ch(item), _ch(p1), _r, _ri);
};

/**
   * _GET_ITEM_ROLE_MAX_LEVEL_COUNT
   *
   * @param {number} inventoryId
   * @param {number} eRoleMaxLevel
   * @return {number}
   */
global.GetItemRoleMaxLevelCount = function (inventoryId, eRoleMaxLevel) {
  return Citizen.invokeNative('0xaddd1e7c0ecf7d95', inventoryId, _ch(eRoleMaxLevel), _r, _ri);
};

/**
   * _GET_ITEM_SLOT_MAX_COUNT
   *
   * @param {number} provision
   * @param {number} slotId
   * @return {number}
   */
global.GetItemSlotMaxCount = function (provision, slotId) {
  return Citizen.invokeNative('0xe80e50bee276a54a', _ch(provision), _ch(slotId), _r, _ri);
};

/**
   * _INVENTORY_ADD_ITEM_WITH_GUID
   * inventoryItemSlotHash: https://pastebin.com/P6fyr3vr
   *
   * @param {number} inventoryId
   * @param {DataView} guid1
   * @param {DataView} guid2
   * @param {number} item
   * @param {number} inventoryItemSlot
   * @param {number} p5
   * @param {number} addReason
   * @return {boolean}
   */
global.InventoryAddItemWithGuid = function (inventoryId, guid1, guid2, item, inventoryItemSlot, p5, addReason) {
  return Citizen.invokeNative('0xcb5d11f9508a928d', inventoryId, guid1, guid2, _ch(item), _ch(inventoryItemSlot), p5, _ch(addReason), _r);
};

/**
   * _INVENTORY_ARE_LOCAL_CHANGES_ALLOWED
   * inventoryId: see _INVENTORY_GET_PED_INVENTORY_ID
   *
   * @param {number} inventoryId
   * @return {boolean}
   */
global.InventoryAreLocalChangesAllowed = function (inventoryId) {
  return Citizen.invokeNative('0x0fbbffc891a97c81', inventoryId, _r);
};

/**
   * _INVENTORY_COMPARE_GUIDS
   *
   * @param {DataView} guid1
   * @param {DataView} guid2
   * @return {boolean}
   */
global.InventoryCompareGuids = function (guid1, guid2) {
  return Citizen.invokeNative('0x4c543d5dfcd2dafd', guid1, guid2, _r);
};

/**
   * _INVENTORY_COPY_ITEM_TO_INVENTORY
   *
   * @param {number} inventoryId
   * @param {number} inventoryIdCloned
   * @param {DataView} p2
   * @param {any} p3
   * @return {void}
   */
global.InventoryCopyItemToInventory = function (inventoryId, inventoryIdCloned, p2, p3) {
  return Citizen.invokeNative('0xc04f47d488ef9eba', inventoryId, inventoryIdCloned, p2, p3);
};

/**
   * _INVENTORY_COPY_ITEM_TO_MISSION_INVENTORY
   *
   * @param {DataView} guid
   * @param {boolean} p1
   * @return {void}
   */
global.InventoryCopyItemToMissionInventory = function (guid, p1) {
  return Citizen.invokeNative('0x3112adb9d5f3426b', guid, p1);
};

/**
   * _INVENTORY_CREATE_ITEM_COLLECTION
   * filterName (collections): "ALL", "ALL SATCHEL", "ALL HORSES", "ALL COACHES", "ALL MOUNTS", "ALL CLOTHING", "ALL WEAPONS", "ALL SATCHEL EXCLUDING CLOTHING", "ALL EXCLUDING CLOTHING"
   * slotId: -1591664384
   * p3: outCollectionSize (?)
   * Returns collectionId
   *
   * @param {number} inventoryId
   * @param {string | number} filterName
   * @param {number} slotId
   * @return {[number, number]}
   */
global.InventoryCreateItemCollection = function (inventoryId, filterName, slotId) {
  return Citizen.invokeNative('0x80d78bdc9d88ef07', inventoryId, _ts(filterName), _ch(slotId), _i, _r, _ri);
};

/**
   * _INVENTORY_CREATE_ITEM_COLLECTION_2
   * Returns collectionId
   *
  
   * @return {[number, number]}
   */
global.InventoryCreateItemCollection_2 = function () {
  return Citizen.invokeNative('0x97a3646645727f42', _i, _r, _ri);
};

/**
   * _INVENTORY_CREATE_ITEM_COLLECTION_WITH_FILTER
   *
   * @param {number} inventoryId
   * @param {DataView} filter
   * @return {[number, number]}
   */
global.InventoryCreateItemCollectionWithFilter = function (inventoryId, filter) {
  return Citizen.invokeNative('0x640f890c3e5a3ffd', inventoryId, filter, _i, _r, _ri);
};

/**
   * _INVENTORY_CREATE_SORTED_COLLECTION
   * p1: 32
   * Returns collectionId
   *
   * @param {number} inventoryId
   * @param {number} p1
   * @return {[number, number]}
   */
global.InventoryCreateSortedCollection = function (inventoryId, p1) {
  return Citizen.invokeNative('0xbb7f968675b34b0c', inventoryId, p1, _i, _r, _ri);
};

/**
   * _INVENTORY_DISABLE_ITEM
   * Example: (1, WEAPON_REVOLVER_CATTLEMAN, 0) - disables cattleman revolver on weapon wheel
   *
   * @param {number} inventoryId
   * @param {number} item
   * @param {number} gtxReason
   * @return {void}
   */
global.InventoryDisableItem = function (inventoryId, item, gtxReason) {
  return Citizen.invokeNative('0x766315a564594401', inventoryId, _ch(item), _ch(gtxReason));
};

/**
   * _INVENTORY_DISABLE_WEAPONS
   * Params: p1 = 0
   *
   * @param {number} inventoryId
   * @param {any} p1
   * @return {void}
   */
global.InventoryDisableWeapons = function (inventoryId, p1) {
  return Citizen.invokeNative('0xe3a46370f70f3607', inventoryId, p1);
};

/**
   * _INVENTORY_DOES_ITEM_OWN_EQUIPMENT
   *
   * @param {number} inventoryId
   * @param {DataView} guid
   * @param {number} item
   * @return {boolean}
   */
global.InventoryDoesItemOwnEquipment = function (inventoryId, guid, item) {
  return Citizen.invokeNative('0x88b58b83a43a8cab', inventoryId, guid, _ch(item), _r);
};

/**
   * _INVENTORY_ENABLE_ITEM
   *
   * @param {number} inventoryId
   * @param {number} item
   * @return {void}
   */
global.InventoryEnableItem = function (inventoryId, item) {
  return Citizen.invokeNative('0x6a564540fac12211', inventoryId, _ch(item));
};

/**
   * _INVENTORY_ENABLE_WEAPONS
   *
   * @param {number} inventoryId
   * @return {void}
   */
global.InventoryEnableWeapons = function (inventoryId) {
  return Citizen.invokeNative('0xd5d72f1624f3ba7c', inventoryId);
};

/**
   * _INVENTORY_EQUIP_ITEM_WITH_GUID
   *
   * @param {number} inventoryId
   * @param {DataView} guid
   * @param {boolean} bEquipped
   * @return {boolean}
   */
global.InventoryEquipItemWithGuid = function (inventoryId, guid, bEquipped) {
  return Citizen.invokeNative('0x734311e2852760d0', inventoryId, guid, bEquipped, _r);
};

/**
   * _INVENTORY_FITS_SLOT_ID
   *
   * @param {number} item
   * @param {number} slotId
   * @return {boolean}
   */
global.InventoryFitsSlotId = function (item, slotId) {
  return Citizen.invokeNative('0x780c5b9ae2819807', _ch(item), _ch(slotId), _r);
};

/**
   * _INVENTORY_GET_CHILDREN_COUNT
   *
   * @param {number} inventoryId
   * @param {DataView} parentGuid
   * @return {number}
   */
global.InventoryGetChildrenCount = function (inventoryId, parentGuid) {
  return Citizen.invokeNative('0xe843d21a8e2498aa', inventoryId, parentGuid, _r, _ri);
};

/**
   * _INVENTORY_GET_FULL_INVENTORY_ITEM_DATA
   *
   * @param {number} inventoryId
   * @param {DataView} guid
   * @param {DataView} p2
   * @param {number} p3
   * @param {number} p4
   * @return {boolean}
   */
global.InventoryGetFullInventoryItemData = function (inventoryId, guid, p2, p3, p4) {
  return Citizen.invokeNative('0x025a1b1fb03fbf61', inventoryId, guid, p2, p3, p4, _r);
};

/**
   * _INVENTORY_GET_INVENTORY_ID_FROM_PED
   * Returns a unique inventory ID for this ped.
   * For the local player ped, it is an eInventories value.
   * For other peds, it is the inventory address casted to unsigned int.
   * 
   * enum eInventories
   * {
   *   INVENTORY_INVALID,
   *   INVENTORY_SP_PLAYER,
   *   INVENTORY_MP_PLAYER,
   *   INVENTORY_MP_MISSION,
   *   INVENTORY_SECOND_SCREEN,
   *   INVENTORY_SP_BACKUP,
   *   INVENTORY_SP_SNAPSHOT,
   *   INVENTORY_0xDE2AE452,
   *   INVENTORY_0x399D9B3A,
   *   INVENTORY_0x4BD43FA7,
   *   INVENTORY_0x9529D251,
   *   INVENTORY_0xA75776AC,
   *   INVENTORY_MAX_ID = 11,
   *   INVENTORY_IDS_COUNT
   * };
   *
   * @param {number} ped
   * @return {number}
   */
global.InventoryGetInventoryIdFromPed = function (ped) {
  return Citizen.invokeNative('0x13d234a2a3f66e63', ped, _r, _ri);
};

/**
   * _INVENTORY_GET_INVENTORY_ITEM_CHILD
   *
   * @param {number} inventoryId
   * @param {DataView} parentGuid
   * @param {any} childIndex
   * @param {DataView} outInventoryItem
   * @return {boolean}
   */
global.InventoryGetInventoryItemChild = function (inventoryId, parentGuid, childIndex, outInventoryItem) {
  return Citizen.invokeNative('0xcd9a485f2b383b44', inventoryId, parentGuid, childIndex, outInventoryItem, _r);
};

/**
   * _INVENTORY_GET_INVENTORY_ITEM_COUNT_WITH_GUID
   *
   * @param {number} inventoryId
   * @param {DataView} guid
   * @param {boolean} p2
   * @return {number}
   */
global.InventoryGetInventoryItemCountWithGuid = function (inventoryId, guid, p2) {
  return Citizen.invokeNative('0xc97e0d2302382211', inventoryId, guid, p2, _r, _ri);
};

/**
   * _INVENTORY_GET_INVENTORY_ITEM_COUNT_WITH_ITEMID
   *
   * @param {number} inventoryId
   * @param {number} eInventoryItem
   * @param {boolean} p2
   * @return {number}
   */
global.InventoryGetInventoryItemCountWithItemid = function (inventoryId, eInventoryItem, p2) {
  return Citizen.invokeNative('0xe787f05dfc977bde', inventoryId, _ch(eInventoryItem), p2, _r, _ri);
};

/**
   * _INVENTORY_GET_INVENTORY_ITEM_DESCRIPTION_HASH
   *
   * @param {number} item
   * @return {number}
   */
global.InventoryGetInventoryItemDescriptionHash = function (item) {
  return Citizen.invokeNative('0xa4550fe9c512e3dd', _ch(item), _r, _ri);
};

/**
   * _INVENTORY_GET_INVENTORY_ITEM_EQUIPPED_IN_SLOT
   *
   * @param {number} inventoryId
   * @param {DataView} guid
   * @param {number} slotId
   * @param {number} p3
   * @param {DataView} p4
   * @return {number}
   */
global.InventoryGetInventoryItemEquippedInSlot = function (inventoryId, guid, slotId, p3, p4) {
  return Citizen.invokeNative('0xbe012571b25f5aca', inventoryId, guid, _ch(slotId), p3, p4, _r, _ri);
};

/**
   * _INVENTORY_GET_INVENTORY_ITEM_EQUIPPED_IN_SLOT_BY_REF
   *
   * @param {number} inventoryId
   * @param {DataView} guid
   * @param {number} slotId
   * @param {DataView} outGuid
   * @return {boolean}
   */
global.InventoryGetInventoryItemEquippedInSlotByRef = function (inventoryId, guid, slotId, outGuid) {
  return Citizen.invokeNative('0x22e590f108289a9d', inventoryId, guid, _ch(slotId), outGuid, _r);
};

/**
   * _INVENTORY_GET_INVENTORY_ITEM_FIT_SLOT
   *
   * @param {number} p0
   * @param {DataView} p1
   * @param {number} p2
   * @return {boolean}
   */
global.InventoryGetInventoryItemFitSlot = function (p0, p1, p2) {
  return Citizen.invokeNative('0xb991fe166faf84fd', _ch(p0), p1, p2, _r);
};

/**
   * _INVENTORY_GET_INVENTORY_ITEM_HIDDEN
   *
   * @param {number} inventoryId
   * @param {DataView} guid
   * @return {boolean}
   */
global.InventoryGetInventoryItemHidden = function (inventoryId, guid) {
  return Citizen.invokeNative('0xf9933164965533b7', inventoryId, guid, _r);
};

/**
   * _INVENTORY_GET_INVENTORY_ITEM_INSPECTION_INFO
   *
   * @param {number} item
   * @param {DataView} info
   * @return {boolean}
   */
global.InventoryGetInventoryItemInspectionInfo = function (item, info) {
  return Citizen.invokeNative('0x0c093c1787f18519', _ch(item), info, _r);
};

/**
   * _INVENTORY_GET_INVENTORY_ITEM_IN_USE
   *
   * @param {number} inventoryId
   * @param {DataView} guid
   * @return {boolean}
   */
global.InventoryGetInventoryItemInUse = function (inventoryId, guid) {
  return Citizen.invokeNative('0x70e3a884ed000a01', inventoryId, guid, _r);
};

/**
   * _INVENTORY_GET_INVENTORY_ITEM_IS_ANIMAL_PELT
   *
   * @param {number} item
   * @return {boolean}
   */
global.InventoryGetInventoryItemIsAnimalPelt = function (item) {
  return Citizen.invokeNative('0x4aef1fb5b9011d75', _ch(item), _r);
};

/**
   * _INVENTORY_GET_INVENTORY_ITEM_SOUND
   * soundType: see 0x2BAE4880DCDD560B
   * Returns item Hash to be used with _IS_SCRIPTED_AUDIO_CUSTOM and _PLAY_SOUND_FROM_ITEM (p0)
   *
   * @param {number} item
   * @param {number} soundType
   * @return {number}
   */
global.InventoryGetInventoryItemSound = function (item, soundType) {
  return Citizen.invokeNative('0x2e1cdc1ff3b8473e', _ch(item), soundType, _r, _ri);
};

/**
   * _INVENTORY_GET_INVENTORY_ITEM_WEAPON_COPY_ID
   * Returns CopyID
   *
   * @param {number} inventoryId
   * @param {DataView} guid
   * @return {number}
   */
global.InventoryGetInventoryItemWeaponCopyId = function (inventoryId, guid) {
  return Citizen.invokeNative('0xab5f12746a099a0e', inventoryId, guid, _r, _ri);
};

/**
   * _INVENTORY_GET_IS_INVENTORY_ITEM_SOUND_VALID
   * soundType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CItemInfoSoundsInterface__sSoundsInfo__eSoundType
   *
   * @param {number} item
   * @param {number} soundType
   * @return {boolean}
   */
global.InventoryGetIsInventoryItemSoundValid = function (item, soundType) {
  return Citizen.invokeNative('0x2bae4880dcdd560b', _ch(item), soundType, _r);
};

/**
   * _INVENTORY_GET_ITEM_EXPIRY_TIME
   *
   * @param {DataView} itemGuid
   * @return {number}
   */
global.InventoryGetItemExpiryTime = function (itemGuid) {
  return Citizen.invokeNative('0x4a606c17276e1bcc', itemGuid, _r, _ri);
};

/**
   * _INVENTORY_GET_ITEM_FROM_COLLECTION_INDEX
   * collectionId is < outCollectionSize
   *
   * @param {number} collectionId
   * @param {number} itemIndex
   * @param {DataView} itemData
   * @return {boolean}
   */
global.InventoryGetItemFromCollectionIndex = function (collectionId, itemIndex, itemData) {
  return Citizen.invokeNative('0x82fa24c3d3fcd9b7', collectionId, itemIndex, itemData, _r);
};

/**
   * _INVENTORY_IS_GUID_VALID
   *
   * @param {DataView} guid
   * @return {boolean}
   */
global.InventoryIsGuidValid = function (guid) {
  return Citizen.invokeNative('0xb881ca836cc4b6d4', guid, _r);
};

/**
   * _INVENTORY_IS_INVENTORY_ITEM_EQUIPPED
   * Alternative Name: _INVENTORY_IS_ITEM_DISABLED
   *
   * @param {number} inventoryId
   * @param {number} item
   * @param {boolean} p2
   * @return {boolean}
   */
global.InventoryIsInventoryItemEquipped = function (inventoryId, item, p2) {
  return Citizen.invokeNative('0x3d10d7179d7034af', inventoryId, _ch(item), p2, _r);
};

/**
   * _INVENTORY_IS_INVENTORY_ITEM_FLAG_ENABLED
   * flag: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ItemDatabaseItemFlags
   * 2097152 (is item read?), 8388608 (is item sent/received/mailable?), 16777216 (is item consumable?)
   *
   * @param {number} item
   * @param {number} flag
   * @return {boolean}
   */
global.InventoryIsInventoryItemFlagEnabled = function (item, flag) {
  return Citizen.invokeNative('0x245d07651b1d183b', _ch(item), flag, _r);
};

/**
   * _INVENTORY_IS_ITEM_EXPIRED
   *
   * @param {DataView} itemGuid
   * @return {boolean}
   */
global.InventoryIsItemExpired = function (itemGuid) {
  return Citizen.invokeNative('0x0137c77a2ec64536', itemGuid, _r);
};

/**
   * _INVENTORY_IS_PLAYER_INVENTORY_MIRRORING_TRANSACTIONS
   *
  
   * @return {boolean}
   */
global.InventoryIsPlayerInventoryMirroringTransactions = function () {
  return Citizen.invokeNative('0xfc7563f482781a3d', _r);
};

/**
   * _INVENTORY_MOVE_INVENTORY_ITEM
   * guid1: old parent GUID
   * guid2: new parent GUID
   * guid3: new item GUID (out param)
   *
   * @param {number} inventoryId
   * @param {DataView} guid1
   * @param {DataView} guid2
   * @param {number} slotId
   * @param {number} quantity
   * @param {DataView} outGuid
   * @return {boolean}
   */
global.InventoryMoveInventoryItem = function (inventoryId, guid1, guid2, slotId, quantity, outGuid) {
  return Citizen.invokeNative('0xdccaa7c3bfd88862', inventoryId, guid1, guid2, _ch(slotId), quantity, outGuid, _r);
};

/**
   * _INVENTORY_RELEASE_ITEM_COLLECTION
   * Max num of collections is 5, so release your unused ones.
   *
   * @param {number} collectionId
   * @return {boolean}
   */
global.InventoryReleaseItemCollection = function (collectionId) {
  return Citizen.invokeNative('0x42a2f33a1942e865', collectionId, _r);
};

/**
   * _INVENTORY_REMOVE_INVENTORY_ITEM_WITH_GUID
   *
   * @param {number} inventoryId
   * @param {DataView} guid
   * @param {number} quantity
   * @param {number} removeReason
   * @return {boolean}
   */
global.InventoryRemoveInventoryItemWithGuid = function (inventoryId, guid, quantity, removeReason) {
  return Citizen.invokeNative('0x3e4e811480b3ae79', inventoryId, guid, quantity, _ch(removeReason), _r);
};

/**
   * _INVENTORY_REMOVE_INVENTORY_ITEM_WITH_ITEMID
   *
   * @param {number} inventoryId
   * @param {number} item
   * @param {number} quantity
   * @param {number} removeReason
   * @return {boolean}
   */
global.InventoryRemoveInventoryItemWithItemid = function (inventoryId, item, quantity, removeReason) {
  return Citizen.invokeNative('0xb4158c8c9a3b5dce', inventoryId, _ch(item), quantity, _ch(removeReason), _r);
};

/**
   * _INVENTORY_SET_INVENTORY_ITEM_HIDDEN
   * Used with CClothingItem
   *
   * @param {number} inventoryId
   * @param {DataView} guid
   * @param {boolean} hidden
   * @return {void}
   */
global.InventorySetInventoryItemHidden = function (inventoryId, guid, hidden) {
  return Citizen.invokeNative('0x9a113c660aea3832', inventoryId, guid, hidden);
};

/**
   * _INVENTORY_SET_INVENTORY_ITEM_HIDDEN_2
   * Used with CSatchelItem, R* Script usage: fisihing_core
   *
   * @param {number} inventoryId
   * @param {DataView} guid
   * @param {boolean} hidden
   * @return {void}
   */
global.InventorySetInventoryItemHidden_2 = function (inventoryId, guid, hidden) {
  return Citizen.invokeNative('0xd740f11fbc8aef43', inventoryId, guid, hidden);
};

/**
   * _INVENTORY_SET_INVENTORY_ITEM_INSPECTION_ENABLED
   *
   * @param {number} inventoryId
   * @param {DataView} p1
   * @param {boolean} enabled
   * @return {boolean}
   */
global.InventorySetInventoryItemInspectionEnabled = function (inventoryId, p1, enabled) {
  return Citizen.invokeNative('0x227522fd59ddb7e8', inventoryId, p1, enabled, _r);
};

/**
   * _INVENTORY_SET_INVENTORY_ITEM_IN_USE
   * Only works on CClothingItem
   *
   * @param {number} inventoryId
   * @param {DataView} guid
   * @param {boolean} inUse
   * @return {void}
   */
global.InventorySetInventoryItemInUse = function (inventoryId, guid, inUse) {
  return Citizen.invokeNative('0x65a5f70f4a292ebe', inventoryId, guid, inUse);
};

/**
   * _INVENTORY_SET_INVENTORY_ITEM_WEATHER_EFFECTIVENESS
   * OWE_INVALID = -1,
   * OWE_GOOD_IN_HOT
   * OWE_GOOD_IN_NONE
   * OWE_GOOD_IN_COLD
   * OWE_GOOD_IN_ALL
   *
   * @param {number} inventoryId
   * @param {DataView} guid
   * @param {number} weatherEffectiveness
   * @return {void}
   */
global.InventorySetInventoryItemWeatherEffectiveness = function (inventoryId, guid, weatherEffectiveness) {
  return Citizen.invokeNative('0x6d2f987736a42d4c', inventoryId, guid, weatherEffectiveness);
};

/**
   * _INVENTORY_SWAP_INVENTORY_ITEM
   *
   * @param {number} inventoryId
   * @param {DataView} guid1
   * @param {DataView} guid2
   * @return {boolean}
   */
global.InventorySwapInventoryItem = function (inventoryId, guid1, guid2) {
  return Citizen.invokeNative('0xf2753d691bcda314', inventoryId, guid1, guid2, _r);
};

/**
   * _INVENTORY_UPDATE_INVENTORY_ITEM
   * Getter: _INVENTORY_GET_FULL_INVENTORY_ITEM_DATA
   *
   * @param {number} inventoryId
   * @param {DataView} guid1
   * @param {DataView} guid2
   * @param {number} p3
   * @return {boolean}
   */
global.InventoryUpdateInventoryItem = function (inventoryId, guid1, guid2, p3) {
  return Citizen.invokeNative('0xd80a8854db5cfba5', inventoryId, guid1, guid2, p3, _r);
};

/**
   * _INVENTORY_USE_MISSION_INVENTORY
   *
   * @param {boolean} enable
   * @param {boolean} mirrorTransactions
   * @return {void}
   */
global.InventoryUseMissionInventory = function (enable, mirrorTransactions) {
  return Citizen.invokeNative('0xa6aa9f56bc6cff58', enable, mirrorTransactions);
};

/**
   * _INVENTORY_IS_USING_BACKUP_INVENTORY
   * old name _INVENTORY_USE_SP_BACKUP
   *
  
   * @return {boolean}
   */
global.InventoryIsUsingBackupInventory = function () {
  return Citizen.invokeNative('0x7c7e4ab748ea3b07', _r);
};

/**
   * _SET_CARRIABLE_CARRY_ACTION_PROMPT_OVERRIDE
   *
   * @param {DataView} data
   * @return {void}
   */
global.SetCarriableCarryActionPromptOverride = function (data) {
  return Citizen.invokeNative('0xf666ef30f4f0ac4e', data);
};

/**
   * _SET_ITEM_PROMPT_INFO_REQUEST
   *
   * @param {DataView} p0
   * @return {void}
   */
global.SetItemPromptInfoRequest = function (p0) {
  return Citizen.invokeNative('0xfd41d1d4350f6413', p0);
};

/**
   * _SET_USE_MISSION_INVENTORY
   * This native has no functionality.
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetUseMissionInventory = function (toggle) {
  return Citizen.invokeNative('0x597f571ddee3ffac', toggle);
};

/**
   * ITEMDATABASE_FILLOUT_ITEM_BY_NAME
   *
   * @param {number} key
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseFilloutItemByName = function (key, outData) {
  return Citizen.invokeNative('0x2a610bee7d341cc4', _ch(key), outData, _r);
};

/**
   * ITEMDATABASE_FILLOUT_ITEM_EFFECT_ID_INFO
   *
   * @param {number} key
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseFilloutItemEffectIdInfo = function (key, outData) {
  return Citizen.invokeNative('0xcf2d360d27fd1abf', _ch(key), outData, _r);
};

/**
   * ITEMDATABASE_FILLOUT_ITEM_INFO
   *
   * @param {number} key
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseFilloutItemInfo = function (key, outData) {
  return Citizen.invokeNative('0xfe90abbcbfdc13b2', _ch(key), outData, _r);
};

/**
   * ITEMDATABASE_IS_BUYABLE_AWARD_VALID
   *
   * @param {number} award
   * @return {boolean}
   */
global.ItemdatabaseIsBuyableAwardValid = function (award) {
  return Citizen.invokeNative('0x4ce753203fa42214', _ch(award), _r);
};

/**
   * _0x17721003A66C72BF
   *
   * @param {number} shopType
   * @param {number} key
   * @param {DataView} outData
   * @return {boolean}
   */
global.N_0x17721003A66C72BF = function (shopType, key, outData) {
  return Citizen.invokeNative('0x17721003a66c72bf', _ch(shopType), _ch(key), outData, _r);
};

/**
   * _ITEMDATABASE_GET_AWARD_ACQUIRE_COST
   *
   * @param {number} award
   * @param {number} index
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseGetAwardAcquireCost = function (award, index, outData) {
  return Citizen.invokeNative('0x1fc25aeb5f76b38d', _ch(award), index, outData, _r);
};

/**
   * _0x388088BFF3681189
   *
   * @param {number} bundle
   * @param {number} costtype
   * @return {number}
   */
global.N_0x388088BFF3681189 = function (bundle, costtype) {
  return Citizen.invokeNative('0x388088bff3681189', _ch(bundle), _ch(costtype), _r, _ri);
};

/**
   * _0x3A0B667ABFF87F6E
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {boolean}
   */
global.N_0x3A0B667ABFF87F6E = function (p0, p1, p2) {
  return Citizen.invokeNative('0x3a0b667abff87f6e', p0, p1, p2, _r);
};

/**
   * _0x48229CE0C7938237
   * _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
   *
   * @param {number} award
   * @return {number}
   */
global.N_0x48229CE0C7938237 = function (award) {
  return Citizen.invokeNative('0x48229ce0c7938237', _ch(award), _r, _ri);
};

/**
   * _0x537A0555F62CA01A
   *
   * @param {number} key
   * @param {number} p1
   * @return {boolean}
   */
global.N_0x537A0555F62CA01A = function (key, p1) {
  return Citizen.invokeNative('0x537a0555f62ca01a', _ch(key), p1, _r);
};

/**
   * _0x799FCD53358ED5FA
   * Returns Item Count
   *
   * @param {any} bundle
   * @param {any} p1
   * @return {number}
   */
global.N_0x799FCD53358ED5FA = function (bundle, p1) {
  return Citizen.invokeNative('0x799fcd53358ed5fa', bundle, p1, _r, _ri);
};

/**
   * _0x7A35A72A692BE9DB
   *
   * @param {any} p0
   * @return {number}
   */
global.N_0x7A35A72A692BE9DB = function (p0) {
  return Citizen.invokeNative('0x7a35a72a692be9db', p0, _r, _ri);
};

/**
   * _0x8870895BA5ED9385
   *
   * @param {number} key
   * @param {number} tagType
   * @param {DataView} outData
   * @return {number}
   */
global.N_0x8870895BA5ED9385 = function (key, tagType, outData) {
  return Citizen.invokeNative('0x8870895ba5ed9385', _ch(key), _ch(tagType), outData, _r, _ri);
};

/**
   * _0x8D029948CA29409B
   * _ITEMDATABASE_FILLOUT_(A)* - _ITEMDATABASE_FILLOUT_(B)*
   *
   * @param {number} award
   * @param {number} index
   * @param {DataView} outData
   * @return {boolean}
   */
global.N_0x8D029948CA29409B = function (award, index, outData) {
  return Citizen.invokeNative('0x8d029948ca29409b', _ch(award), index, outData, _r);
};

/**
   * _0xAA29A5F13B2C20B2
   * Returns Pathset Hash
   *
   * @param {any} p0
   * @param {number} p1
   * @return {number}
   */
global.N_0xAA29A5F13B2C20B2 = function (p0, p1) {
  return Citizen.invokeNative('0xaa29a5f13b2c20b2', p0, _ch(p1), _r, _ri);
};

/**
   * _0xC4146375D8A0B374
   *
   * @param {any} bundle
   * @param {any} p1
   * @param {number} index
   * @param {any} p3
   * @return {boolean}
   */
global.N_0xC4146375D8A0B374 = function (bundle, p1, index, p3) {
  return Citizen.invokeNative('0xc4146375d8a0b374', bundle, p1, index, p3, _r);
};

/**
   * _0xD076DB9B96FAADF1
   *
   * @param {number} award
   * @param {DataView} outData
   * @return {boolean}
   */
global.N_0xD076DB9B96FAADF1 = function (award, outData) {
  return Citizen.invokeNative('0xd076db9b96faadf1', _ch(award), outData, _r);
};

/**
   * _0xDBEADA0DF5F9AB9F
   *
   * @param {number} layout
   * @param {number} index
   * @return {[boolean, number]}
   */
global.N_0xDBEADA0DF5F9AB9F = function (layout, index) {
  return Citizen.invokeNative('0xdbeada0df5f9ab9f', _ch(layout), index, _i, _r);
};

/**
   * _ITEMDATABASE_CAN_EQUIP_ITEM_ON_CATEGORY
   *
   * @param {number} key
   * @param {number} category
   * @param {number} slotId
   * @return {boolean}
   */
global.ItemdatabaseCanEquipItemOnCategory = function (key, category, slotId) {
  return Citizen.invokeNative('0x856ff92c57742ae5', _ch(key), _ch(category), _ch(slotId), _r);
};

/**
   * _ITEMDATABASE_CREATE_ITEM_COLLECTION
   * Returns collectionId to be used with 0x8750F69A720C2E41 (p0) and 0xCBB7B6EDFA933ADE (p0)
   *
   * @param {DataView} data
   * @param {number} comparisonType
   * @return {[number, number]}
   */
global.ItemdatabaseCreateItemCollection = function (data, comparisonType) {
  return Citizen.invokeNative('0x71efa7999ae79408', data, _i, comparisonType, _r, _ri);
};

/**
   * _ITEMDATABASE_DOES_BUNDLE_HAVE_TAG
   * Params: tag = TAG_ITEM_PROPERTY (tagType(?))
   *
   * @param {number} bundle
   * @param {number} tag
   * @param {number} tagType
   * @return {boolean}
   */
global.ItemdatabaseDoesBundleHaveTag = function (bundle, tag, tagType) {
  return Citizen.invokeNative('0x99c6ea66dfe73757', _ch(bundle), _ch(tag), _ch(tagType), _r);
};

/**
   * _ITEMDATABASE_DOES_ITEM_HAVE_TAG
   *
   * @param {number} item
   * @param {number} tag
   * @param {number} tagType
   * @return {boolean}
   */
global.ItemdatabaseDoesItemHaveTag = function (item, tag, tagType) {
  return Citizen.invokeNative('0xff5fb5605ad56856', _ch(item), _ch(tag), _ch(tagType), _r);
};

/**
   * _ITEMDATABASE_FILLOUT_ACQUIRE_COST
   *
   * @param {number} key
   * @param {number} costtype
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseFilloutAcquireCost = function (key, costtype, outData) {
  return Citizen.invokeNative('0x74f7928816e4e181', _ch(key), _ch(costtype), outData, _r);
};

/**
   * _ITEMDATABASE_FILLOUT_AWARD_ACQUIRE_COST
   *
   * @param {number} award
   * @param {number} costtype
   * @param {number} index
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseFilloutAwardAcquireCost = function (award, costtype, index, outData) {
  return Citizen.invokeNative('0xf27f01bbf5acd3f3', _ch(award), _ch(costtype), index, outData, _r);
};

/**
   * _ITEMDATABASE_FILLOUT_AWARD_ITEM_INFO
   *
   * @param {number} award
   * @param {number} index
   * @return {[boolean, number]}
   */
global.ItemdatabaseFilloutAwardItemInfo = function (award, index) {
  return Citizen.invokeNative('0x121d2005dd64496b', _ch(award), index, _i, _r);
};

/**
   * _ITEMDATABASE_FILLOUT_BUNDLE
   *
   * @param {number} bundle
   * @param {number} costtype
   * @param {number} index
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseFilloutBundle = function (bundle, costtype, index, outData) {
  return Citizen.invokeNative('0xb542632693d53408', _ch(bundle), _ch(costtype), index, outData, _r);
};

/**
   * _ITEMDATABASE_FILLOUT_BUNDLE_UI_DATA
   *
   * @param {number} bundle
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseFilloutBundleUiData = function (bundle, outData) {
  return Citizen.invokeNative('0x74c3b1093728d263', _ch(bundle), outData, _r);
};

/**
   * _ITEMDATABASE_FILLOUT_BUY_AWARD_ACQUIRE_COSTS
   *
   * @param {number} award
   * @param {DataView} outData
   * @param {number} p3
   * @return {[boolean, number]}
   */
global.ItemdatabaseFilloutBuyAwardAcquireCosts = function (award, outData, p3) {
  return Citizen.invokeNative('0xb52e20f6767a09a2', _ch(award), outData, _i, p3, _r);
};

/**
   * _ITEMDATABASE_FILLOUT_BUY_AWARD_UI_DATA
   *
   * @param {number} award
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseFilloutBuyAwardUiData = function (award, outData) {
  return Citizen.invokeNative('0xf8d09ef8ce61d7bf', _ch(award), outData, _r);
};

/**
   * _ITEMDATABASE_FILLOUT_ITEM
   *
   * @param {number} key
   * @param {number} costtype
   * @param {number} index
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseFilloutItem = function (key, costtype, index, outData) {
  return Citizen.invokeNative('0xad73b614df26cf8a', _ch(key), _ch(costtype), index, outData, _r);
};

/**
   * _ITEMDATABASE_FILLOUT_ITEM_EFFECT_IDS
   *
   * @param {number} key
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseFilloutItemEffectIds = function (key, outData) {
  return Citizen.invokeNative('0x9379be60dc55bbe6', _ch(key), outData, _r);
};

/**
   * _ITEMDATABASE_FILLOUT_MODIFIER
   *
   * @param {number} key
   * @param {number} index
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseFilloutModifier = function (key, index, outData) {
  return Citizen.invokeNative('0x60614a0ab580a2b5', _ch(key), index, outData, _r);
};

/**
   * _ITEMDATABASE_FILLOUT_PRICE_MODIFIER_BY_KEY
   *
   * @param {number} key
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseFilloutPriceModifierByKey = function (key, outData) {
  return Citizen.invokeNative('0x40c5d95818823c94', _ch(key), outData, _r);
};

/**
   * _ITEMDATABASE_FILLOUT_SATCHEL_DATA
   *
   * @param {number} key
   * @return {[boolean, number]}
   */
global.ItemdatabaseFilloutSatchelData = function (key) {
  return Citizen.invokeNative('0x4776efd78f75c23f', _ch(key), _i, _r);
};

/**
   * _ITEMDATABASE_FILLOUT_SELL_PRICE
   * Params: sellType = SELL_SHOP_DEFAULT
   *
   * @param {number} key
   * @param {number} sellType
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseFilloutSellPrice = function (key, sellType, outData) {
  return Citizen.invokeNative('0x7a62a2eede1c3766', _ch(key), _ch(sellType), outData, _r);
};

/**
   * _ITEMDATABASE_FILLOUT_TAG_DATA
   *
   * @param {number} key
   * @param {DataView} outData
   * @param {number} p3
   * @return {[boolean, number]}
   */
global.ItemdatabaseFilloutTagData = function (key, outData, p3) {
  return Citizen.invokeNative('0x5a11d6eea17165b0', _ch(key), outData, _i, p3, _r);
};

/**
   * _ITEMDATABASE_FILLOUT_UI_DATA
   *
   * @param {number} key
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseFilloutUiData = function (key, outData) {
  return Citizen.invokeNative('0xb86f7cc2dc67ac60', _ch(key), outData, _r);
};

/**
   * _ITEMDATABASE_GET_ACQUIRE_COST
   *
   * @param {number} key
   * @param {number} index
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseGetAcquireCost = function (key, index, outData) {
  return Citizen.invokeNative('0x6772a83c67a25775', _ch(key), index, outData, _r);
};

/**
   * _ITEMDATABASE_GET_ACQUIRE_COSTS_COUNT
   * Returns the number of <Item>s <acquirecosts> has from the key in catalog_sp.ymt
   *
   * @param {number} key
   * @return {number}
   */
global.ItemdatabaseGetAcquireCostsCount = function (key) {
  return Citizen.invokeNative('0x01fddad392d04144', _ch(key), _r, _ri);
};

/**
   * _ITEMDATABASE_GET_ACQUIRE_COSTS_COUNT_FROM_COST_TYPE
   *
   * @param {number} key
   * @param {number} costtype
   * @return {number}
   */
global.ItemdatabaseGetAcquireCostsCountFromCostType = function (key, costtype) {
  return Citizen.invokeNative('0xdee7b3c76ed664be', _ch(key), _ch(costtype), _r, _ri);
};

/**
   * _ITEMDATABASE_GET_AWARD_ACQUIRE_COST_COUNT
   *
   * @param {number} key
   * @return {number}
   */
global.ItemdatabaseGetAwardAcquireCostCount = function (key) {
  return Citizen.invokeNative('0x12df9c58201dd19a', _ch(key), _r, _ri);
};

/**
   * _ITEMDATABASE_GET_AWARD_ACQUIRE_COST_COUNT_FROM_COST_TYPE
   *
   * @param {number} award
   * @param {number} costtype
   * @return {number}
   */
global.ItemdatabaseGetAwardAcquireCostCountFromCostType = function (award, costtype) {
  return Citizen.invokeNative('0xf540239f9937033b', _ch(award), _ch(costtype), _r, _ri);
};

/**
   * _ITEMDATABASE_GET_AWARD_COST_MODIFIERS
   *
   * @param {number} award
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseGetAwardCostModifiers = function (award, outData) {
  return Citizen.invokeNative('0xe81d0378a384e755', _ch(award), outData, _r);
};

/**
   * _ITEMDATABASE_GET_AWARD_ITEM_COUNT
   * Returns iAwardItemCount
   *
   * @param {number} award
   * @return {number}
   */
global.ItemdatabaseGetAwardItemCount = function (award) {
  return Citizen.invokeNative('0x3faa928a79591761', _ch(award), _r, _ri);
};

/**
   * _ITEMDATABASE_GET_BUNDLE_ACQUIRE_COST_MODIFIERS
   *
   * @param {number} bundle
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseGetBundleAcquireCostModifiers = function (bundle, outData) {
  return Citizen.invokeNative('0xa97ee5e4589fcf5a', _ch(bundle), outData, _r);
};

/**
   * _ITEMDATABASE_GET_BUNDLE_ID
   *
   * @param {number} bundle
   * @return {number}
   */
global.ItemdatabaseGetBundleId = function (bundle) {
  return Citizen.invokeNative('0x891a45960b6b768a', _ch(bundle), _r, _ri);
};

/**
   * _ITEMDATABASE_GET_BUNDLE_ITEM_COUNT
   *
   * @param {number} bundleId
   * @param {DataView} data
   * @return {number}
   */
global.ItemdatabaseGetBundleItemCount = function (bundleId, data) {
  return Citizen.invokeNative('0x3332695b01015df9', bundleId, data, _r, _ri);
};

/**
   * _ITEMDATABASE_GET_BUNDLE_ITEM_INFO
   *
   * @param {number} bundleId
   * @param {DataView} data
   * @param {number} index
   * @return {[boolean, number]}
   */
global.ItemdatabaseGetBundleItemInfo = function (bundleId, data, index) {
  return Citizen.invokeNative('0x5d48a77e4b668b57', bundleId, data, index, _i, _r);
};

/**
   * _ITEMDATABASE_GET_COLLECTION_SIZE
   * Returns (collection?) size/index (?)
   * _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
   *
   * @param {number} collectionId
   * @return {number}
   */
global.ItemdatabaseGetCollectionSize = function (collectionId) {
  return Citizen.invokeNative('0xd389a2549c4efb30', collectionId, _r, _ri);
};

/**
   * _ITEMDATABASE_GET_COMPONENT_ITEM
   * Params: p2 can be a component item hash
   *
   * @param {number} collectionId
   * @param {number} index
   * @return {[boolean, number]}
   */
global.ItemdatabaseGetComponentItem = function (collectionId, index) {
  return Citizen.invokeNative('0x8750f69a720c2e41', collectionId, index, _i, _r);
};

/**
   * _ITEMDATABASE_GET_FITS_SLOT_COUNT
   *
   * @param {number} category
   * @return {number}
   */
global.ItemdatabaseGetFitsSlotCount = function (category) {
  return Citizen.invokeNative('0x2970d1d6bfcf9b46', _ch(category), _r, _ri);
};

/**
   * _ITEMDATABASE_GET_FITS_SLOT_INFO
   *
   * @param {number} category
   * @param {number} index
   * @return {[boolean, number]}
   */
global.ItemdatabaseGetFitsSlotInfo = function (category, index) {
  return Citizen.invokeNative('0x77210c146ced5261', _ch(category), index, _i, _r);
};

/**
   * _ITEMDATABASE_GET_HAS_SLOT_COUNT
   *
   * @param {number} category
   * @return {number}
   */
global.ItemdatabaseGetHasSlotCount = function (category) {
  return Citizen.invokeNative('0x44915068579d7710', _ch(category), _r, _ri);
};

/**
   * _ITEMDATABASE_GET_HAS_SLOT_INFO
   *
   * @param {number} category
   * @param {number} index
   * @return {[boolean, number]}
   */
global.ItemdatabaseGetHasSlotInfo = function (category, index) {
  return Citizen.invokeNative('0x8a9bd0db7e8376cf', _ch(category), index, _i, _r);
};

/**
   * _ITEMDATABASE_GET_ITEM_PATHSET
   *
   * @param {number} key
   * @param {number} defaultPathset
   * @return {number}
   */
global.ItemdatabaseGetItemPathset = function (key, defaultPathset) {
  return Citizen.invokeNative('0xf4452ce83118c738', _ch(key), _ch(defaultPathset), _r, _ri);
};

/**
   * _ITEMDATABASE_GET_ITEM_PRICE_MODIFIERS
   *
   * @param {number} key
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseGetItemPriceModifiers = function (key, outData) {
  return Citizen.invokeNative('0x4eb37aab79ab0c48', _ch(key), outData, _r);
};

/**
   * _ITEMDATABASE_GET_ITEM_TAG_TYPE
   *
   * @param {number} item
   * @param {number} tag
   * @return {number}
   */
global.ItemdatabaseGetItemTagType = function (item, tag) {
  return Citizen.invokeNative('0x6111b8f9413f413a', _ch(item), _ch(tag), _r, _ri);
};

/**
   * _ITEMDATABASE_GET_MODIFIED_PRICE
   * Returns an alternative cost hash to COST_SHOP_DEFAULT
   *
   * @param {number} key
   * @param {number} index
   * @return {number}
   */
global.ItemdatabaseGetModifiedPrice = function (key, index) {
  return Citizen.invokeNative('0xcb92ec9c004732b4', _ch(key), index, _r, _ri);
};

/**
   * _ITEMDATABASE_GET_NUMBER_OF_MODIFIED_PRICES
   *
   * @param {number} key
   * @return {number}
   */
global.ItemdatabaseGetNumberOfModifiedPrices = function (key) {
  return Citizen.invokeNative('0x5aaaf40e9b224f5e', _ch(key), _r, _ri);
};

/**
   * _ITEMDATABASE_GET_NUMBER_OF_MODIFIERS
   *
   * @param {number} key
   * @return {number}
   */
global.ItemdatabaseGetNumberOfModifiers = function (key) {
  return Citizen.invokeNative('0x1289d8315235856d', _ch(key), _r, _ri);
};

/**
   * _ITEMDATABASE_GET_PRIORITY_ACCESS_AWARD
   * _ITEMDATABASE_GET_* - _ITEMDATABASE_IS_*
   *
   * @param {number} award
   * @return {boolean}
   */
global.ItemdatabaseGetPriorityAccessAward = function (award) {
  return Citizen.invokeNative('0xef254f1a4c08b7e6', _ch(award), _r);
};

/**
   * _ITEMDATABASE_GET_SHOP_INVENTORIES_ITEMS_COUNT
   *
   * @param {number} shopType
   * @return {number}
   */
global.ItemdatabaseGetShopInventoriesItemsCount = function (shopType) {
  return Citizen.invokeNative('0xc568b1a0f17c7025', _ch(shopType), _r, _ri);
};

/**
   * _ITEMDATABASE_GET_SHOP_INVENTORIES_ITEM_INFO
   *
   * @param {number} shopType
   * @param {number} index
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseGetShopInventoriesItemInfo = function (shopType, index, outData) {
  return Citizen.invokeNative('0x4a79b41b4eb91f4e', _ch(shopType), index, outData, _r);
};

/**
   * _ITEMDATABASE_GET_SHOP_INVENTORIES_ITEM_INFO_BY_KEY
   * Same Native Function as 0x17721003A66C72BF
   *
   * @param {number} shopType
   * @param {number} key
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseGetShopInventoriesItemInfoByKey = function (shopType, key, outData) {
  return Citizen.invokeNative('0xcfb06801f5099b25', _ch(shopType), _ch(key), outData, _r);
};

/**
   * _ITEMDATABASE_GET_SHOP_INVENTORIES_REQUIREMENT_GROUP_INFO
   *
   * @param {number} shopType
   * @param {number} key
   * @param {number} index
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseGetShopInventoriesRequirementGroupInfo = function (shopType, key, index, outData) {
  return Citizen.invokeNative('0x76c752d788a76813', _ch(shopType), _ch(key), index, outData, _r);
};

/**
   * _ITEMDATABASE_GET_SHOP_INVENTORIES_REQUIREMENT_INFO
   *
   * @param {number} shopType
   * @param {number} key
   * @param {number} groupIndex
   * @param {number} index
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseGetShopInventoriesRequirementInfo = function (shopType, key, groupIndex, index, outData) {
  return Citizen.invokeNative('0xe0ea5c031ae5539f', _ch(shopType), _ch(key), groupIndex, index, outData, _r);
};

/**
   * _ITEMDATABASE_GET_SHOP_LAYOUT_INFO
   *
   * @param {number} layout
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseGetShopLayoutInfo = function (layout, outData) {
  return Citizen.invokeNative('0x66a6d76b6bb999b4', _ch(layout), outData, _r);
};

/**
   * _ITEMDATABASE_GET_SHOP_LAYOUT_MENU_INFO_BY_ID
   *
   * @param {number} layout
   * @param {number} menu
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseGetShopLayoutMenuInfoById = function (layout, menu, outData) {
  return Citizen.invokeNative('0xd66114469978b55b', _ch(layout), _ch(menu), outData, _r);
};

/**
   * _ITEMDATABASE_GET_SHOP_LAYOUT_MENU_INFO_BY_INDEX
   *
   * @param {number} layout
   * @param {number} menu
   * @param {number} index
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseGetShopLayoutMenuInfoByIndex = function (layout, menu, index, outData) {
  return Citizen.invokeNative('0xf04247092f193b75', _ch(layout), _ch(menu), index, outData, _r);
};

/**
   * _ITEMDATABASE_GET_SHOP_LAYOUT_MENU_PAGE_KEY
   *
   * @param {number} layout
   * @param {number} menu
   * @param {number} index
   * @return {[boolean, number]}
   */
global.ItemdatabaseGetShopLayoutMenuPageKey = function (layout, menu, index) {
  return Citizen.invokeNative('0x9a60570657a7b635', _ch(layout), _ch(menu), index, _i, _r);
};

/**
   * _ITEMDATABASE_GET_SHOP_LAYOUT_PAGE_INFO_BY_KEY
   *
   * @param {number} layout
   * @param {number} pageKey
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseGetShopLayoutPageInfoByKey = function (layout, pageKey, outData) {
  return Citizen.invokeNative('0xb347c100df0c9b7f', _ch(layout), _ch(pageKey), outData, _r);
};

/**
   * _ITEMDATABASE_GET_SHOP_LAYOUT_PAGE_ITEM_KEY
   *
   * @param {number} layout
   * @param {number} pageKey
   * @param {number} index
   * @return {[boolean, number, number, number]}
   */
global.ItemdatabaseGetShopLayoutPageItemKey = function (layout, pageKey, index) {
  return Citizen.invokeNative('0xf32bef578b3dbae8', _ch(layout), _ch(pageKey), index, _i, _i, _i, _r);
};

/**
   * _ITEMDATABASE_GET_SHOP_LAYOUT_ROOT_MENU_INFO
   *
   * @param {number} layout
   * @param {number} index
   * @param {DataView} outData
   * @return {boolean}
   */
global.ItemdatabaseGetShopLayoutRootMenuInfo = function (layout, index, outData) {
  return Citizen.invokeNative('0x86fcb565cca0cfa7', _ch(layout), index, outData, _r);
};

/**
   * _ITEMDATABASE_IS_BUNDLE_VALID
   * Params: mode is 0
   *
   * @param {number} bundle
   * @param {number} mode
   * @return {boolean}
   */
global.ItemdatabaseIsBundleValid = function (bundle, mode) {
  return Citizen.invokeNative('0x4308812a6e9ca62e', _ch(bundle), mode, _r);
};

/**
   * _ITEMDATABASE_IS_INTRINSIC_ITEM
   *
   * @param {number} key
   * @return {boolean}
   */
global.ItemdatabaseIsIntrinsicItem = function (key) {
  return Citizen.invokeNative('0x337f88e3a063995e', _ch(key), _r);
};

/**
   * _ITEMDATABASE_IS_KEY_VALID
   * Params: mode is 0
   *
   * @param {number} key
   * @param {number} mode
   * @return {boolean}
   */
global.ItemdatabaseIsKeyValid = function (key, mode) {
  return Citizen.invokeNative('0x6d5d51b188333fd1', _ch(key), mode, _r);
};

/**
   * _ITEMDATABASE_IS_OVERPOWERED_ITEM
   *
   * @param {number} key
   * @return {boolean}
   */
global.ItemdatabaseIsOverpoweredItem = function (key) {
  return Citizen.invokeNative('0x337f88e3a063995f', _ch(key), _r);
};

/**
   * _ITEMDATABASE_IS_SHOP_KEY_VALID
   *
   * @param {number} shopType
   * @return {boolean}
   */
global.ItemdatabaseIsShopKeyValid = function (shopType) {
  return Citizen.invokeNative('0x00b9507d8e1d8716', _ch(shopType), _r);
};

/**
   * _ITEMDATABASE_IS_SHOP_LAYOUT_KEY_VALID
   *
   * @param {number} layout
   * @return {boolean}
   */
global.ItemdatabaseIsShopLayoutKeyValid = function (layout) {
  return Citizen.invokeNative('0x3afe5182c45a84f6', _ch(layout), _r);
};

/**
   * _ITEMDATABASE_LOCALIZATION_GET_NUM_LABEL_TYPES
   * Returns docData.iNumTotalLabelTypes
   *
   * @param {any} p0
   * @return {number}
   */
global.ItemdatabaseLocalizationGetNumLabelTypes = function (p0) {
  return Citizen.invokeNative('0xcec6a41e8910486a', p0, _r, _ri);
};

/**
   * _ITEMDATABASE_LOCALIZATION_GET_NUM_VALUES
   * Returns iNumValuesForType
   *
   * @param {any} p0
   * @param {any} p1
   * @return {number}
   */
global.ItemdatabaseLocalizationGetNumValues = function (p0, p1) {
  return Citizen.invokeNative('0x49885d82a13eeaea', p0, p1, _r, _ri);
};

/**
   * _ITEMDATABASE_LOCALIZATION_GET_TYPE
   * Returns LabelType
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.ItemdatabaseLocalizationGetType = function (p0, p1) {
  return Citizen.invokeNative('0xcabf5d41d0073d4a', p0, p1, _r);
};

/**
   * _ITEMDATABASE_LOCALIZATION_GET_VALUE
   *
   * @param {any} p0
   * @param {number} label
   * @param {any} p2
   * @return {number}
   */
global.ItemdatabaseLocalizationGetValue = function (p0, label, p2) {
  return Citizen.invokeNative('0x9ae5610fdced6ea7', p0, _ch(label), p2, _r, _ri);
};

/**
   * _ITEMDATABASE_RELEASE_ITEM_COLLECTION
   *
   * @param {number} collectionId
   * @return {boolean}
   */
global.ItemdatabaseReleaseItemCollection = function (collectionId) {
  return Citizen.invokeNative('0xcbb7b6edfa933ade', collectionId, _r);
};

/**
   * ADD_TO_ITEMSET
   *
   * @param {number} entity
   * @param {number} itemset
   * @return {boolean}
   */
global.AddToItemset = function (entity, itemset) {
  return Citizen.invokeNative('0xabe74510883c7950', entity, itemset, _r);
};

/**
   * CLEAN_ITEMSET
   *
   * @param {number} itemset
   * @return {void}
   */
global.CleanItemset = function (itemset) {
  return Citizen.invokeNative('0x85f3a86ca9021fb0', itemset);
};

/**
   * CREATE_ITEMSET
   *
   * @param {boolean} p0
   * @return {number}
   */
global.CreateItemset = function (p0) {
  return Citizen.invokeNative('0xa1af16083320065a', p0, _r, _ri);
};

/**
   * DESTROY_ITEMSET
   *
   * @param {number} itemset
   * @return {void}
   */
global.DestroyItemset = function (itemset) {
  return Citizen.invokeNative('0x712bc69f10549b92', itemset);
};

/**
   * GET_INDEXED_ITEM_IN_ITEMSET
   *
   * @param {number} index
   * @param {number} itemset
   * @return {number}
   */
global.GetIndexedItemInItemset = function (index, itemset) {
  return Citizen.invokeNative('0x275a2e2c0fab7612', index, itemset, _r, _ri);
};

/**
   * GET_INDEXED_SCENARIO_POINT_INDEX_IN_ITEMSET
   *
   * @param {number} index
   * @param {number} itemset
   * @return {any}
   */
global.GetIndexedScenarioPointIndexInItemset = function (index, itemset) {
  return Citizen.invokeNative('0x9fc3cdb5ce815901', index, itemset, _r);
};

/**
   * GET_ITEMSET_SIZE
   *
   * @param {number} itemset
   * @return {number}
   */
global.GetItemsetSize = function (itemset) {
  return Citizen.invokeNative('0x55f2e375ac6018a9', itemset, _r, _ri);
};

/**
   * IS_IN_ITEMSET
   *
   * @param {number} entity
   * @param {number} itemset
   * @return {boolean}
   */
global.IsInItemset = function (entity, itemset) {
  return Citizen.invokeNative('0xd1503c2ee2fe688c', entity, itemset, _r);
};

/**
   * IS_ITEMSET_VALID
   *
   * @param {number} itemset
   * @return {boolean}
   */
global.IsItemsetValid = function (itemset) {
  return Citizen.invokeNative('0xd30765d153ef5c76', itemset, _r);
};

/**
   * REMOVE_FROM_ITEMSET
   *
   * @param {number} entity
   * @param {number} itemset
   * @return {void}
   */
global.RemoveFromItemset = function (entity, itemset) {
  return Citizen.invokeNative('0xc5baa432b429dc24', entity, itemset);
};

/**
   * _CLEAR_ITEMSET
   *
   * @param {number} itemset
   * @return {void}
   */
global.ClearItemset = function (itemset) {
  return Citizen.invokeNative('0x20a4bf0e09bee146', itemset);
};

/**
   * ADD_BOUNTY
   *
   * @param {number} player
   * @param {number} itemValueAmount
   * @return {void}
   */
global.AddBounty = function (player, itemValueAmount) {
  return Citizen.invokeNative('0x0e3bdeed21beb945', player, itemValueAmount);
};

/**
   * ARE_WITNESSES_ACTIVE
   *
   * @param {number} player
   * @return {boolean}
   */
global.AreWitnessesActive = function (player) {
  return Citizen.invokeNative('0x69e181772886f48b', player, _r);
};

/**
   * CLEAR_BOUNTY
   *
   * @param {number} player
   * @return {void}
   */
global.ClearBounty = function (player) {
  return Citizen.invokeNative('0xc76f252371150d9a', player);
};

/**
   * CLEAR_PLAYER_PAST_CRIMES
   *
   * @param {number} player
   * @return {void}
   */
global.ClearPlayerPastCrimes = function (player) {
  return Citizen.invokeNative('0xbcc6dc59e32a2bdc', player);
};

/**
   * CLEAR_WANTED_SCORE
   *
   * @param {number} player
   * @return {void}
   */
global.ClearWantedScore = function (player) {
  return Citizen.invokeNative('0x062b4a4a3396351d', player);
};

/**
   * GET_BOUNTY
   *
   * @param {number} player
   * @return {number}
   */
global.GetBounty = function (player) {
  return Citizen.invokeNative('0x54310aab97b92816', player, _r, _ri);
};

/**
   * GET_PLAYER_REGISTERED_CRIME
   *
   * @param {number} player
   * @param {number} p1
   * @return {[boolean, number]}
   */
global.GetPlayerRegisteredCrime = function (player, p1) {
  return Citizen.invokeNative('0x532c5fddb986ee5c', player, p1, _i, _r);
};

/**
   * GET_WANTED_SCORE
   *
   * @param {number} player
   * @return {number}
   */
global.GetWantedScore = function (player) {
  return Citizen.invokeNative('0xdd5fd601481f648b', player, _r, _ri);
};

/**
   * IS_LAW_INCIDENT_ACTIVE
   *
   * @param {number} player
   * @return {boolean}
   */
global.IsLawIncidentActive = function (player) {
  return Citizen.invokeNative('0xad401c63158acbaa', player, _r);
};

/**
   * NUM_CRIMES_SUPPRESSED
   * Returns amount of suppressed crimes to be used later in the function MPINTRO_CRIME_MONITOR_MAINTAIN
   *
   * @param {number} player
   * @param {number} crimeType
   * @return {number}
   */
global.NumCrimesSuppressed = function (player, crimeType) {
  return Citizen.invokeNative('0xc08e804c91f47c80', player, _ch(crimeType), _r, _ri);
};

/**
   * RESET_WANTED_FOR_NEW_INCIDENT
   *
   * @param {number} player
   * @return {void}
   */
global.ResetWantedForNewIncident = function (player) {
  return Citizen.invokeNative('0x2728c77fbc4b9796', player);
};

/**
   * SET_BOUNTY
   *
   * @param {number} player
   * @param {number} amount
   * @return {void}
   */
global.SetBounty = function (player, amount) {
  return Citizen.invokeNative('0x093a9d1f72df0d19', player, amount);
};

/**
   * SET_DISABLE_DISTURBANCE_CRIMES
   *
   * @param {number} player
   * @param {boolean} p1
   * @return {void}
   */
global.SetDisableDisturbanceCrimes = function (player, p1) {
  return Citizen.invokeNative('0xde5faa741a781f73', player, p1);
};

/**
   * SET_LAW_SENSE_RANGE_MODIFIER
   * Default range is 1.0f
   *
   * @param {number} player
   * @param {number} range
   * @return {void}
   */
global.SetLawSenseRangeModifier = function (player, range) {
  return Citizen.invokeNative('0xfec85339aaca2a35', player, _fv(range));
};

/**
   * SET_PLAYER_ARRESTED_IN_REGION
   *
   * @param {number} player
   * @param {number} lawRegionHash
   * @return {void}
   */
global.SetPlayerArrestedInRegion = function (player, lawRegionHash) {
  return Citizen.invokeNative('0xe0fa74aa3cce650b', player, _ch(lawRegionHash));
};

/**
   * SET_PLAYER_TURNED_IN_BOUNTY_IN_REGION
   *
   * @param {number} player
   * @param {number} lawRegionHash
   * @return {void}
   */
global.SetPlayerTurnedInBountyInRegion = function (player, lawRegionHash) {
  return Citizen.invokeNative('0x73bad7b2f2db50de', player, _ch(lawRegionHash));
};

/**
   * SET_POSTPONE_DISTURBANCE_CRIMES_DURING_COMBAT
   *
   * @param {number} player
   * @param {boolean} p1
   * @return {void}
   */
global.SetPostponeDisturbanceCrimesDuringCombat = function (player, p1) {
  return Citizen.invokeNative('0x362086b911657b1a', player, p1);
};

/**
   * SET_WANTED_SCORE
   *
   * @param {number} player
   * @param {number} intensity
   * @return {void}
   */
global.SetWantedScore = function (player, intensity) {
  return Citizen.invokeNative('0xa80ff73f772acf6a', player, intensity);
};

/**
   * SUPPRESS_CRIME_THIS_FRAME
   * crimeType: see _REPORT_CRIME
   *
   * @param {number} player
   * @param {number} crimeType
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @return {void}
   */
global.SuppressCrimeThisFrame = function (player, crimeType, p2, p3, p4) {
  return Citizen.invokeNative('0x785177e4d57d7389', player, _ch(crimeType), p2, p3, p4);
};

/**
   * _0x00DB0BC05E3FAA4E
   *
   * @param {number} ped
   * @param {number} bitset
   * @return {void}
   */
global.N_0x00DB0BC05E3FAA4E = function (ped, bitset) {
  return Citizen.invokeNative('0x00db0bc05e3faa4e', ped, bitset);
};

/**
   * _0x018F30D762E62DF8
   *
   * @param {number} ped
   * @param {DataView} p1
   * @return {any}
   */
global.N_0x018F30D762E62DF8 = function (ped, p1) {
  return Citizen.invokeNative('0x018f30d762e62df8', ped, p1, _r);
};

/**
   * _0x07E8B8B20570271C
   * Used in SP only, called together with 0x55F37F5F3F2475E1 & CLEAR_WANTED_SCORE
   * _REPORT_*
   *
   * @param {number} player
   * @return {void}
   */
global.N_0x07E8B8B20570271C = function (player) {
  return Citizen.invokeNative('0x07e8b8b20570271c', player);
};

/**
   * _0x0BDFEBCF40A5F7E3
   * Only used in net_fetch R* Script
   *
   * @param {number} crimeType
   * @return {number}
   */
global.N_0x0BDFEBCF40A5F7E3 = function (crimeType) {
  return Citizen.invokeNative('0x0bdfebcf40a5f7e3', _ch(crimeType), _r, _ri);
};

/**
   * _0x0C392DB374655176
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p3
   * @param {number} itemSet
   * @return {void}
   */
global.N_0x0C392DB374655176 = function (x, y, z, p3, itemSet) {
  return Citizen.invokeNative('0x0c392db374655176', _fv(x), _fv(y), _fv(z), _fv(p3), itemSet);
};

/**
   * _0x0DBACA9C38C9A686
   * Only used in sisikapenitentiary R* Script: name = SISIKA
   * _IS_G* or _IS_H*
   *
   * @param {string | number} name
   * @return {boolean}
   */
global.N_0x0DBACA9C38C9A686 = function (name) {
  return Citizen.invokeNative('0x0dbaca9c38c9a686', _ts(name), _r);
};

/**
   * _0x0EAF918F751F27BA
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x0EAF918F751F27BA = function (ped) {
  return Citizen.invokeNative('0x0eaf918f751f27ba', ped, _r);
};

/**
   * _0x0F230DE0DDBE3649
   *
   * @param {number} player
   * @return {boolean}
   */
global.N_0x0F230DE0DDBE3649 = function (player) {
  return Citizen.invokeNative('0x0f230de0ddbe3649', player, _r);
};

/**
   * _0x148E7AC8141C9E64
   *
   * @param {number} player
   * @return {number}
   */
global.N_0x148E7AC8141C9E64 = function (player) {
  return Citizen.invokeNative('0x148e7ac8141c9e64', player, _r, _ri);
};

/**
   * _0x15ABD5004CAD2D99
   * Params: p0 either 0, 1 or -1 in R* Scripts
   * Set to 0 called together with _SUPPRESS_CRIME
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x15ABD5004CAD2D99 = function (p0) {
  return Citizen.invokeNative('0x15abd5004cad2d99', p0);
};

/**
   * _0x2001687F9562FD9D
   * Only used in resapwn_dump_body R* Script
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x2001687F9562FD9D = function (p0) {
  return Citizen.invokeNative('0x2001687f9562fd9d', p0);
};

/**
   * _0x21213B833EF4DAE7
   *
   * @param {number} player
   * @param {number} ped
   * @return {Vector3}
   */
global.N_0x21213B833EF4DAE7 = function (player, ped) {
  return Citizen.invokeNative('0x21213b833ef4dae7', player, ped, _v);
};

/**
   * _0x22741652985C84D0
   * Used in SP only
   * _REPORT_*
   *
   * @param {number} player
   * @param {number} lawRegionHash
   * @return {void}
   */
global.N_0x22741652985C84D0 = function (player, lawRegionHash) {
  return Citizen.invokeNative('0x22741652985c84d0', player, _ch(lawRegionHash));
};

/**
   * _0x26934083D3F2579C
   *
   * @param {number} player
   * @return {boolean}
   */
global.N_0x26934083D3F2579C = function (player) {
  return Citizen.invokeNative('0x26934083d3f2579c', player, _r);
};

/**
   * _0x292AD61A33A7A485
   * Only used in R* Script fm_mission_controller
   * _CLEAR_WANTED_*
   *
  
   * @return {void}
   */
global.N_0x292AD61A33A7A485 = function () {
  return Citizen.invokeNative('0x292ad61a33a7a485');
};

/**
   * _0x29CD4896ECB66C12
   *
  
   * @return {void}
   */
global.N_0x29CD4896ECB66C12 = function () {
  return Citizen.invokeNative('0x29cd4896ecb66c12');
};

/**
   * _0x318F0F9A4426CFA2
   * Only used in R* SP Script av_amb_camp_robbery
   *
   * @param {number} ped
   * @param {DataView} p1
   * @return {any}
   */
global.N_0x318F0F9A4426CFA2 = function (ped, p1) {
  return Citizen.invokeNative('0x318f0f9a4426cfa2', ped, p1, _r);
};

/**
   * _0x331D349E0380B097
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x331D349E0380B097 = function (p0) {
  return Citizen.invokeNative('0x331d349e0380b097', p0);
};

/**
   * _0x3738B784DDD35CC6
   *
   * @param {number} player
   * @param {number} p1
   * @param {number} p2
   * @return {boolean}
   */
global.N_0x3738B784DDD35CC6 = function (player, p1, p2) {
  return Citizen.invokeNative('0x3738b784ddd35cc6', player, p1, p2, _r);
};

/**
   * _0x3852237A3D9DF145
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x3852237A3D9DF145 = function (p0) {
  return Citizen.invokeNative('0x3852237a3d9df145', p0);
};

/**
   * _0x390710D2DAFA6BFF
   * _CLEAR*
   *
   * @param {number} player
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x390710D2DAFA6BFF = function (player, p1) {
  return Citizen.invokeNative('0x390710d2dafa6bff', player, p1);
};

/**
   * _0x3D2674828A4E6B3C
   *
  
   * @return {boolean}
   */
global.N_0x3D2674828A4E6B3C = function () {
  return Citizen.invokeNative('0x3d2674828a4e6b3c', _r);
};

/**
   * _0x40851BCC33ACD9AB
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x40851BCC33ACD9AB = function (ped) {
  return Citizen.invokeNative('0x40851bcc33acd9ab', ped, _r);
};

/**
   * _0x522F74636DF10201
   *
   * @param {number} player
   * @param {number} itemSet
   * @return {void}
   */
global.N_0x522F74636DF10201 = function (player, itemSet) {
  return Citizen.invokeNative('0x522f74636df10201', player, itemSet);
};

/**
   * _0x5E6F375CA101C108
   * Only used in R* SP Scripts
   *
   * @param {number} player
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x5E6F375CA101C108 = function (player, p1) {
  return Citizen.invokeNative('0x5e6f375ca101c108', player, p1);
};

/**
   * _0x61B98367D93F012F
   *
   * @param {number} player
   * @return {void}
   */
global.N_0x61B98367D93F012F = function (player) {
  return Citizen.invokeNative('0x61b98367d93f012f', player);
};

/**
   * _0x6ABC50979655BEE7
   *
   * @param {number} player
   * @param {any} p2
   * @return {number}
   */
global.N_0x6ABC50979655BEE7 = function (player, p2) {
  return Citizen.invokeNative('0x6abc50979655bee7', player, _i, p2);
};

/**
   * _0x7351DA734F989F4E
   * Only used in shoprobberies
   *
   * @param {number} entity
   * @return {boolean}
   */
global.N_0x7351DA734F989F4E = function (entity) {
  return Citizen.invokeNative('0x7351da734f989f4e', entity, _r);
};

/**
   * _0x7803436E68C32B26
   *
  
   * @return {void}
   */
global.N_0x7803436E68C32B26 = function () {
  return Citizen.invokeNative('0x7803436e68c32b26');
};

/**
   * _0x7EF2A2FE38D74456
   * _SET_DISPATCH_*
   *
   * @param {number} flag
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x7EF2A2FE38D74456 = function (flag, p1) {
  return Citizen.invokeNative('0x7ef2a2fe38d74456', flag, p1);
};

/**
   * _0x7FC667F6DDFBCDCC
   * Only used in R* Script long_update
   * Returns a value thats being subtracted from GET_GAME_TIMER
   *
   * @param {number} player
   * @return {number}
   */
global.N_0x7FC667F6DDFBCDCC = function (player) {
  return Citizen.invokeNative('0x7fc667f6ddfbcdcc', player, _r, _ri);
};

/**
   * _0x82F11E1296996574
   * Only used in rcm_gunslinger1_1 R* Script: p0 = 0
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x82F11E1296996574 = function (p0) {
  return Citizen.invokeNative('0x82f11e1296996574', p0);
};

/**
   * _0x856CE8FDE2416602
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x856CE8FDE2416602 = function (ped) {
  return Citizen.invokeNative('0x856ce8fde2416602', ped, _r);
};

/**
   * _0x89E005B1662F6E48
   *
   * @param {number} player
   * @param {number} p1
   * @param {number} p2
   * @return {boolean}
   */
global.N_0x89E005B1662F6E48 = function (player, p1, p2) {
  return Citizen.invokeNative('0x89e005b1662f6e48', player, p1, p2, _r);
};

/**
   * _0x95878B13E272EF1F
   *
   * @param {number} entity
   * @param {number} ped
   * @param {boolean} p2
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} crimeType
   * @return {any}
   */
global.N_0x95878B13E272EF1F = function (entity, ped, p2, x, y, z, crimeType) {
  return Citizen.invokeNative('0x95878b13e272ef1f', entity, ped, p2, _fv(x), _fv(y), _fv(z), _ch(crimeType), _r);
};

/**
   * _0x9772395CC73E8D1F
   * Only used in loanshark_miner1 R* Script: name = ANNESBURG_MINES
   *
   * @param {number} ped
   * @param {string | number} name
   * @return {void}
   */
global.N_0x9772395CC73E8D1F = function (ped, name) {
  return Citizen.invokeNative('0x9772395cc73e8d1f', ped, _ts(name));
};

/**
   * _0x987BE590FB9D41E5
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0x987BE590FB9D41E5 = function (p0) {
  return Citizen.invokeNative('0x987be590fb9d41e5', p0);
};

/**
   * _0x9945A3E2528A02E8
   *
   * @param {number} player
   * @return {boolean}
   */
global.N_0x9945A3E2528A02E8 = function (player) {
  return Citizen.invokeNative('0x9945a3e2528a02e8', player, _r);
};

/**
   * _0x9B4C564BFA7CFF37
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x9B4C564BFA7CFF37 = function (p0) {
  return Citizen.invokeNative('0x9b4c564bfa7cff37', _fv(p0));
};

/**
   * _0x9C5BD8C562565CE6
   *
  
   * @return {number}
   */
global.N_0x9C5BD8C562565CE6 = function () {
  return Citizen.invokeNative('0x9c5bd8c562565ce6', _i);
};

/**
   * _0x9C8A2BF37E966464
   * Only used in act_bankrobbery01 R* Script
   *
   * @param {number} player
   * @param {number} itemSet
   * @return {void}
   */
global.N_0x9C8A2BF37E966464 = function (player, itemSet) {
  return Citizen.invokeNative('0x9c8a2bf37e966464', player, itemSet);
};

/**
   * _0x9D5C9A5A3321B128
   *
   * @param {number} player
   * @return {boolean}
   */
global.N_0x9D5C9A5A3321B128 = function (player) {
  return Citizen.invokeNative('0x9d5c9a5a3321b128', player, _r);
};

/**
   * _0x9EF07CFBB19A9733
   * Only used in shoprobberies R* Scripts
   *
  
   * @return {boolean}
   */
global.N_0x9EF07CFBB19A9733 = function () {
  return Citizen.invokeNative('0x9ef07cfbb19a9733', _r);
};

/**
   * _0xB527099D1E1EED49
   *
   * @param {number} player
   * @param {number} p1
   * @return {[boolean, number]}
   */
global.N_0xB527099D1E1EED49 = function (player, p1) {
  return Citizen.invokeNative('0xb527099d1e1eed49', player, p1, _i, _r);
};

/**
   * _0xBD944A3D36E992DE
   * Called together with REPORT_POLICE_SPOTTED_PLAYER
   *
  
   * @return {void}
   */
global.N_0xBD944A3D36E992DE = function () {
  return Citizen.invokeNative('0xbd944a3d36e992de');
};

/**
   * _0xC0DF161950FB101E
   * Only used in rcm_serial_killer1 R* Script
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0xC0DF161950FB101E = function (ped) {
  return Citizen.invokeNative('0xc0df161950fb101e', ped, _r);
};

/**
   * _0xC310239ACCCF5579
   *
  
   * @return {void}
   */
global.N_0xC310239ACCCF5579 = function () {
  return Citizen.invokeNative('0xc310239acccf5579');
};

/**
   * _0xC5EB2755FA25F1E9
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0xC5EB2755FA25F1E9 = function (p0) {
  return Citizen.invokeNative('0xc5eb2755fa25f1e9', p0);
};

/**
   * _0xC687A23E166DCF68
   *
   * @param {DataView} p0
   * @return {any}
   */
global.N_0xC687A23E166DCF68 = function (p0) {
  return Citizen.invokeNative('0xc687a23e166dcf68', p0, _r);
};

/**
   * _0xC7DC5A0A7DF608CB
   * _GET_DISPATCH_*
   *
   * @param {number} flag
   * @return {boolean}
   */
global.N_0xC7DC5A0A7DF608CB = function (flag) {
  return Citizen.invokeNative('0xc7dc5a0a7df608cb', flag, _r);
};

/**
   * _0xCBFB4951F2E3934C
   *
   * @param {number} player
   * @param {DataView} data
   * @return {void}
   */
global.N_0xCBFB4951F2E3934C = function (player, data) {
  return Citizen.invokeNative('0xcbfb4951f2e3934c', player, data);
};

/**
   * _0xD6C0A8C7C0B2F82C
   *
   * @param {number} player
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xD6C0A8C7C0B2F82C = function (player, p1) {
  return Citizen.invokeNative('0xd6c0a8c7c0b2f82c', player, p1);
};

/**
   * _0xD7494DED50C6EF52
   * Only used in R* SP Scripts
   * Params: p2 either 1 or 2
   *
   * @param {number} player
   * @param {number} crimeType
   * @param {number} p2
   * @return {void}
   */
global.N_0xD7494DED50C6EF52 = function (player, crimeType, p2) {
  return Citizen.invokeNative('0xd7494ded50c6ef52', player, _ch(crimeType), p2);
};

/**
   * _0xDA1A9ADC4E3D4B16
   * Only used in R* SP Scripts
   * Params: p1 = true, p2 = false
   *
   * @param {number} itemSet
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {void}
   */
global.N_0xDA1A9ADC4E3D4B16 = function (itemSet, p1, p2) {
  return Citizen.invokeNative('0xda1a9adc4e3d4b16', itemSet, p1, p2);
};

/**
   * _0xDAEFDFDB2AEECE37
   * crimeType: see _REPORT_CRIME
   *
   * @param {number} crimeType
   * @param {any} p1
   * @return {number}
   */
global.N_0xDAEFDFDB2AEECE37 = function (crimeType, p1) {
  return Citizen.invokeNative('0xdaefdfdb2aeece37', _ch(crimeType), p1, _r, _ri);
};

/**
   * _0xDCF12B89624AAC96
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0xDCF12B89624AAC96 = function (p0) {
  return Citizen.invokeNative('0xdcf12b89624aac96', p0);
};

/**
   * _SET_CANT_LOSE_LAW_THIS_RESPONSE
   *
   * @param {boolean} enable
   * @return {void}
   */
global.SetCantLoseLawThisResponse = function (enable) {
  return Citizen.invokeNative('0xddce8e960d1de240', enable);
};

/**
   * _0xDEA083C16BB91345
   *
  
   * @return {void}
   */
global.N_0xDEA083C16BB91345 = function () {
  return Citizen.invokeNative('0xdea083c16bb91345');
};

/**
   * _0xE083BEDA81709891
   *
   * @param {number} player
   * @return {number}
   */
global.N_0xE083BEDA81709891 = function (player) {
  return Citizen.invokeNative('0xe083beda81709891', player, _r, _ri);
};

/**
   * _0xE4D6E45F491A66CB
   *
   * @param {number} player
   * @param {number} p1
   * @return {any}
   */
global.N_0xE4D6E45F491A66CB = function (player, p1) {
  return Citizen.invokeNative('0xe4d6e45f491a66cb', player, p1, _r);
};

/**
   * _0xE94B5E938619712E
   * Seems to disable lawmen guarding behaviors (like during a region lockdown). Must be called every frame.
   * Only used in R* SP Scripts, mostly used in train_fast_travel_core
   *
  
   * @return {void}
   */
global.N_0xE94B5E938619712E = function () {
  return Citizen.invokeNative('0xe94b5e938619712e');
};

/**
   * _0xE9AC8466ABE484BB
   * Only used in R* SP Scripts
   * Params: p1 = 0
   *
   * @param {boolean} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xE9AC8466ABE484BB = function (p0, p1) {
  return Citizen.invokeNative('0xe9ac8466abe484bb', p0, p1);
};

/**
   * _0xE9EB79CBF9C0F58A
   * Returns p1 value for 0xE4D6E45F491A66CB
   *
   * @param {number} player
   * @return {number}
   */
global.N_0xE9EB79CBF9C0F58A = function (player) {
  return Citizen.invokeNative('0xe9eb79cbf9c0f58a', player, _r, _ri);
};

/**
   * _0xEDFC6C1FD1C964F5
   * _SET_C* - _SET_D*
   *
   * @param {number} player
   * @param {number} crimeType
   * @param {number} bounty
   * @param {number} p3
   * @param {number} p4
   * @param {boolean} p5
   * @param {number} p6
   * @param {number} p7
   * @param {any} p8
   * @return {void}
   */
global.N_0xEDFC6C1FD1C964F5 = function (player, crimeType, bounty, p3, p4, p5, p6, p7, p8) {
  return Citizen.invokeNative('0xedfc6c1fd1c964f5', player, _ch(crimeType), bounty, _fv(p3), _fv(p4), p5, _fv(p6), _fv(p7), p8);
};

/**
   * _0xF46108C50A22B029
   *
  
   * @return {boolean}
   */
global.N_0xF46108C50A22B029 = function () {
  return Citizen.invokeNative('0xf46108c50a22b029', _r);
};

/**
   * _0xF611DE44AEB36A1D
   *
   * @param {number} crimeType
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xF611DE44AEB36A1D = function (crimeType, p1) {
  return Citizen.invokeNative('0xf611de44aeb36a1d', _ch(crimeType), p1);
};

/**
   * _0xFFEBE5AA96BC2E4E
   *
   * @param {number} ped
   * @param {number} crimeType
   * @param {boolean} p2
   * @return {any}
   */
global.N_0xFFEBE5AA96BC2E4E = function (ped, crimeType, p2) {
  return Citizen.invokeNative('0xffebe5aa96bc2e4e', ped, _ch(crimeType), p2, _r);
};

/**
   * _ADD_WITNESS_RESPONSE
   *
   * @param {number} player
   * @param {number} crimeType
   * @param {number} pedGroup
   * @return {void}
   */
global.AddWitnessResponse = function (player, crimeType, pedGroup) {
  return Citizen.invokeNative('0x10827b5a0aac56a7', player, _ch(crimeType), pedGroup);
};

/**
   * _ARE_ANY_LAW_PEDS_INVESTIGATING
   * Only used in rcm_homerob00 R* Script
   *
  
   * @return {boolean}
   */
global.AreAnyLawPedsInvestigating = function () {
  return Citizen.invokeNative('0xece3c34b270428d5', _r);
};

/**
   * _ARE_INVESTIGATORS_ACTIVE
   *
   * @param {number} player
   * @param {boolean} areInvestigatorsActive
   * @param {any} p2
   * @return {boolean}
   */
global.AreInvestigatorsActive = function (player, areInvestigatorsActive, p2) {
  return Citizen.invokeNative('0xf0fbfb9ab15f7734', player, areInvestigatorsActive, p2, _r);
};

/**
   * _ARE_LAW_PEDS_ENABLED_FOR_TRAIN
   * Only used in trainrobbery_ambient R* Script
   *
  
   * @return {boolean}
   */
global.AreLawPedsEnabledForTrain = function () {
  return Citizen.invokeNative('0xa22c46f16359471c', _r);
};

/**
   * _ARE_WITNESSES_PENDING
   *
   * @param {number} player
   * @return {boolean}
   */
global.AreWitnessesPending = function (player) {
  return Citizen.invokeNative('0x0bb6de7d23c60626', player, _r);
};

/**
   * _CREATE_GUARD_ZONE
   *
   * @param {string | number} name
   * @return {void}
   */
global.CreateGuardZone = function (name) {
  return Citizen.invokeNative('0x8f9de75680275c9f', _ts(name));
};

/**
   * _CREATE_GUARD_ZONE_FOR_ENTITY
   * Returns true when investigation creation was successful
   *
   * @param {string | number} guardZoneName
   * @param {number} entity
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {boolean}
   */
global.CreateGuardZoneForEntity = function (guardZoneName, entity, x, y, z) {
  return Citizen.invokeNative('0x0d4b77e862475ed3', _ts(guardZoneName), entity, _fv(x), _fv(y), _fv(z), _r);
};

/**
   * _CREATE_LAW_DISPATCH_RESPONSE_FOR_COORDS
   * dispatchResponseHash: see common/data/dispatchresponses/..
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} dispatchResponseHash
   * @return {any}
   */
global.CreateLawDispatchResponseForCoords = function (x, y, z, dispatchResponseHash) {
  return Citizen.invokeNative('0x75cbf20ba47e4f89', _fv(x), _fv(y), _fv(z), _ch(dispatchResponseHash), _r);
};

/**
   * _DISABLE_GUARD_ZONE
   *
   * @param {string | number} name
   * @return {void}
   */
global.DisableGuardZone = function (name) {
  return Citizen.invokeNative('0x26d558692b25dd95', _ts(name));
};

/**
   * _ENABLE_DISPATCH_LAW
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.EnableDispatchLaw = function (toggle) {
  return Citizen.invokeNative('0xc805eb785824f712', toggle);
};

/**
   * _ENABLE_DISPATCH_LAW_2
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.EnableDispatchLaw_2 = function (toggle) {
  return Citizen.invokeNative('0x710448d44a64c213', toggle);
};

/**
   * _FORCE_LAW_ON_LOCAL_PLAYER_IMMEDIATELY
   *
  
   * @return {void}
   */
global.ForceLawOnLocalPlayerImmediately = function () {
  return Citizen.invokeNative('0x956510f8c36b5c64');
};

/**
   * _GET_BOUNTY_HUNTER_GLOBAL_COOLDOWN
   * p0 is always BOUNTYHUNTERSGLOBALCOOLDOWN in R* scripts
   *
   * @param {number} p0
   * @return {number}
   */
global.GetBountyHunterGlobalCooldown = function (p0) {
  return Citizen.invokeNative('0x76cf93d4b416b288', _ch(p0), _r, _ri);
};

/**
   * _GET_CRIME_BOUNTY_AMOUNT_BY_TYPE
   * Returns bounty (increment) value
   *
   * @param {number} crimeType
   * @return {number}
   */
global.GetCrimeBountyAmountByType = function (crimeType) {
  return Citizen.invokeNative('0x35e5e21f9159849c', _ch(crimeType), _r, _ri);
};

/**
   * _GET_HUD_PLAYER_CRIME_TYPE
   * See _REPORT_CRIME
   *
   * @param {number} player
   * @return {number}
   */
global.GetHudPlayerCrimeType = function (player) {
  return Citizen.invokeNative('0x259ce340a8738814', player, _r, _ri);
};

/**
   * _GET_TIME_SINCE_LAST_SEEN_BY_LAW
   * Returns the amount of time (probably in game minutes) since last seen by the law / left the wanted radius
   *
   * @param {number} player
   * @return {number}
   */
global.GetTimeSinceLastSeenByLaw = function (player) {
  return Citizen.invokeNative('0x717da2281df90855', player, _r, _rf);
};

/**
   * _IS_GUARD_PED_INVESTIGATING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsGuardPedInvestigating = function (ped) {
  return Citizen.invokeNative('0xd743c4293f47afad', ped, _r);
};

/**
   * _LAW_WITNESS_RESPONSE_TASK
   *
   * @param {number} pedGroup1
   * @param {number} ped
   * @param {number} pedGroup2
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} crimeType
   * @return {boolean}
   */
global.LawWitnessResponseTask = function (pedGroup1, ped, pedGroup2, x, y, z, crimeType) {
  return Citizen.invokeNative('0xf0b67bad53c35bd9', pedGroup1, ped, pedGroup2, _fv(x), _fv(y), _fv(z), _ch(crimeType), _r);
};

/**
   * _PAUSE_BOUNTY_HUNTER_COOLDOWN
   * p0 is always BOUNTYHUNTERSGLOBALCOOLDOWN in R* scripts
   *
   * @param {number} p0
   * @param {boolean} p1
   * @param {any} p2
   * @return {void}
   */
global.PauseBountyHunterCooldown = function (p0, p1, p2) {
  return Citizen.invokeNative('0xc61edebf16cd9668', _ch(p0), p1, p2);
};

/**
   * _REMOVE_GUARD_ZONE
   *
   * @param {string | number} name
   * @return {void}
   */
global.RemoveGuardZone = function (name) {
  return Citizen.invokeNative('0x67ebdd958835956c', _ts(name));
};

/**
   * _REPORT_CRIME
   * crimeType:
   * enum eCrimeType : Hash
   * {
   *   CRIME_ACCOMPLICE = 0xAF074F6D,
   *   CRIME_ARSON = 0x68134DC7,
   *   CRIME_ASSAULT = 0x0BADC882,
   *   CRIME_ASSAULT_ANIMAL = 0x18DA55EE,
   *   CRIME_ASSAULT_CORPSE = 0x4E5F23F2,
   *   CRIME_ASSAULT_HORSE = 0xC4736181,
   *   CRIME_ASSAULT_LAW = 0xD7466D7C,
   *   CRIME_ASSAULT_LIVESTOCK = 0xCCE1CCBD,
   *   CRIME_BANK_ROBBERY = 0x6A1ADE3D,
   *   CRIME_BURGLARY = 0xA54C77E0,
   *   CRIME_CHEATING = 0xA2FF1145,
   *   CRIME_DISTURBANCE = 0x5011F613,
   *   CRIME_EXPLOSION = 0x3EBA7A37,
   *   CRIME_EXPLOSION_POISON = 0x91D0A0E1,
   *   CRIME_GRAVE_ROBBERY = 0x971EA5AF,
   *   CRIME_HASSLE = 0x58488776,
   *   CRIME_HIT_AND_RUN = 0xFF0A3CC4,
   *   CRIME_HIT_AND_RUN_LAW = 0x064814AF,
   *   CRIME_INTIMIDATION = 0x8319FBAB,
   *   CRIME_JACK_HORSE = 0x82F7E4A2,
   *   CRIME_JACK_VEHICLE = 0x6B981F4C,
   *   CRIME_JAIL_BREAK = 0x12C1D589,
   *   CRIME_KIDNAPPING = 0x98F908DB,
   *   CRIME_KIDNAPPING_LAW = 0xFD72A7EA,
   *   CRIME_LASSO_ASSAULT = 0x56EE5D5A,
   *   CRIME_LAW_IS_THREATENED = 0x1CB91DF0,
   *   CRIME_LOITERING = 0x6629D2F4,
   *   CRIME_LOOTING = 0x55AD2BEB,
   *   CRIME_MURDER = 0xE28ECE7E,
   *   CRIME_MURDER_ANIMAL = 0x48F59A66,
   *   CRIME_MURDER_HORSE = 0xC7261D79,
   *   CRIME_MURDER_LAW = 0x7797FCE7,
   *   CRIME_MURDER_LIVESTOCK = 0x9569C546,
   *   CRIME_MURDER_PLAYER = 0xF5ABD6C9,
   *   CRIME_MURDER_PLAYER_HORSE = 0xD55C6A79,
   *   CRIME_PROPERTY_DESTRUCTION = 0x533B003D,
   *   CRIME_RESIST_ARREST = 0xDF577BA5,
   *   CRIME_ROBBERY = 0xA3BEDE4C,
   *   CRIME_SELF_DEFENCE = 0xBD6A0AA3,
   *   CRIME_STAGECOACH_ROBBERY = 0xFC738E61,
   *   CRIME_STOLEN_GOODS = 0x9A949C79,
   *   CRIME_THEFT = 0x72ADE410,
   *   CRIME_THEFT_HORSE = 0xBE3A5838,
   *   CRIME_THEFT_LIVESTOCK = 0x85BA08FD,
   *   CRIME_THEFT_VEHICLE = 0x43A9ECA1,
   *   CRIME_THREATEN = 0x941C985A,
   *   CRIME_THREATEN_LAW = 0x7F908566,
   *   CRIME_TRAIN_ROBBERY = 0x647D2A5A,
   *   CRIME_TRAMPLE = 0x45DB39D8,
   *   CRIME_TRAMPLE_LAW = 0xF00F266B,
   *   CRIME_TRAMPLE_PLAYER = 0x75970C15,
   *   CRIME_TRESPASSING = 0xAEDE8E35,
   *   CRIME_UNARMED_ASSAULT = 0x5098CC5A,
   *   CRIME_VANDALISM = 0x80FDC759,
   *   CRIME_VANDALISM_VEHICLE = 0xF9E7ECE4,
   *   CRIME_VEHICLE_DESTRUCTION = 0x54A85DDC,
   *   CRIME_WANTED_LEVEL_UP_DEBUG_HIGH = 0x99C52FF5,
   *   CRIME_WANTED_LEVEL_UP_DEBUG_LOW = 0xD891890F
   * };
   *
   * @param {number} player
   * @param {number} crimeType
   * @param {number} bounty
   * @param {number} entity
   * @param {boolean} isKnownSuspect
   * @return {void}
   */
global.ReportCrime = function (player, crimeType, bounty, entity, isKnownSuspect) {
  return Citizen.invokeNative('0xf60386770878a98f', player, _ch(crimeType), bounty, entity, isKnownSuspect);
};

/**
   * _REPORT_PLAYER_LAW_DISPATCH_RESPONSE_OVERRIDE
   *
   * @param {number} player
   * @param {number} dispatchResponseHash
   * @return {void}
   */
global.ReportPlayerLawDispatchResponseOverride = function (player, dispatchResponseHash) {
  return Citizen.invokeNative('0x9c4352134b2835fb', player, _ch(dispatchResponseHash));
};

/**
   * _SET_ALLOW_DISABLED_LAW_RESPONSES
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetAllowDisabledLawResponses = function (toggle) {
  return Citizen.invokeNative('0x4b52bf96e225d230', toggle);
};

/**
   * _SET_BOUNTY_HUNTER_GLOBAL_COOLDOWN
   * p0 is always BOUNTYHUNTERSGLOBALCOOLDOWN in R* scripts
   *
   * @param {number} p0
   * @param {number} p1
   * @return {void}
   */
global.SetBountyHunterGlobalCooldown = function (p0, p1) {
  return Citizen.invokeNative('0xf19706b1f8ffa88f', _ch(p0), p1);
};

/**
   * _SET_BOUNTY_HUNTER_PURSUIT_CLEARED
   * Force clears local player's wanted level
   *
  
   * @return {void}
   */
global.SetBountyHunterPursuitCleared = function () {
  return Citizen.invokeNative('0x55f37f5f3f2475e1');
};

/**
   * _SET_CUSTOM_LAW_DISPATCH_RESPONSE
   * Note: This native is only used in multiplayer scripts
   * dispatchResponseHash: see update1/common/data/dispatchresponses/..
   *
   * @param {number} dispatchResponseHash
   * @return {void}
   */
global.SetCustomLawDispatchResponse = function (dispatchResponseHash) {
  return Citizen.invokeNative('0x009cf9a29972c298', _ch(dispatchResponseHash));
};

/**
   * _SET_DISPATCH_MULTIPLIER_OVERRIDE
   *
   * @param {number} multiplier
   * @return {void}
   */
global.SetDispatchMultiplierOverride = function (multiplier) {
  return Citizen.invokeNative('0x002babe0b7d53136', _fv(multiplier));
};

/**
   * _SET_GUARD_ZONE_POSITION
   *
   * @param {string | number} name
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.SetGuardZonePosition = function (name, x, y, z) {
  return Citizen.invokeNative('0x7e7bf59f89fc6c6d', _ts(name), _fv(x), _fv(y), _fv(z));
};

/**
   * _SET_GUARD_ZONE_POSITION_2
   *
   * @param {string | number} name
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.SetGuardZonePosition_2 = function (name, x, y, z) {
  return Citizen.invokeNative('0x2f9005e2ea4e5ee4', _ts(name), _fv(x), _fv(y), _fv(z));
};

/**
   * _SET_GUARD_ZONE_VOLUME_REGISTRATION_END
   *
   * @param {string | number} name
   * @param {number} volume
   * @return {void}
   */
global.SetGuardZoneVolumeRegistrationEnd = function (name, volume) {
  return Citizen.invokeNative('0xa8a74aa79fb67159', _ts(name), volume);
};

/**
   * _SET_GUARD_ZONE_VOLUME_REGISTRATION_START
   *
   * @param {string | number} name
   * @param {number} volume
   * @return {void}
   */
global.SetGuardZoneVolumeRegistrationStart = function (name, volume) {
  return Citizen.invokeNative('0x8c598a930f471938', _ts(name), volume);
};

/**
   * _SET_GUARD_ZONE_VOLUME_RESTRICTED
   *
   * @param {string | number} name
   * @param {number} volume
   * @return {void}
   */
global.SetGuardZoneVolumeRestricted = function (name, volume) {
  return Citizen.invokeNative('0x35815f372d43e1e5', _ts(name), volume);
};

/**
   * _SET_GUARD_ZONE_VOLUME_THREAT
   *
   * @param {string | number} name
   * @param {number} volume
   * @return {void}
   */
global.SetGuardZoneVolumeThreat = function (name, volume) {
  return Citizen.invokeNative('0xa1b0e6301e2e02a6', name, volume);
};

/**
   * _SET_GUARD_ZONE_VOLUME_WARNING
   *
   * @param {string | number} name
   * @param {number} volume
   * @return {void}
   */
global.SetGuardZoneVolumeWarning = function (name, volume) {
  return Citizen.invokeNative('0xad3e07c37a7c1adc', name, volume);
};

/**
   * _SET_LAW_DISABLED
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetLawDisabled = function (toggle) {
  return Citizen.invokeNative('0x8de82bc774f3b862', toggle);
};

/**
   * _SET_LAW_RBS_VOLUME
   *
   * @param {number} player
   * @param {number} p1
   * @return {void}
   */
global.SetLawRbsVolume = function (player, p1) {
  return Citizen.invokeNative('0x9bbdcb8df789ebc1', player, _ch(p1));
};

/**
   * _SET_LAW_REGION
   * enum eLawRegion : Hash
   * {
   *   LAW_DISPATCH_REGION_NONE = 0,
   *   LAW_REGION_AGUASDULCES = 0x2F573EBE,
   *   LAW_REGION_ANNESBURG = 0x68CAFD50,
   *   LAW_REGION_ARMADILLO = 0xF0B90756,
   *   LAW_REGION_BAYOU_NWA = 0x80966B1C,
   *   LAW_REGION_BEECHERS_HOPE = 0xE2544977,
   *   LAW_REGION_BIG_VALLEY = 0x3DF1559A,
   *   LAW_REGION_BLACKWATER = 0x60D4886D,
   *   LAW_REGION_BLACKWATER_MAINGAME = 0x66553576,
   *   LAW_REGION_BLUEGILL_MARSH = 0x1D6AED8E,
   *   LAW_REGION_BRAITHWAITE_MANOR = 0x3D71E7FF,
   *   LAW_REGION_BUTCHER_CREEK = 0x2B3E1822,
   *   LAW_REGION_CALIGA_HALL = 0xF3FE5080,
   *   LAW_REGION_CORNWALL = 0xCC4672FA,
   *   LAW_REGION_CUMBERLAND_FOREST = 0x81A78306,
   *   LAW_REGION_EMERALD_RANCH = 0x5C069DF3,
   *   LAW_REGION_FORT_WALLACE = 0x0AF25192,
   *   LAW_REGION_GREAT_PLAINS = 0xB20573FA,
   *   LAW_REGION_GREAT_PLAINS_MAINGAME = 0x9862FF7C,
   *   LAW_REGION_GRIZZLIES = 0xBB936031,
   *   LAW_REGION_GUAMA = 0x200DFF42,
   *   LAW_REGION_HEARTLANDS = 0xAD14DA65,
   *   LAW_REGION_LAGRAS = 0xC64808D3,
   *   LAW_REGION_MACFARLANES_RANCH = 0x396A7D5F,
   *   LAW_REGION_MANICATO = 0x039DB6BF,
   *   LAW_REGION_MANZANITA_POST = 0x895E580E,
   *   LAW_REGION_MANZANITA_POST_MAINGAME = 0x9BDD6A38,
   *   LAW_REGION_OCCUPIED_CARAVAN_CAMP = 0x7EBABB01,
   *   LAW_REGION_OLD_MAP_WILDERNESS = 0xCBB45950,
   *   LAW_REGION_OLD_MAP_WILDERNESS_MAINGAME = 0x9F839BE7,
   *   LAW_REGION_OUTLAW3 = 0x97A02FC1,
   *   LAW_REGION_PRONGHORN_RANCH = 0x398E4BFC,
   *   LAW_REGION_RHODES = 0x89222928,
   *   LAW_REGION_RHODES_LOCKDOWN = 0xB1181671,
   *   LAW_REGION_RIDGEWOOD_FARM = 0x635C3028,
   *   LAW_REGION_ROANOKE_RIDGE = 0x46386A9A,
   *   LAW_REGION_SAINT_DENIS = 0x5CF7C268,
   *   LAW_REGION_SAINT_DENIS_RURAL = 0x4FD5331A,
   *   LAW_REGION_SCARLETT_MEADOWS = 0x5FDD9717,
   *   LAW_REGION_SISIKA = 0x2B6BBA52,
   *   LAW_REGION_STRAWBERRY = 0xDD932620,
   *   LAW_REGION_TALL_TREES = 0xD939B758,
   *   LAW_REGION_TALL_TREES_MAINGAME = 0x084B17DF,
   *   LAW_REGION_THIEVES_LANDING = 0x3D0C2EB6,
   *   LAW_REGION_THIEVES_LANDING_MAINGAME = 0x61C450F3,
   *   LAW_REGION_TUMBLEWEED = 0x0EFAF8DC,
   *   LAW_REGION_VALENTINE = 0xA7A3F0C3,
   *   LAW_REGION_VALENTINE_LOCKDOWN = 0x123582FE,
   *   LAW_REGION_VAN_HORN = 0x619B528E,
   *   LAW_REGION_WAPITI = 0x7A976E02
   * };
   *
   * @param {number} player
   * @param {number} lawRegionHash
   * @param {number} stateHash
   * @return {void}
   */
global.SetLawRegion = function (player, lawRegionHash, stateHash) {
  return Citizen.invokeNative('0x4752f68eb7f2d280', player, _ch(lawRegionHash), _ch(stateHash));
};

/**
   * _SET_PED_LAW_BEHAVIOUR
   * behaviour: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CLawBehavior__Flags
   *
   * @param {number} ped
   * @param {number} behaviour
   * @return {void}
   */
global.SetPedLawBehaviour = function (ped, behaviour) {
  return Citizen.invokeNative('0x819add5ef1742f47', ped, behaviour);
};

/**
   * GET_CURRENT_LANGUAGE
   * 0 = american (en-US)
   * 1 = french (fr-FR)
   * 2 = german (de-DE)
   * 3 = italian (it-IT)
   * 4 = spanish (es-ES)
   * 5 = brazilian (pt-BR)
   * 6 = polish (pl-PL)
   * 7 = russian (ru-RU)
   * 8 = korean (ko-KR)
   * 9 = chinesetrad (zh-TW)
   * 10 = japanese (ja-JP)
   * 11 = mexican (es-MX)
   * 12 = chinesesimp (zh-CN)
   *
  
   * @return {number}
   */
global.GetCurrentLanguage = function () {
  return Citizen.invokeNative('0xdb917da5c6835fcc', _r, _ri);
};

/**
   * LOCALIZATION_GET_SYSTEM_DATE_TYPE
   * 0 = DATE_FORMAT_DMY
   * 1 = DATE_FORMAT_MDY
   * 2 = DATE_FORMAT_YMD
   * 
   * Old name: _LOCALIZATION_GET_SYSTEM_DATE_FORMAT
   *
  
   * @return {number}
   */
global.LocalizationGetSystemDateType = function () {
  return Citizen.invokeNative('0x76e30b799ebeea0f', _r, _ri);
};

/**
   * LOCALIZATION_GET_SYSTEM_LANGUAGE
   * Same return values as GET_CURRENT_LANGUAGE
   *
  
   * @return {number}
   */
global.LocalizationGetSystemLanguage = function () {
  return Citizen.invokeNative('0x3c1a05f86ae6acb5', _r, _ri);
};

/**
   * _DOES_CURRENT_LANGUAGE_SUPPORT_CONDENSED_STYLE
   * Returns true if the current language is american, french, german, italian, spanish, brazilian or mexican.
   * _DOES_*
   *
  
   * @return {boolean}
   */
global.DoesCurrentLanguageSupportCondensedStyle = function () {
  return Citizen.invokeNative('0x45d50415e4d885ff', _r);
};

/**
   * ADD_POINT_TO_GPS_MULTI_ROUTE
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {boolean} p3
   * @return {void}
   */
global.AddPointToGpsMultiRoute = function (x, y, z, p3) {
  return Citizen.invokeNative('0x64c59dd6834fa942', _fv(x), _fv(y), _fv(z), p3);
};

/**
   * ALLOW_SONAR_BLIPS
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.AllowSonarBlips = function (toggle) {
  return Citizen.invokeNative('0x6e6e64788c07d2e0', toggle);
};

/**
   * BLIP_ADD_FOR_COORDS
   * https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/textures/blips
   * https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/textures/blips_mp
   *
   * @param {number} blipHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {number}
   */
global.BlipAddForCoords = function (blipHash, x, y, z) {
  return Citizen.invokeNative('0x554d9d53f696d002', _ch(blipHash), _fv(x), _fv(y), _fv(z), _r, _ri);
};

/**
   * BLIP_ADD_FOR_ENTITY
   *
   * @param {number} blipHash
   * @param {number} entity
   * @return {number}
   */
global.BlipAddForEntity = function (blipHash, entity) {
  return Citizen.invokeNative('0x23f74c2fda6e7c61', _ch(blipHash), entity, _r, _ri);
};

/**
   * BLIP_ADD_FOR_PICKUP_PLACEMENT
   *
   * @param {number} blipHash
   * @param {number} pickup
   * @return {number}
   */
global.BlipAddForPickupPlacement = function (blipHash, pickup) {
  return Citizen.invokeNative('0xa486008892065fb9', _ch(blipHash), pickup, _r, _ri);
};

/**
   * BLIP_ADD_FOR_RADIUS
   *
   * @param {number} blipHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @return {number}
   */
global.BlipAddForRadius = function (blipHash, x, y, z, radius) {
  return Citizen.invokeNative('0x45f13b7e0a15c880', _ch(blipHash), _fv(x), _fv(y), _fv(z), _fv(radius), _r, _ri);
};

/**
   * BLIP_ADD_MODIFIER
   * https://alloc8or.re/rdr3/doc/enums/eBlipModifier.txt
   * https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/blip_modifiers
   * 
   * Old name: _BLIP_SET_MODIFIER
   *
   * @param {number} blip
   * @param {number} modifierHash
   * @return {boolean}
   */
global.BlipAddModifier = function (blip, modifierHash) {
  return Citizen.invokeNative('0x662d364abf16de2f', blip, _ch(modifierHash), _r);
};

/**
   * BLIP_REMOVE_MODIFIER
   * If modifierHash is 0, ALL modifiers will be removed.
   *
   * @param {number} blip
   * @param {number} modifierHash
   * @return {boolean}
   */
global.BlipRemoveModifier = function (blip, modifierHash) {
  return Citizen.invokeNative('0xb059d7bd3d78c16f', blip, _ch(modifierHash), _r);
};

/**
   * CLEAR_GPS_CUSTOM_ROUTE
   *
  
   * @return {void}
   */
global.ClearGpsCustomRoute = function () {
  return Citizen.invokeNative('0x1eaa5674b4d181c5');
};

/**
   * CLEAR_GPS_FLAGS
   * Clears the GPS flags.
   *
  
   * @return {void}
   */
global.ClearGpsFlags = function () {
  return Citizen.invokeNative('0x4d3771237c79ff41');
};

/**
   * CLEAR_GPS_MULTI_ROUTE
   * Does the same as SET_GPS_MULTI_ROUTE_RENDER(false);
   *
  
   * @return {void}
   */
global.ClearGpsMultiRoute = function () {
  return Citizen.invokeNative('0x9e0ab9aaee87ce28');
};

/**
   * CLEAR_GPS_PLAYER_WAYPOINT
   *
  
   * @return {void}
   */
global.ClearGpsPlayerWaypoint = function () {
  return Citizen.invokeNative('0x08fdc6f796e350d1');
};

/**
   * DISPLAY_RADAR
   * If Minimap / Radar should be displayed.
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.DisplayRadar = function (toggle) {
  return Citizen.invokeNative('0x1b3da717b9aff828', toggle);
};

/**
   * DOES_BLIP_EXIST
   *
   * @param {number} blip
   * @return {boolean}
   */
global.DoesBlipExist = function (blip) {
  return Citizen.invokeNative('0xcd82fa174080b3b1', blip, _r);
};

/**
   * FORCE_SONAR_BLIPS_THIS_FRAME
   * Doesn't actually return anything.
   *
  
   * @return {any}
   */
global.ForceSonarBlipsThisFrame = function () {
  return Citizen.invokeNative('0xee1c7ba69bb74b08', _r);
};

/**
   * GET_BLIP_COORDS
   *
   * @param {number} blip
   * @return {Vector3}
   */
global.GetBlipCoords = function (blip) {
  return Citizen.invokeNative('0x201c319797bda603', blip, _r, _rv);
};

/**
   * GET_BLIP_FROM_ENTITY
   * Returns the Blip handle of given Entity.
   *
   * @param {number} entity
   * @return {number}
   */
global.GetBlipFromEntity = function (entity) {
  return Citizen.invokeNative('0x6d2c41a8bd6d6fd0', entity, _r, _ri);
};

/**
   * GET_MAIN_PLAYER_BLIP_ID
   *
  
   * @return {number}
   */
global.GetMainPlayerBlipId = function () {
  return Citizen.invokeNative('0x5cd2889b2b381d45', _r, _ri);
};

/**
   * IS_BLIP_ON_MINIMAP
   *
   * @param {number} blip
   * @return {boolean}
   */
global.IsBlipOnMinimap = function (blip) {
  return Citizen.invokeNative('0x46534526b9cd2d17', blip, _r);
};

/**
   * IS_WAYPOINT_ACTIVE
   *
  
   * @return {boolean}
   */
global.IsWaypointActive = function () {
  return Citizen.invokeNative('0x202b1bbfc6ab5ee4', _r);
};

/**
   * LOCK_MINIMAP_ANGLE
   * Locks the minimap to the specified angle in integer degrees.
   * 
   * angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.
   *
   * @param {number} angle
   * @return {void}
   */
global.LockMinimapAngle = function (angle) {
  return Citizen.invokeNative('0x0bfd145ef819fb3a', angle);
};

/**
   * REMOVE_BLIP
   *
  
   * @return {number}
   */
global.RemoveBlip = function () {
  return Citizen.invokeNative('0xf2c3c9da47aaa54a', _i);
};

/**
   * RESET_MINIMAP_FOW
   *
   * @param {number} hash
   * @return {void}
   */
global.ResetMinimapFow = function (hash) {
  return Citizen.invokeNative('0xeb3cb3386c775d72', _ch(hash));
};

/**
   * SET_BLIP_COORDS
   *
   * @param {number} blip
   * @param {number} posX
   * @param {number} posY
   * @param {number} posZ
   * @return {void}
   */
global.SetBlipCoords = function (blip, posX, posY, posZ) {
  return Citizen.invokeNative('0x4ff674f5e23d49ce', blip, _fv(posX), _fv(posY), _fv(posZ));
};

/**
   * SET_BLIP_FLASHES
   *
   * @param {number} blip
   * @return {[boolean, number, number]}
   */
global.SetBlipFlashes = function (blip) {
  return Citizen.invokeNative('0x0df2b55f717ddb10', blip, _i, _i, _r);
};

/**
   * SET_BLIP_FLASH_TIMER
   *
   * @param {number} blip
   * @param {number} blipType
   * @param {number} blipHash
   * @return {void}
   */
global.SetBlipFlashTimer = function (blip, blipType, blipHash) {
  return Citizen.invokeNative('0x02ff4cf43b7209d1', blip, blipType, _ch(blipHash));
};

/**
   * SET_BLIP_NAME_FROM_TEXT_FILE
   *
   * @param {number} blip
   * @param {string | number} textLabel
   * @return {void}
   */
global.SetBlipNameFromTextFile = function (blip, textLabel) {
  return Citizen.invokeNative('0x0a062d6d7c0b2c2c', blip, textLabel);
};

/**
   * SET_BLIP_NAME_TO_PLAYER_NAME
   *
   * @param {number} blip
   * @param {number} player
   * @return {void}
   */
global.SetBlipNameToPlayerName = function (blip, player) {
  return Citizen.invokeNative('0x093dd5a31bc2b459', blip, player);
};

/**
   * SET_BLIP_ROTATION
   *
   * @param {number} blip
   * @param {number} rotation
   * @return {void}
   */
global.SetBlipRotation = function (blip, rotation) {
  return Citizen.invokeNative('0x6049966a94fbe706', blip, rotation);
};

/**
   * SET_BLIP_SCALE
   * only works for BLIP_ADD_FOR_RADIUS AND BLIP_ADD_FOR_AREA, this native works as a radius not really a scale
   *
   * @param {number} blip
   * @param {number} scale
   * @return {void}
   */
global.SetBlipScale = function (blip, scale) {
  return Citizen.invokeNative('0xd38744167b2fa257', blip, _fv(scale));
};

/**
   * SET_BLIP_SPRITE
   *
   * @param {number} blip
   * @param {number} hash
   * @param {boolean} p2
   * @return {void}
   */
global.SetBlipSprite = function (blip, hash, p2) {
  return Citizen.invokeNative('0x74f74d3207ed525c', blip, _ch(hash), p2);
};

/**
   * SET_GPS_CUSTOM_ROUTE_RENDER
   *
   * @param {boolean} p0
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.SetGpsCustomRouteRender = function (p0, p1, p2) {
  return Citizen.invokeNative('0xf6cef599fc470b33', p0, p1, p2);
};

/**
   * SET_GPS_FLAGS
   * https://alloc8or.re/rdr3/doc/enums/rage__eGpsFlags.txt
   *
   * @param {number} p0
   * @param {number} p1
   * @return {void}
   */
global.SetGpsFlags = function (p0, p1) {
  return Citizen.invokeNative('0x5de61c90ddecfa2d', p0, _fv(p1));
};

/**
   * SET_GPS_MULTI_ROUTE_RENDER
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetGpsMultiRouteRender = function (toggle) {
  return Citizen.invokeNative('0x4426d65e029a4dc0', toggle);
};

/**
   * SET_MINIMAP_FOW_REVEAL_COORDINATE
   * Up to eight coordinates may be revealed per frame
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p3
   * @return {void}
   */
global.SetMinimapFowRevealCoordinate = function (x, y, z, p3) {
  return Citizen.invokeNative('0x73348402566ecb6e', _fv(x), _fv(y), _fv(z), _ch(p3));
};

/**
   * SET_MINIMAP_FOW_REVEAL_VOLUME
   *
   * @param {number} volume
   * @param {number} p1
   * @return {void}
   */
global.SetMinimapFowRevealVolume = function (volume, p1) {
  return Citizen.invokeNative('0x63cbbd6ca6f321f9', volume, _ch(p1));
};

/**
   * SET_MINIMAP_HIDE_FOW
   * Reveals the entire minimap (FOW = Fog of War)
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetMinimapHideFow = function (toggle) {
  return Citizen.invokeNative('0x4b8f743a4a6d2ff8', toggle);
};

/**
   * SET_RADAR_AS_EXTERIOR_THIS_FRAME
   *
  
   * @return {void}
   */
global.SetRadarAsExteriorThisFrame = function () {
  return Citizen.invokeNative('0xa8ebbae986fb5457');
};

/**
   * SET_RADAR_ZOOM
   *
   * @param {number} zoomLevel
   * @return {void}
   */
global.SetRadarZoom = function (zoomLevel) {
  return Citizen.invokeNative('0xcaf6489da2c8dd9e', zoomLevel);
};

/**
   * SET_WAYPOINT_OFF
   *
  
   * @return {void}
   */
global.SetWaypointOff = function () {
  return Citizen.invokeNative('0xfa8c41e8020d3439');
};

/**
   * START_GPS_MULTI_ROUTE
   *
   * @param {number} colorNameHash
   * @param {boolean} onFoot
   * @param {boolean} inVehicle
   * @return {void}
   */
global.StartGpsMultiRoute = function (colorNameHash, onFoot, inVehicle) {
  return Citizen.invokeNative('0x3d3d15af7bcaaf83', _ch(colorNameHash), onFoot, inVehicle);
};

/**
   * TRIGGER_SONAR_BLIP
   *
   * @param {number} typeHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.TriggerSonarBlip = function (typeHash, x, y, z) {
  return Citizen.invokeNative('0x72dd432f3cdfc0ee', _ch(typeHash), _fv(x), _fv(y), _fv(z));
};

/**
   * UNLOCK_MINIMAP_ANGLE
   *
  
   * @return {void}
   */
global.UnlockMinimapAngle = function () {
  return Citizen.invokeNative('0x5373de8e179bc2a0');
};

/**
   * _CLEAR_BLIP
   * Clear blip data. It must be used before RemoveBlip I'm pretty sure that blips are handled internally with databinding. This function should then allow you to clear blip container and therefore free up memory?.
   *
   * @param {number} blipid
   * @return {any}
   */
global.ClearBlip = function (blipid) {
  return Citizen.invokeNative('0x01b928ca2e198b01', blipid, _r);
};

/**
   * _SET_BLIP_ICON_ON_ENTITY_ACTIVE_PROMPT
   * It adds blip a icon to active prompts like from scenarios or pickups without the need to use lockon
   *
   * @param {number} entity
   * @param {number} blipIcon
   * @return {void}
   */
global.SetBlipIconOnEntityActivePrompt = function (entity, blipIcon) {
  return Citizen.invokeNative('0x1726963e6049db53', entity, _ch(blipIcon));
};

/**
   * _BLIP_DETACH_FROM_ENTITY
   * Not official native name
   * Removes the blip from an entity and makes it static on the map, try it on GetMainPlayerBlipId() for a demonstration
   *
   * @param {number} blip
   * @return {void}
   */
global.BlipDetachFromEntity = function (blip) {
  return Citizen.invokeNative('0x250c75eb1728cc0d', blip);
};

/**
   * _IS_BLIP_ICON_ON_LOCKON_ENTITY_PROMPT
   * checks if the entity lockon prompt contains an icon
   *
   * @param {number} entity
   * @param {number} blipId
   * @return {boolean}
   */
global.IsBlipIconOnLockonEntityPrompt = function (entity, blipId) {
  return Citizen.invokeNative('0x3cb8859f04763c78', entity, blipId, _r);
};

/**
   * _CLEAR_BLIP_ICON_FROM_LOCKON_ENTITY_PROMPT
   * will remove the blip icon from the entity lockon prompt, use 0 for p1
   *
   * @param {number} entity
   * @param {number} p1
   * @return {void}
   */
global.ClearBlipIconFromLockonEntityPrompt = function (entity, p1) {
  return Citizen.invokeNative('0x44813684f72b563c', entity, p1);
};

/**
   * _SET_BLIP_ICON_TO_LOCKON_ENTITY_PROMPT
   * will add a blip icon to the entity lockon prompt that you specify
   *
   * @param {number} entity
   * @param {number} blipIcon
   * @return {void}
   */
global.SetBlipIconToLockonEntityPrompt = function (entity, blipIcon) {
  return Citizen.invokeNative('0x7563cbca99253d1a', entity, _ch(blipIcon));
};

/**
   * _CLEAR_PAUSEMAP_COORDS
   * Clears the previously set coordinates for the pause map view, removing any specified focal point and radius that were set using `SetPausemapCoordsWithRadius - 0xE0884C184728C75B`
   *
  
   * @return {void}
   */
global.ClearPausemapCoords = function () {
  return Citizen.invokeNative('0x7c9f4cdf402ca82a');
};

/**
   * _SET_ENTITY_BLIP_ICON_TO_LOCKON_ENTITY_PROMPT
   * adds the entity blip icon to the entity lockon prompt if wrong param will remove the icon if had any
   *
   * @param {number} entity
   * @param {number} blipId
   * @return {void}
   */
global.SetEntityBlipIconToLockonEntityPrompt = function (entity, blipId) {
  return Citizen.invokeNative('0x97f6f158cc5b5ca2', entity, blipId);
};

/**
   * _REMOVE_BLIP_ICON_FROM_ENTITY_LOCKON_PROMPT
   * 
   * in the decompiles this doesnt seem to ever be executed the param needed needs to be above 0 but its always passed as 0
   *  removes the icon from lockon prompt
   *
   * @param {number} entity
   * @param {number} p1
   * @return {void}
   */
global.RemoveBlipIconFromEntityLockonPrompt = function (entity, p1) {
  return Citizen.invokeNative('0xbb68d4d3ca3de402', entity, p1);
};

/**
   * _0xD3F58E9316B7FC2A
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xD3F58E9316B7FC2A = function (p0) {
  return Citizen.invokeNative('0xd3f58e9316b7fc2a', p0);
};

/**
   * _GET_WAYPOINT_POSITION
   * Unlike `GET_WAYPOINT_COORDS - 0x29B30D07C3F7873B`, which returns a single value, this native returns the x and y coordinates of the waypoint separately as floats from pointer. To retrieve each coordinate, `Citizen.PointerValueFloat()` must be used with this function.
   *
  
   * @return {[any, number, number]}
   */
global.GetWaypointPosition = function () {
  return Citizen.invokeNative('0xf08e42bfa46bdff8', _f, _f, _r);
};

/**
   * _IS_GPS_ROUTE_ON_ROAD
   * Checks if the GPS route to the waypoint is navigable along a road. If a route exists but there is no valid road path, this function returns false.
   *
  
   * @return {boolean}
   */
global.IsGpsRouteOnRoad = function () {
  return Citizen.invokeNative('0xf47a1eb2a538a3a3', _r);
};

/**
   * _ABANDON_BLIP
   * It's unclear what exactly this does, but I assume it marks the blip as "no longer needed"
   *
   * @param {number} blip
   * @return {void}
   */
global.AbandonBlip = function (blip) {
  return Citizen.invokeNative('0xdeede7c41742e011', blip);
};

/**
   * _ADD_PROP_TO_MINIMAP
   * list of minimap props: https://github.com/femga/rdr3_discoveries/tree/master/graphics/minimap/minimapObjects
   * variations parameter are the interior locations you see on the map like these bellow
   * variation 0 https://i.imgur.com/jkLhn3Z.png
   * variation 2  https://i.imgur.com/eKV0Tcm.png
   * variation 4 https://i.imgur.com/rjwOgEH.png
   * there are more and you can find them in the decompiles
   *
   * @param {number} minimapProp
   * @param {number} x
   * @param {number} y
   * @param {number} rotation
   * @param {number} variation
   * @return {void}
   */
global.AddPropToMinimap = function (minimapProp, x, y, rotation, variation) {
  return Citizen.invokeNative('0x1392105da88bbffb', _ch(minimapProp), _fv(x), _fv(y), _fv(rotation), variation);
};

/**
   * _BLIP_ADD_FOR_AREA
   *
   * @param {number} blipHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} scaleX
   * @param {number} scaleY
   * @param {number} scaleZ
   * @param {number} p7
   * @return {number}
   */
global.BlipAddForArea = function (blipHash, x, y, z, scaleX, scaleY, scaleZ, p7) {
  return Citizen.invokeNative('0xec174adbcb611ecc', _ch(blipHash), _fv(x), _fv(y), _fv(z), _fv(scaleX), _fv(scaleY), _fv(scaleZ), p7, _r, _ri);
};

/**
   * _BLIP_ADD_FOR_STYLE
   *
   * @param {number} styleHash
   * @return {number}
   */
global.BlipAddForStyle = function (styleHash) {
  return Citizen.invokeNative('0x3e593df9c2962ec6', _ch(styleHash), _r, _ri);
};

/**
   * _BLIP_ADD_FOR_VOLUME
   *
   * @param {number} blipHash
   * @param {number} volume
   * @return {number}
   */
global.BlipAddForVolume = function (blipHash, volume) {
  return Citizen.invokeNative('0xa6ef0c54a3443e70', _ch(blipHash), volume, _r, _ri);
};

/**
   * _BLIP_ADD_STYLE
   *
   * @param {number} blip
   * @param {number} styleHash
   * @return {boolean}
   */
global.BlipAddStyle = function (blip, styleHash) {
  return Citizen.invokeNative('0xbd62d98799a3daf0', blip, _ch(styleHash), _r);
};

/**
   * _BLIP_SET_STYLE
   * https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/blip_styles
   * Removes any existing modifiers and sets the style.
   *
   * @param {number} blip
   * @param {number} styleHash
   * @return {boolean}
   */
global.BlipSetStyle = function (blip, styleHash) {
  return Citizen.invokeNative('0xedd964b7984ac291', blip, _ch(styleHash), _r);
};

/**
   * _DOES_ENTITY_HAVE_BLIP
   *
   * @param {number} entity
   * @return {boolean}
   */
global.DoesEntityHaveBlip = function (entity) {
  return Citizen.invokeNative('0x9fa00e2fc134a9d0', entity, _r);
};

/**
   * _FIND_CLOSEST_GPS_POSITION
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {[boolean, Vector3]}
   */
global.FindClosestGpsPosition = function (x, y, z) {
  return Citizen.invokeNative('0x3fda2b79aeee351c', _fv(x), _fv(y), _fv(z), _v, _r);
};

/**
   * _GET_WAYPOINT_COORDS
   *
  
   * @return {Vector3}
   */
global.GetWaypointCoords = function () {
  return Citizen.invokeNative('0x29b30d07c3f7873b', _r, _rv);
};

/**
   * _HIDE_ACTIVE_POINTS_OF_INTEREST
   *
  
   * @return {void}
   */
global.HideActivePointsOfInterest = function () {
  return Citizen.invokeNative('0xa1b4052c2a3dcc1e');
};

/**
   * _IS_BLIP_ATTACHED_TO_ANY_ENTITY
   *
   * @param {number} blip
   * @return {boolean}
   */
global.IsBlipAttachedToAnyEntity = function (blip) {
  return Citizen.invokeNative('0xe9f676788f8d5e1e', blip, _r);
};

/**
   * _MAP_DISABLE_REGION_BLIP
   *
   * @param {number} regionHash
   * @return {void}
   */
global.MapDisableRegionBlip = function (regionHash) {
  return Citizen.invokeNative('0x6786d7afac3162b3', _ch(regionHash));
};

/**
   * _MAP_DISCOVERY_SET_ENABLED
   *
   * @param {number} discoveryHash
   * @return {void}
   */
global.MapDiscoverySetEnabled = function (discoveryHash) {
  return Citizen.invokeNative('0xda98246c7a3c2189', _ch(discoveryHash));
};

/**
   * _MAP_DISCOVER_REGION
   *
   * @param {number} discoveryHash
   * @return {void}
   */
global.MapDiscoverRegion = function (discoveryHash) {
  return Citizen.invokeNative('0xd8c7162ab2e2af45', _ch(discoveryHash));
};

/**
   * _MAP_ENABLE_REGION_BLIP
   * regionHash: https://github.com/femga/rdr3_discoveries/tree/master/graphics/minimap/wanted_regions
   *
   * @param {number} regionHash
   * @param {number} styleHash
   * @return {void}
   */
global.MapEnableRegionBlip = function (regionHash, styleHash) {
  return Citizen.invokeNative('0x563fcb6620523917', _ch(regionHash), _ch(styleHash));
};

/**
   * _MAP_IS_DISCOVERY_ACTIVE
   *
   * @param {number} discoveryHash
   * @return {boolean}
   */
global.MapIsDiscoveryActive = function (discoveryHash) {
  return Citizen.invokeNative('0x3f81ea4275d39d6f', _ch(discoveryHash), _r);
};

/**
   * _MAP_IS_REGION_HIGHLIGHTED_WITH_STYLE
   *
   * @param {number} regionHash
   * @param {number} styleHash
   * @return {boolean}
   */
global.MapIsRegionHighlightedWithStyle = function (regionHash, styleHash) {
  return Citizen.invokeNative('0xe38450dbcbc70e3d', _ch(regionHash), _ch(styleHash), _r);
};

/**
   * _REMOVE_PROP_FROM_MINIMAP
   *
   * @param {number} minimapProp
   * @return {void}
   */
global.RemovePropFromMinimap = function (minimapProp) {
  return Citizen.invokeNative('0xe057fea9a22eb3ee', _ch(minimapProp));
};

/**
   * _REVEAL_MINIMAP_FOW
   *
   * @param {number} hash
   * @return {void}
   */
global.RevealMinimapFow = function (hash) {
  return Citizen.invokeNative('0xf8096df9b87246e3', _ch(hash));
};

/**
   * _SET_BLIP_NAME
   *
   * @param {number} blip
   * @param {string | number} name
   * @return {void}
   */
global.SetBlipName = function (blip, name) {
  return Citizen.invokeNative('0x9cb1a1623062f402', blip, name);
};

/**
   * _SET_FOW_UPDATE_PLAYER_OVERRIDE
   * Used for GUARMA MODE; Enabled: toggle = false, 0; Disabled: toggle = true, 0
   * Hash p1 seems to be unused, always 0
   *
   * @param {boolean} toggle
   * @param {number} p1
   * @return {void}
   */
global.SetFowUpdatePlayerOverride = function (toggle, p1) {
  return Citizen.invokeNative('0x63e7279d04160477', toggle, _ch(p1));
};

/**
   * _SET_MINIMAP_FOW_OVERRIDE_REVEAL_SCALE
   *
   * @param {number} scale
   * @param {number} p1
   * @return {void}
   */
global.SetMinimapFowOverrideRevealScale = function (scale, p1) {
  return Citizen.invokeNative('0xe5a7f70b7c0f3271', _fv(scale), _ch(p1));
};

/**
   * _SET_MINIMAP_FOW_SHOULD_UPDATE
   *
   * @param {boolean} toggle
   * @param {number} p1
   * @return {void}
   */
global.SetMinimapFowShouldUpdate = function (toggle, p1) {
  return Citizen.invokeNative('0x632aa10bf7ea53d3', toggle, _ch(p1));
};

/**
   * _SET_MINIMAP_ZONE
   * hash can be the hash of "guarma" or "world".
   *
   * @param {number} zone
   * @return {void}
   */
global.SetMinimapZone = function (zone) {
  return Citizen.invokeNative('0xa657ec9dbc6cc900', _ch(zone));
};

/**
   * _SET_PAUSEMAP_COORDS_WITH_RADIUS
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @return {void}
   */
global.SetPausemapCoordsWithRadius = function (x, y, z, radius) {
  return Citizen.invokeNative('0xe0884c184728c75b', _fv(x), _fv(y), _fv(z), _fv(radius));
};

/**
   * _SET_RADAR_CONFIG_TYPE
   * https://github.com/femga/rdr3_discoveries/blob/master/graphics/minimap/radar/radar_configs.lua
   * configHash: -1943724816, 347777538, -117986897, -789269373, -547506804, -1986542417, 2080113112
   * p1: usually 898171178 or 0 in R* scripts (doesn't seems to have any effect)
   *
   * @param {number} configHash
   * @param {number} p1
   * @return {void}
   */
global.SetRadarConfigType = function (configHash, p1) {
  return Citizen.invokeNative('0x9c113883487fd53c', _ch(configHash), _ch(p1));
};

/**
   * _SHOW_ACTIVE_POINTS_OF_INTEREST
   *
  
   * @return {void}
   */
global.ShowActivePointsOfInterest = function () {
  return Citizen.invokeNative('0x3fbb838aea30c1d8');
};

/**
   * _START_GPS_CUSTOM_ROUTE_FROM_WAYPOINT_RECORDING_ROUTE
   *
   * @param {string | number} waypointRecording
   * @param {number} point
   * @param {number} numPoints
   * @param {number} colorNameHash
   * @param {boolean} p4
   * @param {boolean} p5
   * @return {void}
   */
global.StartGpsCustomRouteFromWaypointRecordingRoute = function (waypointRecording, point, numPoints, colorNameHash, p4, p5) {
  return Citizen.invokeNative('0x6b44f13d888f770d', waypointRecording, point, numPoints, _ch(colorNameHash), p4, p5);
};

/**
   * _TRIGGER_SONAR_BLIP_ON_ENTITY
   *
   * @param {number} typeHash
   * @param {number} entity
   * @return {void}
   */
global.TriggerSonarBlipOnEntity = function (typeHash, entity) {
  return Citizen.invokeNative('0x0c7a2289a5c4d7c9', _ch(typeHash), entity);
};

/**
   * _0x012027C28F421F46
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x012027C28F421F46 = function (p0, p1) {
  return Citizen.invokeNative('0x012027c28f421f46', p0, p1, _r);
};

/**
   * _0x0876326238914A3F
   *
  
   * @return {void}
   */
global.N_0x0876326238914A3F = function () {
  return Citizen.invokeNative('0x0876326238914a3f');
};

/**
   * _0x10342CC82E8356E9
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x10342CC82E8356E9 = function (p0, p1) {
  return Citizen.invokeNative('0x10342cc82e8356e9', p0, p1, _r);
};

/**
   * _0x15E90B6A993017AA
   *
  
   * @return {any}
   */
global.N_0x15E90B6A993017AA = function () {
  return Citizen.invokeNative('0x15e90b6a993017aa', _r);
};

/**
   * _0x18A0D48DF9211C07
   *
  
   * @return {void}
   */
global.N_0x18A0D48DF9211C07 = function () {
  return Citizen.invokeNative('0x18a0d48df9211c07');
};

/**
   * _0x32A7C216344D623B
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0x32A7C216344D623B = function (p0, p1, p2) {
  return Citizen.invokeNative('0x32a7c216344d623b', p0, p1, p2, _r);
};

/**
   * _0x39654E1F68B78287
   *
  
   * @return {any}
   */
global.N_0x39654E1F68B78287 = function () {
  return Citizen.invokeNative('0x39654e1f68b78287', _r);
};

/**
   * _0x398066F893149856
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0x398066F893149856 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x398066f893149856', p0, p1, p2, _r);
};

/**
   * _0x3AE451860F03CA8A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x3AE451860F03CA8A = function (p0, p1) {
  return Citizen.invokeNative('0x3ae451860f03ca8a', p0, p1, _r);
};

/**
   * _0x3B31732FADE5BAF3
   *
  
   * @return {any}
   */
global.N_0x3B31732FADE5BAF3 = function () {
  return Citizen.invokeNative('0x3b31732fade5baf3', _r);
};

/**
   * _0x3DF7EE3A76185108
   *
  
   * @return {void}
   */
global.N_0x3DF7EE3A76185108 = function () {
  return Citizen.invokeNative('0x3df7ee3a76185108');
};

/**
   * _0x3EECAADAB0D9FE29
   *
  
   * @return {any}
   */
global.N_0x3EECAADAB0D9FE29 = function () {
  return Citizen.invokeNative('0x3eecaadab0d9fe29', _r);
};

/**
   * _0x3F4FD4BED07AB8C4
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x3F4FD4BED07AB8C4 = function (p0) {
  return Citizen.invokeNative('0x3f4fd4bed07ab8c4', p0, _r);
};

/**
   * _0x3FFE60DD8A936551
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x3FFE60DD8A936551 = function (p0, p1) {
  return Citizen.invokeNative('0x3ffe60dd8a936551', p0, p1, _r);
};

/**
   * _0x455ECCA0715C507F
   *
  
   * @return {void}
   */
global.N_0x455ECCA0715C507F = function () {
  return Citizen.invokeNative('0x455ecca0715c507f');
};

/**
   * _0x578907F59BA01B6D
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x578907F59BA01B6D = function (p0) {
  return Citizen.invokeNative('0x578907f59ba01b6d', p0, _r);
};

/**
   * _0x580F34C726387226
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x580F34C726387226 = function (p0, p1) {
  return Citizen.invokeNative('0x580f34c726387226', p0, p1, _r);
};

/**
   * _0x58521E6DCDE97D74
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x58521E6DCDE97D74 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x58521e6dcde97d74', p0, p1, p2);
};

/**
   * _0x644439B5387EE57E
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x644439B5387EE57E = function (p0, p1) {
  return Citizen.invokeNative('0x644439b5387ee57e', p0, p1, _r);
};

/**
   * _0x6480723D3BE535B6
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x6480723D3BE535B6 = function (p0) {
  return Citizen.invokeNative('0x6480723d3be535b6', p0);
};

/**
   * _0x910B088E51A511AC
   *
  
   * @return {any}
   */
global.N_0x910B088E51A511AC = function () {
  return Citizen.invokeNative('0x910b088e51a511ac', _r);
};

/**
   * _0x9DD95B405AB4983E
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x9DD95B405AB4983E = function (p0, p1) {
  return Citizen.invokeNative('0x9dd95b405ab4983e', p0, p1, _r);
};

/**
   * _0xA2DB3C6270C122E3
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xA2DB3C6270C122E3 = function (p0, p1) {
  return Citizen.invokeNative('0xa2db3c6270c122e3', p0, p1, _r);
};

/**
   * _0xBEA7D3CB47E1479C
   *
  
   * @return {any}
   */
global.N_0xBEA7D3CB47E1479C = function () {
  return Citizen.invokeNative('0xbea7d3cb47e1479c', _r);
};

/**
   * _0xD39D32EB3B52DD83
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xD39D32EB3B52DD83 = function (p0) {
  return Citizen.invokeNative('0xd39d32eb3b52dd83', p0, _r);
};

/**
   * _0xDF728C5AE137FC14
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0xDF728C5AE137FC14 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xdf728c5ae137fc14', p0, p1, p2, _r);
};

/**
   * _0xE1F365C4C8F259D8
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0xE1F365C4C8F259D8 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xe1f365c4c8f259d8', p0, p1, p2, _r);
};

/**
   * _0xE53A308AC35877A8
   *
  
   * @return {any}
   */
global.N_0xE53A308AC35877A8 = function () {
  return Citizen.invokeNative('0xe53a308ac35877a8', _r);
};

/**
   * _0xEC819D612038EF4B
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @return {any}
   */
global.N_0xEC819D612038EF4B = function (p0, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0xec819d612038ef4b', p0, p1, p2, p3, p4, p5, p6, p7, _r);
};

/**
   * _0xF6DE98516FD3AC9B
   *
  
   * @return {void}
   */
global.N_0xF6DE98516FD3AC9B = function () {
  return Citizen.invokeNative('0xf6de98516fd3ac9b');
};

/**
   * _DOMINOES_BUY_IN
   * Hardcoded to return zero/false.
   *
   * @param {any} p0
   * @return {any}
   */
global.DominoesBuyIn = function (p0) {
  return Citizen.invokeNative('0x399e6cd12fc8ca89', p0, _r);
};

/**
   * _DOMINOES_PLACE_DOMINO
   * Hardcoded to return zero/false.
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.DominoesPlaceDomino = function (p0, p1) {
  return Citizen.invokeNative('0xb79a29b33bf29ba5', p0, p1, _r);
};

/**
   * _DOMINOES_REQUEST_VALID_PLACEMENTS
   * Hardcoded to return zero/false.
   *
   * @param {any} p0
   * @return {any}
   */
global.DominoesRequestValidPlacements = function (p0) {
  return Citizen.invokeNative('0xe26aee7e67d9e21d', p0, _r);
};

/**
   * _MINIGAME_GET_NEXT_EVENT
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.MinigameGetNextEvent = function (p0, p1) {
  return Citizen.invokeNative('0xdf728c5ae137fc13', p0, p1, _r);
};

/**
   * _MINIGAME_GET_NEXT_EVENT_TYPE
   *
  
   * @return {any}
   */
global.MinigameGetNextEventType = function () {
  return Citizen.invokeNative('0x578907f59ba01b6c', _r);
};

/**
   * _MINIGAME_IS_CONNECTED_TO_SERVER
   *
   * @param {any} p0
   * @return {any}
   */
global.MinigameIsConnectedToServer = function (p0) {
  return Citizen.invokeNative('0x2a0c4736ac5af0ce', p0, _r);
};

/**
   * _MINIGAME_IS_REQUEST_PENDING
   *
   * @param {any} p0
   * @return {any}
   */
global.MinigameIsRequestPending = function (p0) {
  return Citizen.invokeNative('0x9105a4a2556fa937', p0, _r);
};

/**
   * _MINIGAME_IS_SEAT_OCCUPIED
   *
   * @param {any} p0
   * @return {boolean}
   */
global.MinigameIsSeatOccupied = function (p0) {
  return Citizen.invokeNative('0x8593a8cb0ed2c3b4', p0, _r);
};

/**
   * _MINIGAME_LEAVE_TABLE
   *
   * @param {any} p0
   * @return {any}
   */
global.MinigameLeaveTable = function (p0) {
  return Citizen.invokeNative('0xf5446e47941e654c', p0, _r);
};

/**
   * _MINIGAME_POP_NEXT_EVENT
   *
  
   * @return {void}
   */
global.MinigamePopNextEvent = function () {
  return Citizen.invokeNative('0x833e03baebadc4b0');
};

/**
   * _MINIGAME_REQUEST_SEAT_AT_TABLE
   *
   * @param {DataView} data
   * @return {boolean}
   */
global.MinigameRequestSeatAtTable = function (data) {
  return Citizen.invokeNative('0xf6ac6085d8d6c004', data, _r);
};

/**
   * _POKER_BUY_IN
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.PokerBuyIn = function (p0, p1) {
  return Citizen.invokeNative('0xb4d610ea5a1fde74', p0, p1, _r);
};

/**
   * _POKER_CALL
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.PokerCall = function (p0, p1) {
  return Citizen.invokeNative('0x8ded681b161ebd78', p0, p1, _r);
};

/**
   * _POKER_CHECK
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.PokerCheck = function (p0, p1) {
  return Citizen.invokeNative('0x49a045628d9b1b86', p0, p1, _r);
};

/**
   * _POKER_FOLD
   *
   * @param {any} p0
   * @return {any}
   */
global.PokerFold = function (p0) {
  return Citizen.invokeNative('0x3dfab7d9bb45b5be', p0, _r);
};

/**
   * _POKER_GET_GAME_SETTINGS_FOR_ID
   *
   * @param {any} p0
   * @return {any}
   */
global.PokerGetGameSettingsForId = function (p0) {
  return Citizen.invokeNative('0x2d20e12e1990d584', p0, _r);
};

/**
   * _POKER_RAISE
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.PokerRaise = function (p0, p1) {
  return Citizen.invokeNative('0xeccf45a79a17bb96', p0, p1, _r);
};

/**
   * _POKER_REVEAL
   *
   * @param {any} p0
   * @return {any}
   */
global.PokerReveal = function (p0) {
  return Citizen.invokeNative('0x2f2131db0a8b02dc', p0, _r);
};

/**
   * ABSF
   *
   * @param {number} value
   * @return {number}
   */
global.Absf = function (value) {
  return Citizen.invokeNative('0x134549b388167cbf', _fv(value), _r, _rf);
};

/**
   * ABSI
   *
   * @param {number} value
   * @return {number}
   */
global.Absi = function (value) {
  return Citizen.invokeNative('0x0c214d5b8a38c828', value, _r, _ri);
};

/**
   * ACOS
   *
   * @param {number} p0
   * @return {number}
   */
global.Acos = function (p0) {
  return Citizen.invokeNative('0x586690f0176dc575', _fv(p0), _r, _rf);
};

/**
   * ACTION_MANAGER_ENABLE_ACTION
   * Appears to remove stealth kill action from memory (?)
   *
   * @param {number} hash
   * @param {boolean} enable
   * @return {void}
   */
global.ActionManagerEnableAction = function (hash, enable) {
  return Citizen.invokeNative('0x7acf124c12a2b045', _ch(hash), enable);
};

/**
   * ACTION_MANAGER_IS_ACTION_ENABLED
   *
   * @param {number} hash
   * @return {boolean}
   */
global.ActionManagerIsActionEnabled = function (hash) {
  return Citizen.invokeNative('0xfd0759658268fd8e', _ch(hash), _r);
};

/**
   * ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE
   * nullsub, doesn't do anything
   *
   * @param {string | number} p0
   * @param {string | number} p1
   * @return {void}
   */
global.ActivityFeedActionStartWithCommandLine = function (p0, p1) {
  return Citizen.invokeNative('0x91d657230bc208d2', _ts(p0), _ts(p1));
};

/**
   * ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD
   * nullsub, doesn't do anything
   *
   * @param {string | number} p0
   * @return {void}
   */
global.ActivityFeedActionStartWithCommandLineAdd = function (p0) {
  return Citizen.invokeNative('0x1694a053dfb61a34', _ts(p0));
};

/**
   * ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION
   * nullsub, doesn't do anything
   *
   * @param {string | number} p0
   * @return {void}
   */
global.ActivityFeedAddSubstringToCaption = function (p0) {
  return Citizen.invokeNative('0x9935f76407c32539', _ts(p0));
};

/**
   * ACTIVITY_FEED_CREATE
   * nullsub, doesn't do anything
   *
   * @param {string | number} p0
   * @param {string | number} p1
   * @return {void}
   */
global.ActivityFeedCreate = function (p0, p1) {
  return Citizen.invokeNative('0xcc7fc854b956a128', p0, p1);
};

/**
   * ACTIVITY_FEED_POST
   * nullsub, doesn't do anything
   *
  
   * @return {void}
   */
global.ActivityFeedPost = function () {
  return Citizen.invokeNative('0xb16fc7b364d86585');
};

/**
   * ADD_POP_MULTIPLIER_AREA
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {number} pedDensity
   * @param {number} trafficDensity
   * @param {boolean} p8
   * @param {boolean} p9
   * @return {number}
   */
global.AddPopMultiplierArea = function (x1, y1, z1, x2, y2, z2, pedDensity, trafficDensity, p8, p9) {
  return Citizen.invokeNative('0x5ebda1a3b8cb5ef7', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(pedDensity), _fv(trafficDensity), p8, p9, _r, _ri);
};

/**
   * ADD_TACTICAL_NAV_MESH_POINT
   * Params: p3 is 0 in R* Script utopia2
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p3
   * @return {void}
   */
global.AddTacticalNavMeshPoint = function (x, y, z, p3) {
  return Citizen.invokeNative('0xe4ee55e63fa9af45', _fv(x), _fv(y), _fv(z), p3);
};

/**
   * ARE_STRINGS_EQUAL
   *
   * @param {string | number} string1
   * @param {string | number} string2
   * @return {boolean}
   */
global.AreStringsEqual = function (string1, string2) {
  return Citizen.invokeNative('0xd3852f22ab713a1f', string1, string2, _r);
};

/**
   * ASIN
   *
   * @param {number} p0
   * @return {number}
   */
global.Asin = function (p0) {
  return Citizen.invokeNative('0x6e3c15d296c15583', _fv(p0), _r, _rf);
};

/**
   * ATAN
   *
   * @param {number} p0
   * @return {number}
   */
global.Atan = function (p0) {
  return Citizen.invokeNative('0x503054ded0b78027', _fv(p0), _r, _rf);
};

/**
   * ATAN2
   *
   * @param {number} p0
   * @param {number} p1
   * @return {number}
   */
global.Atan2 = function (p0, p1) {
  return Citizen.invokeNative('0x965b220a066e3f07', _fv(p0), _fv(p1), _r, _rf);
};

/**
   * BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION
   * dispatchService: see ENABLE_DISPATCH_SERVICE
   *
   * @param {number} dispatchService
   * @param {boolean} toggle
   * @return {void}
   */
global.BlockDispatchServiceResourceCreation = function (dispatchService, toggle) {
  return Citizen.invokeNative('0x66947e61a44de2c6', dispatchService, toggle);
};

/**
   * CANCEL_ONSCREEN_KEYBOARD
   * Old name: _CANCEL_ONSCREEN_KEYBOARD
   *
  
   * @return {void}
   */
global.CancelOnscreenKeyboard = function () {
  return Citizen.invokeNative('0x58a39be597ce99cd');
};

/**
   * CLEAR_ANGLED_AREA_OF_VEHICLES
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.ClearAngledAreaOfVehicles = function (p0, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0xa4d83115c1e02f8a', p0, p1, p2, p3, p4, p5, p6, p7);
};

/**
   * CLEAR_AREA
   * Possible flag names:
   * ALL_BASE = 0,
   * PROJECTILES = 1,
   * BROADCAST = 524288,
   * AMBIENT_POPULATION = 1048576
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} flag
   * @return {void}
   */
global.ClearArea = function (x, y, z, radius, flag) {
  return Citizen.invokeNative('0x3b882a96ea77d5b1', _fv(x), _fv(y), _fv(z), _fv(radius), flag);
};

/**
   * CLEAR_BIT
   *
   * @param {number} offset
   * @return {number}
   */
global.ClearBit = function (offset) {
  return Citizen.invokeNative('0x7d1d4a3602b6ad4e', _i, offset);
};

/**
   * CLEAR_OVERRIDE_WEATHER
   *
  
   * @return {void}
   */
global.ClearOverrideWeather = function () {
  return Citizen.invokeNative('0x80a398f16ffe3cc3');
};

/**
   * CLEAR_TACTICAL_NAV_MESH_POINTS
   *
  
   * @return {void}
   */
global.ClearTacticalNavMeshPoints = function () {
  return Citizen.invokeNative('0xd93b6516c6878267');
};

/**
   * CLEAR_WEATHER_TYPE_PERSIST
   *
  
   * @return {void}
   */
global.ClearWeatherTypePersist = function () {
  return Citizen.invokeNative('0xd85dfe5c131e4ae9');
};

/**
   * COMPARE_STRINGS
   *
   * @param {string | number} str1
   * @param {string | number} str2
   * @param {boolean} matchCase
   * @param {number} maxLength
   * @return {number}
   */
global.CompareStrings = function (str1, str2, matchCase, maxLength) {
  return Citizen.invokeNative('0xbfbb74a15efc149b', str1, str2, matchCase, maxLength, _r, _ri);
};

/**
   * COPY_SCRIPT_STRUCT
   * Old name: _COPY_MEMORY
   *
   * @param {DataView} dst
   * @param {DataView} src
   * @param {number} size
   * @return {void}
   */
global.CopyScriptStruct = function (dst, src, size) {
  return Citizen.invokeNative('0xf7ac7dc0dee7c9be', dst, src, size);
};

/**
   * CREATE_INCIDENT
   * dispatchService: see ENABLE_DISPATCH_SERVICE
   *
   * @param {number} dispatchService
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} numUnits
   * @param {number} radius
   * @param {any} p7
   * @param {any} p8
   * @return {[boolean, number]}
   */
global.CreateIncident = function (dispatchService, x, y, z, numUnits, radius, p7, p8) {
  return Citizen.invokeNative('0x3f892caf67444ae7', dispatchService, _fv(x), _fv(y), _fv(z), numUnits, _fv(radius), _i, p7, p8, _r);
};

/**
   * DELETE_INCIDENT
   * Delete an incident with a given id.
   *
   * @param {number} incidentId
   * @return {void}
   */
global.DeleteIncident = function (incidentId) {
  return Citizen.invokeNative('0x5cfd0f0d6aae0aee', incidentId);
};

/**
   * DISABLE_LOOTING_COMPOSITE_LOOTABLE_THIS_FRAME
   * disables prompt eat 
   *
   * @param {number} compositeId
   * @param {boolean} disable
   * @return {void}
   */
global.DisableLootingCompositeLootableThisFrame = function (compositeId, disable) {
  return Citizen.invokeNative('0x40d72189f46d2e15', compositeId, disable);
};

/**
   * DISPLAY_ONSCREEN_KEYBOARD
   * enum eOnscreenKeyboardTextType
   * {
   *   KTEXTTYPE_INVALID = -1,
   *   KTEXTTYPE_DEFAULT,
   *   KTEXTTYPE_EMAIL,
   *   KTEXTTYPE_PASSWORD,
   *   KTEXTTYPE_NUMERIC,
   *   KTEXTTYPE_ALPHABET,
   *   KTEXTTYPE_GAMERTAG,
   *   KTEXTTYPE_FILENAME,
   *   KTEXTTYPE_COUNT
   * };
   *
   * @param {number} textType
   * @param {string | number} windowTitle
   * @param {string | number} p2
   * @param {string | number} defaultText
   * @param {string | number} defaultConcat1
   * @param {string | number} defaultConcat2
   * @param {string | number} defaultConcat3
   * @param {number} maxInputLength
   * @return {void}
   */
global.DisplayOnscreenKeyboard = function (textType, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength) {
  return Citizen.invokeNative('0x044131118d8db3cd', textType, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength);
};

/**
   * DOES_POP_MULTIPLIER_AREA_EXIST
   *
   * @param {number} id
   * @return {boolean}
   */
global.DoesPopMultiplierAreaExist = function (id) {
  return Citizen.invokeNative('0x03ba619c81a646b3', id, _r);
};

/**
   * ENABLE_DISPATCH_SERVICE
   * enum DispatchType
   * {
   *   DT_Invalid,
   *   DT_PoliceAutomobile,
   *   DT_PoliceHelicopter,
   *   DT_FireDepartment,
   *   DT_SwatAutomobile,
   *   DT_AmbulanceDepartment,
   *   DT_PoliceRiders,
   *   DT_PoliceVehicleRequest,
   *   DT_PoliceRoadBlock,
   *   DT_PoliceAutomobileWaitPulledOver,
   *   DT_PoliceAutomobileWaitCruising,
   *   DT_Gangs,
   *   DT_SwatHelicopter,
   *   DT_PoliceBoat,
   *   DT_ArmyVehicle,
   *   DT_OnFoot,
   *   DT_PoliceDogs
   * };
   *
   * @param {number} dispatchService
   * @param {boolean} toggle
   * @return {void}
   */
global.EnableDispatchService = function (dispatchService, toggle) {
  return Citizen.invokeNative('0x50e52637ef70ef77', dispatchService, toggle);
};

/**
   * FIRE_SINGLE_BULLET
   *
   * @param {DataView} args
   * @return {void}
   */
global.FireSingleBullet = function (args) {
  return Citizen.invokeNative('0xcbc9a21f6a2a679c', args);
};

/**
   * FORCE_LIGHTNING_FLASH
   * creates single lightning+thunder at random position
   *
  
   * @return {void}
   */
global.ForceLightningFlash = function () {
  return Citizen.invokeNative('0x369db5b2510fa080');
};

/**
   * GAME_FRAMEWORK_MANAGER_INIT
   *
   * @param {number} transitionMode
   * @return {boolean}
   */
global.GameFrameworkManagerInit = function (transitionMode) {
  return Citizen.invokeNative('0x4cabe596d632e4b0', _ch(transitionMode), _r);
};

/**
   * GET_ANGLE_BETWEEN_2D_VECTORS
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} x2
   * @param {number} y2
   * @return {number}
   */
global.GetAngleBetween_2DVectors = function (x1, y1, x2, y2) {
  return Citizen.invokeNative('0xd0dfe1c486097bbb', _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r, _rf);
};

/**
   * GET_BENCHMARK_ITERATIONS
   * Returns value of the '-benchmarkIterations' command line option.
   * 
   * Old name: _GET_BENCHMARK_ITERATIONS_FROM_COMMAND_LINE
   *
  
   * @return {number}
   */
global.GetBenchmarkIterations = function () {
  return Citizen.invokeNative('0x22fc52cf470cc98d', _r, _ri);
};

/**
   * GET_BENCHMARK_PASS
   * Returns value of the '-benchmarkPass' command line option.
   * 
   * Old name: _GET_BENCHMARK_PASS_FROM_COMMAND_LINE
   *
  
   * @return {number}
   */
global.GetBenchmarkPass = function () {
  return Citizen.invokeNative('0x9297dacf3a2cdff7', _r, _ri);
};

/**
   * GET_BITS_IN_RANGE
   *
   * @param {number} value
   * @param {number} rangeStart
   * @param {number} rangeEnd
   * @return {number}
   */
global.GetBitsInRange = function (value, rangeStart, rangeEnd) {
  return Citizen.invokeNative('0x68e1352af48f905d', value, rangeStart, rangeEnd, _r, _ri);
};

/**
   * GET_CLOSEST_POINT_ON_LINE
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @param {number} p8
   * @param {boolean} p9
   * @return {Vector3}
   */
global.GetClosestPointOnLine = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
  return Citizen.invokeNative('0x83acc65d9acec5ef', _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), p9, _r, _rv);
};

/**
   * GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @param {number} distance
   * @param {boolean} p4
   * @param {boolean} mustBeOwnedByThisPed
   * @return {[boolean, Vector3]}
   */
global.GetCoordsOfProjectileTypeWithinDistance = function (ped, weaponHash, distance, p4, mustBeOwnedByThisPed) {
  return Citizen.invokeNative('0xd73c960a681052df', ped, _ch(weaponHash), _fv(distance), _v, p4, mustBeOwnedByThisPed, _r);
};

/**
   * GET_CURR_WEATHER_STATE
   * Params: percentWeather2: 0f - 0.75f in R* Scripts
   * 
   * Old name: _GET_WEATHER_TYPE_TRANSITION
   *
  
   * @return {[number, number, number]}
   */
global.GetCurrWeatherState = function () {
  return Citizen.invokeNative('0x0ac679b2342f14f2', _i, _i, _f);
};

/**
   * GET_DISTANCE_BETWEEN_COORDS
   * If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.
   * 
   * Consider using this faster native instead: BUILTIN::VDIST - DVIST always takes in consideration the 3D coordinates.
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {boolean} useZ
   * @return {number}
   */
global.GetDistanceBetweenCoords = function (x1, y1, z1, x2, y2, z2, useZ) {
  return Citizen.invokeNative('0x0be7f4e3cdbafb28', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), useZ, _r, _rf);
};

/**
   * GET_FRAME_COUNT
   *
  
   * @return {number}
   */
global.GetFrameCount = function () {
  return Citizen.invokeNative('0x77dfa958fcf100c1', _r, _ri);
};

/**
   * GET_FRAME_TIME
   *
  
   * @return {number}
   */
global.GetFrameTime = function () {
  return Citizen.invokeNative('0x5e72022914ce3c38', _r, _rf);
};

/**
   * GET_GAME_TIMER
   *
  
   * @return {number}
   */
global.GetGameTimer = function () {
  return Citizen.invokeNative('0x4f67e8eca7d3f667', _r, _ri);
};

/**
   * GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {[boolean, number, Vector3]}
   */
global.GetGroundZAndNormalFor_3DCoord = function (x, y, z) {
  return Citizen.invokeNative('0x2a29ca9a6319e6ab', _fv(x), _fv(y), _fv(z), _f, _v, _r);
};

/**
   * GET_GROUND_Z_FOR_3D_COORD
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {boolean} p4
   * @return {[boolean, number]}
   */
global.GetGroundZFor_3DCoord = function (x, y, z, p4) {
  return Citizen.invokeNative('0x24fa4267bb8d2431', _fv(x), _fv(y), _fv(z), _f, p4, _r);
};

/**
   * GET_HASH_KEY
   * Computes a hash for the given string. It is hashed using Jenkins' One-at-a-Time hash algorithm (https://en.wikipedia.org/wiki/Jenkins_hash_function)
   * Note: this implementation is case-insensitive.
   *
   * @param {string | number} string
   * @return {number}
   */
global.GetHashKey = function (string) {
  return Citizen.invokeNative('0xfd340785adf8cfb7', string, _r, _ri);
};

/**
   * GET_HEADING_FROM_VECTOR_2D
   * dx = x1 - x2
   * dy = y1 - y2
   *
   * @param {number} dx
   * @param {number} dy
   * @return {number}
   */
global.GetHeadingFromVector_2D = function (dx, dy) {
  return Citizen.invokeNative('0x38d5202ff9271c62', _fv(dx), _fv(dy), _r, _rf);
};

/**
   * GET_LINE_PLANE_INTERSECTION
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @param {number} p8
   * @param {number} p9
   * @param {number} p10
   * @param {number} p11
   * @return {[boolean, number]}
   */
global.GetLinePlaneIntersection = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
  return Citizen.invokeNative('0xab6a04cec428258b', _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), _fv(p9), _fv(p10), _fv(p11), _f, _r);
};

/**
   * GET_MISSION_FLAG
   *
  
   * @return {boolean}
   */
global.GetMissionFlag = function () {
  return Citizen.invokeNative('0xb15cd1cf58771de1', _r);
};

/**
   * GET_MODEL_DIMENSIONS
   *
   * @param {number} modelHash
   * @return {[Vector3, Vector3]}
   */
global.GetModelDimensions = function (modelHash) {
  return Citizen.invokeNative('0xdcb8ddd5d054a7e7', _ch(modelHash), _v, _v);
};

/**
   * GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE
   *
   * @param {number} stackSize
   * @return {number}
   */
global.GetNumberOfFreeStacksOfThisSize = function (stackSize) {
  return Citizen.invokeNative('0x40dc2907a9697ef7', stackSize, _r, _ri);
};

/**
   * GET_NUMBER_OF_MICROSECONDS_SINCE_LAST_CALL
   *
  
   * @return {number}
   */
global.GetNumberOfMicrosecondsSinceLastCall = function () {
  return Citizen.invokeNative('0xb0ce5e5ed8bb3581', _r, _ri);
};

/**
   * GET_ONSCREEN_KEYBOARD_RESULT
   * Returns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.
   *
  
   * @return {string | number}
   */
global.GetOnscreenKeyboardResult = function () {
  return Citizen.invokeNative('0xafb4cf58a4a292b1', _r, _s);
};

/**
   * GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @param {number} distance
   * @param {boolean} p5
   * @param {boolean} mustBeOwnedByThisPed
   * @return {[boolean, Vector3, number]}
   */
global.GetProjectileOfProjectileTypeWithinDistance = function (ped, weaponHash, distance, p5, mustBeOwnedByThisPed) {
  return Citizen.invokeNative('0x9578986a6105a6ad', ped, _ch(weaponHash), _fv(distance), _v, _i, p5, mustBeOwnedByThisPed, _r);
};

/**
   * GET_RAIN_LEVEL
   *
  
   * @return {number}
   */
global.GetRainLevel = function () {
  return Citizen.invokeNative('0x931b5f4cc130224b', _r, _rf);
};

/**
   * GET_RANDOM_EVENT_FLAG
   *
  
   * @return {boolean}
   */
global.GetRandomEventFlag = function () {
  return Citizen.invokeNative('0x924d54e5698ae3e0', _r);
};

/**
   * GET_RANDOM_FLOAT_IN_RANGE
   *
   * @param {number} startRange
   * @param {number} endRange
   * @return {number}
   */
global.GetRandomFloatInRange = function (startRange, endRange) {
  return Citizen.invokeNative('0xe29f927a961f8aaa', _fv(startRange), _fv(endRange), _r, _rf);
};

/**
   * GET_RANDOM_INT_IN_RANGE
   *
   * @param {number} startRange
   * @param {number} endRange
   * @return {number}
   */
global.GetRandomIntInRange = function (startRange, endRange) {
  return Citizen.invokeNative('0xd53343aa4fb7dd28', startRange, endRange, _r, _ri);
};

/**
   * GET_REAL_WORLD_TIME
   * Returns GET_GAME_TIMER() / 1000
   * Only used in rcm_pearson1.ysc
   *
  
   * @return {number}
   */
global.GetRealWorldTime = function () {
  return Citizen.invokeNative('0x2e036f0480b8bf02', _r, _ri);
};

/**
   * GET_SCRIPT_TIME_WITHIN_FRAME_IN_MICROSECONDS
   *
  
   * @return {number}
   */
global.GetScriptTimeWithinFrameInMicroseconds = function () {
  return Citizen.invokeNative('0x63219768c586667c', _r, _ri);
};

/**
   * GET_SNOW_LEVEL
   *
  
   * @return {number}
   */
global.GetSnowLevel = function () {
  return Citizen.invokeNative('0x1e5d727041be1709', _r, _rf);
};

/**
   * GET_SYSTEM_TIME
   *
  
   * @return {number}
   */
global.GetSystemTime = function () {
  return Citizen.invokeNative('0xbe7f225417e35a7c', _r, _ri);
};

/**
   * GET_SYSTEM_TIME_STEP
   * Old name: _GET_BENCHMARK_TIME
   *
  
   * @return {number}
   */
global.GetSystemTimeStep = function () {
  return Citizen.invokeNative('0x3f3172feae3afe1c', _r, _rf);
};

/**
   * GET_WIND_DIRECTION
   *
  
   * @return {Vector3}
   */
global.GetWindDirection = function () {
  return Citizen.invokeNative('0xf703e82f3fe14a5f', _r, _rv);
};

/**
   * GET_WIND_SPEED
   *
  
   * @return {number}
   */
global.GetWindSpeed = function () {
  return Citizen.invokeNative('0xffb7e74e041150a4', _r, _rf);
};

/**
   * HAS_BULLET_IMPACTED_IN_AREA
   * p3 - possibly radius?
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p3
   * @param {boolean} p4
   * @param {boolean} p5
   * @return {boolean}
   */
global.HasBulletImpactedInArea = function (x, y, z, p3, p4, p5) {
  return Citizen.invokeNative('0xc153e5bccf411814', _fv(x), _fv(y), _fv(z), _fv(p3), p4, p5, _r);
};

/**
   * HAS_BULLET_IMPACTED_IN_BOX
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {boolean} p6
   * @param {boolean} p7
   * @return {boolean}
   */
global.HasBulletImpactedInBox = function (p0, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0x3b6a4c05fb2b33ac', _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, p7, _r);
};

/**
   * IGNORE_NEXT_RESTART
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.IgnoreNextRestart = function (toggle) {
  return Citizen.invokeNative('0x6c9ff40ff1b69f8f', toggle);
};

/**
   * INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION
   *
   * @param {string | number} p0
   * @return {void}
   */
global.InformCodeOfContentIdOfCurrentUgcMission = function (p0) {
  return Citizen.invokeNative('0x708df841b8f27aa2', _ts(p0));
};

/**
   * IS_BIT_SET
   *
   * @param {number} address
   * @param {number} offset
   * @return {boolean}
   */
global.IsBitSet = function (address, offset) {
  return Citizen.invokeNative('0x4ed6cfdfe8d4131a', address, offset, _r);
};

/**
   * IS_BULLET_IN_ANGLED_AREA
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {boolean} p7
   * @return {boolean}
   */
global.IsBulletInAngledArea = function (p0, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0x9d09d8493747cf02', _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), p7, _r);
};

/**
   * IS_BULLET_IN_AREA
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {boolean} p4
   * @return {boolean}
   */
global.IsBulletInArea = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xc652fd308772d79e', _fv(p0), _fv(p1), _fv(p2), _fv(p3), p4, _r);
};

/**
   * IS_BULLET_IN_BOX
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {boolean} p6
   * @return {boolean}
   */
global.IsBulletInBox = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xc128137c52152741', _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, _r);
};

/**
   * IS_DURANGO_VERSION
   * Hardcoded to return false.
   * Checks for XBOXONE Game Build.
   *
  
   * @return {boolean}
   */
global.IsDurangoVersion = function () {
  return Citizen.invokeNative('0xd1ccc2a2639d325f', _r);
};

/**
   * IS_GAME_SESSION_STATE_MACHINE_IDLE
   *
  
   * @return {boolean}
   */
global.IsGameSessionStateMachineIdle = function () {
  return Citizen.invokeNative('0xf9e7dbb39080640b', _r);
};

/**
   * IS_INCIDENT_VALID
   *
   * @param {number} incidentId
   * @return {boolean}
   */
global.IsIncidentValid = function (incidentId) {
  return Citizen.invokeNative('0x39f2b1bad412246a', incidentId, _r);
};

/**
   * IS_MAG_DEMO_1_ACTIVE
   * magdemo = magazine demo, i. e. for magazines such as IGN, pre play phases to prepare articles etc. - example 2012 builds for V
   * Hardcoded to return false.
   *
  
   * @return {boolean}
   */
global.IsMagDemo_1Active = function () {
  return Citizen.invokeNative('0x5fc9357c26daefce', _r);
};

/**
   * IS_MINIGAME_IN_PROGRESS
   *
  
   * @return {boolean}
   */
global.IsMinigameInProgress = function () {
  return Citizen.invokeNative('0xf4d8bcd052e7ea1b', _r);
};

/**
   * IS_ORBIS_VERSION
   * Hardcoded to return false.
   * Checks for PS4 Game Build.
   *
  
   * @return {boolean}
   */
global.IsOrbisVersion = function () {
  return Citizen.invokeNative('0x88cfae250d3e0c71', _r);
};

/**
   * IS_PC_VERSION
   * Hardcoded to return true.
   *
  
   * @return {boolean}
   */
global.IsPcVersion = function () {
  return Citizen.invokeNative('0xb0fb6cfaa5a1c833', _r);
};

/**
   * IS_POSITION_OCCUPIED
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} range
   * @param {boolean} p4
   * @param {boolean} p5
   * @param {boolean} p6
   * @param {boolean} p7
   * @param {boolean} p8
   * @param {any} p9
   * @param {boolean} p10
   * @return {boolean}
   */
global.IsPositionOccupied = function (x, y, z, range, p4, p5, p6, p7, p8, p9, p10) {
  return Citizen.invokeNative('0x825ca3ed43831015', _fv(x), _fv(y), _fv(z), _fv(range), p4, p5, p6, p7, p8, p9, p10, _r);
};

/**
   * IS_PROJECTILE_IN_AREA
   * Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.
   * 
   * ownedByPlayer = only projectiles fired by the player will be detected.
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {boolean} ownedByPlayer
   * @return {boolean}
   */
global.IsProjectileInArea = function (x1, y1, z1, x2, y2, z2, ownedByPlayer) {
  return Citizen.invokeNative('0x05b0061efdfc8941', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), ownedByPlayer, _r);
};

/**
   * IS_PROJECTILE_TYPE_IN_ANGLED_AREA
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {any} p7
   * @param {boolean} p8
   * @return {boolean}
   */
global.IsProjectileTypeInAngledArea = function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
  return Citizen.invokeNative('0x928431f4133cd3d4', _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), p7, p8, _r);
};

/**
   * IS_PROJECTILE_TYPE_IN_AREA
   * Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a rectangle.
   *
   * @param {number} xMin
   * @param {number} yMin
   * @param {number} zMin
   * @param {number} xMax
   * @param {number} yMax
   * @param {number} zMax
   * @param {number} weaponType
   * @param {boolean} isPlayer
   * @return {boolean}
   */
global.IsProjectileTypeInArea = function (xMin, yMin, zMin, xMax, yMax, zMax, weaponType, isPlayer) {
  return Citizen.invokeNative('0x04965fb9e14235c7', _fv(xMin), _fv(yMin), _fv(zMin), _fv(xMax), _fv(yMax), _fv(zMax), _ch(weaponType), isPlayer, _r);
};

/**
   * IS_PROJECTILE_TYPE_WITHIN_DISTANCE
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {any} p3
   * @param {number} p4
   * @param {boolean} p5
   * @return {boolean}
   */
global.IsProjectileTypeWithinDistance = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xf51c9baad9ed64c4', _fv(p0), _fv(p1), _fv(p2), p3, _fv(p4), p5, _r);
};

/**
   * IS_STADIA_VERSION
   * Hardcoded to return false.
   *
  
   * @return {boolean}
   */
global.IsStadiaVersion = function () {
  return Citizen.invokeNative('0x268ab8420a9e4ed7', _r);
};

/**
   * IS_STRING_NULL
   *
   * @param {string | number} string
   * @return {boolean}
   */
global.IsStringNull = function (string) {
  return Citizen.invokeNative('0x602102324604d96b', _ts(string), _r);
};

/**
   * IS_STRING_NULL_OR_EMPTY
   *
   * @param {string | number} string
   * @return {boolean}
   */
global.IsStringNullOrEmpty = function (string) {
  return Citizen.invokeNative('0x2cf12f9acf18f048', _ts(string), _r);
};

/**
   * IS_STRING_NULL_OR_EMPTY_OR_SPACES
   * Returns true if the entire string consists only of space characters.
   *
   * @param {string | number} string
   * @return {boolean}
   */
global.IsStringNullOrEmptyOrSpaces = function (string) {
  return Citizen.invokeNative('0x375f5870a7b8bec1', _ts(string), _r);
};

/**
   * NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME
   *
  
   * @return {void}
   */
global.NetworkSetScriptIsSafeForNetworkGame = function () {
  return Citizen.invokeNative('0x3d0eac6385dd6100');
};

/**
   * NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS
   *
   * @param {number} fontBitField
   * @return {void}
   */
global.NextOnscreenKeyboardResultWillDisplayUsingTheseFonts = function (fontBitField) {
  return Citizen.invokeNative('0x5cb71eaa1429a358', fontBitField);
};

/**
   * OVERRIDE_SAVE_HOUSE
   *
   * @param {boolean} override
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} heading
   * @param {boolean} isAutosave
   * @return {[boolean, Vector3, number]}
   */
global.OverrideSaveHouse = function (override, x, y, z, heading, isAutosave) {
  return Citizen.invokeNative('0xb2c69e11a37b5af0', override, _fv(x), _fv(y), _fv(z), _fv(heading), isAutosave, _v, _f, _r);
};

/**
   * PAUSE_DEATH_ARREST_RESTART
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.PauseDeathArrestRestart = function (toggle) {
  return Citizen.invokeNative('0x66ab6b6c7e72f393', toggle);
};

/**
   * POPULATE_NOW
   * spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called
   *
  
   * @return {void}
   */
global.PopulateNow = function () {
  return Citizen.invokeNative('0xea6dc3a8add2005f');
};

/**
   * REGISTER_INTERACTION_LOCKON_PROMPT
   * p3 is usually the same value of radius
   * p8 determines whether the ILO prompt is a lock on prompt with RMB
   *
   * @param {number} entity
   * @param {string | number} text
   * @param {number} radius
   * @param {number} p3
   * @param {number} flag
   * @param {number} p5
   * @param {number} p6
   * @param {number} prompt
   * @param {boolean} p8
   * @param {number} p9
   * @return {boolean}
   */
global.RegisterInteractionLockonPrompt = function (entity, text, radius, p3, flag, p5, p6, prompt, p8, p9) {
  return Citizen.invokeNative('0x870708a6e147a9ad', entity, _ts(text), _fv(radius), _fv(p3), flag, _fv(p5), _fv(p6), prompt, p8, p9, _r);
};

/**
   * REMOVE_DISPATCH_SPAWN_BLOCKING_AREA
   *
   * @param {any} p0
   * @return {void}
   */
global.RemoveDispatchSpawnBlockingArea = function (p0) {
  return Citizen.invokeNative('0x49f751f6868ddc5b', p0);
};

/**
   * REMOVE_POP_MULTIPLIER_AREA
   *
   * @param {number} id
   * @param {boolean} p1
   * @return {void}
   */
global.RemovePopMultiplierArea = function (id, p1) {
  return Citizen.invokeNative('0x88cb484364efb37a', id, p1);
};

/**
   * RESET_DISPATCH_IDEAL_SPAWN_DISTANCE
   *
  
   * @return {void}
   */
global.ResetDispatchIdealSpawnDistance = function () {
  return Citizen.invokeNative('0xc7817264bc4b6377');
};

/**
   * RESET_END_USER_BENCHMARK
   * Begins with RESET_*. Next character in the name is either D or E.
   * 
   * Old name: _RESET_BENCHMARK_RECORDING
   *
  
   * @return {void}
   */
global.ResetEndUserBenchmark = function () {
  return Citizen.invokeNative('0xecbabd0307fb216f');
};

/**
   * RESET_SCRIPT_TIME_WITHIN_FRAME
   *
  
   * @return {void}
   */
global.ResetScriptTimeWithinFrame = function () {
  return Citizen.invokeNative('0x1411a7cbc3a6eb7b');
};

/**
   * RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN
   *
  
   * @return {void}
   */
global.ResetWantedResponseNumPedsToSpawn = function () {
  return Citizen.invokeNative('0xef42f56f69877125');
};

/**
   * SAVE_END_USER_BENCHMARK
   * Saves the benchmark recording to %USERPROFILE%\Documents\Rockstar Games\Red Dead Redemption 2\Benchmarks and submits some metrics.
   * 
   * Old name: _SAVE_BENCHMARK_RECORDING
   *
  
   * @return {void}
   */
global.SaveEndUserBenchmark = function () {
  return Citizen.invokeNative('0xf4743e2ecc02b3da');
};

/**
   * SCRIPT_RACE_GET_PLAYER_SPLIT_TIME
   *
   * @param {any} p0
   * @param {DataView} p1
   * @param {DataView} p2
   * @return {boolean}
   */
global.ScriptRaceGetPlayerSplitTime = function (p0, p1, p2) {
  return Citizen.invokeNative('0x769e848c66e3c2bb', p0, p1, p2, _r);
};

/**
   * SCRIPT_RACE_INIT
   *
   * @param {number} numCheckpoints
   * @param {number} numLaps
   * @param {number} numPlayers
   * @param {any} p3
   * @return {void}
   */
global.ScriptRaceInit = function (numCheckpoints, numLaps, numPlayers, p3) {
  return Citizen.invokeNative('0x8ae059f47158417e', numCheckpoints, numLaps, numPlayers, p3);
};

/**
   * SCRIPT_RACE_PLAYER_HIT_CHECKPOINT
   *
   * @param {number} part
   * @param {number} checkpoint
   * @param {number} lap
   * @param {number} time
   * @return {void}
   */
global.ScriptRacePlayerHitCheckpoint = function (part, checkpoint, lap, time) {
  return Citizen.invokeNative('0xba62b4d80fa66bd6', part, checkpoint, lap, time);
};

/**
   * SCRIPT_RACE_SHUTDOWN
   *
  
   * @return {void}
   */
global.ScriptRaceShutdown = function () {
  return Citizen.invokeNative('0x334ce0da4faf330c');
};

/**
   * SET_BIT
   *
   * @param {number} offset
   * @return {number}
   */
global.SetBit = function (offset) {
  return Citizen.invokeNative('0xf73fbe4845c43b5b', _i, offset);
};

/**
   * SET_BITS_IN_RANGE
   *
   * @param {number} rangeStart
   * @param {number} rangeEnd
   * @param {number} p3
   * @return {number}
   */
global.SetBitsInRange = function (rangeStart, rangeEnd, p3) {
  return Citizen.invokeNative('0x324dc1cef57f31e6', _i, rangeStart, rangeEnd, p3);
};

/**
   * SET_CHEAT_ACTIVE
   * Cheats are GTA IV cheats:
   * 
   * 0 = unknown
   * 1 = unknown (same as 0)
   * 2 = Max Health and Armor
   * 3 = Raise Wanted Level
   * 4 = Lower Wanted Level
   * 5 = unknown (does nothing)
   * 6 = Change Weather
   * 7 = Spawn Annihilator
   * 8 = Spawn NRG 900
   * 9 = Spawn FBI
   * 10 = Spawn Jetmax
   * 11 = Spawn Comet
   * 12 = Spawn Turismo
   * 13 = Spawn Cognoscenti
   * 14 = Spawn Super GT
   * 15 = Spawn Sanchez
   * 
   * Initially used in Max Payne 3, that's why we know the name.
   *
   * @param {number} cheatId
   * @return {void}
   */
global.SetCheatActive = function (cheatId) {
  return Citizen.invokeNative('0xd4958e8cf0de0dd0', cheatId);
};

/**
   * SET_CREDITS_ACTIVE
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetCreditsActive = function (toggle) {
  return Citizen.invokeNative('0xd37becf862da726f', toggle);
};

/**
   * SET_CURR_WEATHER_STATE
   * Params: BOOL p3 is always true
   * 
   * Old name: _SET_WEATHER_TYPE_TRANSITION
   *
   * @param {number} weatherType1
   * @param {number} weatherType2
   * @param {number} percentWeather2
   * @param {boolean} enabled
   * @return {void}
   */
global.SetCurrWeatherState = function (weatherType1, weatherType2, percentWeather2, enabled) {
  return Citizen.invokeNative('0xfa3e3ca8a1de6d5d', _ch(weatherType1), _ch(weatherType2), _fv(percentWeather2), enabled);
};

/**
   * SET_DISPATCH_IDEAL_SPAWN_DISTANCE
   *
   * @param {number} fIdealSpawnDistance
   * @return {void}
   */
global.SetDispatchIdealSpawnDistance = function (fIdealSpawnDistance) {
  return Citizen.invokeNative('0xeab6823b82fbd283', _fv(fIdealSpawnDistance));
};

/**
   * SET_FADE_IN_AFTER_DEATH_ARREST
   * Sets whether the game should fade in after the player dies or is arrested.
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetFadeInAfterDeathArrest = function (toggle) {
  return Citizen.invokeNative('0xdf3b5846de5904af', toggle);
};

/**
   * SET_FADE_IN_AFTER_LOAD
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetFadeInAfterLoad = function (toggle) {
  return Citizen.invokeNative('0xac806c4cab973517', toggle);
};

/**
   * SET_GAME_PAUSED
   * Make sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused.
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetGamePaused = function (toggle) {
  return Citizen.invokeNative('0xfaec088d28b1de4a', toggle);
};

/**
   * SET_MISSION_FLAG
   * If true, the player can't save the game.
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetMissionFlag = function (toggle) {
  return Citizen.invokeNative('0x36694b456be80d0a', toggle);
};

/**
   * SET_PED_DECOMPOSED
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedDecomposed = function (ped, toggle) {
  return Citizen.invokeNative('0x674b90be1115846d', ped, toggle);
};

/**
   * SET_RAIN
   * Old name: _SET_RAIN_LEVEL
   *
   * @param {number} intensity
   * @return {void}
   */
global.SetRain = function (intensity) {
  return Citizen.invokeNative('0x193dfc0526830fd6', _fv(intensity));
};

/**
   * SET_RANDOM_EVENT_FLAG
   * If the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.
   * Does nothing if the mission flag is set.
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetRandomEventFlag = function (toggle) {
  return Citizen.invokeNative('0xb1adccc4150c6473', toggle);
};

/**
   * SET_RANDOM_SEED
   *
   * @param {number} seed
   * @return {void}
   */
global.SetRandomSeed = function (seed) {
  return Citizen.invokeNative('0x5cd7a49104afcb6b', seed);
};

/**
   * SET_RANDOM_WEATHER_TYPE
   *
   * @param {boolean} p0
   * @param {boolean} p1
   * @return {void}
   */
global.SetRandomWeatherType = function (p0, p1) {
  return Citizen.invokeNative('0x6e5a7fbeecab3c72', p0, p1);
};

/**
   * SET_SUPER_JUMP_THIS_FRAME
   *
   * @param {number} player
   * @return {void}
   */
global.SetSuperJumpThisFrame = function (player) {
  return Citizen.invokeNative('0xb3e9be963f10c445', player);
};

/**
   * SET_THIS_SCRIPT_CAN_BE_PAUSED
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetThisScriptCanBePaused = function (toggle) {
  return Citizen.invokeNative('0x3215376e79f6ea18', toggle);
};

/**
   * SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetThisScriptCanRemoveBlipsCreatedByAnyScript = function (toggle) {
  return Citizen.invokeNative('0x8abd939c2e5d00ed', toggle);
};

/**
   * SET_TIME_SCALE
   * Maximum value is 1.0f
   * At a value of 0.0f the game will still run at a minimum time scale.
   *
   * @param {number} timeScale
   * @return {void}
   */
global.SetTimeScale = function (timeScale) {
  return Citizen.invokeNative('0x9682af6050854856', _fv(timeScale));
};

/**
   * SET_WEATHER_TYPE
   * https://github.com/femga/rdr3_discoveries/blob/master/weather/weather_types.lua
   *
   * @param {number} weatherType
   * @param {boolean} p1
   * @param {boolean} p2
   * @param {boolean} transition
   * @param {number} transitionTime
   * @param {boolean} p5
   * @return {void}
   */
global.SetWeatherType = function (weatherType, p1, p2, transition, transitionTime, p5) {
  return Citizen.invokeNative('0x59174f1afe095b5a', _ch(weatherType), p1, p2, transition, _fv(transitionTime), p5);
};

/**
   * SET_WIND_DIRECTION
   *
   * @param {number} direction
   * @return {void}
   */
global.SetWindDirection = function (direction) {
  return Citizen.invokeNative('0xb56c4f5f57a45600', _fv(direction));
};

/**
   * SET_WIND_SPEED
   *
   * @param {number} speed
   * @return {void}
   */
global.SetWindSpeed = function (speed) {
  return Citizen.invokeNative('0xd00c2d82dc04a99f', _fv(speed));
};

/**
   * SHOOT_SINGLE_BULLET_BETWEEN_COORDS
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {number} damage
   * @param {boolean} p7
   * @param {number} weaponHash
   * @param {number} ownerPed
   * @param {boolean} isAudible
   * @param {boolean} isInvisible
   * @param {number} speed
   * @param {boolean} p13
   * @return {void}
   */
global.ShootSingleBulletBetweenCoords = function (x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, p13) {
  return Citizen.invokeNative('0x867654cbc7606f2c', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), damage, p7, _ch(weaponHash), ownerPed, isAudible, isInvisible, _fv(speed), p13);
};

/**
   * SHOULD_USE_METRIC_MEASUREMENTS
   * Returns whether the game's measurement system is set to metric.
   *
  
   * @return {boolean}
   */
global.ShouldUseMetricMeasurements = function () {
  return Citizen.invokeNative('0x4fb556acefa93098', _r);
};

/**
   * START_END_USER_BENCHMARK
   * Begins with START_*. Next character in the name is either D or E.
   * 
   * Old name: _START_BENCHMARK_RECORDING
   *
  
   * @return {void}
   */
global.StartEndUserBenchmark = function () {
  return Citizen.invokeNative('0x29d1f6df864a094e');
};

/**
   * STOP_CURRENT_LOADING_PROGRESS_TIMER
   * nullsub, doesn't do anything
   *
  
   * @return {void}
   */
global.StopCurrentLoadingProgressTimer = function () {
  return Citizen.invokeNative('0xa565fac215cbc77d');
};

/**
   * STOP_END_USER_BENCHMARK
   * Begins with STOP_*. Next character in the name is either D or E.
   * 
   * Old name: _STOP_BENCHMARK_RECORDING
   *
  
   * @return {void}
   */
global.StopEndUserBenchmark = function () {
  return Citizen.invokeNative('0xb89aec71aff2b599');
};

/**
   * STRING_TO_INT
   * Returns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.
   *
   * @param {string | number} string
   * @return {[boolean, number]}
   */
global.StringToInt = function (string) {
  return Citizen.invokeNative('0xf2dd2298b3af23e2', _ts(string), _i, _r);
};

/**
   * TAN
   *
   * @param {number} p0
   * @return {number}
   */
global.Tan = function (p0) {
  return Citizen.invokeNative('0x8c13db96497b7abf', _fv(p0), _r, _rf);
};

/**
   * UI_STARTED_END_USER_BENCHMARK
   * Hardcoded to return false.
   * 
   * Old name: _UI_IS_SINGLEPLAYER_PAUSE_MENU_ACTIVE
   *
  
   * @return {boolean}
   */
global.UiStartedEndUserBenchmark = function () {
  return Citizen.invokeNative('0x4ffa0386a6216113', _r);
};

/**
   * UNREGISTER_INTERACTION_LOCKON_PROMPT
   *
   * @param {number} entity
   * @return {boolean}
   */
global.UnregisterInteractionLockonPrompt = function (entity) {
  return Citizen.invokeNative('0xe98d55c5983f2509', entity, _r);
};

/**
   * UPDATE_ONSCREEN_KEYBOARD
   * Returns the current status of the onscreen keyboard, and updates the output.
   * 
   * Status Codes:
   * 
   * 0 - User still editing
   * 1 - User has finished editing
   * 2 - User has canceled editing
   * 3 - Keyboard isn't active
   *
  
   * @return {number}
   */
global.UpdateOnscreenKeyboard = function () {
  return Citizen.invokeNative('0x37df360f235a3893', _r, _ri);
};

/**
   * VAR_STRING
   * Note: The first bit in 'flags' must not be set.
   * It is also required to pass at least one extra argument (this must be a text label string or hash).
   * When passing a hash, flags should be 0.
   *
   * @param {number} flags
   * @param {string | number} stringType
   * @param {string} value
   * @return {string | number}
   */
global.VarString = function (flags, stringType, value) {
  return Citizen.invokeNative('0xfa925ac00eb830b9', flags, _ts(stringType), value, _r, _rl);
};

/**
   * WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE
   * Only used in smuggler2 script
   *
   * @param {number} maxAmplitude
   * @return {void}
   */
global.WaterOverrideSetOceanwavemaxamplitude = function (maxAmplitude) {
  return Citizen.invokeNative('0xf06c5b66de20b2b8', _fv(maxAmplitude));
};

/**
   * WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE
   * Only used in smuggler2 script
   *
   * @param {number} amplitude
   * @return {void}
   */
global.WaterOverrideSetShorewaveamplitude = function (amplitude) {
  return Citizen.invokeNative('0x55123d5a7d9d3c42', _fv(amplitude));
};

/**
   * _0x0358B8A41916C613
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {any}
   */
global.N_0x0358B8A41916C613 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x0358b8a41916c613', p0, p1, p2, p3, _r);
};

/**
   * _0x0730E518486DEEC3
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x0730E518486DEEC3 = function (p0) {
  return Citizen.invokeNative('0x0730e518486deec3', p0);
};

/**
   * _DISABLE_COMPOSITE_PICK_PROMPT_THIS_FRAME
   * disables composite Pick prompt
   *
   * @param {number} compositeId
   * @param {boolean} disable
   * @return {void}
   */
global.DisableCompositePickPromptThisFrame = function (compositeId, disable) {
  return Citizen.invokeNative('0x082c043c7afc3747', compositeId, disable);
};

/**
   * _0x0A487CC74A517FB5
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x0A487CC74A517FB5 = function (p0) {
  return Citizen.invokeNative('0x0a487cc74a517fb5', p0);
};

/**
   * _0x0D0AE5081F88CFE1
   *
   * @param {number} p0
   * @return {boolean}
   */
global.N_0x0D0AE5081F88CFE1 = function (p0) {
  return Citizen.invokeNative('0x0d0ae5081f88cfe1', _ch(p0), _r);
};

/**
   * _0x1096603B519C905F
   * _SET_MISSION_NAME_*(FOR_ACTIVITY?/MINIGAME?)
   *
   * @param {string | number} name
   * @return {void}
   */
global.N_0x1096603B519C905F = function (name) {
  return Citizen.invokeNative('0x1096603b519c905f', _ts(name));
};

/**
   * _0x154340E87D8CC178
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x154340E87D8CC178 = function (p0) {
  return Citizen.invokeNative('0x154340e87d8cc178', p0);
};

/**
   * _0x183672FE838A661B
   *
   * @param {DataView} data
   * @return {void}
   */
global.N_0x183672FE838A661B = function (data) {
  return Citizen.invokeNative('0x183672fe838a661b', data);
};

/**
   * _0x243CEDE8F916B994
   *
  
   * @return {void}
   */
global.N_0x243CEDE8F916B994 = function () {
  return Citizen.invokeNative('0x243cede8f916b994');
};

/**
   * _0x2916B30DC6C41179
   *
   * @param {number} weatherType
   * @return {void}
   */
global.N_0x2916B30DC6C41179 = function (weatherType) {
  return Citizen.invokeNative('0x2916b30dc6c41179', _ch(weatherType));
};

/**
   * _0x33982467B1E349EF
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {any}
   */
global.N_0x33982467B1E349EF = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0x33982467b1e349ef', p0, p1, p2, p3, p4, p5, p6, _r);
};

/**
   * _0x35165C658077CD0B
   *
  
   * @return {any}
   */
global.N_0x35165C658077CD0B = function () {
  return Citizen.invokeNative('0x35165c658077cd0b', _r);
};

/**
   * _0x38C0C9CAE1544500
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x38C0C9CAE1544500 = function (p0) {
  return Citizen.invokeNative('0x38c0c9cae1544500', _ch(p0));
};

/**
   * _0x38C2BF94D15F464D
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x38C2BF94D15F464D = function (p0) {
  return Citizen.invokeNative('0x38c2bf94d15f464d', p0, _r);
};

/**
   * _0x3A87FDA8F1B6CDFB
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x3A87FDA8F1B6CDFB = function (p0, p1, p2) {
  return Citizen.invokeNative('0x3a87fda8f1b6cdfb', p0, p1, p2);
};

/**
   * _0x3C3C7B1B5EC08764
   *
  
   * @return {void}
   */
global.N_0x3C3C7B1B5EC08764 = function () {
  return Citizen.invokeNative('0x3c3c7b1b5ec08764');
};

/**
   * _0x4647842FE8F31C1E
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x4647842FE8F31C1E = function (p0, p1) {
  return Citizen.invokeNative('0x4647842fe8f31c1e', p0, p1);
};

/**
   * _0x49C44FE78A135A1D
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x49C44FE78A135A1D = function (p0) {
  return Citizen.invokeNative('0x49c44fe78a135a1d', p0);
};

/**
   * _0x49F3241C28EBBFBC
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x49F3241C28EBBFBC = function (p0) {
  return Citizen.invokeNative('0x49f3241c28ebbfbc', p0);
};

/**
   * _0x4B0501A468B749F8
   *
  
   * @return {void}
   */
global.N_0x4B0501A468B749F8 = function () {
  return Citizen.invokeNative('0x4b0501a468b749f8');
};

/**
   * _0x4B101DBCC9482F2D
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x4B101DBCC9482F2D = function (ped) {
  return Citizen.invokeNative('0x4b101dbcc9482f2d', ped, _r);
};

/**
   * _0x4D5C9CC7E7E23E09
   *
  
   * @return {void}
   */
global.N_0x4D5C9CC7E7E23E09 = function () {
  return Citizen.invokeNative('0x4d5c9cc7e7e23e09');
};

/**
   * _0x553D67295DDD2309
   * UPDATE_PICKUP_COLLECTIBLE: set Eagle Eye fountain
   * _J*, _K*, _L*
   *
   * @param {number} entity
   * @return {void}
   */
global.N_0x553D67295DDD2309 = function (entity) {
  return Citizen.invokeNative('0x553d67295ddd2309', entity);
};

/**
   * _0x5801BE2DF2AF07EC
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x5801BE2DF2AF07EC = function (p0) {
  return Citizen.invokeNative('0x5801be2df2af07ec', p0);
};

/**
   * _0x5B4A8121A47D844D
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x5B4A8121A47D844D = function (p0) {
  return Citizen.invokeNative('0x5b4a8121a47d844d', p0, _r);
};

/**
   * _0x627B68D9CE6EE8DE
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x627B68D9CE6EE8DE = function (p0) {
  return Citizen.invokeNative('0x627b68d9ce6ee8de', p0, _r);
};

/**
   * _0x68319452C5064ABA
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x68319452C5064ABA = function (p0, p1) {
  return Citizen.invokeNative('0x68319452c5064aba', p0, p1);
};

/**
   * _0x6BCF7B5CD338281A
   * _SET_DISPATCH_*, unused
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x6BCF7B5CD338281A = function (p0, p1, p2) {
  return Citizen.invokeNative('0x6bcf7b5cd338281a', p0, p1, p2);
};

/**
   * _0x6BED40493A1AFDB8
   *
   * @param {DataView} p0
   * @param {number} p1
   * @return {void}
   */
global.N_0x6BED40493A1AFDB8 = function (p0, p1) {
  return Citizen.invokeNative('0x6bed40493a1afdb8', p0, _fv(p1));
};

/**
   * _0x6C7B68D3CE60E8DE
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x6C7B68D3CE60E8DE = function (p0) {
  return Citizen.invokeNative('0x6c7b68d3ce60e8de', p0, _r);
};

/**
   * _0x6F02B5E50511721E
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x6F02B5E50511721E = function (p0) {
  return Citizen.invokeNative('0x6f02b5e50511721e', p0, _r);
};

/**
   * _0x745808BB01CEC6B9
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x745808BB01CEC6B9 = function (p0) {
  return Citizen.invokeNative('0x745808bb01cec6b9', _fv(p0));
};

/**
   * _0x74ACA66484CEBAF0
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x74ACA66484CEBAF0 = function (p0) {
  return Citizen.invokeNative('0x74aca66484cebaf0', p0);
};

/**
   * _0x7A76104CC2CC69E8
   *
   * @param {number} entity
   * @param {number} p1
   * @param {number} p2
   * @return {any}
   */
global.N_0x7A76104CC2CC69E8 = function (entity, p1, p2) {
  return Citizen.invokeNative('0x7a76104cc2cc69e8', entity, p1, p2, _r);
};

/**
   * _0x7CF96F1250EF3221
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x7CF96F1250EF3221 = function (p0) {
  return Citizen.invokeNative('0x7cf96f1250ef3221', p0, _r);
};

/**
   * _0x7FA58CED69405F9A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x7FA58CED69405F9A = function (p0, p1) {
  return Citizen.invokeNative('0x7fa58ced69405f9a', p0, p1);
};

/**
   * _0x8314FC2013ECE2DA
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0x8314FC2013ECE2DA = function (p0, p1, p2) {
  return Citizen.invokeNative('0x8314fc2013ece2da', p0, p1, p2, _r);
};

/**
   * _0x8BB99B85444544D9
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x8BB99B85444544D9 = function (p0, p1) {
  return Citizen.invokeNative('0x8bb99b85444544d9', p0, p1, _r);
};

/**
   * _0x8C0F6A3D7236DEEB
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x8C0F6A3D7236DEEB = function (p0, p1) {
  return Citizen.invokeNative('0x8c0f6a3d7236deeb', p0, p1);
};

/**
   * _0x8DB104CCEBCD58C5
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x8DB104CCEBCD58C5 = function (p0, p1) {
  return Citizen.invokeNative('0x8db104ccebcd58c5', p0, p1, _r);
};

/**
   * _STRING_SPLIT_AND_COUNT_SEGMENTS
   * Not officially named 
   * , Counts the number of segments in a string that are separated by specified delimiter characters, ignoring consecutive delimiters.
   *
   * @param {string | number} inputString
   * @param {string | number} delimiters
   * @return {number}
   */
global.StringSplitAndCountSegments = function (inputString, delimiters) {
  return Citizen.invokeNative('0x94e8ca3dee952789', inputString, delimiters, _r, _ri);
};

/**
   * _0x94FCADCF9F0C368E
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x94FCADCF9F0C368E = function (p0) {
  return Citizen.invokeNative('0x94fcadcf9f0c368e', p0);
};

/**
   * _0x96282005C5C6801F
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x96282005C5C6801F = function (p0, p1) {
  return Citizen.invokeNative('0x96282005c5c6801f', p0, p1);
};

/**
   * _0x970339EFA4FDE518
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0x970339EFA4FDE518 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x970339efa4fde518', p0, p1, p2, _r);
};

/**
   * _0x9A252AA23D7098F2
   *
  
   * @return {void}
   */
global.N_0x9A252AA23D7098F2 = function () {
  return Citizen.invokeNative('0x9a252aa23d7098f2');
};

/**
   * _0x9BF2C0C568C61641
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x9BF2C0C568C61641 = function (p0) {
  return Citizen.invokeNative('0x9bf2c0c568c61641', p0);
};

/**
   * _0xA08111B053D84B4D
   * _CLEAR*
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xA08111B053D84B4D = function (p0) {
  return Citizen.invokeNative('0xa08111b053d84b4d', p0);
};

/**
   * _0xA3A8926951471C82
   *
  
   * @return {void}
   */
global.N_0xA3A8926951471C82 = function () {
  return Citizen.invokeNative('0xa3a8926951471c82');
};

/**
   * _0xA9342743B634A462
   * nullsub, doesn't do anything
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xA9342743B634A462 = function (p0) {
  return Citizen.invokeNative('0xa9342743b634a462', p0);
};

/**
   * _0xAB26DEEE120FD3FD
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xAB26DEEE120FD3FD = function (p0, p1) {
  return Citizen.invokeNative('0xab26deee120fd3fd', p0, p1);
};

/**
   * _0xAD44856A1CD29635
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xAD44856A1CD29635 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xad44856a1cd29635', p0, p1, p2);
};

/**
   * _0xAF3A84C7DE6A1DC5
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xAF3A84C7DE6A1DC5 = function (p0, p1) {
  return Citizen.invokeNative('0xaf3a84c7de6a1dc5', p0, p1);
};

/**
   * _0xAF530E56505D1BD6
   * Hardcoded to return one/true.
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xAF530E56505D1BD6 = function (p0) {
  return Citizen.invokeNative('0xaf530e56505d1bd6', p0, _r);
};

/**
   * _0xB08C4FA25BC29DB9
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xB08C4FA25BC29DB9 = function (p0) {
  return Citizen.invokeNative('0xb08c4fa25bc29db9', p0);
};

/**
   * _0xB1F6665AA54DCD5C
   *
   * @param {number} p0
   * @return {any}
   */
global.N_0xB1F6665AA54DCD5C = function (p0) {
  return Citizen.invokeNative('0xb1f6665aa54dcd5c', _ch(p0), _r);
};

/**
   * _0xB711EB4BC8D06013
   * nullsub, doesn't do anything
   *
  
   * @return {void}
   */
global.N_0xB711EB4BC8D06013 = function () {
  return Citizen.invokeNative('0xb711eb4bc8d06013');
};

/**
   * _0xBB282CF5D2333FB8
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xBB282CF5D2333FB8 = function (p0, p1) {
  return Citizen.invokeNative('0xbb282cf5d2333fb8', p0, p1);
};

/**
   * _0xBBE5B63EFFB08E68
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {any}
   */
global.N_0xBBE5B63EFFB08E68 = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xbbe5b63effb08e68', p0, p1, p2, p3, p4, p5, p6, _r);
};

/**
   * _0xCC1BAF72D571DB8D
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0xCC1BAF72D571DB8D = function (p0, p1, p2) {
  return Citizen.invokeNative('0xcc1baf72d571db8d', p0, p1, p2, _r);
};

/**
   * _0xCC3EDC5614B03F61
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0xCC3EDC5614B03F61 = function (p0) {
  return Citizen.invokeNative('0xcc3edc5614b03f61', p0);
};

/**
   * _0xD3F943B88F55376A
   *
   * @param {number} weatherType
   * @return {void}
   */
global.N_0xD3F943B88F55376A = function (weatherType) {
  return Citizen.invokeNative('0xd3f943b88f55376a', _ch(weatherType));
};

/**
   * _0xDA4D8EB04E8E2928
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xDA4D8EB04E8E2928 = function (p0) {
  return Citizen.invokeNative('0xda4d8eb04e8e2928', p0);
};

/**
   * _0xDBDA48EC456ED908
   *
  
   * @return {void}
   */
global.N_0xDBDA48EC456ED908 = function () {
  return Citizen.invokeNative('0xdbda48ec456ed908');
};

/**
   * _0xDC057B86FC157031
   * Hardcoded to return one/true.
   *
  
   * @return {any}
   */
global.N_0xDC057B86FC157031 = function () {
  return Citizen.invokeNative('0xdc057b86fc157031', _r);
};

/**
   * _0xDC416CA762BC4F43
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {any}
   */
global.N_0xDC416CA762BC4F43 = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xdc416ca762bc4f43', p0, p1, p2, p3, p4, p5, _r);
};

/**
   * _0xDE2C3B74D2B3705C
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xDE2C3B74D2B3705C = function (p0, p1) {
  return Citizen.invokeNative('0xde2c3b74d2b3705c', p0, p1);
};

/**
   * _0xEB946B9E579729AD
   * Not implemented.
   *
   * @param {number} ped
   * @param {any} p1
   * @return {void}
   */
global.N_0xEB946B9E579729AD = function (ped, p1) {
  return Citizen.invokeNative('0xeb946b9e579729ad', ped, p1);
};

/**
   * _0xF569E33FB72ED28E
   *
  
   * @return {void}
   */
global.N_0xF569E33FB72ED28E = function () {
  return Citizen.invokeNative('0xf569e33fb72ed28e');
};

/**
   * _0xF63FA29D4A9ACA86
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xF63FA29D4A9ACA86 = function (p0, p1) {
  return Citizen.invokeNative('0xf63fa29d4a9aca86', p0, p1);
};

/**
   * _0xF650DCF5D6F312C1
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xF650DCF5D6F312C1 = function (p0) {
  return Citizen.invokeNative('0xf650dcf5d6f312c1', p0);
};

/**
   * _0xF81C53561D15F330
   *
  
   * @return {string | number}
   */
global.N_0xF81C53561D15F330 = function () {
  return Citizen.invokeNative('0xf81c53561d15f330', _r, _s);
};

/**
   * _0xFC6ECB9170145ECE
   *
  
   * @return {void}
   */
global.N_0xFC6ECB9170145ECE = function () {
  return Citizen.invokeNative('0xfc6ecb9170145ece');
};

/**
   * _0xFF252E2BAFB7330F
   * nullsub, doesn't do anything
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xFF252E2BAFB7330F = function (p0) {
  return Citizen.invokeNative('0xff252e2bafb7330f', p0);
};

/**
   * _ADD_DISPATCH_SPAWN_BLOCKING_AREA
   *
   * @param {number} volume
   * @return {any}
   */
global.AddDispatchSpawnBlockingArea = function (volume) {
  return Citizen.invokeNative('0xa2d5a26208421426', volume, _r);
};

/**
   * _ADD_POP_MULTIPLIER_VOLUME
   * Only used in script function PROCESS_ZONE_CREATION
   * Returns Pop multiplier volume ID
   *
   * @param {number} volume
   * @param {number} pedDensity
   * @param {number} vehicleDensity
   * @param {boolean} p3
   * @param {boolean} p4
   * @return {number}
   */
global.AddPopMultiplierVolume = function (volume, pedDensity, vehicleDensity, p3, p4) {
  return Citizen.invokeNative('0x3233c4ec0514c7ec', volume, _fv(pedDensity), _fv(vehicleDensity), p3, p4, _r, _ri);
};

/**
   * _CLEAR_ALL_BIT_FLAGS
   *
   * @param {DataView} bitFlags
   * @return {void}
   */
global.ClearAllBitFlags = function (bitFlags) {
  return Citizen.invokeNative('0xd2d74f89df844a50', bitFlags);
};

/**
   * _CLEAR_BIT_FLAG
   *
   * @param {DataView} bitFlags
   * @param {number} flag
   * @return {void}
   */
global.ClearBitFlag = function (bitFlags, flag) {
  return Citizen.invokeNative('0xb909149f2bb5f6da', bitFlags, flag);
};

/**
   * _CLEAR_VOLUME_AREA
   *
   * @param {number} volume
   * @param {number} flag
   * @return {void}
   */
global.ClearVolumeArea = function (volume, flag) {
  return Citizen.invokeNative('0x2fcd528a397e5c88', volume, flag);
};

/**
   * _CLEAR_WEATHER_TYPE_PERSIST_OVERTIME
   *
   * @param {number} milliseconds
   * @return {void}
   */
global.ClearWeatherTypePersistOvertime = function (milliseconds) {
  return Citizen.invokeNative('0xce7690c0a0d1c36d', milliseconds);
};

/**
   * _CLEAR_WEATHER_VARIATION
   *
   * @param {string | number} weatherType
   * @param {boolean} p1
   * @return {void}
   */
global.ClearWeatherVariation = function (weatherType, p1) {
  return Citizen.invokeNative('0x0e71c80fa4ec8147', _ts(weatherType), p1);
};

/**
   * _COUNT_BIT_FLAGS
   *
   * @param {DataView} bitFlags
   * @return {number}
   */
global.CountBitFlags = function (bitFlags) {
  return Citizen.invokeNative('0xe704838f36f93b7b', bitFlags, _r, _ri);
};

/**
   * _CREATE_AI_MEMORY
   * aiMemoryType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/_CREATE_AI_MEMORY
   *
   * @param {DataView} args
   * @param {number} aiMemoryType
   * @return {void}
   */
global.CreateAiMemory = function (args, aiMemoryType) {
  return Citizen.invokeNative('0x88bc5f4aef77fc4e', args, aiMemoryType);
};

/**
   * _CREATE_COLOR_STRING
   * Returns a formatted string (0x%x)
   *
   * @param {number} rgb
   * @return {string | number}
   */
global.CreateColorString = function (rgb) {
  return Citizen.invokeNative('0xbcc2cfadea1aea6c', rgb, _r, _s);
};

/**
   * _CREATE_INCIDENT_WITH_ENTITIES
   * dispatchService: see ENABLE_DISPATCH_SERVICE
   * 
   * The entities must be added to itemSet.
   *
   * @param {number} dispatchService
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} itemSet
   * @param {number} radius
   * @return {[boolean, number]}
   */
global.CreateIncidentWithEntities = function (dispatchService, x, y, z, itemSet, radius) {
  return Citizen.invokeNative('0xab3d3f45436db1d8', dispatchService, _fv(x), _fv(y), _fv(z), itemSet, _fv(radius), _i, _r);
};

/**
   * _DOES_ITEM_HAVE_VALID_BASE
   *
   * @param {number} item
   * @return {boolean}
   */
global.DoesItemHaveValidBase = function (item) {
  return Citizen.invokeNative('0xbdc6e364c9c78178', item, _r);
};

/**
   * _DOES_POP_MULTIPLIER_AREA_EXIST_FOR_VOLUME
   *
   * @param {number} volume
   * @return {boolean}
   */
global.DoesPopMultiplierAreaExistForVolume = function (volume) {
  return Citizen.invokeNative('0x39d6dace323a20b6', volume, _r);
};

/**
   * _DOES_STRING_EXIST_IN_STRING
   *
   * @param {string | number} string1
   * @param {string | number} string2
   * @return {boolean}
   */
global.DoesStringExistInString = function (string1, string2) {
  return Citizen.invokeNative('0x9382d5d43d2aa6ff', string1, string2, _r);
};

/**
   * _FORCE_LIGHTNING_FLASH_AT_COORDS
   * p3 is always -1.0f in the scripts
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p3
   * @return {void}
   */
global.ForceLightningFlashAtCoords = function (x, y, z, p3) {
  return Citizen.invokeNative('0x67943537d179597c', _fv(x), _fv(y), _fv(z), _fv(p3));
};

/**
   * _GAME_FRAMEWORK_MANAGER_GET_MODE
   *
  
   * @return {number}
   */
global.GameFrameworkManagerGetMode = function () {
  return Citizen.invokeNative('0xfaed234c7f53abeb', _r, _ri);
};

/**
   * _GAME_FRAMEWORK_MANAGER_SHUTDOWN
   *
  
   * @return {void}
   */
global.GameFrameworkManagerShutdown = function () {
  return Citizen.invokeNative('0xaff2fd8add927585');
};

/**
   * _GET_AI_PED_DOES_HAVE_EVENT_MEMORY
   *
   * @param {DataView} args
   * @param {number} p1
   * @return {boolean}
   */
global.GetAiPedDoesHaveEventMemory = function (args, p1) {
  return Citizen.invokeNative('0xfdf38e2b711bf78e', args, p1, _r);
};

/**
   * _GET_EASING_CURVE_VALUE
   * https://easings.net/
   * 
   * enum class eEasingCurveType
   * {
   *   TYPE_LINEAR,
   *   TYPE_QUADRATIC_IN,
   *   TYPE_QUADRATIC_OUT,
   *   TYPE_QUADRATIC_INOUT,
   *   TYPE_CUBIC_IN,
   *   TYPE_CUBIC_OUT,
   *   TYPE_CUBIC_INOUT,
   *   TYPE_QUARTIC_IN,
   *   TYPE_QUARTIC_OUT,
   *   TYPE_QUARTIC_INOUT,
   *   TYPE_QUINTIC_IN,
   *   TYPE_QUINTIC_OUT,
   *   TYPE_QUINTIC_INOUT,
   *   TYPE_EXPONENTIAL_IN,
   *   TYPE_EXPONENTIAL_OUT,
   *   TYPE_EXPONENTIAL_INOUT,
   *   TYPE_SINE_IN,
   *   TYPE_SINE_OUT,
   *   TYPE_SINE_INOUT,
   *   TYPE_CIRCULAR_IN,
   *   TYPE_CIRCULAR_OUT,
   *   TYPE_CIRCULAR_INOUT,
   *   TYPE_BOUNCE_IN,
   *   TYPE_BOUNCE_OUT,
   *   TYPE_BOUNCE_INOUT,
   *   TYPE_CUSTOM
   * };
   *
   * @param {number} t
   * @param {number} b
   * @param {number} d
   * @param {number} easingCurveType
   * @return {number}
   */
global.GetEasingCurveValue = function (t, b, d, easingCurveType) {
  return Citizen.invokeNative('0xef50e344a8f93784', _fv(t), _fv(b), _fv(d), easingCurveType, _r, _rf);
};

/**
   * _GET_ENTITY_FROM_ITEM
   *
   * @param {number} item
   * @return {number}
   */
global.GetEntityFromItem = function (item) {
  return Citizen.invokeNative('0xee04c0afd4efaf0e', item, _r, _ri);
};

/**
   * _GET_FORCED_WEATHER
   * Returns the weather type that has been set by a script
   *
  
   * @return {[number, number]}
   */
global.GetForcedWeather = function () {
  return Citizen.invokeNative('0xdd560abef5d3784c', _i, _i);
};

/**
   * _GET_GAME_TIMER_NON_SCALED_CLIPPED
   * Returns rage::fwTimer::sm_nonScaledClippedTime
   *
  
   * @return {number}
   */
global.GetGameTimerNonScaledClipped = function () {
  return Citizen.invokeNative('0x483b8c542103ad72', _r, _ri);
};

/**
   * _GET_ITEM_TYPE
   * 0 = invalid
   * 1 = CEntity
   * 2 = rage::volBase
   * 3 = rage::volSphere
   * 4 = rage::volBox
   * 5 = rage::volAggregate
   * 6 = rage::volCylinder
   * 7 = CScriptedCoverPoint
   * 8 = rage::ptfxScriptInfo
   * 9 = CPed
   * 10 = CVehicle
   * 11 = CObject
   * 12 = CItemSet
   * 13 = CPersistentCharacter
   *
   * @param {number} handle
   * @return {number}
   */
global.GetItemType = function (handle) {
  return Citizen.invokeNative('0xdc8d2ff478df9553', handle, _r, _ri);
};

/**
   * _GET_LOOTING_EVENT_HAS_FIRED
   * Event names in the scripts: MGBegin, MGEnd, ReadyForCut
   *
   * @param {number} ped
   * @param {string | number} eventName
   * @return {boolean}
   */
global.GetLootingEventHasFired = function (ped, eventName) {
  return Citizen.invokeNative('0xf9b91c5129eabc08', ped, eventName, _r);
};

/**
   * _GET_MAX_NUM_INSTRUCTIONS
   *
  
   * @return {number}
   */
global.GetMaxNumInstructions = function () {
  return Citizen.invokeNative('0xc43cd2668b204419', _r, _ri);
};

/**
   * _GET_NEXT_WEATHER_TYPE_HASH_NAME
   *
  
   * @return {number}
   */
global.GetNextWeatherTypeHashName = function () {
  return Citizen.invokeNative('0x51021d36f62aaa83', _r, _ri);
};

/**
   * _GET_NUMBER_OF_INSTRUCTIONS
   *
  
   * @return {number}
   */
global.GetNumberOfInstructions = function () {
  return Citizen.invokeNative('0x72904d3d62af5839', _r, _ri);
};

/**
   * _GET_OBJECT_FROM_INDEXED_ITEM
   *
   * @param {number} item
   * @return {number}
   */
global.GetObjectFromIndexedItem = function (item) {
  return Citizen.invokeNative('0x18013392501ce5dc', item, _r, _ri);
};

/**
   * _GET_PED_FROM_INDEXED_ITEM
   *
   * @param {number} item
   * @return {number}
   */
global.GetPedFromIndexedItem = function (item) {
  return Citizen.invokeNative('0x3ffb15534067dcd4', item, _r, _ri);
};

/**
   * _GET_PREV_WEATHER_TYPE_HASH_NAME
   *
  
   * @return {number}
   */
global.GetPrevWeatherTypeHashName = function () {
  return Citizen.invokeNative('0x4beb42aebca732e9', _r, _ri);
};

/**
   * _GET_RANDOM_WEATHER_TYPE
   *
  
   * @return {number}
   */
global.GetRandomWeatherType = function () {
  return Citizen.invokeNative('0x1359c181bc625503', _r, _ri);
};

/**
   * _GET_RANDOM_WEATHER_TYPE_INDEX
   *
  
   * @return {number}
   */
global.GetRandomWeatherTypeIndex = function () {
  return Citizen.invokeNative('0x7f4ce164d9a11dfe', _r, _ri);
};

/**
   * _GET_STATUS_OF_SAVEGAME_OPERATION
   * Only 0 and 1 are valid for p0, higher values causes the native to return 2.
   *
   * @param {number} p0
   * @return {number}
   */
global.GetStatusOfSavegameOperation = function (p0) {
  return Citizen.invokeNative('0x1b065a2bf7953815', p0, _r, _ri);
};

/**
   * _GET_STRING_FROM_BOOL
   *
   * @param {boolean} value
   * @return {string | number}
   */
global.GetStringFromBool = function (value) {
  return Citizen.invokeNative('0xf216f74101968db0', value, _r, _s);
};

/**
   * _GET_STRING_FROM_FLOAT
   *
   * @param {number} value
   * @param {number} digits
   * @return {string | number}
   */
global.GetStringFromFloat = function (value, digits) {
  return Citizen.invokeNative('0x2b6846401d68e563', _fv(value), digits, _r, _s);
};

/**
   * _GET_STRING_FROM_VECTOR
   * Returns a string in the following format: <<%.4f,%.4f,%.4f>>
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {string | number}
   */
global.GetStringFromVector = function (x, y, z) {
  return Citizen.invokeNative('0x6c4dbf553885f9eb', _fv(x), _fv(y), _fv(z), _r, _s);
};

/**
   * _GET_TEMPERATURE_AT_COORDS
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {number}
   */
global.GetTemperatureAtCoords = function (x, y, z) {
  return Citizen.invokeNative('0xb98b78c3768af6e0', _fv(x), _fv(y), _fv(z), _r, _rf);
};

/**
   * _GET_VEHICLE_FROM_INDEXED_ITEM
   *
   * @param {number} item
   * @return {number}
   */
global.GetVehicleFromIndexedItem = function (item) {
  return Citizen.invokeNative('0xe578c8ae173719b3', item, _r, _ri);
};

/**
   * _GET_VOLUME_FROM_INDEXED_ITEM
   *
   * @param {number} item
   * @return {number}
   */
global.GetVolumeFromIndexedItem = function (item) {
  return Citizen.invokeNative('0xf18af483df70bbde', item, _r, _ri);
};

/**
   * _INT_TO_STRING
   * Note: the buffer should be exactly 32 bytes long
   *
   * @param {number} value
   * @param {string | number} format
   * @param {string | number} buffer
   * @return {void}
   */
global.IntToString = function (value, format, buffer) {
  return Citizen.invokeNative('0xcf11c0ceb40c401b', value, _ts(format), buffer);
};

/**
   * _IS_ANY_BIT_FLAG_SET
   *
   * @param {DataView} bitFlags
   * @return {boolean}
   */
global.IsAnyBitFlagSet = function (bitFlags) {
  return Citizen.invokeNative('0x80e9c316ef84dd81', bitFlags, _r);
};

/**
   * _IS_BASE_A_COVER_POINT
   *
   * @param {number} handle
   * @return {boolean}
   */
global.IsBaseACoverPoint = function (handle) {
  return Citizen.invokeNative('0xfec1d4b5c82c176f', handle, _r);
};

/**
   * _IS_BASE_A_PERSISTENT_CHARACTER
   *
   * @param {number} handle
   * @return {boolean}
   */
global.IsBaseAPersistentCharacter = function (handle) {
  return Citizen.invokeNative('0x716f17f8a0419f95', handle, _r);
};

/**
   * _IS_BIT_FLAG_SET
   *
   * @param {DataView} bitFlags
   * @param {number} flag
   * @return {boolean}
   */
global.IsBitFlagSet = function (bitFlags, flag) {
  return Citizen.invokeNative('0x8f4f050054005c27', bitFlags, flag, _r);
};

/**
   * _IS_GLOBAL_BLOCK_VALID
   *
   * @param {number} index
   * @return {boolean}
   */
global.IsGlobalBlockValid = function (index) {
  return Citizen.invokeNative('0xacb7e1418a8b6e32', index, _r);
};

/**
   * _IS_MISSION_CREATOR_ACTIVE
   *
  
   * @return {boolean}
   */
global.IsMissionCreatorActive = function () {
  return Citizen.invokeNative('0xf236c84c6adfcb2f', _r);
};

/**
   * _IS_PED_DECOMPOSED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedDecomposed = function (ped) {
  return Citizen.invokeNative('0x5170dda6d63acaaa', ped, _r);
};

/**
   * _IS_PLAYER_OWNING_STANDALONE_SP
   *
  
   * @return {boolean}
   */
global.IsPlayerOwningStandaloneSp = function () {
  return Citizen.invokeNative('0x36040772df5e59a0', _r);
};

/**
   * _LOOT_TABLES_GET_INFO
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {boolean} p2
   * @param {number} lootTableKey
   * @param {DataView} p4
   * @param {any} p5
   * @return {void}
   */
global.LootTablesGetInfo = function (ped, p1, p2, lootTableKey, p4, p5) {
  return Citizen.invokeNative('0x48e4d50f87a96aa5', ped, p1, p2, _ch(lootTableKey), p4, p5);
};

/**
   * _QUEUE_SAVEGAME_OPERATION
   * p0 must be < 2
   *
   * @param {number} p0
   * @return {boolean}
   */
global.QueueSavegameOperation = function (p0) {
  return Citizen.invokeNative('0x279b0696da4657eb', p0, _r);
};

/**
   * _READ_INT_AS_FLOAT
   * Reads the passed value as floating point value and returns it.
   * Example: _READ_INT_AS_FLOAT(0x3F800000) returns 1.0f because 0x3F800000 is the hexadecimal representation of 1.0f.
   *
   * @param {number} value
   * @return {number}
   */
global.ReadIntAsFloat = function (value) {
  return Citizen.invokeNative('0xd2c9126410dfa1b2', value, _r, _rf);
};

/**
   * _REMOVE_POP_MULTIPLIER_AREA_FOR_VOLUME
   *
   * @param {number} volume
   * @param {number} p1
   * @return {void}
   */
global.RemovePopMultiplierAreaForVolume = function (volume, p1) {
  return Citizen.invokeNative('0xbd090f5b1db82189', volume, p1);
};

/**
   * _RESET_DISPATCH_MAX_SPAWN_DISTANCE
   *
  
   * @return {void}
   */
global.ResetDispatchMaxSpawnDistance = function () {
  return Citizen.invokeNative('0x54ec7b6bc72bad69');
};

/**
   * _RESET_DISPATCH_MIN_SPAWN_DISTANCE
   *
  
   * @return {void}
   */
global.ResetDispatchMinSpawnDistance = function () {
  return Citizen.invokeNative('0x96498d922d8d0d0a');
};

/**
   * _SET_AI_MEMORY_REACTIONS_ENABLED
   * Used in CAIConditionAmbientAIMemoryReactionsEnabled
   *
   * @param {boolean} enabled
   * @return {void}
   */
global.SetAiMemoryReactionsEnabled = function (enabled) {
  return Citizen.invokeNative('0x6ac4af46a6b8dfb2', enabled);
};

/**
   * _SET_BIT_FLAG
   * Similar to SET_BIT but specifically designed for large (>32 flags) bit flag sets.
   * The flags are stored in an int array where each int has the ability to hold 32 flags.
   * Flags 0-31 would be stored in the first int, flags 32-63 in the second int, etc.
   *
   * @param {DataView} bitFlags
   * @param {number} flag
   * @return {void}
   */
global.SetBitFlag = function (bitFlags, flag) {
  return Citizen.invokeNative('0xe84aac1b22a73e99', bitFlags, flag);
};

/**
   * _SET_DISPATCH_MAX_SPAWN_DISTANCE
   *
   * @param {number} maxSpawnDistance
   * @return {void}
   */
global.SetDispatchMaxSpawnDistance = function (maxSpawnDistance) {
  return Citizen.invokeNative('0x89314fb3463e28de', _fv(maxSpawnDistance));
};

/**
   * _SET_DISPATCH_MIN_SPAWN_DISTANCE
   *
   * @param {number} minSpawnDistance
   * @return {void}
   */
global.SetDispatchMinSpawnDistance = function (minSpawnDistance) {
  return Citizen.invokeNative('0x27a1b170aa8af84c', _fv(minSpawnDistance));
};

/**
   * _SET_GAME_LOGIC_PAUSED
   * Note: this native was added in build 1232.56
   *
  
   * @return {void}
   */
global.SetGameLogicPaused = function () {
  return Citizen.invokeNative('0x550f05cffbd63c8c');
};

/**
   * _SET_GLOBAL_BLOCK_IS_LOADED
   *
   * @param {number} index
   * @param {boolean} toggle
   * @return {void}
   */
global.SetGlobalBlockIsLoaded = function (index, toggle) {
  return Citizen.invokeNative('0xe97240065406cb80', index, toggle);
};

/**
   * _SET_INCIDENT_UNK
   *
   * @param {number} incidentId
   * @return {void}
   */
global.SetIncidentUnk = function (incidentId) {
  return Citizen.invokeNative('0x9617b6e5f6537b63', incidentId);
};

/**
   * _SET_LOOT_PELT_SATCHEL_ITEM
   *
   * @param {number} ped
   * @param {any} item
   * @return {void}
   */
global.SetLootPeltSatchelItem = function (ped, item) {
  return Citizen.invokeNative('0x9b47971234169990', ped, item);
};

/**
   * _SET_OVERRIDE_WEATHER
   *
   * @param {number} weatherType
   * @return {void}
   */
global.SetOverrideWeather = function (weatherType) {
  return Citizen.invokeNative('0xbe83cae8ed77a94f', _ch(weatherType));
};

/**
   * _SET_SNOW_LEVEL
   *
   * @param {number} level
   * @return {void}
   */
global.SetSnowLevel = function (level) {
  return Citizen.invokeNative('0xf6bee7e80ec5ca40', _fv(level));
};

/**
   * _SET_WEATHER_TYPE_2
   *
   * @param {number} weatherType
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {boolean} p4
   * @return {void}
   */
global.SetWeatherType_2 = function (weatherType, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x2c6a07af9aedabd8', _ch(weatherType), p1, p2, p3, p4);
};

/**
   * _SET_WEATHER_TYPE_FROZEN
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetWeatherTypeFrozen = function (toggle) {
  return Citizen.invokeNative('0xd74acdf7db8114af', toggle);
};

/**
   * _SET_WEATHER_VARIATION
   * https://github.com/femga/rdr3_discoveries/blob/master/weather/weather_variations.lua
   *
   * @param {string | number} weatherType
   * @param {string | number} variation
   * @return {void}
   */
global.SetWeatherVariation = function (weatherType, variation) {
  return Citizen.invokeNative('0x3373779baf7caf48', weatherType, variation);
};

/**
   * _SHOULD_USE_24_HOUR_CLOCK
   *
  
   * @return {boolean}
   */
global.ShouldUse_24HourClock = function () {
  return Citizen.invokeNative('0x0177cf20345f44dd', _r);
};

/**
   * _SHOULD_USE_METRIC_MEASUREMENTS_2
   * Same as SHOULD_USE_METRIC_MEASUREMENTS
   *
  
   * @return {boolean}
   */
global.ShouldUseMetricMeasurements_2 = function () {
  return Citizen.invokeNative('0x58bcdc75ba52110a', _r);
};

/**
   * _SHOULD_USE_METRIC_TEMPERATURE
   *
  
   * @return {boolean}
   */
global.ShouldUseMetricTemperature = function () {
  return Citizen.invokeNative('0xff4aaf3275baab4f', _r);
};

/**
   * _SHOULD_USE_METRIC_WEIGHT
   *
  
   * @return {boolean}
   */
global.ShouldUseMetricWeight = function () {
  return Citizen.invokeNative('0x8f24157fedb85ea2', _r);
};

/**
   * MISSIONDATA_GET_CATAGORY
   *
   * @param {number} missionId
   * @return {number}
   */
global.MissiondataGetCatagory = function (missionId) {
  return Citizen.invokeNative('0x57e798b65c45ee17', _ch(missionId), _r, _ri);
};

/**
   * MISSIONDATA_GET_HIGH_SCORE
   *
   * @param {number} missionId
   * @return {number}
   */
global.MissiondataGetHighScore = function (missionId) {
  return Citizen.invokeNative('0x9aababf8313c3516', _ch(missionId), _r, _ri);
};

/**
   * MISSIONDATA_GET_RATING
   *
   * @param {number} missionId
   * @return {number}
   */
global.MissiondataGetRating = function (missionId) {
  return Citizen.invokeNative('0x57e798b54c45ee1a', _ch(missionId), _r, _ri);
};

/**
   * MISSIONDATA_GET_REPLAY_STATE
   *
   * @param {any} p0
   * @return {number}
   */
global.MissiondataGetReplayState = function (p0) {
  return Citizen.invokeNative('0x8c32d86e9556ed86', p0, _r, _ri);
};

/**
   * MISSIONDATA_GET_TEXTURE_NAME
   *
   * @param {number} missionId
   * @return {number}
   */
global.MissiondataGetTextureName = function (missionId) {
  return Citizen.invokeNative('0x57e798b56c45ee15', _ch(missionId), _r, _ri);
};

/**
   * MISSIONDATA_GET_TEXTURE_TXD
   *
   * @param {number} missionId
   * @return {number}
   */
global.MissiondataGetTextureTxd = function (missionId) {
  return Citizen.invokeNative('0x57e798b57c45ee16', _ch(missionId), _r, _ri);
};

/**
   * MISSIONDATA_IS_REQUIRED_STORY_MISSION
   *
   * @param {number} missionId
   * @return {boolean}
   */
global.MissiondataIsRequiredStoryMission = function (missionId) {
  return Citizen.invokeNative('0xe824ce7d13fcb35e', _ch(missionId), _r);
};

/**
   * MISSIONDATA_IS_VALID
   *
   * @param {any} p0
   * @return {boolean}
   */
global.MissiondataIsValid = function (p0) {
  return Citizen.invokeNative('0xe54dc27571d5edc5', p0, _r);
};

/**
   * MISSIONDATA_SET_HIGH_SCORE
   *
   * @param {number} missionId
   * @param {number} score
   * @return {void}
   */
global.MissiondataSetHighScore = function (missionId, score) {
  return Citizen.invokeNative('0x3a04f0169da87a9d', _ch(missionId), score);
};

/**
   * MISSIONDATA_SET_RATING_SCORES
   *
   * @param {number} missionId
   * @param {number} bronzeScore
   * @param {number} silverScore
   * @param {number} goldScore
   * @return {void}
   */
global.MissiondataSetRatingScores = function (missionId, bronzeScore, silverScore, goldScore) {
  return Citizen.invokeNative('0x12f65317708749a5', _ch(missionId), bronzeScore, silverScore, goldScore);
};

/**
   * MISSIONDATA_SET_REPLAY_LOCKED_FOR_CATEGORY
   *
   * @param {number} category
   * @param {boolean} locked
   * @return {void}
   */
global.MissiondataSetReplayLockedForCategory = function (category, locked) {
  return Citizen.invokeNative('0x957a830c9b4b99ea', _ch(category), locked);
};

/**
   * MISSIONDATA_WAS_COMPLETED
   * see: missions.meta
   *
   * @param {number} missionId
   * @return {boolean}
   */
global.MissiondataWasCompleted = function (missionId) {
  return Citizen.invokeNative('0xe54dc27571d5edc4', _ch(missionId), _r);
};

/**
   * _MISSIONDATA_IS_REPLAY_CATEGORY_LOCKED
   *
   * @param {number} category
   * @return {boolean}
   */
global.MissiondataIsReplayCategoryLocked = function (category) {
  return Citizen.invokeNative('0xe145864decc34219', _ch(category), _r);
};

/**
   * _MISSIONDATA_SET_MISSION_RATING
   * MISSION_RATING_INCOMPLETE = 0,
   * MISSION_RATING_SKIPPED,
   * MISSION_RATING_COMPLETE,
   * MISSION_RATING_BRONZE,
   * MISSION_RATING_SILVER,
   * MISSION_RATING_GOLD,
   *
   * @param {number} missionId
   * @param {number} rating
   * @return {void}
   */
global.MissiondataSetMissionRating = function (missionId, rating) {
  return Citizen.invokeNative('0xe824ce7d13fcb300', _ch(missionId), rating);
};

/**
   * _MISSIONDATA_SET_REPLAY_STATE_LOCKED
   * replayState: MISSIONDATA_GET_REPLAY_STATE
   *
   * @param {number} missionId
   * @param {number} replayState
   * @return {void}
   */
global.MissiondataSetReplayStateLocked = function (missionId, replayState) {
  return Citizen.invokeNative('0xe4e2c581f127a11c', _ch(missionId), replayState);
};

/**
   * _MISSIONDATA_TIMECYCLE_BOX_DELETE
   *
  
   * @return {void}
   */
global.MissiondataTimecycleBoxDelete = function () {
  return Citizen.invokeNative('0x7f89e15a8fb8de97');
};

/**
   * _MISSIONDATA_TIMECYCLE_BOX_EXISTS
   *
  
   * @return {boolean}
   */
global.MissiondataTimecycleBoxExists = function () {
  return Citizen.invokeNative('0x7e8f86a4fa33033c', _r);
};

/**
   * _MISSIONDATA_TIMECYCLE_BOX_SET_MODIFIER
   *
   * @param {string | number} timecycleName
   * @return {void}
   */
global.MissiondataTimecycleBoxSetModifier = function (timecycleName) {
  return Citizen.invokeNative('0x25855b1574bf8cd5', _ts(timecycleName));
};

/**
   * _0x07AD9E43FD478527
   *
   * @param {any} p0
   * @param {any} p1
   * @return {boolean}
   */
global.N_0x07AD9E43FD478527 = function (p0, p1) {
  return Citizen.invokeNative('0x07ad9e43fd478527', p0, p1, _r);
};

/**
   * _0xA46FD001D1BE896C
   *
  
   * @return {string | number}
   */
global.N_0xA46FD001D1BE896C = function () {
  return Citizen.invokeNative('0xa46fd001d1be896c', _r, _s);
};

/**
   * _MONEY_DECREMENT_CASH_BALANCE
   *
   * @param {number} amount
   * @return {boolean}
   */
global.MoneyDecrementCashBalance = function (amount) {
  return Citizen.invokeNative('0x466bc8769cf26a7a', amount, _r);
};

/**
   * _MONEY_GET_CASH_BALANCE
   *
  
   * @return {number}
   */
global.MoneyGetCashBalance = function () {
  return Citizen.invokeNative('0x0c02dabfa3b98176', _r, _ri);
};

/**
   * _MONEY_INCREMENT_CASH_BALANCE
   *
   * @param {number} amount
   * @param {number} addReason
   * @return {boolean}
   */
global.MoneyIncrementCashBalance = function (amount, addReason) {
  return Citizen.invokeNative('0xbc3422dc91667621', amount, _ch(addReason), _r);
};

/**
   * _NETWORK_GET_CASH_BALANCE
   *
  
   * @return {number}
   */
global.NetworkGetCashBalance = function () {
  return Citizen.invokeNative('0x8a67120dbc299525', _r, _ri);
};

/**
   * _NETWORK_GET_STRING_CASH_BALANCE
   *
  
   * @return {string | number}
   */
global.NetworkGetStringCashBalance = function () {
  return Citizen.invokeNative('0x282d36ff103d78df', _r, _s);
};

/**
   * _NETWORK_IS_MONEY_BALANCE_NOT_LESS_THAN
   *
   * @param {number} cashBalance
   * @param {number} goldBarBalance
   * @return {boolean}
   */
global.NetworkIsMoneyBalanceNotLessThan = function (cashBalance, goldBarBalance) {
  return Citizen.invokeNative('0xaec5f0119867e457', cashBalance, goldBarBalance, _r);
};

/**
   * CASHINVENTORY_INIT_SESSION_STATUS
   *
  
   * @return {[boolean, number, number]}
   */
global.CashinventoryInitSessionStatus = function () {
  return Citizen.invokeNative('0xc019112f8995dc1c', _i, _i, _r);
};

/**
   * CASHINVENTORY_IS_CONNECTION_FAULTED
   *
  
   * @return {boolean}
   */
global.CashinventoryIsConnectionFaulted = function () {
  return Citizen.invokeNative('0x6ce9fb6332b5e46e', _r);
};

/**
   * _0x38640A8C2DEF011B
   *
   * @param {number} p0
   * @return {number}
   */
global.N_0x38640A8C2DEF011B = function (p0) {
  return Citizen.invokeNative('0x38640a8c2def011b', p0, _r, _ri);
};

/**
   * _0x3FA09DD57B93C0DE
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {any} p3
   * @param {number} p4
   * @return {boolean}
   */
global.N_0x3FA09DD57B93C0DE = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x3fa09dd57b93c0de', _ch(p0), p1, p2, p3, p4, _r);
};

/**
   * _0x92A32BA29622763F
   *
   * @param {number} id
   * @param {number} index
   * @param {DataView} p2
   * @return {boolean}
   */
global.N_0x92A32BA29622763F = function (id, index, p2) {
  return Citizen.invokeNative('0x92a32ba29622763f', id, index, p2, _r);
};

/**
   * _0xA0B7094629724974
   *
   * @param {number} p0
   * @param {any} p1
   * @return {boolean}
   */
global.N_0xA0B7094629724974 = function (p0, p1) {
  return Citizen.invokeNative('0xa0b7094629724974', _ch(p0), p1, _r);
};

/**
   * _0xA3B8D31C13CB4239
   *
   * @param {number} p0
   * @param {number} p1
   * @param {DataView} p2
   * @param {number} p3
   * @param {DataView} p4
   * @param {number} p5
   * @return {boolean}
   */
global.N_0xA3B8D31C13CB4239 = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xa3b8d31c13cb4239', p0, _ch(p1), p2, p3, p4, p5, _r);
};

/**
   * _0xB6F4557060EF0FB4
   *
   * @param {number} p0
   * @param {number} p1
   * @return {number}
   */
global.N_0xB6F4557060EF0FB4 = function (p0, p1) {
  return Citizen.invokeNative('0xb6f4557060ef0fb4', p0, p1, _r, _ri);
};

/**
   * _0xCE54C9ABE6FBC6DB
   *
   * @param {number} p0
   * @return {boolean}
   */
global.N_0xCE54C9ABE6FBC6DB = function (p0) {
  return Citizen.invokeNative('0xce54c9abe6fbc6db', _ch(p0), _r);
};

/**
   * _0xD1555FBC96C88444
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {any} p3
   * @param {number} p4
   * @return {boolean}
   */
global.N_0xD1555FBC96C88444 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xd1555fbc96c88444', _ch(p0), p1, p2, p3, p4, _r);
};

/**
   * _CASHINVENTORY_INIT_SESSION_IS_FAULTED
   *
  
   * @return {boolean}
   */
global.CashinventoryInitSessionIsFaulted = function () {
  return Citizen.invokeNative('0xd1ce92d1d9be170a', _r);
};

/**
   * _CASHINVENTORY_IS_SESSION_READY
   *
  
   * @return {boolean}
   */
global.CashinventoryIsSessionReady = function () {
  return Citizen.invokeNative('0xfcc24220fddac929', _r);
};

/**
   * _CASHINVENTORY_TRANSACTION_ADD_AWARD
   *
   * @param {number} id
   * @param {number} hash
   * @param {DataView} p2
   * @param {DataView} p3
   * @return {boolean}
   */
global.CashinventoryTransactionAddAward = function (id, hash, p2, p3) {
  return Citizen.invokeNative('0x52bde32f21ba3b6d', id, _ch(hash), p2, p3, _r);
};

/**
   * _CASHINVENTORY_TRANSACTION_CHECKOUT
   *
   * @param {number} id
   * @return {boolean}
   */
global.CashinventoryTransactionCheckout = function (id) {
  return Citizen.invokeNative('0x592bc00bf6629be7', id, _r);
};

/**
   * _CASHINVENTORY_TRANSACTION_CHECKOUT_STATUS
   *
   * @param {number} id
   * @return {[boolean, number]}
   */
global.CashinventoryTransactionCheckoutStatus = function (id) {
  return Citizen.invokeNative('0x26c008791d066f37', id, _i, _r);
};

/**
   * _CASHINVENTORY_TRANSACTION_DELETE
   *
   * @param {number} id
   * @return {boolean}
   */
global.CashinventoryTransactionDelete = function (id) {
  return Citizen.invokeNative('0x59ef5d516e2d96b9', id, _r);
};

/**
   * _CASHINVENTORY_TRANSACTION_FIRE_AND_FORGET_ITEM
   *
   * @param {number} actionHash
   * @param {DataView} item
   * @param {number} p3
   * @return {[boolean, number]}
   */
global.CashinventoryTransactionFireAndForgetItem = function (actionHash, item, p3) {
  return Citizen.invokeNative('0xffea09ccec4af32f', _ch(actionHash), _i, item, p3, _r);
};

/**
   * _CASHINVENTORY_TRANSACTION_GET_ACTION
   *
   * @param {number} id
   * @return {number}
   */
global.CashinventoryTransactionGetAction = function (id) {
  return Citizen.invokeNative('0xbd2d520c51ccff52', id, _r, _ri);
};

/**
   * _CASHINVENTORY_TRANSACTION_GET_BASKET_IS_VALID
   *
   * @param {number} id
   * @return {boolean}
   */
global.CashinventoryTransactionGetBasketIsValid = function (id) {
  return Citizen.invokeNative('0x52a226adf4a270d2', id, _r);
};

/**
   * _CASHINVENTORY_TRANSACTION_GET_ITEM_INFO
   *
   * @param {number} id
   * @param {number} index
   * @param {DataView} itemInfo
   * @return {boolean}
   */
global.CashinventoryTransactionGetItemInfo = function (id, index, itemInfo) {
  return Citizen.invokeNative('0x7616b5f0895c2d99', id, index, itemInfo, _r);
};

/**
   * _CASHINVENTORY_TRANSACTION_GET_NUM_OF_ITEMS
   *
   * @param {number} id
   * @return {number}
   */
global.CashinventoryTransactionGetNumOfItems = function (id) {
  return Citizen.invokeNative('0xcf2d04d076847478', id, _r, _ri);
};

/**
   * _CASHINVENTORY_TRANSACTION_RESPONSE_GET_ITEM_INFO
   *
   * @param {number} id
   * @param {number} index
   * @param {DataView} itemInfo
   * @return {boolean}
   */
global.CashinventoryTransactionResponseGetItemInfo = function (id, index, itemInfo) {
  return Citizen.invokeNative('0x98412398bbe73f61', id, index, itemInfo, _r);
};

/**
   * _CASHINVENTORY_TRANSACTION_START
   *
   * @param {number} type
   * @param {number} actionHash
   * @return {[boolean, number]}
   */
global.CashinventoryTransactionStart = function (type, actionHash) {
  return Citizen.invokeNative('0xf039ec27f4490e96', _i, _ch(type), _ch(actionHash), _r);
};

/**
   * _CASHINVENTORY_TRANSACTION_VALIDATE_ITEM
   *
   * @param {number} p0
   * @param {DataView} p1
   * @return {number}
   */
global.CashinventoryTransactionValidateItem = function (p0, p1) {
  return Citizen.invokeNative('0x6c9f12700bce69f4', _ch(p0), p1, _r, _ri);
};

/**
   * ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID
   *
   * @param {number} netId
   * @param {boolean} toggle
   * @return {void}
   */
global.ActivateDamageTrackerOnNetworkId = function (netId, toggle) {
  return Citizen.invokeNative('0xd45b1ffccd52ff19', netId, toggle);
};

/**
   * CAN_REGISTER_MISSION_ENTITIES
   *
   * @param {number} pedAmt
   * @param {number} vehicleAmt
   * @param {number} objectAmt
   * @param {number} pickupAmt
   * @return {boolean}
   */
global.CanRegisterMissionEntities = function (pedAmt, vehicleAmt, objectAmt, pickupAmt) {
  return Citizen.invokeNative('0x69778e7564bade6d', pedAmt, vehicleAmt, objectAmt, pickupAmt, _r);
};

/**
   * CAN_REGISTER_MISSION_OBJECTS
   *
   * @param {number} amount
   * @return {boolean}
   */
global.CanRegisterMissionObjects = function (amount) {
  return Citizen.invokeNative('0x800dd4721a8b008b', amount, _r);
};

/**
   * CAN_REGISTER_MISSION_PEDS
   *
   * @param {number} amount
   * @return {boolean}
   */
global.CanRegisterMissionPeds = function (amount) {
  return Citizen.invokeNative('0xbcbf4fef9fa5d781', amount, _r);
};

/**
   * CAN_REGISTER_MISSION_PICKUPS
   *
   * @param {number} amount
   * @return {boolean}
   */
global.CanRegisterMissionPickups = function (amount) {
  return Citizen.invokeNative('0xf0460c7bf80011ea', amount, _r);
};

/**
   * CAN_REGISTER_MISSION_VEHICLES
   *
   * @param {number} amount
   * @return {boolean}
   */
global.CanRegisterMissionVehicles = function (amount) {
  return Citizen.invokeNative('0x7277f1f2e085ee74', amount, _r);
};

/**
   * CLEAR_SERVICE_EVENT_ARGUMENTS
   * Old name: _CLEAR_LAUNCH_PARAMS
   *
  
   * @return {void}
   */
global.ClearServiceEventArguments = function () {
  return Citizen.invokeNative('0x966dd84fb6a46017');
};

/**
   * CLOUD_DID_REQUEST_SUCCEED
   *
   * @param {number} id
   * @return {boolean}
   */
global.CloudDidRequestSucceed = function (id) {
  return Citizen.invokeNative('0x3a3d5568af297cd5', id, _r);
};

/**
   * CLOUD_HAS_REQUEST_COMPLETED
   *
   * @param {number} id
   * @return {boolean}
   */
global.CloudHasRequestCompleted = function (id) {
  return Citizen.invokeNative('0x4c61b39930d045da', id, _r);
};

/**
   * CONVERT_POSIX_TIME
   * Takes the specified time and writes it to the structure specified in the second argument.
   * 
   * struct date_time
   * {
   *     int year;
   *     int PADDING1;
   *     int month;
   *     int PADDING2;
   *     int day;
   *     int PADDING3;
   *     int hour;
   *     int PADDING4;
   *     int minute;
   *     int PADDING5;
   *     int second;
   *     int PADDING6;
   * };
   *
   * @param {number} posixTime
   * @param {DataView} timeStructure
   * @return {void}
   */
global.ConvertPosixTime = function (posixTime, timeStructure) {
  return Citizen.invokeNative('0xac97af97fa68e5d5', posixTime, timeStructure);
};

/**
   * GET_CLOUD_TIME_AS_INT
   *
  
   * @return {number}
   */
global.GetCloudTimeAsInt = function () {
  return Citizen.invokeNative('0x9a73240b49945c76', _r, _ri);
};

/**
   * GET_LAUNCH_PARAM_VALUE
   *
   * @param {string | number} paramName
   * @return {string | number}
   */
global.GetLaunchParamValue = function (paramName) {
  return Citizen.invokeNative('0x65e65ca6a0fe59d4', _ts(paramName), _r, _s);
};

/**
   * GET_MAX_NUM_NETWORK_OBJECTS
   * Always returns 60
   *
  
   * @return {number}
   */
global.GetMaxNumNetworkObjects = function () {
  return Citizen.invokeNative('0xc7be335216b5ec7c', _r, _ri);
};

/**
   * GET_MAX_NUM_NETWORK_PEDS
   * Always returns 110
   *
  
   * @return {number}
   */
global.GetMaxNumNetworkPeds = function () {
  return Citizen.invokeNative('0x0c1f7d49c39d2289', _r, _ri);
};

/**
   * GET_MAX_NUM_NETWORK_PICKUPS
   * Always returns 80
   *
  
   * @return {number}
   */
global.GetMaxNumNetworkPickups = function () {
  return Citizen.invokeNative('0xa72835064dd63e4c', _r, _ri);
};

/**
   * GET_MAX_NUM_NETWORK_VEHICLES
   * Always returns 40
   *
  
   * @return {number}
   */
global.GetMaxNumNetworkVehicles = function () {
  return Citizen.invokeNative('0x0afce529f69b21ff', _r, _ri);
};

/**
   * GET_NETWORK_TIME
   *
  
   * @return {number}
   */
global.GetNetworkTime = function () {
  return Citizen.invokeNative('0x7a5487fe9faa6b48', _r, _ri);
};

/**
   * GET_NETWORK_TIME_ACCURATE
   *
  
   * @return {number}
   */
global.GetNetworkTimeAccurate = function () {
  return Citizen.invokeNative('0x89023fbbf9200e9f', _r, _ri);
};

/**
   * GET_NUM_CREATED_MISSION_OBJECTS
   *
   * @param {boolean} p0
   * @return {number}
   */
global.GetNumCreatedMissionObjects = function (p0) {
  return Citizen.invokeNative('0x12b6281b6c6706c0', p0, _r, _ri);
};

/**
   * GET_NUM_CREATED_MISSION_PEDS
   *
   * @param {boolean} p0
   * @return {number}
   */
global.GetNumCreatedMissionPeds = function (p0) {
  return Citizen.invokeNative('0xcb215c4b56a7fae7', p0, _r, _ri);
};

/**
   * GET_NUM_CREATED_MISSION_VEHICLES
   *
   * @param {boolean} p0
   * @return {number}
   */
global.GetNumCreatedMissionVehicles = function (p0) {
  return Citizen.invokeNative('0x0cd9ab83489430ea', p0, _r, _ri);
};

/**
   * GET_NUM_RESERVED_MISSION_OBJECTS
   * p0 appears to be for MP
   *
   * @param {boolean} p0
   * @return {number}
   */
global.GetNumReservedMissionObjects = function (p0) {
  return Citizen.invokeNative('0xaa81b5f10bc43ac2', p0, _r, _ri);
};

/**
   * GET_NUM_RESERVED_MISSION_PEDS
   * p0 appears to be for MP
   *
   * @param {boolean} p0
   * @return {number}
   */
global.GetNumReservedMissionPeds = function (p0) {
  return Citizen.invokeNative('0x1f13d5ae5cb17e17', p0, _r, _ri);
};

/**
   * GET_NUM_RESERVED_MISSION_VEHICLES
   * p0 appears to be for MP
   *
   * @param {boolean} p0
   * @return {number}
   */
global.GetNumReservedMissionVehicles = function (p0) {
  return Citizen.invokeNative('0xcf3a965906452031', p0, _r, _ri);
};

/**
   * GET_RESERVED_MISSION_ENTITIES_IN_AREA
   * Used in Script Function NET_ACE_CLIENT_VERIFY_ENTITY_RESERVATIONS
   * Coords: Slot world position
   * 
   * Old name: _GET_RESERVATIONS_FOR_SLOT_WORLD_POSITION
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {boolean} p3
   * @return {[number, number, number, number]}
   */
global.GetReservedMissionEntitiesInArea = function (x, y, z, p3) {
  return Citizen.invokeNative('0x5e71e72a94985214', _fv(x), _fv(y), _fv(z), p3, _i, _i, _i, _i);
};

/**
   * GET_STATUS_OF_TEXTURE_DOWNLOAD
   * 0 = succeeded
   * 1 = pending
   * 2 = failed
   *
   * @param {number} textureDownloadId
   * @return {number}
   */
global.GetStatusOfTextureDownload = function (textureDownloadId) {
  return Citizen.invokeNative('0x8bd6c6dea20e82c6', textureDownloadId, _r, _ri);
};

/**
   * GET_TIME_DIFFERENCE
   * Subtracts the second argument from the first.
   *
   * @param {number} timeA
   * @param {number} timeB
   * @return {number}
   */
global.GetTimeDifference = function (timeA, timeB) {
  return Citizen.invokeNative('0xa2c6fc031d46fff0', timeA, timeB, _r, _ri);
};

/**
   * GET_TIME_OFFSET
   * Adds the first argument to the second.
   *
   * @param {number} timeA
   * @param {number} timeB
   * @return {number}
   */
global.GetTimeOffset = function (timeA, timeB) {
  return Citizen.invokeNative('0x017008ccdad48503', timeA, timeB, _r, _ri);
};

/**
   * GET_UNIQUE_INT_FOR_PLAYER
   *
   * @param {number} player
   * @return {number}
   */
global.GetUniqueIntForPlayer = function (player) {
  return Citizen.invokeNative('0x07f723401b9d921c', player, _r, _ri);
};

/**
   * HAS_NETWORK_TIME_STARTED
   *
  
   * @return {boolean}
   */
global.HasNetworkTimeStarted = function () {
  return Citizen.invokeNative('0x46718aceedeafc84', _r);
};

/**
   * IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID
   *
   * @param {number} netId
   * @return {boolean}
   */
global.IsDamageTrackerActiveOnNetworkId = function (netId) {
  return Citizen.invokeNative('0x6e192e33ad436366', netId, _r);
};

/**
   * IS_ENTITY_A_GHOST
   * Old name: _IS_ENTITY_GHOSTED_TO_LOCAL_PLAYER
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityAGhost = function (entity) {
  return Citizen.invokeNative('0x21d04d7bc538c146', entity, _r);
};

/**
   * IS_NETWORK_ID_OWNED_BY_PARTICIPANT
   *
   * @param {number} netId
   * @return {boolean}
   */
global.IsNetworkIdOwnedByParticipant = function (netId) {
  return Citizen.invokeNative('0xa1607996431332df', netId, _r);
};

/**
   * IS_OBJECT_REASSIGNMENT_IN_PROGRESS
   * Note: this native was added in build 1311.16
   *
  
   * @return {boolean}
   */
global.IsObjectReassignmentInProgress = function () {
  return Citizen.invokeNative('0x8fe9eb11ec9cc23a', _r);
};

/**
   * IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {boolean}
   */
global.IsSphereVisibleToAnotherMachine = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xd82cf8e64c8729d8', p0, p1, p2, p3, p4, _r);
};

/**
   * IS_SPHERE_VISIBLE_TO_PLAYER
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {boolean}
   */
global.IsSphereVisibleToPlayer = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xdc3a310219e5da62', p0, p1, p2, p3, p4, p5, _r);
};

/**
   * IS_TIME_LESS_THAN
   * Subtracts the second argument from the first, then returns whether the result is negative.
   *
   * @param {number} timeA
   * @param {number} timeB
   * @return {boolean}
   */
global.IsTimeLessThan = function (timeA, timeB) {
  return Citizen.invokeNative('0xcb2cf5148012c8d0', timeA, timeB, _r);
};

/**
   * IS_TIME_MORE_THAN
   * Subtracts the first argument from the second, then returns whether the result is negative.
   *
   * @param {number} timeA
   * @param {number} timeB
   * @return {boolean}
   */
global.IsTimeMoreThan = function (timeA, timeB) {
  return Citizen.invokeNative('0xde350f8651e4346c', timeA, timeB, _r);
};

/**
   * KEEP_NETWORK_ID_IN_FAST_INSTANCE
   *
   * @param {number} netId
   * @param {boolean} p1
   * @param {number} p2
   * @return {void}
   */
global.KeepNetworkIdInFastInstance = function (netId, p1, p2) {
  return Citizen.invokeNative('0xe1bc73d6815ba361', netId, p1, p2);
};

/**
   * NETWORK_ACCEPT_RS_INVITE
   *
   * @param {number} p0
   * @return {boolean}
   */
global.NetworkAcceptRsInvite = function (p0) {
  return Citizen.invokeNative('0xb2cea5105aac8dde', p0, _r);
};

/**
   * NETWORK_ACCESS_TUNABLE_BOOL
   *
   * @param {number} tunableContext
   * @param {number} tunableName
   * @return {boolean}
   */
global.NetworkAccessTunableBool = function (tunableContext, tunableName) {
  return Citizen.invokeNative('0xaa6a47a573abb75a', _ch(tunableContext), _ch(tunableName), _r);
};

/**
   * NETWORK_ACCESS_TUNABLE_INT
   *
   * @param {number} tunableContext
   * @param {number} tunableName
   * @return {[boolean, number]}
   */
global.NetworkAccessTunableInt = function (tunableContext, tunableName) {
  return Citizen.invokeNative('0x8be1146dfd5d4468', _ch(tunableContext), _ch(tunableName), _i, _r);
};

/**
   * NETWORK_ACTION_PLATFORM_INVITE
   *
  
   * @return {boolean}
   */
global.NetworkActionPlatformInvite = function () {
  return Citizen.invokeNative('0x3b82acc3f4b6240c', _r);
};

/**
   * NETWORK_ACTIVITY_RESET_TO_IDLE
   *
  
   * @return {void}
   */
global.NetworkActivityResetToIdle = function () {
  return Citizen.invokeNative('0x3fe141fdb990e3d1');
};

/**
   * NETWORK_ACTIVITY_SET_CURRENT
   *
   * @param {number} netPlaylistActivity
   * @return {void}
   */
global.NetworkActivitySetCurrent = function (netPlaylistActivity) {
  return Citizen.invokeNative('0x9adac065d9f6706f', netPlaylistActivity);
};

/**
   * NETWORK_ADD_FRIEND
   *
   * @param {DataView} gamerHandle
   * @param {string | number} message
   * @return {boolean}
   */
global.NetworkAddFriend = function (gamerHandle, message) {
  return Citizen.invokeNative('0x8e02d73914064223', gamerHandle, _ts(message), _r);
};

/**
   * NETWORK_ALLOW_ALL_ENTITY_FADING_FOR_INSTANCES
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.NetworkAllowAllEntityFadingForInstances = function (toggle) {
  return Citizen.invokeNative('0x4b05b97ba46f419d', toggle);
};

/**
   * NETWORK_ALLOW_ENTITY_FADING_FOR_INSTANCES
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.NetworkAllowEntityFadingForInstances = function (entity, toggle) {
  return Citizen.invokeNative('0xf3354d6ca46f419d', entity, toggle);
};

/**
   * NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION
   * Old name: _NETWORK_ALLOW_LOCAL_ENTITY_ATTACHMENT
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.NetworkAllowRemoteAttachmentModification = function (entity, toggle) {
  return Citizen.invokeNative('0x267c78c60e806b9a', entity, toggle);
};

/**
   * NETWORK_ARE_HANDLES_THE_SAME
   *
   * @param {DataView} gamerHandle1
   * @param {DataView} gamerHandle2
   * @return {boolean}
   */
global.NetworkAreHandlesTheSame = function (gamerHandle1, gamerHandle2) {
  return Citizen.invokeNative('0x57dba049e110f217', gamerHandle1, gamerHandle2, _r);
};

/**
   * NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION
   * Old name: _NETWORK_IS_PLAYER_EQUAL_TO_INDEX
   *
   * @param {number} player
   * @param {number} index
   * @return {boolean}
   */
global.NetworkArePlayersInSameTutorialSession = function (player, index) {
  return Citizen.invokeNative('0x9de986fc9a87c474', player, index, _r);
};

/**
   * NETWORK_AUTO_SESSION_CAN_SPLIT_SESSION
   *
  
   * @return {[boolean, number]}
   */
global.NetworkAutoSessionCanSplitSession = function () {
  return Citizen.invokeNative('0xe404bff0aba23cdc', _i, _r);
};

/**
   * NETWORK_AUTO_SESSION_FINISH_INSTANCE
   *
  
   * @return {void}
   */
global.NetworkAutoSessionFinishInstance = function () {
  return Citizen.invokeNative('0xbb51299166b844f3');
};

/**
   * NETWORK_AUTO_SESSION_IS_ALLOWED_TO_MERGE
   *
  
   * @return {boolean}
   */
global.NetworkAutoSessionIsAllowedToMerge = function () {
  return Citizen.invokeNative('0xaaded99a6b268a27', _r);
};

/**
   * NETWORK_AUTO_SESSION_IS_OBJECT_CREATION_PAUSED
   *
  
   * @return {boolean}
   */
global.NetworkAutoSessionIsObjectCreationPaused = function () {
  return Citizen.invokeNative('0x0e2c3aee6ce603b7', _r);
};

/**
   * NETWORK_AUTO_SESSION_SPLIT_SESSION
   *
   * @param {number} playersToTake
   * @param {number} maxInstancePlayers
   * @param {number} sessionFlags
   * @param {number} bucketId
   * @return {boolean}
   */
global.NetworkAutoSessionSplitSession = function (playersToTake, maxInstancePlayers, sessionFlags, bucketId) {
  return Citizen.invokeNative('0xc223d299c670413d', playersToTake, maxInstancePlayers, sessionFlags, bucketId, _r);
};

/**
   * NETWORK_AWARD_HAS_REACHED_MAXCLAIM
   *
   * @param {any} p0
   * @return {boolean}
   */
global.NetworkAwardHasReachedMaxclaim = function (p0) {
  return Citizen.invokeNative('0xfbe782b3165ac8ec', p0, _r);
};

/**
   * NETWORK_CAN_ACCESS_MULTIPLAYER
   *
  
   * @return {[boolean, number]}
   */
global.NetworkCanAccessMultiplayer = function () {
  return Citizen.invokeNative('0xaf50da1a3f8b1ba4', _i, _r);
};

/**
   * NETWORK_CAN_REFRESH_FRIEND_PAGE
   *
  
   * @return {boolean}
   */
global.NetworkCanRefreshFriendPage = function () {
  return Citizen.invokeNative('0x1af5e28e64a76a9f', _r);
};

/**
   * NETWORK_CAN_SESSION_END
   *
  
   * @return {boolean}
   */
global.NetworkCanSessionEnd = function () {
  return Citizen.invokeNative('0x4eebc3694e49c572', _r);
};

/**
   * NETWORK_CAN_VIEW_GAMER_USER_CONTENT
   *
   * @param {DataView} gamerHandle
   * @return {boolean}
   */
global.NetworkCanViewGamerUserContent = function (gamerHandle) {
  return Citizen.invokeNative('0x246545c37c27a717', gamerHandle, _r);
};

/**
   * NETWORK_CHECK_ACCESS_AND_ALERT_IF_FAIL
   *
  
   * @return {boolean}
   */
global.NetworkCheckAccessAndAlertIfFail = function () {
  return Citizen.invokeNative('0x2a8112a974de1ef6', _r);
};

/**
   * NETWORK_CHECK_COMMUNICATION_PRIVILEGES
   *
   * @param {number} p0
   * @return {boolean}
   */
global.NetworkCheckCommunicationPrivileges = function (p0) {
  return Citizen.invokeNative('0x83f28ce49fbbffba', p0, _r);
};

/**
   * NETWORK_CHECK_USER_CONTENT_PRIVILEGES
   *
   * @param {number} p0
   * @return {boolean}
   */
global.NetworkCheckUserContentPrivileges = function (p0) {
  return Citizen.invokeNative('0x595f028698072dd9', p0, _r);
};

/**
   * NETWORK_CLEAR_CLOCK_TIME_OVERRIDE
   *
  
   * @return {void}
   */
global.NetworkClearClockTimeOverride = function () {
  return Citizen.invokeNative('0xd972df67326f966e');
};

/**
   * NETWORK_CLEAR_FOUND_GAMERS
   *
  
   * @return {void}
   */
global.NetworkClearFoundGamers = function () {
  return Citizen.invokeNative('0x6d14ccee1b40381a');
};

/**
   * NETWORK_CLEAR_GET_GAMER_STATUS
   *
  
   * @return {void}
   */
global.NetworkClearGetGamerStatus = function () {
  return Citizen.invokeNative('0x86e0660e4f5c956d');
};

/**
   * NETWORK_CLEAR_PLATFORM_INVITE
   *
  
   * @return {void}
   */
global.NetworkClearPlatformInvite = function () {
  return Citizen.invokeNative('0xa4484173759749b1');
};

/**
   * NETWORK_CONCEAL_PLAYER
   *
   * @param {number} player
   * @param {boolean} toggle
   * @return {void}
   */
global.NetworkConcealPlayer = function (player, toggle) {
  return Citizen.invokeNative('0xbbdf066252829606', player, toggle);
};

/**
   * NETWORK_DID_FIND_GAMERS_SUCCEED
   *
  
   * @return {boolean}
   */
global.NetworkDidFindGamersSucceed = function () {
  return Citizen.invokeNative('0xf9b83b77929d8863', _r);
};

/**
   * NETWORK_DID_GET_GAMER_STATUS_SUCCEED
   *
  
   * @return {boolean}
   */
global.NetworkDidGetGamerStatusSucceed = function () {
  return Citizen.invokeNative('0x5ae17c6b0134b7f1', _r);
};

/**
   * NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.NetworkDisableLeaveRemotePedBehind = function (toggle) {
  return Citizen.invokeNative('0xc505036a35afd01b', toggle);
};

/**
   * NETWORK_DISABLE_PROXIMITY_MIGRATION
   *
   * @param {number} netId
   * @return {void}
   */
global.NetworkDisableProximityMigration = function (netId) {
  return Citizen.invokeNative('0x407091cf6037118e', netId);
};

/**
   * NETWORK_DISABLE_REALTIME_MULTIPLAYER
   *
  
   * @return {void}
   */
global.NetworkDisableRealtimeMultiplayer = function () {
  return Citizen.invokeNative('0x236905c700fdb54d');
};

/**
   * NETWORK_DISPLAYNAMES_FROM_HANDLES_START
   * Hardcoded to return -1.
   *
   * @param {DataView} p0
   * @param {any} p1
   * @return {number}
   */
global.NetworkDisplaynamesFromHandlesStart = function (p0, p1) {
  return Citizen.invokeNative('0xd66c9e72b3cc4982', p0, p1, _r, _ri);
};

/**
   * NETWORK_DOES_NETWORK_ID_EXIST
   *
   * @param {number} netId
   * @return {boolean}
   */
global.NetworkDoesNetworkIdExist = function (netId) {
  return Citizen.invokeNative('0x38ce16c96bd11344', netId, _r);
};

/**
   * NETWORK_DOES_TUNABLE_EXIST
   *
   * @param {number} tunableContext
   * @param {number} tunableName
   * @return {boolean}
   */
global.NetworkDoesTunableExist = function (tunableContext, tunableName) {
  return Citizen.invokeNative('0x85e5f8b9b898b20a', _ch(tunableContext), _ch(tunableName), _r);
};

/**
   * NETWORK_DUMP_NET_IF_CONFIG
   * nullsub, doesn't do anything
   *
  
   * @return {void}
   */
global.NetworkDumpNetIfConfig = function () {
  return Citizen.invokeNative('0xaedf1bc1c133d6e3');
};

/**
   * NETWORK_END_TUTORIAL_SESSION
   *
  
   * @return {void}
   */
global.NetworkEndTutorialSession = function () {
  return Citizen.invokeNative('0xd0afaff5a51d72f7');
};

/**
   * NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY
   *
   * @param {number} player
   * @param {number} entity
   * @return {[boolean, number]}
   */
global.NetworkGetAssistedDamageOfEntity = function (player, entity) {
  return Citizen.invokeNative('0x4caca84440fa26f6', player, entity, _i, _r);
};

/**
   * NETWORK_GET_AVERAGE_LATENCY
   * Old name: _NETWORK_GET_AVERAGE_LATENCY_FOR_PLAYER
   *
   * @param {number} player
   * @return {number}
   */
global.NetworkGetAverageLatency = function (player) {
  return Citizen.invokeNative('0xd414be129bb81b32', player, _r, _rf);
};

/**
   * NETWORK_GET_AVERAGE_PACKET_LOSS
   * Old name: _NETWORK_GET_AVERAGE_PACKET_LOSS_FOR_PLAYER
   *
   * @param {number} player
   * @return {number}
   */
global.NetworkGetAveragePacketLoss = function (player) {
  return Citizen.invokeNative('0x350c23949e43686c', player, _r, _rf);
};

/**
   * NETWORK_GET_AVERAGE_PING
   * Same as NETWORK_GET_AVERAGE_LATENCY (0xD414BE129BB81B32)
   * 
   * Old name: _NETWORK_GET_AVERAGE_LATENCY_FOR_PLAYER_2
   *
   * @param {number} player
   * @return {number}
   */
global.NetworkGetAveragePing = function (player) {
  return Citizen.invokeNative('0x0e3a041ed6ac2b45', player, _r, _rf);
};

/**
   * NETWORK_GET_DESTROYER_OF_NETWORK_ID
   *
   * @param {number} netId
   * @return {[number, number]}
   */
global.NetworkGetDestroyerOfNetworkId = function (netId) {
  return Citizen.invokeNative('0x7a1adeef01740a24', netId, _i, _r, _ri);
};

/**
   * NETWORK_GET_DISPLAYNAMES_FROM_HANDLES
   * Hardcoded to return zero.
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {number}
   */
global.NetworkGetDisplaynamesFromHandles = function (p0, p1, p2) {
  return Citizen.invokeNative('0x58cc181719256197', p0, p1, p2, _r, _ri);
};

/**
   * NETWORK_GET_ENTITY_FROM_NETWORK_ID
   *
   * @param {number} netId
   * @return {number}
   */
global.NetworkGetEntityFromNetworkId = function (netId) {
  return Citizen.invokeNative('0xce4e5d9b0a4ff560', netId, _r, _ri);
};

/**
   * NETWORK_GET_ENTITY_IS_NETWORKED
   *
   * @param {number} entity
   * @return {boolean}
   */
global.NetworkGetEntityIsNetworked = function (entity) {
  return Citizen.invokeNative('0xc7827959479dcc78', entity, _r);
};

/**
   * NETWORK_GET_ENTITY_KILLER_OF_PLAYER
   *
   * @param {number} player
   * @return {[Entity, number]}
   */
global.NetworkGetEntityKillerOfPlayer = function (player) {
  return Citizen.invokeNative('0x42b2daa6b596f5f8', player, _i, _r, _ri);
};

/**
   * NETWORK_GET_GAMERTAG_FROM_HANDLE
   * Always returns a null string.
   *
   * @param {DataView} gamerHandle
   * @return {string | number}
   */
global.NetworkGetGamertagFromHandle = function (gamerHandle) {
  return Citizen.invokeNative('0x426141162ebe5cdb', gamerHandle, _r, _s);
};

/**
   * NETWORK_GET_GAME_MODE
   *
  
   * @return {number}
   */
global.NetworkGetGameMode = function () {
  return Citizen.invokeNative('0x225640e09effdc3f', _r, _ri);
};

/**
   * NETWORK_GET_GLOBAL_CLOCK
   *
  
   * @return {[boolean, number, number, number]}
   */
global.NetworkGetGlobalClock = function () {
  return Citizen.invokeNative('0x11a7adcd629e170f', _i, _i, _i, _r);
};

/**
   * NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK
   *
  
   * @return {[number, number, number]}
   */
global.NetworkGetGlobalMultiplayerClock = function () {
  return Citizen.invokeNative('0x6d03bfbd643b2a02', _i, _i, _i);
};

/**
   * NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT
   * Old name: _NETWORK_GET_OLDEST_RESEND_COUNT_FOR_PLAYER
   *
   * @param {number} player
   * @return {number}
   */
global.NetworkGetHighestReliableResendCount = function (player) {
  return Citizen.invokeNative('0x52c1eadaf7b10302', player, _r, _ri);
};

/**
   * NETWORK_GET_HOST_OF_SCRIPT
   *
   * @param {string | number} scriptName
   * @param {number} p1
   * @param {number} p2
   * @return {number}
   */
global.NetworkGetHostOfScript = function (scriptName, p1, p2) {
  return Citizen.invokeNative('0x1d6a14f1f9a736fc', _ts(scriptName), p1, p2, _r, _ri);
};

/**
   * NETWORK_GET_HOST_OF_THIS_SCRIPT
   *
  
   * @return {number}
   */
global.NetworkGetHostOfThisScript = function () {
  return Citizen.invokeNative('0xc7b4d79b01fa7a5c', _r, _ri);
};

/**
   * NETWORK_GET_HOST_OF_THREAD
   *
   * @param {number} threadId
   * @return {number}
   */
global.NetworkGetHostOfThread = function (threadId) {
  return Citizen.invokeNative('0xb4a25351d79b444c', threadId, _r, _ri);
};

/**
   * NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT
   *
  
   * @return {number}
   */
global.NetworkGetInstanceIdOfThisScript = function () {
  return Citizen.invokeNative('0x638a3a81733086db', _r, _ri);
};

/**
   * NETWORK_GET_LOCAL_HANDLE
   *
   * @param {DataView} gamerHandle
   * @return {void}
   */
global.NetworkGetLocalHandle = function (gamerHandle) {
  return Citizen.invokeNative('0xe86051786b66cd8e', gamerHandle);
};

/**
   * NETWORK_GET_MAX_NUM_PARTICIPANTS
   * Seems to always return 0, but it's used in quite a few loops.
   * 
   * for (num3 = 0; num3 < NETWORK::0xCCD8C02D(); num3++)
   *     {
   *         if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::0x98F3B274(num3)) != 0)
   *         {
   *             var num5 = NETWORK::NETWORK_GET_PLAYER_INDEX(PLAYER::0x98F3B274(num3));
   *
  
   * @return {number}
   */
global.NetworkGetMaxNumParticipants = function () {
  return Citizen.invokeNative('0xa6c90fbc38e395ee', _r, _ri);
};

/**
   * NETWORK_GET_NETWORK_ID_FROM_ENTITY
   *
   * @param {number} entity
   * @return {number}
   */
global.NetworkGetNetworkIdFromEntity = function (entity) {
  return Citizen.invokeNative('0xa11700682f3ad45c', entity, _r, _ri);
};

/**
   * NETWORK_GET_NETWORK_ID_FROM_ROPE_ID
   *
   * @param {number} ropeId
   * @return {number}
   */
global.NetworkGetNetworkIdFromRopeId = function (ropeId) {
  return Citizen.invokeNative('0x42871327315edae8', ropeId, _r, _ri);
};

/**
   * NETWORK_GET_NET_STATISTICS_INFO
   * nullsub, doesn't do anything
   *
  
   * @return {void}
   */
global.NetworkGetNetStatisticsInfo = function () {
  return Citizen.invokeNative('0x6fd992c4a1c1b986');
};

/**
   * NETWORK_GET_NP_UNAVAILABLE_REASON
   * Hardcoded to return zero.
   * 
   * ==== PS4 specific info ====
   * 
   * Returns some sort of unavailable reason:
   * -1 = REASON_INVALID
   *  0 = REASON_OTHER
   *  1 = REASON_SYSTEM_UPDATE
   *  2 = REASON_GAME_UPDATE
   *  3 = REASON_SIGNED_OUT
   *  4 = REASON_AGE
   *  5 = REASON_CONNECTION
   * 
   * =================================
   *
  
   * @return {number}
   */
global.NetworkGetNpUnavailableReason = function () {
  return Citizen.invokeNative('0x74fb3e29e6d10fa9', _r, _ri);
};

/**
   * NETWORK_GET_NUM_CONNECTED_PLAYERS
   * Returns the amount of players connected in the current session. Only works when connected to a session/server.
   *
  
   * @return {number}
   */
global.NetworkGetNumConnectedPlayers = function () {
  return Citizen.invokeNative('0xa4a79dd2d9600654', _r, _ri);
};

/**
   * NETWORK_GET_NUM_PARTICIPANTS
   *
  
   * @return {number}
   */
global.NetworkGetNumParticipants = function () {
  return Citizen.invokeNative('0x18d0456e86604654', _r, _ri);
};

/**
   * NETWORK_GET_NUM_SCRIPT_PARTICIPANTS
   *
   * @param {string | number} scriptName
   * @param {number} instanceId
   * @param {number} position
   * @return {number}
   */
global.NetworkGetNumScriptParticipants = function (scriptName, instanceId, position) {
  return Citizen.invokeNative('0x3658e8cd94fc121a', _ts(scriptName), instanceId, _ch(position), _r, _ri);
};

/**
   * NETWORK_GET_NUM_UNACKED_RELIABLES
   * Old name: _NETWORK_GET_NUM_UNACKED_FOR_PLAYER
   *
   * @param {number} player
   * @return {number}
   */
global.NetworkGetNumUnackedReliables = function (player) {
  return Citizen.invokeNative('0xff8fcf9ffc458a1c', player, _r, _ri);
};

/**
   * NETWORK_GET_PARTICIPANT_INDEX
   *
   * @param {number} index
   * @return {number}
   */
global.NetworkGetParticipantIndex = function (index) {
  return Citizen.invokeNative('0x1b84df6af2a46938', index, _r, _ri);
};

/**
   * NETWORK_GET_PLAYER_FROM_GAMER_HANDLE
   *
   * @param {DataView} gamerHandle
   * @return {number}
   */
global.NetworkGetPlayerFromGamerHandle = function (gamerHandle) {
  return Citizen.invokeNative('0xce5f689cf5a0a49d', gamerHandle, _r, _ri);
};

/**
   * NETWORK_GET_PLAYER_INDEX
   *
   * @param {number} player
   * @return {number}
   */
global.NetworkGetPlayerIndex = function (player) {
  return Citizen.invokeNative('0x24fb80d107371267', player, _r, _ri);
};

/**
   * NETWORK_GET_PLAYER_INDEX_FROM_PED
   * Returns the Player associated to a given Ped when in an online session.
   *
   * @param {number} ped
   * @return {number}
   */
global.NetworkGetPlayerIndexFromPed = function (ped) {
  return Citizen.invokeNative('0x6c0e2e0125610278', ped, _r, _ri);
};

/**
   * NETWORK_GET_PROMOTION_DLG_SEEN_COUNT
   * Hardcoded to return zero.
   *
  
   * @return {number}
   */
global.NetworkGetPromotionDlgSeenCount = function () {
  return Citizen.invokeNative('0x2fb53c631a49be92', _r, _ri);
};

/**
   * NETWORK_GET_RANDOM_INT_RANGED
   *
   * @param {number} rangeStart
   * @param {number} rangeEnd
   * @return {number}
   */
global.NetworkGetRandomIntRanged = function (rangeStart, rangeEnd) {
  return Citizen.invokeNative('0xe30cf56f1efa5f43', rangeStart, rangeEnd, _r, _ri);
};

/**
   * NETWORK_GET_RECENT_GAMER_NAMES
   *
   * @param {number} p0
   * @param {number} p1
   * @param {DataView} outData
   * @param {number} dataSize
   * @return {boolean}
   */
global.NetworkGetRecentGamerNames = function (p0, p1, outData, dataSize) {
  return Citizen.invokeNative('0xfefcc345ce357453', p0, p1, outData, dataSize, _r);
};

/**
   * NETWORK_GET_ROPE_ID_FROM_NETWORK_ID
   *
   * @param {number} netId
   * @return {number}
   */
global.NetworkGetRopeIdFromNetworkId = function (netId) {
  return Citizen.invokeNative('0xeb1a4dd8352ec828', netId, _r, _ri);
};

/**
   * NETWORK_GET_SCRIPT_STATUS
   *
  
   * @return {number}
   */
global.NetworkGetScriptStatus = function () {
  return Citizen.invokeNative('0x57d158647a6bfabf', _r, _ri);
};

/**
   * NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT
   *
  
   * @return {boolean}
   */
global.NetworkGetThisScriptIsNetworkScript = function () {
  return Citizen.invokeNative('0x2910669969e9535e', _r);
};

/**
   * NETWORK_GET_TIMEOUT_TIME
   *
  
   * @return {number}
   */
global.NetworkGetTimeoutTime = function () {
  return Citizen.invokeNative('0x5ed0356a0ce3a34f', _r, _ri);
};

/**
   * NETWORK_GET_TOTAL_NUM_FRIENDS
   *
  
   * @return {number}
   */
global.NetworkGetTotalNumFriends = function () {
  return Citizen.invokeNative('0xdb7abdd203fa3704', _r, _ri);
};

/**
   * NETWORK_GET_TOTAL_NUM_PLAYERS
   *
  
   * @return {number}
   */
global.NetworkGetTotalNumPlayers = function () {
  return Citizen.invokeNative('0xcf61d4b4702ee9eb', _r, _ri);
};

/**
   * NETWORK_GET_TUNABLE_CLOUD_CRC
   *
  
   * @return {number}
   */
global.NetworkGetTunableCloudCrc = function () {
  return Citizen.invokeNative('0x10bd227a753b0d84', _r, _ri);
};

/**
   * NETWORK_GET_UNRELIABLE_RESEND_COUNT
   * Old name: _NETWORK_GET_UNRELIABLE_RESEND_COUNT_FOR_PLAYER
   *
   * @param {number} player
   * @return {number}
   */
global.NetworkGetUnreliableResendCount = function (player) {
  return Citizen.invokeNative('0x3765c3a3e8192e10', player, _r, _ri);
};

/**
   * NETWORK_HANDLE_FROM_FRIEND
   *
   * @param {number} friendIndex
   * @param {DataView} gamerHandle
   * @return {void}
   */
global.NetworkHandleFromFriend = function (friendIndex, gamerHandle) {
  return Citizen.invokeNative('0xd45cb817d7e177d2', friendIndex, gamerHandle);
};

/**
   * NETWORK_HANDLE_FROM_PLAYER
   *
   * @param {number} player
   * @param {DataView} gamerHandle
   * @return {void}
   */
global.NetworkHandleFromPlayer = function (player, gamerHandle) {
  return Citizen.invokeNative('0x388eb2b86c73b6b3', player, gamerHandle);
};

/**
   * NETWORK_HASH_FROM_PLAYER_HANDLE
   *
   * @param {number} player
   * @return {number}
   */
global.NetworkHashFromPlayerHandle = function (player) {
  return Citizen.invokeNative('0xbc1d768f2f5d6c05', player, _r, _ri);
};

/**
   * NETWORK_HAS_CONTROL_OF_ENTITY
   *
   * @param {number} entity
   * @return {boolean}
   */
global.NetworkHasControlOfEntity = function (entity) {
  return Citizen.invokeNative('0x01bf60a500e28887', entity, _r);
};

/**
   * NETWORK_HAS_CONTROL_OF_NETWORK_ID
   *
   * @param {number} netId
   * @return {boolean}
   */
global.NetworkHasControlOfNetworkId = function (netId) {
  return Citizen.invokeNative('0x4d36070fe0215186', netId, _r);
};

/**
   * NETWORK_HAS_CONTROL_OF_PICKUP
   *
   * @param {number} pickup
   * @return {boolean}
   */
global.NetworkHasControlOfPickup = function (pickup) {
  return Citizen.invokeNative('0x5bc9495f0b3b6fa6', pickup, _r);
};

/**
   * NETWORK_HAS_CONTROL_OF_PICKUP_PLACEMENT
   *
   * @param {any} p0
   * @return {boolean}
   */
global.NetworkHasControlOfPickupPlacement = function (p0) {
  return Citizen.invokeNative('0x51eabcf2786515ab', p0, _r);
};

/**
   * NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD
   *
   * @param {number} entity
   * @return {boolean}
   */
global.NetworkHasEntityBeenRegisteredWithThisThread = function (entity) {
  return Citizen.invokeNative('0xb07d3185e11657a5', entity, _r);
};

/**
   * NETWORK_HAS_PENDING_INVITE_FAILURE
   *
  
   * @return {boolean}
   */
global.NetworkHasPendingInviteFailure = function () {
  return Citizen.invokeNative('0xd0498ad30e16b6bd', _r);
};

/**
   * NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA
   *
  
   * @return {boolean}
   */
global.NetworkHasReceivedHostBroadcastData = function () {
  return Citizen.invokeNative('0x5d10b3795f3fc886', _r);
};

/**
   * NETWORK_HAS_ROS_PRIVILEGE
   *
   * @param {number} index
   * @return {boolean}
   */
global.NetworkHasRosPrivilege = function (index) {
  return Citizen.invokeNative('0xa699957e60d80214', index, _r);
};

/**
   * NETWORK_HAS_SOCIAL_CLUB_ACCOUNT
   *
  
   * @return {boolean}
   */
global.NetworkHasSocialClubAccount = function () {
  return Citizen.invokeNative('0x67a5589628e0cff6', _r);
};

/**
   * NETWORK_HAS_VALID_ROS_CREDENTIALS
   * Returns whether the signed-in user has valid Rockstar Online Services (ROS) credentials.
   *
  
   * @return {boolean}
   */
global.NetworkHasValidRosCredentials = function () {
  return Citizen.invokeNative('0x85443ff4c328f53b', _r);
};

/**
   * NETWORK_HAVE_ONLINE_PRIVILEGES
   *
  
   * @return {boolean}
   */
global.NetworkHaveOnlinePrivileges = function () {
  return Citizen.invokeNative('0x25cb5a9f37bfd063', _r);
};

/**
   * NETWORK_HAVE_ROS_BANNED_PRIV
   *
  
   * @return {boolean}
   */
global.NetworkHaveRosBannedPriv = function () {
  return Citizen.invokeNative('0x8020a73847e0ca7d', _r);
};

/**
   * NETWORK_IS_AIM_CAM_ACTIVE
   *
   * @param {number} player
   * @return {boolean}
   */
global.NetworkIsAimCamActive = function (player) {
  return Citizen.invokeNative('0x8e7ce19219669aeb', player, _r);
};

/**
   * NETWORK_IS_CLOCK_TIME_OVERRIDDEN
   *
  
   * @return {boolean}
   */
global.NetworkIsClockTimeOverridden = function () {
  return Citizen.invokeNative('0xd7c95d322ff57522', _r);
};

/**
   * NETWORK_IS_CLOUD_AVAILABLE
   *
  
   * @return {boolean}
   */
global.NetworkIsCloudAvailable = function () {
  return Citizen.invokeNative('0x9a4cf4f48ad77302', _r);
};

/**
   * NETWORK_IS_CONNECTED_VIA_RELAY
   * Old name: _NETWORK_IS_CONNECTION_ENDPOINT_RELAY_SERVER
   *
   * @param {number} player
   * @return {boolean}
   */
global.NetworkIsConnectedViaRelay = function (player) {
  return Citizen.invokeNative('0x16d3d49902f697bb', player, _r);
};

/**
   * NETWORK_IS_CUSTOM_UPSELL_ENABLED
   * Hardcoded to return false.
   *
  
   * @return {boolean}
   */
global.NetworkIsCustomUpsellEnabled = function () {
  return Citizen.invokeNative('0x78a9535af83715c6', _r);
};

/**
   * NETWORK_IS_FEATURE_SUPPORTED
   *
   * @param {number} featureId
   * @return {boolean}
   */
global.NetworkIsFeatureSupported = function (featureId) {
  return Citizen.invokeNative('0x9c725d149622bfde', featureId, _r);
};

/**
   * NETWORK_IS_FINDING_GAMERS
   *
  
   * @return {boolean}
   */
global.NetworkIsFindingGamers = function () {
  return Citizen.invokeNative('0xdddf64c91bfcf0aa', _r);
};

/**
   * NETWORK_IS_FRIEND
   *
   * @param {DataView} gamerHandle
   * @return {boolean}
   */
global.NetworkIsFriend = function (gamerHandle) {
  return Citizen.invokeNative('0x1a24a179f9b31654', gamerHandle, _r);
};

/**
   * NETWORK_IS_GAMER_IN_MY_SESSION
   *
   * @param {DataView} gamerHandle
   * @return {boolean}
   */
global.NetworkIsGamerInMySession = function (gamerHandle) {
  return Citizen.invokeNative('0x0f10b05ddf8d16e9', gamerHandle, _r);
};

/**
   * NETWORK_IS_GAME_IN_PROGRESS
   *
  
   * @return {boolean}
   */
global.NetworkIsGameInProgress = function () {
  return Citizen.invokeNative('0x10fab35428ccc9d7', _r);
};

/**
   * NETWORK_IS_HANDLE_VALID
   *
   * @param {DataView} gamerHandle
   * @return {boolean}
   */
global.NetworkIsHandleValid = function (gamerHandle) {
  return Citizen.invokeNative('0x6f79b93b0a8e4133', gamerHandle, _r);
};

/**
   * NETWORK_IS_HOST
   * If you are host, returns true else returns false.
   *
  
   * @return {boolean}
   */
global.NetworkIsHost = function () {
  return Citizen.invokeNative('0x8db296b814edda07', _r);
};

/**
   * NETWORK_IS_HOST_OF_THIS_SCRIPT
   *
  
   * @return {boolean}
   */
global.NetworkIsHostOfThisScript = function () {
  return Citizen.invokeNative('0x83cd99a1e6061ab5', _r);
};

/**
   * NETWORK_IS_IN_MP_CUTSCENE
   *
  
   * @return {boolean}
   */
global.NetworkIsInMpCutscene = function () {
  return Citizen.invokeNative('0x6cc27c9fa2040220', _r);
};

/**
   * NETWORK_IS_IN_PLATFORM_PARTY
   * Hardcoded to return false.
   *
  
   * @return {boolean}
   */
global.NetworkIsInPlatformParty = function () {
  return Citizen.invokeNative('0x2fc5650b0271cb57', _r);
};

/**
   * NETWORK_IS_IN_PLATFORM_PARTY_CHAT
   * Hardcoded to return false.
   *
  
   * @return {boolean}
   */
global.NetworkIsInPlatformPartyChat = function () {
  return Citizen.invokeNative('0xfd8b834a8ba05048', _r);
};

/**
   * NETWORK_IS_IN_SESSION
   *
  
   * @return {boolean}
   */
global.NetworkIsInSession = function () {
  return Citizen.invokeNative('0xca97246103b63917', _r);
};

/**
   * NETWORK_IS_IN_SPECTATOR_MODE
   *
  
   * @return {boolean}
   */
global.NetworkIsInSpectatorMode = function () {
  return Citizen.invokeNative('0x048746e388762e11', _r);
};

/**
   * NETWORK_IS_IN_TUTORIAL_SESSION
   *
  
   * @return {boolean}
   */
global.NetworkIsInTutorialSession = function () {
  return Citizen.invokeNative('0xada24309fe08dacf', _r);
};

/**
   * NETWORK_IS_PARTICIPANT_ACTIVE
   *
   * @param {number} p0
   * @return {boolean}
   */
global.NetworkIsParticipantActive = function (p0) {
  return Citizen.invokeNative('0x6ff8ff40b6357d45', p0, _r);
};

/**
   * NETWORK_IS_PENDING_FRIEND
   * Hardcoded to return false.
   *
   * @param {DataView} gamerHandle
   * @return {boolean}
   */
global.NetworkIsPendingFriend = function (gamerHandle) {
  return Citizen.invokeNative('0x0be73da6984a6e33', gamerHandle, _r);
};

/**
   * NETWORK_IS_PLATFORM_INVITE_PENDING
   *
  
   * @return {boolean}
   */
global.NetworkIsPlatformInvitePending = function () {
  return Citizen.invokeNative('0xfc4165c9165c166f', _r);
};

/**
   * NETWORK_IS_PLAYER_ACTIVE
   *
   * @param {number} player
   * @return {boolean}
   */
global.NetworkIsPlayerActive = function (player) {
  return Citizen.invokeNative('0xb8dfd30d6973e135', player, _r);
};

/**
   * NETWORK_IS_PLAYER_A_PARTICIPANT
   *
   * @param {number} player
   * @return {boolean}
   */
global.NetworkIsPlayerAParticipant = function (player) {
  return Citizen.invokeNative('0x3ca58f6cb7cbd784', player, _r);
};

/**
   * NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT
   *
   * @param {number} p0
   * @param {DataView} p1
   * @param {any} p2
   * @return {boolean}
   */
global.NetworkIsPlayerAParticipantOnScript = function (p0, p1, p2) {
  return Citizen.invokeNative('0x1ad5b71586b94820', p0, p1, p2, _r);
};

/**
   * NETWORK_IS_PLAYER_CONCEALED
   *
   * @param {number} player
   * @return {boolean}
   */
global.NetworkIsPlayerConcealed = function (player) {
  return Citizen.invokeNative('0x919b3c98ed8292f9', player, _r);
};

/**
   * NETWORK_IS_PLAYER_CONNECTED
   *
   * @param {number} player
   * @return {boolean}
   */
global.NetworkIsPlayerConnected = function (player) {
  return Citizen.invokeNative('0x93dc1be4e1abe9d1', player, _r);
};

/**
   * NETWORK_IS_PLAYER_INDEX_VALID
   * Returns true if the passed value is less than 32.
   *
   * @param {number} player
   * @return {boolean}
   */
global.NetworkIsPlayerIndexValid = function (player) {
  return Citizen.invokeNative('0x255a5ef65eda9167', player, _r);
};

/**
   * NETWORK_IS_PLAYER_IN_MP_CUTSCENE
   * Note: scripts seem to indicate that this was renamed to NETWORK_IS_PLAYER_IN_MP_FAST_INSTANCE
   *
   * @param {number} player
   * @return {boolean}
   */
global.NetworkIsPlayerInMpCutscene = function (player) {
  return Citizen.invokeNative('0x63f9ee203c3619f2', player, _r);
};

/**
   * NETWORK_IS_PROMOTION_ENABLED
   * Hardcoded to return false.
   *
  
   * @return {boolean}
   */
global.NetworkIsPromotionEnabled = function () {
  return Citizen.invokeNative('0x8ff6059da26e688a', _r);
};

/**
   * NETWORK_IS_RESETTING_POPULATION
   *
  
   * @return {boolean}
   */
global.NetworkIsResettingPopulation = function () {
  return Citizen.invokeNative('0x1bb50cd340a996e6', _r);
};

/**
   * NETWORK_IS_SCRIPT_ACTIVE
   *
   * @param {string | number} scriptName
   * @param {number} p1
   * @param {boolean} p2
   * @param {number} p3
   * @return {boolean}
   */
global.NetworkIsScriptActive = function (scriptName, p1, p2, p3) {
  return Citizen.invokeNative('0x9d40df90fad26098', _ts(scriptName), p1, p2, p3, _r);
};

/**
   * NETWORK_IS_SCRIPT_ACTIVE_BY_HASH
   *
   * @param {number} scriptHash
   * @param {number} p1
   * @param {boolean} p2
   * @param {number} p3
   * @return {boolean}
   */
global.NetworkIsScriptActiveByHash = function (scriptHash, p1, p2, p3) {
  return Citizen.invokeNative('0x1b89bc43b6e69107', _ch(scriptHash), p1, p2, p3, _r);
};

/**
   * NETWORK_IS_SESSION_ACTIVE
   *
  
   * @return {boolean}
   */
global.NetworkIsSessionActive = function () {
  return Citizen.invokeNative('0xd83c2b94e7508980', _r);
};

/**
   * NETWORK_IS_SESSION_STARTED
   *
  
   * @return {boolean}
   */
global.NetworkIsSessionStarted = function () {
  return Citizen.invokeNative('0x9de624d2fc4b603f', _r);
};

/**
   * NETWORK_IS_SIGNED_ONLINE
   *
  
   * @return {boolean}
   */
global.NetworkIsSignedOnline = function () {
  return Citizen.invokeNative('0x1077788e268557c2', _r);
};

/**
   * NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING
   *
  
   * @return {boolean}
   */
global.NetworkIsTunableCloudRequestPending = function () {
  return Citizen.invokeNative('0x0467c11ed88b7d28', _r);
};

/**
   * NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING
   *
  
   * @return {boolean}
   */
global.NetworkIsTutorialSessionChangePending = function () {
  return Citizen.invokeNative('0x35f0b98a8387274d', _r);
};

/**
   * NETWORK_PREVENT_SCRIPT_HOST_MIGRATION
   *
  
   * @return {void}
   */
global.NetworkPreventScriptHostMigration = function () {
  return Citizen.invokeNative('0x2302c0264ea58d31');
};

/**
   * NETWORK_REFRESH_CURRENT_FRIEND_PAGE
   *
  
   * @return {boolean}
   */
global.NetworkRefreshCurrentFriendPage = function () {
  return Citizen.invokeNative('0x1f51f367b710a832', _r);
};

/**
   * NETWORK_REGISTER_ENTITY_AS_NETWORKED
   *
   * @param {number} entity
   * @return {void}
   */
global.NetworkRegisterEntityAsNetworked = function (entity) {
  return Citizen.invokeNative('0x06faacd625d80caa', entity);
};

/**
   * NETWORK_REGISTER_HOST_BROADCAST_VARIABLES
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.NetworkRegisterHostBroadcastVariables = function (p0, p1, p2) {
  return Citizen.invokeNative('0x3e9b2f01c50df595', p0, p1, p2);
};

/**
   * NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.NetworkRegisterPlayerBroadcastVariables = function (p0, p1, p2) {
  return Citizen.invokeNative('0x3364aa97340ca215', p0, p1, p2);
};

/**
   * NETWORK_REQUEST_CLOUD_TUNABLES
   * Note: this native was added in build 1311.23, but was only used after build 1436.25
   *
  
   * @return {void}
   */
global.NetworkRequestCloudTunables = function () {
  return Citizen.invokeNative('0x42fb3b532d526e6c');
};

/**
   * NETWORK_REQUEST_CONTROL_OF_ENTITY
   *
   * @param {number} entity
   * @return {boolean}
   */
global.NetworkRequestControlOfEntity = function (entity) {
  return Citizen.invokeNative('0xb69317bf5e782347', entity, _r);
};

/**
   * NETWORK_REQUEST_CONTROL_OF_NETWORK_ID
   *
   * @param {number} netId
   * @return {boolean}
   */
global.NetworkRequestControlOfNetworkId = function (netId) {
  return Citizen.invokeNative('0xa670b3662faffbd0', netId, _r);
};

/**
   * NETWORK_REQUEST_CONTROL_OF_PICKUP_PLACEMENT
   *
   * @param {any} p0
   * @return {boolean}
   */
global.NetworkRequestControlOfPickupPlacement = function (p0) {
  return Citizen.invokeNative('0x56ed2c48558dab78', p0, _r);
};

/**
   * NETWORK_REQUEST_JOIN
   *
   * @param {any} p0
   * @return {number}
   */
global.NetworkRequestJoin = function (p0) {
  return Citizen.invokeNative('0xe483bb6be686f632', p0, _r, _ri);
};

/**
   * NETWORK_REQUEST_RECENT_GAMER_NAMES
   *
   * @param {number} p0
   * @param {number} playerCount
   * @return {boolean}
   */
global.NetworkRequestRecentGamerNames = function (p0, playerCount) {
  return Citizen.invokeNative('0x6d206d383bb5f6b1', p0, playerCount, _r);
};

/**
   * NETWORK_REQUEST_SESSION_SEAMLESS
   * flags:
   * enum eSessionRequestOptionFlags
   * {
   *   SESSION_REQUEST_OPTION_FLAG_INCLUDE_GANG_MEMBERS = (1 << 1),
   *   SESSION_REQUEST_OPTION_FLAG_LEADER_KEEPS_GANG = (1 << 7),
   * };
   * 
   * seamlessType:
   * enum eSeamlessType
   * {
   *   SEAMLESS_TYPE_NORMAL,
   *   SEAMLESS_TYPE_PVE,
   *   SEAMLESS_TYPE_DEV,
   *   SEAMLESS_TYPE_NO_SEAMLESS
   * };
   *
   * @param {number} flags
   * @param {number} seamlessType
   * @param {DataView} sessionRequestId
   * @return {boolean}
   */
global.NetworkRequestSessionSeamless = function (flags, seamlessType, sessionRequestId) {
  return Citizen.invokeNative('0x04019ae4956d4393', flags, seamlessType, sessionRequestId, _r);
};

/**
   * NETWORK_RESET_POPULATION
   *
   * @param {boolean} p0
   * @param {number} p1
   * @return {boolean}
   */
global.NetworkResetPopulation = function (p0, p1) {
  return Citizen.invokeNative('0x101f538c25abb39a', p0, p1, _r);
};

/**
   * NETWORK_RESURRECT_LOCAL_PLAYER
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} heading
   * @param {number} p4
   * @param {boolean} p5
   * @param {any} p6
   * @param {boolean} p7
   * @return {void}
   */
global.NetworkResurrectLocalPlayer = function (x, y, z, heading, p4, p5, p6, p7) {
  return Citizen.invokeNative('0xea23c49eaa83acfb', _fv(x), _fv(y), _fv(z), _fv(heading), p4, p5, p6, p7);
};

/**
   * NETWORK_SEED_RANDOM_NUMBER_GENERATOR
   *
   * @param {number} seed
   * @return {void}
   */
global.NetworkSeedRandomNumberGenerator = function (seed) {
  return Citizen.invokeNative('0xf1b84178f8674195', seed);
};

/**
   * NETWORK_SESSION_GET_SESSION_FLAGS
   *
  
   * @return {number}
   */
global.NetworkSessionGetSessionFlags = function () {
  return Citizen.invokeNative('0x51f33dbc1a41cbfd', _r, _ri);
};

/**
   * NETWORK_SESSION_GET_SESSION_TYPE
   *
  
   * @return {number}
   */
global.NetworkSessionGetSessionType = function () {
  return Citizen.invokeNative('0xf0c0c94b404206fa', _r, _ri);
};

/**
   * NETWORK_SESSION_IS_ANY_REQUEST_IN_PROGRESS
   *
  
   * @return {boolean}
   */
global.NetworkSessionIsAnyRequestInProgress = function () {
  return Citizen.invokeNative('0xbaffde5f953720d9', _r);
};

/**
   * NETWORK_SESSION_IS_PRIVATE
   * Checks for session flag 'SF_PRIVATE'
   *
  
   * @return {boolean}
   */
global.NetworkSessionIsPrivate = function () {
  return Citizen.invokeNative('0xcef70aa5b3f89ba1', _r);
};

/**
   * NETWORK_SESSION_IS_REQUEST_IN_PROGRESS
   *
   * @param {DataView} sessionRequestId
   * @return {boolean}
   */
global.NetworkSessionIsRequestInProgress = function (sessionRequestId) {
  return Citizen.invokeNative('0x8fb7c254cfcbf78e', sessionRequestId, _r);
};

/**
   * NETWORK_SESSION_IS_REQUEST_PENDING_TRANSITION
   *
   * @param {DataView} sessionRequestId
   * @return {boolean}
   */
global.NetworkSessionIsRequestPendingTransition = function (sessionRequestId) {
  return Citizen.invokeNative('0xccf878d50f8ab10d', sessionRequestId, _r);
};

/**
   * NETWORK_SESSION_IS_SESSION_REQUEST_ID_VALID
   *
   * @param {DataView} sessionRequestId
   * @return {boolean}
   */
global.NetworkSessionIsSessionRequestIdValid = function (sessionRequestId) {
  return Citizen.invokeNative('0x2f54b146d3edce4d', sessionRequestId, _r);
};

/**
   * NETWORK_SESSION_IS_TRANSITIONING
   *
  
   * @return {boolean}
   */
global.NetworkSessionIsTransitioning = function () {
  return Citizen.invokeNative('0xf2cbc969c4f090c7', _r);
};

/**
   * NETWORK_SESSION_LEAVE_SESSION
   *
  
   * @return {boolean}
   */
global.NetworkSessionLeaveSession = function () {
  return Citizen.invokeNative('0x17c21b7319a05047', _r);
};

/**
   * NETWORK_SESSION_LEFT_QUEUE_OR_REQUESTED_SESSION
   *
   * @param {DataView} sessionRequestId
   * @return {boolean}
   */
global.NetworkSessionLeftQueueOrRequestedSession = function (sessionRequestId) {
  return Citizen.invokeNative('0xece6a0c1b59cd8be', sessionRequestId, _r);
};

/**
   * NETWORK_SESSION_REMOVE_SESSION_FLAGS
   * See _NETWORK_SESSION_ADD_SESSION_FLAGS
   *
   * @param {number} flags
   * @return {boolean}
   */
global.NetworkSessionRemoveSessionFlags = function (flags) {
  return Citizen.invokeNative('0x78335e12db0bf961', flags, _r);
};

/**
   * NETWORK_SESSION_REQUEST_SESSION_COMPETITIVE
   * matchType:
   * enum eMatchType
   * {
   *   MATCHTYPE_DEPRECATED,
   *   MATCHTYPE_UGCPLAYLIST,
   *   MATCHTYPE_UGCMISSION,
   *   MATCHTYPE_MINIGAME,
   *   MATCHTYPE_SEAMLESS,
   *   MATCHTYPE_PRIVATE_DO_NOT_USE
   * };
   *
   * @param {number} flags
   * @param {number} matchType
   * @param {number} userHash
   * @param {number} p3
   * @param {DataView} sessionRequestId
   * @return {boolean}
   */
global.NetworkSessionRequestSessionCompetitive = function (flags, matchType, userHash, p3, sessionRequestId) {
  return Citizen.invokeNative('0x309bbebea8a3986c', flags, matchType, userHash, p3, sessionRequestId, _r);
};

/**
   * NETWORK_SESSION_REQUEST_SESSION_PRIVATE
   * Session flag 'SF_PRIVATE' is set internally
   * p1 represents max amount of players in private session
   *
   * @param {number} flags
   * @param {number} numPlayers
   * @param {number} userHash
   * @param {DataView} sessionRequestId
   * @return {boolean}
   */
global.NetworkSessionRequestSessionPrivate = function (flags, numPlayers, userHash, sessionRequestId) {
  return Citizen.invokeNative('0x39a8ef7af29a192c', flags, numPlayers, userHash, sessionRequestId, _r);
};

/**
   * NETWORK_SESSION_REQUEST_SESSION_SEAMLESS
   * Equivalent to NETWORK_REQUEST_SESSION_SEAMLESS if userHash == 0.
   * Otherwise it is equivalent to NETWORK_SESSION_REQUEST_SESSION_COMPETITIVE(flags, MATCHTYPE_SEAMLESS, userHash, 0, sessionRequestId);
   * 
   * p1 is unused
   *
   * @param {number} flags
   * @param {number} seamlessType
   * @param {number} userHash
   * @param {DataView} sessionRequestId
   * @return {boolean}
   */
global.NetworkSessionRequestSessionSeamless = function (flags, seamlessType, userHash, sessionRequestId) {
  return Citizen.invokeNative('0x2989e131fde37e97', flags, seamlessType, userHash, sessionRequestId, _r);
};

/**
   * NETWORK_SET_COMPLETED_MP_INTRO_FLOW_ON_CURRENT_SLOT
   *
   * @param {boolean} completed
   * @return {boolean}
   */
global.NetworkSetCompletedMpIntroFlowOnCurrentSlot = function (completed) {
  return Citizen.invokeNative('0x2c5bd9a43987aa27', completed, _r);
};

/**
   * NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS
   * if set to true other network players can't see it
   * if set to false other network player can see it
   * =========================================
   * ^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.
   * 
   * pc or last gen?
   * 
   * ^^ last-gen
   * 
   * Old name: _NETWORK_SET_ENTITY_INVISIBLE_TO_NETWORK
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.NetworkSetEntityOnlyExistsForParticipants = function (entity, toggle) {
  return Citizen.invokeNative('0xf1ca12b18aef5298', entity, toggle);
};

/**
   * NETWORK_SET_ENTITY_REMAINS_WHEN_UNNETWORKED
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.NetworkSetEntityRemainsWhenUnnetworked = function (entity, toggle) {
  return Citizen.invokeNative('0xd785864798258032', entity, toggle);
};

/**
   * NETWORK_SET_FRIENDLY_FIRE_OPTION
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.NetworkSetFriendlyFireOption = function (toggle) {
  return Citizen.invokeNative('0xf808475fa571d823', toggle);
};

/**
   * NETWORK_SET_IN_MP_CUTSCENE
   *
   * @param {boolean} p0
   * @param {boolean} p1
   * @param {number} p2
   * @param {boolean} p3
   * @return {void}
   */
global.NetworkSetInMpCutscene = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x9ca5de655269fec4', p0, p1, p2, p3);
};

/**
   * NETWORK_SET_IN_SPECTATOR_MODE
   *
   * @param {boolean} toggle
   * @param {number} playerPed
   * @return {void}
   */
global.NetworkSetInSpectatorMode = function (toggle, playerPed) {
  return Citizen.invokeNative('0x423de3854bb50894', toggle, playerPed);
};

/**
   * NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME
   *
   * @param {number} time
   * @return {void}
   */
global.NetworkSetLocalPlayerInvincibleTime = function (time) {
  return Citizen.invokeNative('0x2d95c7e2d7e07307', time);
};

/**
   * NETWORK_SET_LOCAL_PLAYER_PENDING_FAST_INSTANCE_ID
   *
   * @param {number} instanceId
   * @return {void}
   */
global.NetworkSetLocalPlayerPendingFastInstanceId = function (instanceId) {
  return Citizen.invokeNative('0x007ff852dcf49da4', instanceId);
};

/**
   * NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.NetworkSetLocalPlayerSyncLookAt = function (toggle) {
  return Citizen.invokeNative('0x524ff0aeff9c3973', toggle);
};

/**
   * NETWORK_SET_MISSION_FINISHED
   *
  
   * @return {void}
   */
global.NetworkSetMissionFinished = function () {
  return Citizen.invokeNative('0x3b3d11cd9ffcdfc9');
};

/**
   * NETWORK_SET_MP_MISSION_FLAG_ON_CURRENT_SLOT
   *
   * @param {boolean} enabled
   * @param {number} flagIndex
   * @return {boolean}
   */
global.NetworkSetMpMissionFlagOnCurrentSlot = function (enabled, flagIndex) {
  return Citizen.invokeNative('0x86fd10251a7118a4', enabled, flagIndex, _r);
};

/**
   * NETWORK_SET_PLAYER_IS_PASSIVE
   * Old name: _NETWORK_SET_PASSIVE_MODE_OPTION
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.NetworkSetPlayerIsPassive = function (toggle) {
  return Citizen.invokeNative('0x9c25e8ec4c535fbd', toggle);
};

/**
   * NETWORK_SET_RECENT_GAMERS_ENABLED
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.NetworkSetRecentGamersEnabled = function (toggle) {
  return Citizen.invokeNative('0x29fe035d35b8589c', toggle);
};

/**
   * NETWORK_SET_RICH_PRESENCE
   *
   * @param {number} p0
   * @param {DataView} p1
   * @param {number} p2
   * @param {number} p3
   * @return {void}
   */
global.NetworkSetRichPresence = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x1dccacdcfc569362', p0, p1, p2, p3);
};

/**
   * NETWORK_SET_SCRIPT_READY_FOR_EVENTS
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.NetworkSetScriptReadyForEvents = function (toggle) {
  return Citizen.invokeNative('0x7ac752103856fb20', toggle);
};

/**
   * NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT
   *
   * @param {number} maxNumMissionParticipants
   * @param {boolean} p1
   * @param {number} instanceId
   * @return {void}
   */
global.NetworkSetThisScriptIsNetworkScript = function (maxNumMissionParticipants, p1, instanceId) {
  return Citizen.invokeNative('0x1ca59e306ecb80a5', maxNumMissionParticipants, p1, instanceId);
};

/**
   * NETWORK_SHOULD_SHOW_PROMOTION_DLG
   * Hardcoded to return false.
   *
  
   * @return {boolean}
   */
global.NetworkShouldShowPromotionDlg = function () {
  return Citizen.invokeNative('0xda4b1a479c414fb2', _r);
};

/**
   * NETWORK_SHOW_ACCOUNT_UPGRADE_UI
   *
  
   * @return {void}
   */
global.NetworkShowAccountUpgradeUi = function () {
  return Citizen.invokeNative('0x83fe8d7229593017');
};

/**
   * NETWORK_SHOW_CHAT_RESTRICTION_MSC
   * nullsub, doesn't do anything
   *
   * @param {number} player
   * @return {void}
   */
global.NetworkShowChatRestrictionMsc = function (player) {
  return Citizen.invokeNative('0x6bff5f84102df80a', player);
};

/**
   * NETWORK_SHOW_PROFILE_UI
   *
   * @param {DataView} gamerHandle
   * @return {void}
   */
global.NetworkShowProfileUi = function (gamerHandle) {
  return Citizen.invokeNative('0x859ed1cea343fca8', gamerHandle);
};

/**
   * NETWORK_SHOW_PSN_UGC_RESTRICTION
   * nullsub, doesn't do anything
   *
  
   * @return {void}
   */
global.NetworkShowPsnUgcRestriction = function () {
  return Citizen.invokeNative('0x5c497525f803486b');
};

/**
   * NETWORK_SPAWN_CONFIG_SET_FLAGS
   *
   * @param {number} flags
   * @return {void}
   */
global.NetworkSpawnConfigSetFlags = function (flags) {
  return Citizen.invokeNative('0xf94a0d5b254375df', flags);
};

/**
   * NETWORK_SPAWN_CONFIG_SET_GROUND_TO_ROOT_OFFSET
   *
   * @param {number} offset
   * @return {void}
   */
global.NetworkSpawnConfigSetGroundToRootOffset = function (offset) {
  return Citizen.invokeNative('0x59577799f6ae2f34', _fv(offset));
};

/**
   * NETWORK_SPAWN_CONFIG_SET_TUNING_FLOAT
   *
   * @param {number} p0
   * @param {number} p1
   * @return {void}
   */
global.NetworkSpawnConfigSetTuningFloat = function (p0, p1) {
  return Citizen.invokeNative('0x0608326f7b98c08d', _ch(p0), _fv(p1));
};

/**
   * NETWORK_START_SOLO_TUTORIAL_SESSION
   *
  
   * @return {void}
   */
global.NetworkStartSoloTutorialSession = function () {
  return Citizen.invokeNative('0x17e0198b3882c2cb');
};

/**
   * NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK
   * Always returns -1. Seems to be XB1 specific.
   *
   * @param {DataView} gamerHandle
   * @return {number}
   */
global.NetworkStartUserContentPermissionsCheck = function (gamerHandle) {
  return Citizen.invokeNative('0xdeb2b99a1af1a2a6', gamerHandle, _r, _ri);
};

/**
   * NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE
   * Old name: _NETWORK_SET_VEHICLE_WHEELS_DESTRUCTIBLE
   *
   * @param {number} entity
   * @param {boolean} p1
   * @return {void}
   */
global.NetworkTriggerDamageEventForZeroDamage = function (entity, p1) {
  return Citizen.invokeNative('0x0c8bc052ae87d744', entity, p1);
};

/**
   * NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH
   *
   * @param {number} tunableContext
   * @param {number} tunableName
   * @param {boolean} defaultValue
   * @return {boolean}
   */
global.NetworkTryAccessTunableBoolHash = function (tunableContext, tunableName, defaultValue) {
  return Citizen.invokeNative('0xb2ad5d29a99d4b26', _ch(tunableContext), _ch(tunableName), defaultValue, _r);
};

/**
   * NETWORK_TRY_ACCESS_TUNABLE_FLOAT_HASH
   *
   * @param {number} tunableContext
   * @param {number} tunableName
   * @param {number} defaultValue
   * @return {number}
   */
global.NetworkTryAccessTunableFloatHash = function (tunableContext, tunableName, defaultValue) {
  return Citizen.invokeNative('0xa18393089c05e49c', _ch(tunableContext), _ch(tunableName), _fv(defaultValue), _r, _rf);
};

/**
   * NETWORK_TRY_ACCESS_TUNABLE_INT_HASH
   *
   * @param {number} tunableContext
   * @param {number} tunableName
   * @param {number} defaultValue
   * @return {number}
   */
global.NetworkTryAccessTunableIntHash = function (tunableContext, tunableName, defaultValue) {
  return Citizen.invokeNative('0xa25e006b36719774', _ch(tunableContext), _ch(tunableName), defaultValue, _r, _ri);
};

/**
   * NET_TO_ENT
   * gets the entity id of a network id
   *
   * @param {number} netHandle
   * @return {number}
   */
global.NetToEnt = function (netHandle) {
  return Citizen.invokeNative('0xbffeab45a9a9094a', netHandle, _r, _ri);
};

/**
   * NET_TO_OBJ
   * gets the object id of a network id
   *
   * @param {number} netHandle
   * @return {number}
   */
global.NetToObj = function (netHandle) {
  return Citizen.invokeNative('0xd8515f5fea14cb3f', netHandle, _r, _ri);
};

/**
   * NET_TO_PED
   * gets the ped id of a network id
   *
   * @param {number} netHandle
   * @return {number}
   */
global.NetToPed = function (netHandle) {
  return Citizen.invokeNative('0xbdcd95fc216a8b3e', netHandle, _r, _ri);
};

/**
   * NET_TO_VEH
   *
   * @param {number} netHandle
   * @return {number}
   */
global.NetToVeh = function (netHandle) {
  return Citizen.invokeNative('0x367b936610ba360c', netHandle, _r, _ri);
};

/**
   * OBJ_TO_NET
   * Returns the network ID of the given object.
   *
   * @param {number} object
   * @return {number}
   */
global.ObjToNet = function (object) {
  return Citizen.invokeNative('0x99bfdc94a603e541', object, _r, _ri);
};

/**
   * PARTICIPANT_ID
   * Return the local Participant ID
   *
  
   * @return {number}
   */
global.ParticipantId = function () {
  return Citizen.invokeNative('0x90986e8876ce0a83', _r, _ri);
};

/**
   * PARTICIPANT_ID_TO_INT
   * Return the local Participant ID.
   * 
   * This native is exactly the same as 'PARTICIPANT_ID' native.
   *
  
   * @return {number}
   */
global.ParticipantIdToInt = function () {
  return Citizen.invokeNative('0x57a3bddad8e5aa0a', _r, _ri);
};

/**
   * PED_TO_NET
   * Returns the network ID of the given ped.
   *
   * @param {number} ped
   * @return {number}
   */
global.PedToNet = function (ped) {
  return Citizen.invokeNative('0x0edec3c276198689', ped, _r, _ri);
};

/**
   * PREVENT_MIGRATION_OF_ENTITIES_IN_FAST_INSTANCE_FOR_LOCAL_PLAYER
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.PreventMigrationOfEntitiesInFastInstanceForLocalPlayer = function (toggle) {
  return Citizen.invokeNative('0x89d803cd48622150', toggle);
};

/**
   * PREVENT_NETWORK_ID_MIGRATION
   *
   * @param {number} netId
   * @return {void}
   */
global.PreventNetworkIdMigration = function (netId) {
  return Citizen.invokeNative('0x7182edda1ee7db5a', netId);
};

/**
   * RESERVE_NETWORK_CLIENT_MISSION_OBJECTS
   *
   * @param {number} amount
   * @return {void}
   */
global.ReserveNetworkClientMissionObjects = function (amount) {
  return Citizen.invokeNative('0xe7dda8bd3bcf751c', amount);
};

/**
   * RESERVE_NETWORK_CLIENT_MISSION_PEDS
   *
   * @param {number} amount
   * @return {void}
   */
global.ReserveNetworkClientMissionPeds = function (amount) {
  return Citizen.invokeNative('0x807e119f80231732', amount);
};

/**
   * RESERVE_NETWORK_MISSION_OBJECTS
   *
   * @param {number} amount
   * @return {void}
   */
global.ReserveNetworkMissionObjects = function (amount) {
  return Citizen.invokeNative('0x4e5c93bd0c32fbf8', amount);
};

/**
   * RESERVE_NETWORK_MISSION_PEDS
   *
   * @param {number} amount
   * @return {void}
   */
global.ReserveNetworkMissionPeds = function (amount) {
  return Citizen.invokeNative('0xb60feba45333d36f', amount);
};

/**
   * RESERVE_NETWORK_MISSION_PICKUPS
   *
   * @param {number} amount
   * @return {void}
   */
global.ReserveNetworkMissionPickups = function (amount) {
  return Citizen.invokeNative('0x4d40e7d749bc6e6d', amount);
};

/**
   * RESERVE_NETWORK_MISSION_VEHICLES
   *
   * @param {number} amount
   * @return {void}
   */
global.ReserveNetworkMissionVehicles = function (amount) {
  return Citizen.invokeNative('0x76b02e21ed27a469', amount);
};

/**
   * SET_ENTITY_VISIBLE_IN_CUTSCENE
   *
   * @param {number} entity
   * @param {boolean} p1
   * @param {boolean} p2
   * @param {number} p3
   * @return {void}
   */
global.SetEntityVisibleInCutscene = function (entity, p1, p2, p3) {
  return Citizen.invokeNative('0xe0031d3c8f36ab82', entity, p1, p2, p3);
};

/**
   * SET_LOCAL_PLAYER_AS_GHOST
   * Old name: _SET_LOCAL_PLAYER_AS_GHOST
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetLocalPlayerAsGhost = function (toggle) {
  return Citizen.invokeNative('0x5ffe9b4144f9712f', toggle);
};

/**
   * SET_LOCAL_PLAYER_INVISIBLE_LOCALLY
   *
   * @param {boolean} p0
   * @return {void}
   */
global.SetLocalPlayerInvisibleLocally = function (p0) {
  return Citizen.invokeNative('0xe5f773c1a1d9d168', p0);
};

/**
   * SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE
   *
   * @param {boolean} local
   * @param {boolean} remote
   * @param {number} instanceId
   * @return {void}
   */
global.SetLocalPlayerVisibleInCutscene = function (local, remote, instanceId) {
  return Citizen.invokeNative('0xd1065d68947e7b6e', local, remote, instanceId);
};

/**
   * SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER
   *
   * @param {number} netId
   * @param {number} player
   * @param {boolean} toggle
   * @return {void}
   */
global.SetNetworkIdAlwaysExistsForPlayer = function (netId, player, toggle) {
  return Citizen.invokeNative('0xa8a024587329f36a', netId, player, toggle);
};

/**
   * SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES
   *
   * @param {number} netId
   * @param {boolean} toggle
   * @return {void}
   */
global.SetNetworkIdExistsOnAllMachines = function (netId, toggle) {
  return Citizen.invokeNative('0xe05e81a888fa63c8', netId, toggle);
};

/**
   * SET_NETWORK_ID_STOP_CLONING
   *
   * @param {number} networkId
   * @param {boolean} bStopCloning
   * @return {void}
   */
global.SetNetworkIdStopCloning = function (networkId, bStopCloning) {
  return Citizen.invokeNative('0x9ed3108d6847760a', networkId, bStopCloning);
};

/**
   * SET_NETWORK_ID_VISIBLE_IN_CUTSCENE
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.SetNetworkIdVisibleInCutscene = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xa6928482543022b4', p0, p1, p2, p3);
};

/**
   * SET_PLAYER_INVISIBLE_LOCALLY
   *
   * @param {number} player
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPlayerInvisibleLocally = function (player, toggle) {
  return Citizen.invokeNative('0x12b37d54667db0b8', player, toggle);
};

/**
   * SET_PLAYER_VISIBLE_LOCALLY
   *
   * @param {number} player
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPlayerVisibleLocally = function (player, toggle) {
  return Citizen.invokeNative('0xfaa10f1fafb11af2', player, toggle);
};

/**
   * TEXTURE_DOWNLOAD_GET_NAME
   *
   * @param {number} textureDownloadId
   * @return {string | number}
   */
global.TextureDownloadGetName = function (textureDownloadId) {
  return Citizen.invokeNative('0x3448505b6e35262d', textureDownloadId, _r, _s);
};

/**
   * TEXTURE_DOWNLOAD_RELEASE
   *
   * @param {number} textureDownloadId
   * @return {void}
   */
global.TextureDownloadRelease = function (textureDownloadId) {
  return Citizen.invokeNative('0x487eb90b98e9fb19', textureDownloadId);
};

/**
   * TEXTURE_DOWNLOAD_REQUEST
   * Returns textureDownloadId
   *
   * @param {DataView} gamerHandle
   * @param {string | number} filePath
   * @param {string | number} name
   * @param {boolean} p3
   * @return {number}
   */
global.TextureDownloadRequest = function (gamerHandle, filePath, name, p3) {
  return Citizen.invokeNative('0x16160da74a8e74a2', gamerHandle, _ts(filePath), _ts(name), p3, _r, _ri);
};

/**
   * UGC_CLEAR_QUERY_RESULTS
   *
   * @param {number} ugcRequestId
   * @return {void}
   */
global.UgcClearQueryResults = function (ugcRequestId) {
  return Citizen.invokeNative('0xe931354fea710038', ugcRequestId);
};

/**
   * UGC_DID_DESCRIPTION_REQUEST_SUCCEED
   *
   * @param {number} description
   * @return {boolean}
   */
global.UgcDidDescriptionRequestSucceed = function (description) {
  return Citizen.invokeNative('0x162c23ca83ed0a62', _ch(description), _r);
};

/**
   * UGC_DID_REQUEST_SUCCEED
   *
   * @param {number} ugcRequestId
   * @return {boolean}
   */
global.UgcDidRequestSucceed = function (ugcRequestId) {
  return Citizen.invokeNative('0x0b6009a90b8495f1', ugcRequestId, _r);
};

/**
   * UGC_GET_CACHED_DESCRIPTION
   *
   * @param {number} description
   * @param {number} length
   * @return {string | number}
   */
global.UgcGetCachedDescription = function (description, length) {
  return Citizen.invokeNative('0x40f7e66472df3e5c', _ch(description), length, _r, _s);
};

/**
   * UGC_HAS_DESCRIPTION_REQUEST_FINISHED
   *
   * @param {number} description
   * @return {boolean}
   */
global.UgcHasDescriptionRequestFinished = function (description) {
  return Citizen.invokeNative('0xebfa8d50addc54c4', _ch(description), _r);
};

/**
   * UGC_HAS_REQUEST_FINISHED
   *
   * @param {number} ugcRequestId
   * @return {boolean}
   */
global.UgcHasRequestFinished = function (ugcRequestId) {
  return Citizen.invokeNative('0xa9eb4d606076615d', ugcRequestId, _r);
};

/**
   * UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS
   *
   * @param {number} description
   * @return {boolean}
   */
global.UgcIsDescriptionRequestInProgress = function (description) {
  return Citizen.invokeNative('0x2d5dc831176d0114', _ch(description), _r);
};

/**
   * UGC_IS_LANGUAGE_SUPPORTED
   *
   * @param {number} languageId
   * @return {boolean}
   */
global.UgcIsLanguageSupported = function (languageId) {
  return Citizen.invokeNative('0xf53e48461b71eecb', languageId, _r);
};

/**
   * UGC_IS_REQUEST_PENDING
   *
   * @param {number} ugcRequestId
   * @return {boolean}
   */
global.UgcIsRequestPending = function (ugcRequestId) {
  return Citizen.invokeNative('0xf4ac4fa844fd559a', ugcRequestId, _r);
};

/**
   * UGC_QUERY_GET_CONTENT_HAS_PLAYER_RECORD
   *
   * @param {any} p0
   * @param {number} index
   * @return {boolean}
   */
global.UgcQueryGetContentHasPlayerRecord = function (p0, index) {
  return Citizen.invokeNative('0xf794765390a6dca5', p0, index, _r);
};

/**
   * UGC_QUERY_GET_CONTENT_NUM
   *
   * @param {number} ugcRequestId
   * @return {number}
   */
global.UgcQueryGetContentNum = function (ugcRequestId) {
  return Citizen.invokeNative('0x76160e0396142765', ugcRequestId, _r, _ri);
};

/**
   * UGC_QUERY_WAS_FORCE_CANCELLED
   *
   * @param {number} ugcRequestId
   * @return {boolean}
   */
global.UgcQueryWasForceCancelled = function (ugcRequestId) {
  return Citizen.invokeNative('0xf8f0705e77a0e705', ugcRequestId, _r);
};

/**
   * UGC_RELEASE_ALL_CACHED_DESCRIPTIONS
   *
  
   * @return {void}
   */
global.UgcReleaseAllCachedDescriptions = function () {
  return Citizen.invokeNative('0x68103e2247887242');
};

/**
   * UGC_RELEASE_CACHED_DESCRIPTION
   *
   * @param {number} description
   * @return {boolean}
   */
global.UgcReleaseCachedDescription = function (description) {
  return Citizen.invokeNative('0x5a34cd9c3c5bec44', _ch(description), _r);
};

/**
   * UGC_REQUEST_CACHED_DESCRIPTION
   *
   * @param {number} description
   * @return {number}
   */
global.UgcRequestCachedDescription = function (description) {
  return Citizen.invokeNative('0x5e0165278f6339ee', _ch(description), _r, _ri);
};

/**
   * UGC_REQUEST_CONTENT_DATA_FROM_PARAMS
   *
   * @param {string | number} contentTypeName
   * @param {string | number} contentId
   * @param {number} fileId
   * @param {number} fileVersion
   * @param {number} languageId
   * @return {number}
   */
global.UgcRequestContentDataFromParams = function (contentTypeName, contentId, fileId, fileVersion, languageId) {
  return Citizen.invokeNative('0x7fd2990af016795e', _ts(contentTypeName), _ts(contentId), fileId, fileVersion, languageId, _r, _ri);
};

/**
   * UGC_SET_QUERY_DATA_FROM_OFFLINE
   *
   * @param {boolean} p0
   * @return {void}
   */
global.UgcSetQueryDataFromOffline = function (p0) {
  return Citizen.invokeNative('0xf98dde0a8ed09323', p0);
};

/**
   * UGC_TEXTURE_DOWNLOAD_REQUEST
   *
   * @param {DataView} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {DataView} p4
   * @param {boolean} p5
   * @return {number}
   */
global.UgcTextureDownloadRequest = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x308f96458b7087cc', p0, p1, p2, p3, p4, p5, _r, _ri);
};

/**
   * VEH_TO_NET
   * Returns the network ID of the given vehicle.
   *
   * @param {number} vehicle
   * @return {number}
   */
global.VehToNet = function (vehicle) {
  return Citizen.invokeNative('0xb4c94523f023419c', vehicle, _r, _ri);
};

/**
   * _0x02B3CDD652B3CDD6
   * Note: this native was added in build 1311.16
   * 
   * GET_NUM_*
   *
  
   * @return {number}
   */
global.N_0x02B3CDD652B3CDD6 = function () {
  return Citizen.invokeNative('0x02b3cdd652b3cdd6', _r, _ri);
};

/**
   * _0x02C4C6C2900D84DF
   * Only used in SP R* Script dominoes_sp: p1 = 0
   *
   * @param {number} player
   * @param {any} p1
   * @return {void}
   */
global.N_0x02C4C6C2900D84DF = function (player, p1) {
  return Citizen.invokeNative('0x02c4c6c2900d84df', player, p1);
};

/**
   * _0x039AD6B57D5179FF
   * Note: this native was added in build 1311.23
   *
  
   * @return {number}
   */
global.N_0x039AD6B57D5179FF = function () {
  return Citizen.invokeNative('0x039ad6b57d5179ff', _r, _ri);
};

/**
   * _0x039B692B3318FAB6
   * Note: this native was added in build 1311.23
   *
   * @param {boolean} p0
   * @return {number}
   */
global.N_0x039B692B3318FAB6 = function (p0) {
  return Citizen.invokeNative('0x039b692b3318fab6', p0, _r, _ri);
};

/**
   * _0x062842D61D0D53FD
   * Note: this native was added in build 1311.23
   *
  
   * @return {boolean}
   */
global.N_0x062842D61D0D53FD = function () {
  return Citizen.invokeNative('0x062842d61d0d53fd', _r);
};

/**
   * _0x0B6B4507AC5EA8B8
   *
  
   * @return {boolean}
   */
global.N_0x0B6B4507AC5EA8B8 = function () {
  return Citizen.invokeNative('0x0b6b4507ac5ea8b8', _r);
};

/**
   * _0x0BF90CBB6B72977B
   *
  
   * @return {void}
   */
global.N_0x0BF90CBB6B72977B = function () {
  return Citizen.invokeNative('0x0bf90cbb6b72977b');
};

/**
   * _0x0CC28C08613BA9E5
   * nullsub, doesn't do anything
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x0CC28C08613BA9E5 = function (p0) {
  return Citizen.invokeNative('0x0cc28c08613ba9e5', p0);
};

/**
   * _0x0D183D8490EE4366
   * Note: this native was added in build 1311.23
   *
   * @param {number} p0
   * @param {number} p1
   * @return {void}
   */
global.N_0x0D183D8490EE4366 = function (p0, p1) {
  return Citizen.invokeNative('0x0d183d8490ee4366', p0, p1);
};

/**
   * _0x0E54D4DA6018FF8E
   *
  
   * @return {boolean}
   */
global.N_0x0E54D4DA6018FF8E = function () {
  return Citizen.invokeNative('0x0e54d4da6018ff8e', _r);
};

/**
   * _0x106CBDD5077DEDE1
   * Note: this native was added in build 1311.23
   *
   * @param {boolean} p0
   * @return {number}
   */
global.N_0x106CBDD5077DEDE1 = function (p0) {
  return Citizen.invokeNative('0x106cbdd5077dede1', p0, _r, _ri);
};

/**
   * _0x13F592FC3BF0EA84
   *
   * @param {number} volume
   * @param {boolean} p1
   * @param {number} originalWeight
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0x13F592FC3BF0EA84 = function (volume, p1, originalWeight, p3, p4) {
  return Citizen.invokeNative('0x13f592fc3bf0ea84', volume, p1, _fv(originalWeight), p3, p4);
};

/**
   * _0x1413B6BF27AB7A95
   *
  
   * @return {number}
   */
global.N_0x1413B6BF27AB7A95 = function () {
  return Citizen.invokeNative('0x1413b6bf27ab7a95', _r, _ri);
};

/**
   * _0x160F0CE6D76A39C9
   * nullsub, doesn't do anything
   *
  
   * @return {any}
   */
global.N_0x160F0CE6D76A39C9 = function () {
  return Citizen.invokeNative('0x160f0ce6d76a39c9', _r);
};

/**
   * _0x16EFB123C4451032
   *
   * @param {number} p0
   * @param {DataView} gamerHandle
   * @return {boolean}
   */
global.N_0x16EFB123C4451032 = function (p0, gamerHandle) {
  return Citizen.invokeNative('0x16efb123c4451032', p0, gamerHandle, _r);
};

/**
   * _0x18B94666CF610AEB
   *
  
   * @return {boolean}
   */
global.N_0x18B94666CF610AEB = function () {
  return Citizen.invokeNative('0x18b94666cf610aeb', _r);
};

/**
   * _0x19447FCAE97704DC
   * Note: this native was added in build 1311.23
   *
   * @param {number} ctx
   * @param {number} ec
   * @param {boolean} ex
   * @param {boolean} ro
   * @return {void}
   */
global.N_0x19447FCAE97704DC = function (ctx, ec, ex, ro) {
  return Citizen.invokeNative('0x19447fcae97704dc', _ch(ctx), ec, ex, ro);
};

/**
   * _0x19B52C20B5C4757C
   *
  
   * @return {void}
   */
global.N_0x19B52C20B5C4757C = function () {
  return Citizen.invokeNative('0x19b52c20b5c4757c');
};

/**
   * _0x1E4E097D71D449FB
   * Note: this native was added in build 1311.23
   *
   * @param {boolean} p0
   * @return {number}
   */
global.N_0x1E4E097D71D449FB = function (p0) {
  return Citizen.invokeNative('0x1e4e097d71d449fb', p0, _r, _ri);
};

/**
   * _0x232E1EB23CDB313C
   *
  
   * @return {boolean}
   */
global.N_0x232E1EB23CDB313C = function () {
  return Citizen.invokeNative('0x232e1eb23cdb313c', _r);
};

/**
   * _0x236321F1178A5446
   * _NETWORK_GET_A* - _NETWORK_GET_D*
   *
   * @param {number} player
   * @param {number} ped
   * @param {DataView} p2
   * @return {boolean}
   */
global.N_0x236321F1178A5446 = function (player, ped, p2) {
  return Citizen.invokeNative('0x236321f1178a5446', player, ped, p2, _r);
};

/**
   * _0x2686BD9566B65EDA
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.N_0x2686BD9566B65EDA = function (x, y, z) {
  return Citizen.invokeNative('0x2686bd9566b65eda', _fv(x), _fv(y), _fv(z));
};

/**
   * _0x26A867C0B7A456D1
   * _GET_LAUNCH_PARAM_(RESPOT?)*
   * Name is probably invalid since this native only reads data from parsed entity.
   *
   * @param {number} entity
   * @return {boolean}
   */
global.N_0x26A867C0B7A456D1 = function (entity) {
  return Citizen.invokeNative('0x26a867c0b7a456d1', entity, _r);
};

/**
   * _0x271F95E55C663B8B
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x271F95E55C663B8B = function (p0, p1) {
  return Citizen.invokeNative('0x271f95e55c663b8b', p0, p1, _r);
};

/**
   * _0x273E04A3A7AD1F2D
   *
  
   * @return {boolean}
   */
global.N_0x273E04A3A7AD1F2D = function () {
  return Citizen.invokeNative('0x273e04a3a7ad1f2d', _r);
};

/**
   * _0x27B1AE4D8C652F08
   *
   * @param {number} p0
   * @return {number}
   */
global.N_0x27B1AE4D8C652F08 = function (p0) {
  return Citizen.invokeNative('0x27b1ae4d8c652f08', p0, _r, _ri);
};

/**
   * _0x2C4E98DDA475364F
   * nullsub, doesn't do anything
   *
   * @param {string | number} p0
   * @return {void}
   */
global.N_0x2C4E98DDA475364F = function (p0) {
  return Citizen.invokeNative('0x2c4e98dda475364f', _ts(p0));
};

/**
   * _0x2CD41AC000E6F611
   * nullsub, doesn't do anything
   *
  
   * @return {void}
   */
global.N_0x2CD41AC000E6F611 = function () {
  return Citizen.invokeNative('0x2cd41ac000e6f611');
};

/**
   * _0x3034C77C79A58880
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0x3034C77C79A58880 = function (p0) {
  return Citizen.invokeNative('0x3034c77c79a58880', p0);
};

/**
   * _0x316FD416C432C761
   * Note: this native was added in build 1311.23
   *
  
   * @return {boolean}
   */
global.N_0x316FD416C432C761 = function () {
  return Citizen.invokeNative('0x316fd416c432c761', _r);
};

/**
   * _0x335AF56613CA0F49
   * Note: this native was added in build 1311.23
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x335AF56613CA0F49 = function (p0) {
  return Citizen.invokeNative('0x335af56613ca0f49', p0);
};

/**
   * _0x34BC1E79546BA543
   * _NETWORK_A* - _NETWORK_C*
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0x34BC1E79546BA543 = function (p0) {
  return Citizen.invokeNative('0x34bc1e79546ba543', p0);
};

/**
   * _0x3AA0CDC63696166D
   *
   * @param {number} p0
   * @return {boolean}
   */
global.N_0x3AA0CDC63696166D = function (p0) {
  return Citizen.invokeNative('0x3aa0cdc63696166d', p0, _r);
};

/**
   * _0x3CBD6565D9C3B133
   * Note: this native was added in build 1311.23
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.N_0x3CBD6565D9C3B133 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x3cbd6565d9c3b133', p0, p1, _fv(p2));
};

/**
   * _0x3E4A16BC669E71B3
   *
  
   * @return {boolean}
   */
global.N_0x3E4A16BC669E71B3 = function () {
  return Citizen.invokeNative('0x3e4a16bc669e71b3', _r);
};

/**
   * _0x3E74A687A73979C6
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0x3E74A687A73979C6 = function (p0) {
  return Citizen.invokeNative('0x3e74a687a73979c6', p0);
};

/**
   * _0x3E8CCE6769DB5F34
   * Stadia only; always returns -1 on other platforms. p0 may be a BOOL.
   *
   * @param {number} p0
   * @return {number}
   */
global.N_0x3E8CCE6769DB5F34 = function (p0) {
  return Citizen.invokeNative('0x3e8cce6769db5f34', p0, _r, _ri);
};

/**
   * _0x3F0ABAE38A0515AD
   *
   * @param {number} p0
   * @param {number} p1
   * @return {void}
   */
global.N_0x3F0ABAE38A0515AD = function (p0, p1) {
  return Citizen.invokeNative('0x3f0abae38a0515ad', p0, p1);
};

/**
   * _0x3F2EE18A3E294801
   *
   * @param {number} p0
   * @return {number}
   */
global.N_0x3F2EE18A3E294801 = function (p0) {
  return Citizen.invokeNative('0x3f2ee18a3e294801', p0, _r, _ri);
};

/**
   * _0x405DDEFB1F531B18
   *
   * @param {number} volume
   * @param {boolean} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x405DDEFB1F531B18 = function (volume, p1, p2, p3) {
  return Citizen.invokeNative('0x405ddefb1f531b18', volume, p1, p2, p3);
};

/**
   * _0x40FEDB13870042F1
   * Note: this native was added in build 1355.30
   *
  
   * @return {void}
   */
global.N_0x40FEDB13870042F1 = function () {
  return Citizen.invokeNative('0x40fedb13870042f1');
};

/**
   * _0x41452E8A3B9C0C4B
   *
  
   * @return {number}
   */
global.N_0x41452E8A3B9C0C4B = function () {
  return Citizen.invokeNative('0x41452e8a3b9c0c4b', _r, _ri);
};

/**
   * _0x422F9D6D6C7BC290
   * Note: this native was added in build 1355.30
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x422F9D6D6C7BC290 = function (p0) {
  return Citizen.invokeNative('0x422f9d6d6c7bc290', p0);
};

/**
   * _0x43CF999205084B4B
   *
  
   * @return {void}
   */
global.N_0x43CF999205084B4B = function () {
  return Citizen.invokeNative('0x43cf999205084b4b');
};

/**
   * _0x4538EE7C321590BC
   * Returns the entity associated with the given network ID.
   *
   * @param {number} networkId
   * @return {number}
   */
global.N_0x4538EE7C321590BC = function (networkId) {
  return Citizen.invokeNative('0x4538ee7c321590bc', networkId, _r, _ri);
};

/**
   * _0x455156F47DC6B78C
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0x455156F47DC6B78C = function (p0) {
  return Citizen.invokeNative('0x455156f47dc6b78c', p0);
};

/**
   * _0x4835413EA6F9C9CD
   * Note: this native was added in build 1311.23
   *
   * @param {boolean} p0
   * @return {number}
   */
global.N_0x4835413EA6F9C9CD = function (p0) {
  return Citizen.invokeNative('0x4835413ea6f9c9cd', p0, _r, _ri);
};

/**
   * _0x49CF17A564918E8D
   *
  
   * @return {void}
   */
global.N_0x49CF17A564918E8D = function () {
  return Citizen.invokeNative('0x49cf17a564918e8d');
};

/**
   * _0x5133CF81924F1129
   * Hardcoded to return zero.
   *
  
   * @return {number}
   */
global.N_0x5133CF81924F1129 = function () {
  return Citizen.invokeNative('0x5133cf81924f1129', _r, _ri);
};

/**
   * _0x51951DE06C0D1C40
   *
   * @param {number} player
   * @param {number} type
   * @return {void}
   */
global.N_0x51951DE06C0D1C40 = function (player, type) {
  return Citizen.invokeNative('0x51951de06c0d1c40', player, type);
};

/**
   * _0x564552C6AF1EEAB1
   *
  
   * @return {void}
   */
global.N_0x564552C6AF1EEAB1 = function () {
  return Citizen.invokeNative('0x564552c6af1eeab1');
};

/**
   * _0x5759160AC17C13CE
   *
   * @param {DataView} gamerHandle
   * @param {string | number} message
   * @return {void}
   */
global.N_0x5759160AC17C13CE = function (gamerHandle, message) {
  return Citizen.invokeNative('0x5759160ac17c13ce', gamerHandle, _ts(message));
};

/**
   * _0x5A91BCEF74944E93
   *
   * @param {number} player
   * @param {number} p1
   * @return {void}
   */
global.N_0x5A91BCEF74944E93 = function (player, p1) {
  return Citizen.invokeNative('0x5a91bcef74944e93', player, _fv(p1));
};

/**
   * _0x5B9C6AC118FD4774
   *
  
   * @return {void}
   */
global.N_0x5B9C6AC118FD4774 = function () {
  return Citizen.invokeNative('0x5b9c6ac118fd4774');
};

/**
   * _0x5CB8B0C846D0F30B
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x5CB8B0C846D0F30B = function (p0) {
  return Citizen.invokeNative('0x5cb8b0c846d0f30b', p0);
};

/**
   * _0x5CD3AAD8FF9ED121
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x5CD3AAD8FF9ED121 = function (p0) {
  return Citizen.invokeNative('0x5cd3aad8ff9ed121', p0);
};

/**
   * _0x5D3C528B7A7DF836
   * _NETWORK_SPAWN_CONFIG_*
   *
   * @param {number} nsctf
   * @return {void}
   */
global.N_0x5D3C528B7A7DF836 = function (nsctf) {
  return Citizen.invokeNative('0x5d3c528b7a7df836', _ch(nsctf));
};

/**
   * _0x5ED39DA62BEB1330
   *
   * @param {number} p0
   * @return {any}
   */
global.N_0x5ED39DA62BEB1330 = function (p0) {
  return Citizen.invokeNative('0x5ed39da62beb1330', p0, _r);
};

/**
   * _0x5F0E99071582DECA
   *
   * @param {any} p0
   * @param {number} index
   * @param {number} p2
   * @return {any}
   */
global.N_0x5F0E99071582DECA = function (p0, index, p2) {
  return Citizen.invokeNative('0x5f0e99071582deca', p0, index, p2, _r);
};

/**
   * _0x5F328FC909F0E0FF
   * Note: this native was added in build 1311.23
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @return {boolean}
   */
global.N_0x5F328FC909F0E0FF = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x5f328fc909f0e0ff', p0, p1, p2, p3, _r);
};

/**
   * _0x603469298A4308AF
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0x603469298A4308AF = function (p0) {
  return Citizen.invokeNative('0x603469298a4308af', p0);
};

/**
   * _0x61BFBAA795E712AD
   *
  
   * @return {void}
   */
global.N_0x61BFBAA795E712AD = function () {
  return Citizen.invokeNative('0x61bfbaa795e712ad');
};

/**
   * _0x64A36BA85CE01A81
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {any}
   */
global.N_0x64A36BA85CE01A81 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x64a36ba85ce01a81', p0, p1, p2, p3, _r);
};

/**
   * _0x67CCDF74C4DF7169
   *
  
   * @return {boolean}
   */
global.N_0x67CCDF74C4DF7169 = function () {
  return Citizen.invokeNative('0x67ccdf74c4df7169', _r);
};

/**
   * _0x691E4DE5309EAEFC
   *
   * @param {any} p0
   * @param {DataView} p1
   * @return {void}
   */
global.N_0x691E4DE5309EAEFC = function (p0, p1) {
  return Citizen.invokeNative('0x691e4de5309eaefc', p0, p1);
};

/**
   * _0x6C27442A225A241A
   *
   * @param {number} p0
   * @return {number}
   */
global.N_0x6C27442A225A241A = function (p0) {
  return Citizen.invokeNative('0x6c27442a225a241a', p0, _r, _ri);
};

/**
   * _0x6C7E04E9DE451789
   *
  
   * @return {void}
   */
global.N_0x6C7E04E9DE451789 = function () {
  return Citizen.invokeNative('0x6c7e04e9de451789');
};

/**
   * _0x6CEE2E30021DAEC6
   * _NETWORK_SPAWN_CONFIG_*
   *
  
   * @return {void}
   */
global.N_0x6CEE2E30021DAEC6 = function () {
  return Citizen.invokeNative('0x6cee2e30021daec6');
};

/**
   * _0x6CF82A7F65A5AD5F
   * _NETWORK_GET_A* - _NETWORK_GET_D*
   *
   * @param {number} ped
   * @param {DataView} p1
   * @return {number}
   */
global.N_0x6CF82A7F65A5AD5F = function (ped, p1) {
  return Citizen.invokeNative('0x6cf82a7f65a5ad5f', ped, p1, _r, _ri);
};

/**
   * _0x704F92B3AF20D857
   *
   * @param {boolean} setting
   * @return {void}
   */
global.N_0x704F92B3AF20D857 = function (setting) {
  return Citizen.invokeNative('0x704f92b3af20d857', setting);
};

/**
   * _0x71FA2D1880C48032
   * Only used in R* Script fm_race_controller
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0x71FA2D1880C48032 = function (p0) {
  return Citizen.invokeNative('0x71fa2d1880c48032', p0);
};

/**
   * _0x744BFBB0CA908161
   * Note: this native was added in build 1311.23
   *
   * @param {boolean} p0
   * @return {number}
   */
global.N_0x744BFBB0CA908161 = function (p0) {
  return Citizen.invokeNative('0x744bfbb0ca908161', p0, _r, _ri);
};

/**
   * _0x75FC34A2BA345BD1
   *
   * @param {number} entity
   * @param {number} player
   * @param {DataView} p2
   * @return {boolean}
   */
global.N_0x75FC34A2BA345BD1 = function (entity, player, p2) {
  return Citizen.invokeNative('0x75fc34a2ba345bd1', entity, player, p2, _r);
};

/**
   * _0x7673C0D2C5CDAC55
   * Note: this native was added in build 1311.23
   *
  
   * @return {void}
   */
global.N_0x7673C0D2C5CDAC55 = function () {
  return Citizen.invokeNative('0x7673c0d2c5cdac55');
};

/**
   * _0x77B299E8799B1332
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0x77B299E8799B1332 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x77b299e8799b1332', p0, p1, p2, _r);
};

/**
   * _0x780A13F780A13F1B
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.N_0x780A13F780A13F1B = function (toggle) {
  return Citizen.invokeNative('0x780a13f780a13f1b', toggle);
};

/**
   * _0x78271BC02AE9AF83
   * Note: this native was added in build 1436.31
   *
   * @param {number} p0
   * @return {number}
   */
global.N_0x78271BC02AE9AF83 = function (p0) {
  return Citizen.invokeNative('0x78271bc02ae9af83', p0, _r, _ri);
};

/**
   * _0x7A8E8DF782B47EB0
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0x7A8E8DF782B47EB0 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x7a8e8df782b47eb0', p0, p1, p2, _r);
};

/**
   * _0x7B3FF2D193628126
   *
   * @param {number} player
   * @return {void}
   */
global.N_0x7B3FF2D193628126 = function (player) {
  return Citizen.invokeNative('0x7b3ff2d193628126', player);
};

/**
   * _0x7BCA0A3972708436
   *
   * @param {DataView} outData
   * @param {number} p1
   * @return {number}
   */
global.N_0x7BCA0A3972708436 = function (outData, p1) {
  return Citizen.invokeNative('0x7bca0a3972708436', outData, p1, _r, _ri);
};

/**
   * _0x7E300B5B86AB1D1A
   *
   * @param {DataView} p0
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @param {number} p8
   * @param {number} p9
   * @param {number} p10
   * @param {number} p11
   * @param {number} p12
   * @param {number} p13
   * @param {number} p14
   * @return {void}
   */
global.N_0x7E300B5B86AB1D1A = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
  return Citizen.invokeNative('0x7e300b5b86ab1d1a', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
};

/**
   * _0x814729078AED6D30
   *
  
   * @return {void}
   */
global.N_0x814729078AED6D30 = function () {
  return Citizen.invokeNative('0x814729078aed6d30');
};

/**
   * _0x862C5040F4888741
   *
   * @param {number} player1
   * @param {number} player2
   * @return {boolean}
   */
global.N_0x862C5040F4888741 = function (player1, player2) {
  return Citizen.invokeNative('0x862c5040f4888741', player1, player2, _r);
};

/**
   * _0x880A7202301E282B
   * Params: p5 = 50.f, p6 = 0 in R* Script net_fetch (NET_FETCH_CLIENT_UPDATE_PED_ROLE_CLUE_IDLE)
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p5
   * @param {any} p6
   * @return {boolean}
   */
global.N_0x880A7202301E282B = function (p0, p1, x, y, z, p5, p6) {
  return Citizen.invokeNative('0x880a7202301e282b', p0, p1, _fv(x), _fv(y), _fv(z), _fv(p5), p6, _r);
};

/**
   * _0x894B5ECAB45D2342
   *
   * @param {number} netHandle
   * @param {any} p1
   * @return {void}
   */
global.N_0x894B5ECAB45D2342 = function (netHandle, p1) {
  return Citizen.invokeNative('0x894b5ecab45d2342', netHandle, p1);
};

/**
   * _0x917AD74BDCF8B6E9
   * Note: this native was added in build 1311.23
   *
   * @param {boolean} p0
   * @return {number}
   */
global.N_0x917AD74BDCF8B6E9 = function (p0) {
  return Citizen.invokeNative('0x917ad74bdcf8b6e9', p0, _r, _ri);
};

/**
   * _0x923346025512DFB7
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x923346025512DFB7 = function (p0) {
  return Citizen.invokeNative('0x923346025512dfb7', p0, _r);
};

/**
   * _0x950ACD8F05B7B9DF
   * Related to container entity (RANSACK_ATTACHED_LOCKBOX / RANSACK_ATTACHED_CHEST)
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x950ACD8F05B7B9DF = function (p0) {
  return Citizen.invokeNative('0x950acd8f05b7b9df', p0, _r);
};

/**
   * _0x979765465A6F25FC
   * Must be called from a background script, otherwise it will do nothing.
   *
   * @param {number} entity
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x979765465A6F25FC = function (entity, p1) {
  return Citizen.invokeNative('0x979765465a6f25fc', entity, p1);
};

/**
   * _0x97BCE4C4B3191228
   *
  
   * @return {void}
   */
global.N_0x97BCE4C4B3191228 = function () {
  return Citizen.invokeNative('0x97bce4c4b3191228');
};

/**
   * _0x981146E5C9CE9250
   *
   * @param {number} inviteIndex
   * @return {boolean}
   */
global.N_0x981146E5C9CE9250 = function (inviteIndex) {
  return Citizen.invokeNative('0x981146e5c9ce9250', inviteIndex, _r);
};

/**
   * _0x982D7AD755B8F62C
   * Note: this native was added in build 1311.23
   *
   * @param {boolean} p0
   * @return {number}
   */
global.N_0x982D7AD755B8F62C = function (p0) {
  return Citizen.invokeNative('0x982d7ad755b8f62c', p0, _r, _ri);
};

/**
   * _0x9B39B0555CC692B5
   *
  
   * @return {void}
   */
global.N_0x9B39B0555CC692B5 = function () {
  return Citizen.invokeNative('0x9b39b0555cc692b5');
};

/**
   * _0x9E5A47744C0F0376
   * Note: this native was added in build 1311.23
   *
   * @param {number} p0
   * @return {boolean}
   */
global.N_0x9E5A47744C0F0376 = function (p0) {
  return Citizen.invokeNative('0x9e5a47744c0f0376', p0, _r);
};

/**
   * _0xA2837A5E21FB5A58
   *
   * @param {any} p0
   * @return {boolean}
   */
global.N_0xA2837A5E21FB5A58 = function (p0) {
  return Citizen.invokeNative('0xa2837a5e21fb5a58', p0, _r);
};

/**
   * _0xA47D48D06AA5A188
   *
  
   * @return {boolean}
   */
global.N_0xA47D48D06AA5A188 = function () {
  return Citizen.invokeNative('0xa47d48d06aa5a188', _r);
};

/**
   * _0xA63E4F050F20021F
   *
  
   * @return {void}
   */
global.N_0xA63E4F050F20021F = function () {
  return Citizen.invokeNative('0xa63e4f050f20021f');
};

/**
   * _0xA6F1BAABFF6AD7B9
   *
   * @param {DataView} p0
   * @return {void}
   */
global.N_0xA6F1BAABFF6AD7B9 = function (p0) {
  return Citizen.invokeNative('0xa6f1baabff6ad7b9', p0);
};

/**
   * _0xA7670F7991099680
   * Note: this native was added in build 1311.23
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0xA7670F7991099680 = function (p0) {
  return Citizen.invokeNative('0xa7670f7991099680', p0);
};

/**
   * _0xA94ECE191D90637A
   *
  
   * @return {number}
   */
global.N_0xA94ECE191D90637A = function () {
  return Citizen.invokeNative('0xa94ece191d90637a', _r, _ri);
};

/**
   * _0xA95470DA137587F5
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0xA95470DA137587F5 = function (p0) {
  return Citizen.invokeNative('0xa95470da137587f5', p0);
};

/**
   * _0xACC44768AF229042
   * nullsub, doesn't do anything
   *
  
   * @return {void}
   */
global.N_0xACC44768AF229042 = function () {
  return Citizen.invokeNative('0xacc44768af229042');
};

/**
   * _0xAFA14F98327791CE
   *
   * @param {DataView} sessionRequestId
   * @return {boolean}
   */
global.N_0xAFA14F98327791CE = function (sessionRequestId) {
  return Citizen.invokeNative('0xafa14f98327791ce', sessionRequestId, _r);
};

/**
   * _0xB131E686BD97B3F8
   *
  
   * @return {void}
   */
global.N_0xB131E686BD97B3F8 = function () {
  return Citizen.invokeNative('0xb131e686bd97b3f8');
};

/**
   * _0xB389289F031F059A
   *
  
   * @return {number}
   */
global.N_0xB389289F031F059A = function () {
  return Citizen.invokeNative('0xb389289f031f059a', _r, _ri);
};

/**
   * _0xBAF7E2979442B29F
   * Note: this native was added in build 1311.23
   *
   * @param {boolean} p0
   * @return {number}
   */
global.N_0xBAF7E2979442B29F = function (p0) {
  return Citizen.invokeNative('0xbaf7e2979442b29f', p0, _r, _ri);
};

/**
   * _0xBB1EC8C2EEF33BAA
   *
   * @param {number} entity
   * @return {void}
   */
global.N_0xBB1EC8C2EEF33BAA = function (entity) {
  return Citizen.invokeNative('0xbb1ec8c2eef33baa', entity);
};

/**
   * _0xBB697756309D77EE
   *
   * @param {boolean} p0
   * @return {any}
   */
global.N_0xBB697756309D77EE = function (p0) {
  return Citizen.invokeNative('0xbb697756309d77ee', p0, _r);
};

/**
   * _0xBC7D36946D19E60E
   * Only used in fm_race_controller R* Script (PROCESS_LOCAL_PLAYER_INIT)
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0xBC7D36946D19E60E = function (p0) {
  return Citizen.invokeNative('0xbc7d36946d19e60e', p0);
};

/**
   * _0xBF8276E51761F9DA
   *
  
   * @return {number}
   */
global.N_0xBF8276E51761F9DA = function () {
  return Citizen.invokeNative('0xbf8276e51761f9da', _r, _ri);
};

/**
   * _0xC028B3F52C707C49
   *
   * @param {any} p0
   * @return {boolean}
   */
global.N_0xC028B3F52C707C49 = function (p0) {
  return Citizen.invokeNative('0xc028b3f52c707c49', p0, _r);
};

/**
   * _0xC0CFFDA87C2C163D
   *
   * @param {number} p0
   * @param {any} p1
   * @param {number} p2
   * @return {any}
   */
global.N_0xC0CFFDA87C2C163D = function (p0, p1, p2) {
  return Citizen.invokeNative('0xc0cffda87c2c163d', p0, p1, p2, _r);
};

/**
   * _0xC1968045EEB563B7
   * Note: this native was added in build 1311.23
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0xC1968045EEB563B7 = function (p0) {
  return Citizen.invokeNative('0xc1968045eeb563b7', p0);
};

/**
   * _0xC8B6D18E22484643
   *
  
   * @return {void}
   */
global.N_0xC8B6D18E22484643 = function () {
  return Citizen.invokeNative('0xc8b6d18e22484643');
};

/**
   * _0xC964FCD3D1720697
   * nullsub, doesn't do anything
   *
  
   * @return {any}
   */
global.N_0xC964FCD3D1720697 = function () {
  return Citizen.invokeNative('0xc964fcd3d1720697', _r);
};

/**
   * _0xCA58D4FD20D70F24
   *
   * @param {any} p0
   * @return {number}
   */
global.N_0xCA58D4FD20D70F24 = function (p0) {
  return Citizen.invokeNative('0xca58d4fd20d70f24', p0, _r, _ri);
};

/**
   * _0xCC4E72C339461ED1
   *
  
   * @return {any}
   */
global.N_0xCC4E72C339461ED1 = function () {
  return Citizen.invokeNative('0xcc4e72c339461ed1', _r);
};

/**
   * _0xCD53E6CBF609C012
   *
   * @param {number} ugcRequestId
   * @return {boolean}
   */
global.N_0xCD53E6CBF609C012 = function (ugcRequestId) {
  return Citizen.invokeNative('0xcd53e6cbf609c012', ugcRequestId, _r);
};

/**
   * _0xCF23AB5BD47B384D
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xCF23AB5BD47B384D = function (p0) {
  return Citizen.invokeNative('0xcf23ab5bd47b384d', p0);
};

/**
   * _0xD1FFB246F4E088AC
   *
   * @param {number} p0
   * @return {boolean}
   */
global.N_0xD1FFB246F4E088AC = function (p0) {
  return Citizen.invokeNative('0xd1ffb246f4e088ac', p0, _r);
};

/**
   * _0xD39A72AE5EBD57E5
   *
  
   * @return {void}
   */
global.N_0xD39A72AE5EBD57E5 = function () {
  return Citizen.invokeNative('0xd39a72ae5ebd57e5');
};

/**
   * _0xD3A3C8B9F3BDEF81
   *
  
   * @return {any}
   */
global.N_0xD3A3C8B9F3BDEF81 = function () {
  return Citizen.invokeNative('0xd3a3c8b9f3bdef81', _r);
};

/**
   * _0xD3B6EBC6C3D77D44
   * Note: this native was added in build 1311.23
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0xD3B6EBC6C3D77D44 = function (p0) {
  return Citizen.invokeNative('0xd3b6ebc6c3d77d44', p0);
};

/**
   * _0xD4022C7286B0DFA2
   *
   * @param {string | number} p0
   * @param {number} p1
   * @param {number} p2
   * @return {any}
   */
global.N_0xD4022C7286B0DFA2 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xd4022c7286b0dfa2', _ts(p0), p1, p2, _r);
};

/**
   * _0xD42C543F73233041
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0xD42C543F73233041 = function (p0) {
  return Citizen.invokeNative('0xd42c543f73233041', p0);
};

/**
   * _0xD637D327080CD86E
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0xD637D327080CD86E = function (p0) {
  return Citizen.invokeNative('0xd637d327080cd86e', p0);
};

/**
   * _0xD78A26024BB13E08
   *
   * @param {number} player
   * @return {void}
   */
global.N_0xD78A26024BB13E08 = function (player) {
  return Citizen.invokeNative('0xd78a26024bb13e08', player);
};

/**
   * _0xD7BAD4062074B9C1
   *
   * @param {any} p0
   * @return {boolean}
   */
global.N_0xD7BAD4062074B9C1 = function (p0) {
  return Citizen.invokeNative('0xd7bad4062074b9c1', p0, _r);
};

/**
   * _0xD7D0DF27CB1765B5
   *
   * @param {number} p0
   * @return {boolean}
   */
global.N_0xD7D0DF27CB1765B5 = function (p0) {
  return Citizen.invokeNative('0xd7d0df27cb1765b5', p0, _r);
};

/**
   * _0xDA1BFED8582F61F0
   *
  
   * @return {boolean}
   */
global.N_0xDA1BFED8582F61F0 = function () {
  return Citizen.invokeNative('0xda1bfed8582f61f0', _r);
};

/**
   * _0xDBDF80673BBA3D65
   * Note: this native was added in build 1491.50
   *
   * @param {number} p0
   * @return {boolean}
   */
global.N_0xDBDF80673BBA3D65 = function (p0) {
  return Citizen.invokeNative('0xdbdf80673bba3d65', p0, _r);
};

/**
   * _0xDC6AD5C046F33AB4
   *
   * @param {boolean} p0
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xDC6AD5C046F33AB4 = function (p0, p1) {
  return Citizen.invokeNative('0xdc6ad5c046f33ab4', p0, p1);
};

/**
   * _0xDCA4A74135E1DEA5
   *
   * @param {any} p0
   * @return {boolean}
   */
global.N_0xDCA4A74135E1DEA5 = function (p0) {
  return Citizen.invokeNative('0xdca4a74135e1dea5', p0, _r);
};

/**
   * _0xE10F2D7715ABABEC
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xE10F2D7715ABABEC = function (p0) {
  return Citizen.invokeNative('0xe10f2d7715ababec', p0, _r);
};

/**
   * NETWORK_UNREGISTER_NETWORKED_ENTITY
   *
   * @param {number} entity
   * @return {void}
   */
global.NetworkUnregisterNetworkedEntity = function (entity) {
  return Citizen.invokeNative('0xe31a04513237dc89', entity);
};

/**
   * _0xE39600E50D608693
   *
   * @param {any} p0
   * @param {any} p1
   * @return {boolean}
   */
global.N_0xE39600E50D608693 = function (p0, p1) {
  return Citizen.invokeNative('0xe39600e50d608693', p0, p1, _r);
};

/**
   * _0xE3AB5EEFCB6671A2
   *
   * @param {number} setting
   * @return {void}
   */
global.N_0xE3AB5EEFCB6671A2 = function (setting) {
  return Citizen.invokeNative('0xe3ab5eefcb6671a2', setting);
};

/**
   * _0xE5634491A58C2703
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0xE5634491A58C2703 = function (p0) {
  return Citizen.invokeNative('0xe5634491a58c2703', _fv(p0));
};

/**
   * _0xE59F4924BD3A718D
   *
   * @param {number} p0
   * @return {string | number}
   */
global.N_0xE59F4924BD3A718D = function (p0) {
  return Citizen.invokeNative('0xe59f4924bd3a718d', p0, _r, _s);
};

/**
   * _0xE5FF65CFF5160752
   *
  
   * @return {void}
   */
global.N_0xE5FF65CFF5160752 = function () {
  return Citizen.invokeNative('0xe5ff65cff5160752');
};

/**
   * _0xE79BA3BC265895DA
   *
   * @param {number} p0
   * @return {string | number}
   */
global.N_0xE79BA3BC265895DA = function (p0) {
  return Citizen.invokeNative('0xe79ba3bc265895da', p0, _r, _s);
};

/**
   * _0xE8E633215471BB5D
   *
   * @param {any} p0
   * @return {number}
   */
global.N_0xE8E633215471BB5D = function (p0) {
  return Citizen.invokeNative('0xe8e633215471bb5d', p0, _r, _ri);
};

/**
   * _0xEC089F84A9C16C62
   * nullsub, doesn't do anything
   *
  
   * @return {any}
   */
global.N_0xEC089F84A9C16C62 = function () {
  return Citizen.invokeNative('0xec089f84a9c16c62', _r);
};

/**
   * _0xF23A6D6C11D8EC15
   *
   * @param {DataView} gamerHandle
   * @return {boolean}
   */
global.N_0xF23A6D6C11D8EC15 = function (gamerHandle) {
  return Citizen.invokeNative('0xf23a6d6c11d8ec15', gamerHandle, _r);
};

/**
   * _0xF260AF6F43953316
   * Same Native Handler as VEH_TO_NET, PED_TO_NET, OBJ_TO_NET and NETWORK_GET_NETWORK_ID_FROM_ENTITY
   *
   * @param {number} handle
   * @return {number}
   */
global.N_0xF260AF6F43953316 = function (handle) {
  return Citizen.invokeNative('0xf260af6f43953316', handle, _r, _ri);
};

/**
   * _0xF302AB9D978352EE
   * Returns the entity's network ID.
   *
   * @param {number} entity
   * @return {number}
   */
global.N_0xF302AB9D978352EE = function (entity) {
  return Citizen.invokeNative('0xf302ab9d978352ee', entity, _r, _ri);
};

/**
   * _0xF342F6BD0A8287D5
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xF342F6BD0A8287D5 = function (p0) {
  return Citizen.invokeNative('0xf342f6bd0a8287d5', p0);
};

/**
   * _0xF8DC69DC1AD19072
   * Note: this native was added in build 1311.23
   *
   * @param {boolean} p0
   * @return {number}
   */
global.N_0xF8DC69DC1AD19072 = function (p0) {
  return Citizen.invokeNative('0xf8dc69dc1ad19072', p0, _r, _ri);
};

/**
   * _0xFB3205788F8AFA3F
   * Note: this native was added in build 1311.23
   *
  
   * @return {number}
   */
global.N_0xFB3205788F8AFA3F = function () {
  return Citizen.invokeNative('0xfb3205788f8afa3f', _r, _ri);
};

/**
   * _0xFC6FCF4C03F1BBF6
   * nullsub, doesn't do anything
   *
  
   * @return {void}
   */
global.N_0xFC6FCF4C03F1BBF6 = function () {
  return Citizen.invokeNative('0xfc6fcf4c03f1bbf6');
};

/**
   * _NETWORK_LEAVE_SESSION
   * Only used in R* Script startup_clip Seems to just kill the network connection, sets the players coords to 0, 0, 0 when doing GetEntityCoords
   *
  
   * @return {void}
   */
global.NetworkLeaveSession = function () {
  return Citizen.invokeNative('0xfd4272a137703449');
};

/**
   * _0xFD8112109A96877C
   * Note: this native was added in build 1311.23
   *
  
   * @return {void}
   */
global.N_0xFD8112109A96877C = function () {
  return Citizen.invokeNative('0xfd8112109a96877c');
};

/**
   * _0xFE53B1F8D43F19BF
   *
   * @param {number} player1
   * @param {number} player2
   * @return {number}
   */
global.N_0xFE53B1F8D43F19BF = function (player1, player2) {
  return Citizen.invokeNative('0xfe53b1f8d43f19bf', player1, player2, _r, _ri);
};

/**
   * _0xFF36F36B07E69059
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xFF36F36B07E69059 = function (p0) {
  return Citizen.invokeNative('0xff36f36b07e69059', p0);
};

/**
   * _ANIM_SCENE_TO_NET
   *
   * @param {number} animScene
   * @return {number}
   */
global.AnimSceneToNet = function (animScene) {
  return Citizen.invokeNative('0xe0d73cddea79ddcd', animScene, _r, _ri);
};

/**
   * _CLEAR_LAUNCH_PARAM
   *
   * @param {string | number} paramName
   * @return {void}
   */
global.ClearLaunchParam = function (paramName) {
  return Citizen.invokeNative('0x782c94db6469634d', _ts(paramName));
};

/**
   * _COMMERCE_STORE_IS_ENABLED
   *
  
   * @return {boolean}
   */
global.CommerceStoreIsEnabled = function () {
  return Citizen.invokeNative('0xdbc754cb6ccb9378', _r);
};

/**
   * _COMMERCE_STORE_IS_OPEN
   *
  
   * @return {boolean}
   */
global.CommerceStoreIsOpen = function () {
  return Citizen.invokeNative('0xce5e79d9e303628e', _r);
};

/**
   * _GET_LAUNCH_PARAM_EXISTS
   *
   * @param {string | number} paramName
   * @return {boolean}
   */
global.GetLaunchParamExists = function (paramName) {
  return Citizen.invokeNative('0x02e97ce283648cd9', _ts(paramName), _r);
};

/**
   * _GET_LAUNCH_PARAM_STRING
   *
  
   * @return {string | number}
   */
global.GetLaunchParamString = function () {
  return Citizen.invokeNative('0xc59ab6a04333c502', _r, _s);
};

/**
   * _GET_NUM_CREATED_MISSION_PICKUPS
   *
   * @param {boolean} p0
   * @return {number}
   */
global.GetNumCreatedMissionPickups = function (p0) {
  return Citizen.invokeNative('0xd2ba051b94ca9bcc', p0, _r, _ri);
};

/**
   * _GET_NUM_PEER_NEGOTIATION_RESPONSES
   * Note: this native was added in build 1311.16
   *
  
   * @return {number}
   */
global.GetNumPeerNegotiationResponses = function () {
  return Citizen.invokeNative('0x4fe932e84fe932e8', _r, _ri);
};

/**
   * _GET_NUM_RESERVED_MISSION_PICKUPS
   *
   * @param {boolean} p0
   * @return {number}
   */
global.GetNumReservedMissionPickups = function (p0) {
  return Citizen.invokeNative('0x62be3ecc79fbd004', p0, _r, _ri);
};

/**
   * _GET_PLAYER_WAYPOINT_IS_ACTIVE
   *
   * @param {number} player
   * @return {boolean}
   */
global.GetPlayerWaypointIsActive = function (player) {
  return Citizen.invokeNative('0xdcc4b7f7112e8ab7', player, _r);
};

/**
   * _GET_RESERVED_MISSION_ENTITIES_FOR_THREAD
   * Only used in R* Script net_stable_manager
   *
   * @param {number} threadId
   * @return {[number, number, number, number, number, number]}
   */
global.GetReservedMissionEntitiesForThread = function (threadId) {
  return Citizen.invokeNative('0x99aac89c510deb0d', threadId, _i, _i, _i, _i, _i, _i);
};

/**
   * _GET_SOCIAL_MATCHMAKING_ALLOWED
   *
  
   * @return {boolean}
   */
global.GetSocialMatchmakingAllowed = function () {
  return Citizen.invokeNative('0xd0541ef28e9c4783', _r);
};

/**
   * _LOCAL_PLAYER_PEDSHOT_TEXTURE_DOWNLOAD_REQUEST
   *
   * @param {number} playerSlot
   * @param {number} personaPhotoLocalCacheType
   * @return {number}
   */
global.LocalPlayerPedshotTextureDownloadRequest = function (playerSlot, personaPhotoLocalCacheType) {
  return Citizen.invokeNative('0x6e2fd8cf7eb10e53', playerSlot, personaPhotoLocalCacheType, _r, _ri);
};

/**
   * _MUGSHOT_TEXTURE_DOWNLOAD_REQUEST
   * Returns textureDownloadId
   *
   * @param {DataView} gamerHandle
   * @param {number} p1
   * @param {string | number} name
   * @param {boolean} p3
   * @return {number}
   */
global.MugshotTextureDownloadRequest = function (gamerHandle, p1, name, p3) {
  return Citizen.invokeNative('0x9b5db6ceafaa10bb', gamerHandle, p1, _ts(name), p3, _r, _ri);
};

/**
   * _NETWORK_ADD_PLAYER_TO_RECENT_GAMERS_LIST
   *
   * @param {number} player
   * @param {number} p1
   * @return {void}
   */
global.NetworkAddPlayerToRecentGamersList = function (player, p1) {
  return Citizen.invokeNative('0x157d8f3de12b307f', player, p1);
};

/**
   * _NETWORK_ALERT
   *
   * @param {number} ctx
   * @param {number} lh
   * @param {number} ec
   * @param {number} h
   * @return {void}
   */
global.NetworkAlert = function (ctx, lh, ec, h) {
  return Citizen.invokeNative('0x1baa028f52eed310', _ch(ctx), _ch(lh), ec, h);
};

/**
   * _NETWORK_ARE_ONLINE_NOTIFICATIONS_SHOWN_IN_STORY_MODE
   * Returns value of fwuiCachedSetting "general.onlineNotificationsInStoryMode"
   *
  
   * @return {boolean}
   */
global.NetworkAreOnlineNotificationsShownInStoryMode = function () {
  return Citizen.invokeNative('0xf5c5929e07512f80', _r);
};

/**
   * _NETWORK_ARE_PLAYERS_IN_SAME_PLATFORM_PARTY
   *
   * @param {DataView} gamerHandle1
   * @param {DataView} gamerHandle2
   * @return {boolean}
   */
global.NetworkArePlayersInSamePlatformParty = function (gamerHandle1, gamerHandle2) {
  return Citizen.invokeNative('0x11820d1ae80dea39', gamerHandle1, gamerHandle2, _r);
};

/**
   * _NETWORK_AUTO_SESSION_IS_AUTO_WARP_DISABLED
   *
  
   * @return {boolean}
   */
global.NetworkAutoSessionIsAutoWarpDisabled = function () {
  return Citizen.invokeNative('0xe258570e0c116a66', _r);
};

/**
   * _NETWORK_AUTO_SESSION_IS_INSTANCED_SESSION
   *
  
   * @return {boolean}
   */
global.NetworkAutoSessionIsInstancedSession = function () {
  return Citizen.invokeNative('0x277865a734918ae6', _r);
};

/**
   * _NETWORK_AUTO_SESSION_IS_PROCESSING_SESSION_SPLIT
   *
  
   * @return {boolean}
   */
global.NetworkAutoSessionIsProcessingSessionSplit = function () {
  return Citizen.invokeNative('0xa021095c983f20d8', _r);
};

/**
   * _NETWORK_AUTO_SESSION_SET_ALLOWED_TO_MERGE
   *
   * @param {boolean} toggle
   * @param {DataView} p1
   * @param {number} p2
   * @return {void}
   */
global.NetworkAutoSessionSetAllowedToMerge = function (toggle, p1, p2) {
  return Citizen.invokeNative('0x63246a24f5747510', toggle, p1, p2);
};

/**
   * _NETWORK_AUTO_SESSION_SET_ALLOWED_TO_SPLIT
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.NetworkAutoSessionSetAllowedToSplit = function (toggle) {
  return Citizen.invokeNative('0x0a428058079ee65c', toggle);
};

/**
   * _NETWORK_AUTO_SESSION_SET_AUTO_WARP_ENABLED
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.NetworkAutoSessionSetAutoWarpEnabled = function (toggle) {
  return Citizen.invokeNative('0x4440fee3efe78f54', toggle);
};

/**
   * _NETWORK_AUTO_SESSION_SPLIT_SESSION_SUCCESSFUL
   *
  
   * @return {boolean}
   */
global.NetworkAutoSessionSplitSessionSuccessful = function () {
  return Citizen.invokeNative('0x6d87ba8ef15226cd', _r);
};

/**
   * _NETWORK_CAN_ADD_FRIEND
   * On PC this returns true if gamerHandle is a valid handle.
   *
   * @param {DataView} gamerHandle
   * @return {boolean}
   */
global.NetworkCanAddFriend = function (gamerHandle) {
  return Citizen.invokeNative('0x99abe9bf9dada162', gamerHandle, _r);
};

/**
   * _NETWORK_CAN_RECEIVE_INVITE_FROM_HANDLE
   *
   * @param {DataView} gamerHandle
   * @return {boolean}
   */
global.NetworkCanReceiveInviteFromHandle = function (gamerHandle) {
  return Citizen.invokeNative('0xf23d6475640d29eb', gamerHandle, _r);
};

/**
   * _NETWORK_CLEAR_CLOCK_OVERRIDE_OVERTIME
   *
   * @param {number} milliseconds
   * @return {void}
   */
global.NetworkClearClockOverrideOvertime = function (milliseconds) {
  return Citizen.invokeNative('0x65f040d91001ed4b', milliseconds);
};

/**
   * _NETWORK_CLOCK_TIME_OVERRIDE
   *
   * @param {number} hour
   * @param {number} minute
   * @param {number} second
   * @param {number} transitionTime
   * @param {boolean} pauseClock
   * @return {void}
   */
global.NetworkClockTimeOverride = function (hour, minute, second, transitionTime, pauseClock) {
  return Citizen.invokeNative('0x669e223e64b1903c', hour, minute, second, transitionTime, pauseClock);
};

/**
   * _NETWORK_CLOCK_TIME_OVERRIDE_2
   *
   * @param {number} hour
   * @param {number} minute
   * @param {number} second
   * @param {number} transitionTime
   * @param {boolean} pauseClock
   * @param {boolean} clockwise
   * @return {void}
   */
global.NetworkClockTimeOverride_2 = function (hour, minute, second, transitionTime, pauseClock, clockwise) {
  return Citizen.invokeNative('0xe28c13ecc36ff14e', hour, minute, second, transitionTime, pauseClock, clockwise);
};

/**
   * _NETWORK_DEBUG_REQUEST_ENTITY_POSITION
   * Must be called from a background script, otherwise it will do nothing.
   *
   * @param {DataView} p0
   * @return {void}
   */
global.NetworkDebugRequestEntityPosition = function (p0) {
  return Citizen.invokeNative('0xfa38b52f91b59075', p0);
};

/**
   * _NETWORK_DID_RECENT_GAMER_NAMES_REQUEST_SUCCEED
   *
  
   * @return {boolean}
   */
global.NetworkDidRecentGamerNamesRequestSucceed = function () {
  return Citizen.invokeNative('0x12aeb56b489415c5', _r);
};

/**
   * _NETWORK_GET_CURRENT_FRIEND_PAGE_DATA
   *
   * @param {DataView} p0
   * @return {boolean}
   */
global.NetworkGetCurrentFriendPageData = function (p0) {
  return Citizen.invokeNative('0xa3eec0a5aff3fc5b', p0, _r);
};

/**
   * _NETWORK_GET_DISPLAY_NAME_FROM_HANDLE
   * Example:
   * 
   * char displayName[64];
   * if (_NETWORK_GET_DISPLAY_NAME_FROM_HANDLE(handle, displayName))
   * {
   *   // use displayName
   * }
   *
   * @param {DataView} gamerHandle
   * @param {string | number} displayName
   * @return {boolean}
   */
global.NetworkGetDisplayNameFromHandle = function (gamerHandle, displayName) {
  return Citizen.invokeNative('0x7fee4f07c54b6b3c', gamerHandle, displayName, _r);
};

/**
   * _NETWORK_GET_GAMERTAG_FROM_FRIEND
   *
   * @param {DataView} gamerHandle
   * @return {string | number}
   */
global.NetworkGetGamertagFromFriend = function (gamerHandle) {
  return Citizen.invokeNative('0x5659d87be674ab17', gamerHandle, _r, _s);
};

/**
   * _NETWORK_GET_GAMER_SESSION_FROM_HANDLE
   *
   * @param {DataView} data
   * @param {number} count
   * @return {boolean}
   */
global.NetworkGetGamerSessionFromHandle = function (data, count) {
  return Citizen.invokeNative('0xfbdfe1c1356e12e8', data, count, _r);
};

/**
   * _NETWORK_GET_GAMER_STATUS
   *
   * @param {DataView} gamerHandle
   * @param {number} p1
   * @return {number}
   */
global.NetworkGetGamerStatus = function (gamerHandle, p1) {
  return Citizen.invokeNative('0xddaeb478e58f8dea', gamerHandle, p1, _r, _ri);
};

/**
   * _NETWORK_GET_GLOBAL_ENTITY_FLAGS
   *
   * @param {number} entity
   * @return {number}
   */
global.NetworkGetGlobalEntityFlags = function (entity) {
  return Citizen.invokeNative('0xdd7806fd0543bc3d', entity, _r, _ri);
};

/**
   * _NETWORK_GET_INSTANCE_ID_OF_THREAD
   *
   * @param {number} threadId
   * @return {number}
   */
global.NetworkGetInstanceIdOfThread = function (threadId) {
  return Citizen.invokeNative('0xfb9eced5b68f3b78', threadId, _r, _ri);
};

/**
   * _NETWORK_GET_NUM_RECENT_GAMERS
   *
  
   * @return {number}
   */
global.NetworkGetNumRecentGamers = function () {
  return Citizen.invokeNative('0x37a834aec6a4f74a', _r, _ri);
};

/**
   * _NETWORK_GET_PLATFORM_INVITE_ID
   *
  
   * @return {number}
   */
global.NetworkGetPlatformInviteId = function () {
  return Citizen.invokeNative('0x9bcf28fb5d65a9be', _r, _ri);
};

/**
   * _NETWORK_GET_PLAYER_FAST_INSTANCE_ID
   *
   * @param {number} player
   * @return {number}
   */
global.NetworkGetPlayerFastInstanceId = function (player) {
  return Citizen.invokeNative('0xd9267375834c5eab', player, _r, _ri);
};

/**
   * _NETWORK_GET_PLAYER_OWNER_OF_NETWORK_ID
   *
   * @param {number} netId
   * @return {number}
   */
global.NetworkGetPlayerOwnerOfNetworkId = function (netId) {
  return Citizen.invokeNative('0xa6c0787443c9583e', netId, _r, _ri);
};

/**
   * _NETWORK_GET_RANK
   *
  
   * @return {number}
   */
global.NetworkGetRank = function () {
  return Citizen.invokeNative('0x32c90cdfaf40514c', _r, _ri);
};

/**
   * _NETWORK_GET_ROS_TITLE_NAME
   * Returns CGameConfig->ConfigOnlineServices->RosTitleName (see gameconfig.xml)
   *
  
   * @return {string | number}
   */
global.NetworkGetRosTitleName = function () {
  return Citizen.invokeNative('0xac6153a0722f524c', _r, _s);
};

/**
   * _NETWORK_GET_SESSION_HOST
   *
  
   * @return {number}
   */
global.NetworkGetSessionHost = function () {
  return Citizen.invokeNative('0x8dc9aa3b508b1a85', _r, _ri);
};

/**
   * _NETWORK_GET_SIZE_OF_HOST_BROADCAST_DATA_STORAGE
   *
  
   * @return {[number, number]}
   */
global.NetworkGetSizeOfHostBroadcastDataStorage = function () {
  return Citizen.invokeNative('0xba24095ea96dfe17', _i, _r, _ri);
};

/**
   * _NETWORK_GET_SIZE_OF_PLAYER_BROADCAST_DATA_STORAGE
   *
  
   * @return {[number, number]}
   */
global.NetworkGetSizeOfPlayerBroadcastDataStorage = function () {
  return Citizen.invokeNative('0x690806bc83bc8ca2', _i, _r, _ri);
};

/**
   * _NETWORK_GET_XP
   *
  
   * @return {number}
   */
global.NetworkGetXp = function () {
  return Citizen.invokeNative('0xdb438cc9bc6f4022', _r, _ri);
};

/**
   * _NETWORK_HAS_COMPLETED_MP_INTRO_FLOW_ON_CURRENT_SLOT
   *
  
   * @return {boolean}
   */
global.NetworkHasCompletedMpIntroFlowOnCurrentSlot = function () {
  return Citizen.invokeNative('0xdd73c9838ce7181d', _r);
};

/**
   * _NETWORK_HAS_CONTROL_OF_ANIM_SCENE
   *
   * @param {number} animScene
   * @return {boolean}
   */
global.NetworkHasControlOfAnimScene = function (animScene) {
  return Citizen.invokeNative('0x26a5c12facff8724', animScene, _r);
};

/**
   * _NETWORK_HAS_CURRENT_GET_GAMER_STATUS_STARTED
   *
  
   * @return {boolean}
   */
global.NetworkHasCurrentGetGamerStatusStarted = function () {
  return Citizen.invokeNative('0x25189f9908e9cd65', _r);
};

/**
   * _NETWORK_IS_FRIEND_HANDLE_IN_SAME_TITLE
   *
   * @param {DataView} gamerHandle
   * @return {boolean}
   */
global.NetworkIsFriendHandleInSameTitle = function (gamerHandle) {
  return Citizen.invokeNative('0x665161d250850a9f', gamerHandle, _r);
};

/**
   * _NETWORK_IS_FRIEND_HANDLE_ONLINE
   *
   * @param {DataView} gamerHandle
   * @return {boolean}
   */
global.NetworkIsFriendHandleOnline = function (gamerHandle) {
  return Citizen.invokeNative('0xe348d1404bd80146', gamerHandle, _r);
};

/**
   * _NETWORK_IS_IN_SESSION_LOBBY
   * Hardcoded to return false.
   *
  
   * @return {boolean}
   */
global.NetworkIsInSessionLobby = function () {
  return Citizen.invokeNative('0xc5196c42de19f646', _r);
};

/**
   * _NETWORK_IS_PLAYER_IN_SPECTATOR_MODE
   *
   * @param {number} player
   * @return {boolean}
   */
global.NetworkIsPlayerInSpectatorMode = function (player) {
  return Citizen.invokeNative('0x5b709519997ecf0f', player, _r);
};

/**
   * _NETWORK_IS_PREVIOUS_UPLOAD_PENDING
   * _NETWORK_IS_T* - _NETWORK_RE*
   *
  
   * @return {boolean}
   */
global.NetworkIsPreviousUploadPending = function () {
  return Citizen.invokeNative('0xa21e3bad0a42d199', _r);
};

/**
   * _NETWORK_IS_RECENT_GAMER_NAMES_REQUEST_IN_PROGRESS
   *
  
   * @return {boolean}
   */
global.NetworkIsRecentGamerNamesRequestInProgress = function () {
  return Citizen.invokeNative('0x4664d213a0ccaf40', _r);
};

/**
   * _NETWORK_IS_THREAD_ACTIVE
   *
   * @param {number} threadId
   * @return {boolean}
   */
global.NetworkIsThreadActive = function (threadId) {
  return Citizen.invokeNative('0x31dad2cd6d49546e', threadId, _r);
};

/**
   * _NETWORK_IS_TRACKED_PLAYER_VISIBLE
   *
   * @param {number} player
   * @param {number} trackedPlayer
   * @return {boolean}
   */
global.NetworkIsTrackedPlayerVisible = function (player, trackedPlayer) {
  return Citizen.invokeNative('0xe525878a35b9eebd', player, trackedPlayer, _r);
};

/**
   * _NETWORK_PERSONA_PHOTO_WRITE_LOCAL
   * Returns false if pedshot push failed
   *
   * @param {string | number} texture
   * @param {number} playerSlot
   * @param {number} p2
   * @param {number} personaPhotoLocalCacheType
   * @return {boolean}
   */
global.NetworkPersonaPhotoWriteLocal = function (texture, playerSlot, p2, personaPhotoLocalCacheType) {
  return Citizen.invokeNative('0x2a48d9567940598f', _ts(texture), playerSlot, p2, personaPhotoLocalCacheType, _r);
};

/**
   * _NETWORK_PERSONA_PHOTO_WRITE_SC_PROFILE
   * Returns false if pedshot push failed
   *
   * @param {string | number} texture
   * @param {number} personaPhotoType
   * @param {number} formatIndex
   * @return {boolean}
   */
global.NetworkPersonaPhotoWriteScProfile = function (texture, personaPhotoType, formatIndex) {
  return Citizen.invokeNative('0xb72999d3120599df', _ts(texture), personaPhotoType, formatIndex, _r);
};

/**
   * _NETWORK_REMOVE_FRIEND
   *
   * @param {DataView} gamerHandle
   * @return {boolean}
   */
global.NetworkRemoveFriend = function (gamerHandle) {
  return Citizen.invokeNative('0x55f618f68ab854d3', gamerHandle, _r);
};

/**
   * _NETWORK_REQUEST_CONTROL_OF_ANIM_SCENE
   *
   * @param {number} animScene
   * @return {boolean}
   */
global.NetworkRequestControlOfAnimScene = function (animScene) {
  return Citizen.invokeNative('0xaaa92b631b13f614', animScene, _r);
};

/**
   * _NETWORK_RESURRECT_LOCAL_PLAYER_2
   *
   * @param {DataView} args
   * @return {void}
   */
global.NetworkResurrectLocalPlayer_2 = function (args) {
  return Citizen.invokeNative('0x4154b7d8c75e5dcf', args);
};

/**
   * _NETWORK_SEND_SESSION_INVITE
   *
   * @param {DataView} gamerHandle
   * @param {string | number} contentId
   * @param {DataView} data
   * @param {number} dataSize
   * @param {number} p4
   * @param {number} flags
   * @return {boolean}
   */
global.NetworkSendSessionInvite = function (gamerHandle, contentId, data, dataSize, p4, flags) {
  return Citizen.invokeNative('0xe47001b7cb8b98ae', gamerHandle, _ts(contentId), data, dataSize, p4, flags, _r);
};

/**
   * _NETWORK_SESSION_ADD_SESSION_FLAGS
   * enum eSessionFlags
   * {
   *   SESSION_FLAG_NONE = 0,
   *   SF_INSTANCE = (1 << 0),
   *   SF_MATCH = (1 << 1),
   *   SF_PRIVATE = (1 << 2),
   *   SF_BLOCK_INVITES = (1 << 3),
   *   SF_BLOCK_JOIN_VIA_PRESENCE = (1 << 4),
   *   SF_BLOCK_NON_HOST_INVITES = (1 << 5),
   *   SF_BLOCK_IN_PROGRESS_MATCHMAKING_BACKFILL = (1 << 6),
   *   SF_BLOCK_IN_GAMEPLAY_MATCHMAKING_BACKFILL = (1 << 7),
   *   SF_BLOCK_INVITES_TEMPORARY = (1 << 8),
   *   SF_IN_GAMEPLAY = (1 << 9),
   *   SF_COMPETITIVE = (1 << 10),
   *   SF_MATCHMAKING_BACKFILL_IS_BLOCKED = (1 << 11)
   * };
   *
   * @param {number} flags
   * @return {boolean}
   */
global.NetworkSessionAddSessionFlags = function (flags) {
  return Citizen.invokeNative('0xe546bda1b3e288ee', flags, _r);
};

/**
   * _NETWORK_SESSION_ARE_SESSION_IDS_EQUAL
   * Note: this native was added in build 1311.23
   *
   * @param {DataView} sessionId1
   * @param {DataView} sessionId2
   * @return {boolean}
   */
global.NetworkSessionAreSessionIdsEqual = function (sessionId1, sessionId2) {
  return Citizen.invokeNative('0x4dec5000f7b508f0', sessionId1, sessionId2, _r);
};

/**
   * _NETWORK_SESSION_CANCEL_REQUEST
   *
   * @param {DataView} sessionRequestId
   * @return {boolean}
   */
global.NetworkSessionCancelRequest = function (sessionRequestId) {
  return Citizen.invokeNative('0xe72e5c1289bd1f40', sessionRequestId, _r);
};

/**
   * _NETWORK_SESSION_GET_SESSION_ID
   * Note: this native was added in build 1311.23
   *
   * @param {DataView} sessionId
   * @return {void}
   */
global.NetworkSessionGetSessionId = function (sessionId) {
  return Citizen.invokeNative('0xe9b356c330c0a806', sessionId);
};

/**
   * _NETWORK_SESSION_GET_SESSION_REQUEST_RESULT
   * Returns result of session request:
   * 0 - NOT_FOUND
   * 1 - IN_PROGRESS
   * 2 - TIMEOUT
   * 3 - PLAYER_OFFLINE
   * 4 - GANG_MEMBERS_CHANGED
   * 5 - PLAYER_CANCELLED
   * 6 - PLAYER_SET_TOO_LARGE
   * 7 - MATCH_ACCEPTED
   * 8 - OTHER
   *
   * @param {DataView} sessionRequestId
   * @return {[number, number]}
   */
global.NetworkSessionGetSessionRequestResult = function (sessionRequestId) {
  return Citizen.invokeNative('0x0dd051b1bf4b8bd6', sessionRequestId, _i, _r, _ri);
};

/**
   * _NETWORK_SESSION_IS_NSRR_SUCCESS
   *
   * @param {DataView} sessionRequestId
   * @return {boolean}
   */
global.NetworkSessionIsNsrrSuccess = function (sessionRequestId) {
  return Citizen.invokeNative('0x0f44a5c78d114922', sessionRequestId, _r);
};

/**
   * _NETWORK_SESSION_IS_REQUEST_IN_PROGRESS_BY_QUEUE_GROUP
   *
   * @param {number} queueGroup
   * @return {boolean}
   */
global.NetworkSessionIsRequestInProgressByQueueGroup = function (queueGroup) {
  return Citizen.invokeNative('0x9e762a595cf88e4a', queueGroup, _r);
};

/**
   * _NETWORK_SESSION_PLAYLIST_GET_UPCOMING_CONTENT
   * Only used in R* Script net_rolling_playlist
   *
  
   * @return {void}
   */
global.NetworkSessionPlaylistGetUpcomingContent = function () {
  return Citizen.invokeNative('0x8f9db6cd03b42b58');
};

/**
   * _NETWORK_SESSION_PLAYLIST_GO_TO_NEXT_CONTENT
   * Only used in R* Script net_rolling_playlist
   *
  
   * @return {void}
   */
global.NetworkSessionPlaylistGoToNextContent = function () {
  return Citizen.invokeNative('0xbde605f925b07127');
};

/**
   * _NETWORK_SESSION_REMOVE_PLAYER_FLAGS
   *
   * @param {number} flags
   * @return {boolean}
   */
global.NetworkSessionRemovePlayerFlags = function (flags) {
  return Citizen.invokeNative('0x3215bbe34d3418c5', flags, _r);
};

/**
   * _NETWORK_SESSION_REQUEST_SESSION_NOMINATED
   *
   * @param {number} flags
   * @param {number} userHash
   * @param {number} p2
   * @param {DataView} sessionRequestId
   * @return {boolean}
   */
global.NetworkSessionRequestSessionNominated = function (flags, userHash, p2, sessionRequestId) {
  return Citizen.invokeNative('0x4f4672457ff597d1', flags, userHash, p2, sessionRequestId, _r);
};

/**
   * _NETWORK_SESSION_REQUEST_SESSION_ON_CALL
   * category:
   * enum eOnCallType
   * {
   *   NETWORK_SESSION_REQUEST_ON_CALL_TYPE_STORY = 2,
   *   NETWORK_SESSION_REQUEST_ON_CALL_TYPE_MATCH = 3
   * };
   *
   * @param {number} flags
   * @param {number} category
   * @param {DataView} p2
   * @param {number} userHash
   * @param {DataView} sessionRequestId
   * @return {boolean}
   */
global.NetworkSessionRequestSessionOnCall = function (flags, category, p2, userHash, sessionRequestId) {
  return Citizen.invokeNative('0x23d9c1f2e4098edc', flags, category, p2, userHash, sessionRequestId, _r);
};

/**
   * _NETWORK_SESSION_SET_PLAYER_FLAGS
   *
   * @param {number} flags
   * @return {boolean}
   */
global.NetworkSessionSetPlayerFlags = function (flags) {
  return Citizen.invokeNative('0x0ae241a4a9adeeec', flags, _r);
};

/**
   * _NETWORK_SESSION_TRANSITION_TO_SESSION
   *
   * @param {DataView} sessionRequestId
   * @return {boolean}
   */
global.NetworkSessionTransitionToSession = function (sessionRequestId) {
  return Citizen.invokeNative('0xf20b18a330e6db5c', sessionRequestId, _r);
};

/**
   * _NETWORK_SET_IN_STATIC_SPECTATOR_MODE
   *
   * @param {boolean} toggle
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.NetworkSetInStaticSpectatorMode = function (toggle, x, y, z) {
  return Citizen.invokeNative('0xfbf1ecfb39a77b5f', toggle, _fv(x), _fv(y), _fv(z));
};

/**
   * _NETWORK_SPAWN_CONFIG_ADD_EXCLUSION_VOLUME
   *
   * @param {number} volume
   * @return {void}
   */
global.NetworkSpawnConfigAddExclusionVolume = function (volume) {
  return Citizen.invokeNative('0xeeb7818b1d307212', volume);
};

/**
   * _NETWORK_SPAWN_CONFIG_ADD_PROPERTY_PREFERENCE
   *
   * @param {number} configProperty
   * @param {boolean} include
   * @param {number} weight
   * @return {void}
   */
global.NetworkSpawnConfigAddPropertyPreference = function (configProperty, include, weight) {
  return Citizen.invokeNative('0xeb6027fd1b4600d5', configProperty, include, _fv(weight));
};

/**
   * _NETWORK_SPAWN_CONFIG_ADD_PROPERTY_SCRIPTED
   *
   * @param {number} configProperty
   * @param {boolean} include
   * @return {void}
   */
global.NetworkSpawnConfigAddPropertyScripted = function (configProperty, include) {
  return Citizen.invokeNative('0x44d59ec597bbf348', configProperty, include);
};

/**
   * _NETWORK_SPAWN_CONFIG_ADD_SPAWN_POINT
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} heading
   * @return {void}
   */
global.NetworkSpawnConfigAddSpawnPoint = function (x, y, z, heading) {
  return Citizen.invokeNative('0xfd1ac0b3858f224c', _fv(x), _fv(y), _fv(z), _fv(heading));
};

/**
   * _NETWORK_SPAWN_CONFIG_REMOVE_EXCLUSION_VOLUME
   *
   * @param {number} volume
   * @return {void}
   */
global.NetworkSpawnConfigRemoveExclusionVolume = function (volume) {
  return Citizen.invokeNative('0xa35e7bf20fa269e0', volume);
};

/**
   * _NETWORK_SPAWN_CONFIG_SEARCH_IN_PROGRESS
   *
  
   * @return {boolean}
   */
global.NetworkSpawnConfigSearchInProgress = function () {
  return Citizen.invokeNative('0x89ec2fc89ecb1005', _r);
};

/**
   * _NETWORK_SPAWN_CONFIG_SET_CANCEL_SEARCH
   *
  
   * @return {void}
   */
global.NetworkSpawnConfigSetCancelSearch = function () {
  return Citizen.invokeNative('0x765e60a1dcb8b1ce');
};

/**
   * _NETWORK_SPAWN_CONFIG_SET_LEVEL_WATER_DEPTH
   *
   * @param {number} waterDepthLevel
   * @return {void}
   */
global.NetworkSpawnConfigSetLevelWaterDepth = function (waterDepthLevel) {
  return Citizen.invokeNative('0xbdcc671b911040f9', waterDepthLevel);
};

/**
   * _NET_TO_ANIM_SCENE
   *
   * @param {number} netId
   * @return {number}
   */
global.NetToAnimScene = function (netId) {
  return Citizen.invokeNative('0xd7f6781a0abaf6fb', netId, _r, _ri);
};

/**
   * _NET_TO_PROPSET
   *
   * @param {number} netId
   * @return {number}
   */
global.NetToPropset = function (netId) {
  return Citizen.invokeNative('0xd08066e00d26c448', netId, _r, _ri);
};

/**
   * _PEDMUGSHOT_GET_STATUS
   *
  
   * @return {number}
   */
global.PedmugshotGetStatus = function () {
  return Citizen.invokeNative('0xcbac13f065c47596', _r, _ri);
};

/**
   * _PEDMUGSHOT_REQUEST_SEND
   *
  
   * @return {any}
   */
global.PedmugshotRequestSend = function () {
  return Citizen.invokeNative('0xfbc30b70b3cdb87e', _r);
};

/**
   * _PEDMUGSHOT_TAKE
   *
  
   * @return {boolean}
   */
global.PedmugshotTake = function () {
  return Citizen.invokeNative('0xcd954f330693f5f2', _r);
};

/**
   * _PROPSET_TO_NET
   *
   * @param {number} propSet
   * @return {number}
   */
global.PropsetToNet = function (propSet) {
  return Citizen.invokeNative('0x74f99ef7ef503398', propSet, _r, _ri);
};

/**
   * _REPORT_PLAYER
   *
   * @param {number} player
   * @param {number} reportType
   * @param {string | number} description
   * @param {string | number} horseName
   * @return {void}
   */
global.ReportPlayer = function (player, reportType, description, horseName) {
  return Citizen.invokeNative('0xa197c35f73ac0f12', player, reportType, _ts(description), _ts(horseName));
};

/**
   * _REQUEST_PEDSHOT_TEXTURE_LOCAL_BACKUP_DOWNLOAD
   * Only used in R* SP Scripts
   *
   * @param {number} player
   * @param {number} personaPhotoLocalCacheType
   * @return {string | number}
   */
global.RequestPedshotTextureLocalBackupDownload = function (player, personaPhotoLocalCacheType) {
  return Citizen.invokeNative('0x356f9fb0698c1feb', player, personaPhotoLocalCacheType, _r, _s);
};

/**
   * _REQUEST_PEDSHOT_TEXTURE_LOCAL_DOWNLOAD
   * Only used in R* SP Script map_app_event_handler
   *
   * @param {DataView} gamerHandle
   * @param {number} p1
   * @return {string | number}
   */
global.RequestPedshotTextureLocalDownload = function (gamerHandle, p1) {
  return Citizen.invokeNative('0xcaf4ca2f87779f8f', gamerHandle, p1, _r, _s);
};

/**
   * _REQUEST_PEDSHOT_TEXTURE_MULTIPLAYER_DOWNLOAD
   *
   * @param {DataView} gamerHandle
   * @param {number} p1
   * @return {string | number}
   */
global.RequestPedshotTextureMultiplayerDownload = function (gamerHandle, p1) {
  return Citizen.invokeNative('0xb5c4b18b12a2af23', gamerHandle, p1, _r, _s);
};

/**
   * _SET_DOOR_NETWORKED
   *
   * @param {number} doorHash
   * @return {void}
   */
global.SetDoorNetworked = function (doorHash) {
  return Citizen.invokeNative('0x51d99497abf3f451', _ch(doorHash));
};

/**
   * _SET_DOOR_UNNETWORKED
   *
   * @param {any} p0
   * @param {boolean} toggle
   * @return {void}
   */
global.SetDoorUnnetworked = function (p0, toggle) {
  return Citizen.invokeNative('0xc1e1a3d5ed7617b8', p0, toggle);
};

/**
   * _SET_ENTITY_GHOSTED_TO_LOCAL_PLAYER
   *
   * @param {number} entity
   * @param {boolean} toggle
   * @return {void}
   */
global.SetEntityGhostedToLocalPlayer = function (entity, toggle) {
  return Citizen.invokeNative('0xee5ae9956743ba20', entity, toggle);
};

/**
   * _SET_LAUNCH_PARAM_STRING
   *
   * @param {string | number} params
   * @return {void}
   */
global.SetLaunchParamString = function (params) {
  return Citizen.invokeNative('0xdffc15aa63d04aab', _ts(params));
};

/**
   * _SET_LAUNCH_PARAM_VALUE
   *
   * @param {string | number} paramName
   * @param {string | number} value
   * @return {void}
   */
global.SetLaunchParamValue = function (paramName, value) {
  return Citizen.invokeNative('0x668af6e4933ac13f', _ts(paramName), _ts(value));
};

/**
   * _SET_LOCAL_PLAYER_DAMAGE_MULTIPLIER_FOR_PLAYER
   *
   * @param {number} player
   * @param {number} damageMultiplier
   * @return {void}
   */
global.SetLocalPlayerDamageMultiplierForPlayer = function (player, damageMultiplier) {
  return Citizen.invokeNative('0xd041a32992a55f84', player, _fv(damageMultiplier));
};

/**
   * _SET_NETWORK_RESPOT_TIMER
   *
   * @param {number} entity
   * @param {number} timer
   * @param {boolean} p2
   * @return {void}
   */
global.SetNetworkRespotTimer = function (entity, timer, p2) {
  return Citizen.invokeNative('0x442b4347b6ec36e8', entity, timer, p2);
};

/**
   * _SET_PLAYER_VISIBILITY_TO_LOCAL_PLAYER_DISABLED
   * _SET_PLAYER_V* - _SET_S*
   *
   * @param {number} player
   * @param {boolean} disabled
   * @return {void}
   */
global.SetPlayerVisibilityToLocalPlayerDisabled = function (player, disabled) {
  return Citizen.invokeNative('0xdca6abdb9288fbe4', player, disabled);
};

/**
   * _SET_SOCIAL_MATCHMAKING_ALLOWED
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetSocialMatchmakingAllowed = function (toggle) {
  return Citizen.invokeNative('0x777d0571a466b520', toggle);
};

/**
   * _TEXTURE_DOWNLOAD_RELEASE_BY_NAME
   *
   * @param {string | number} name
   * @return {void}
   */
global.TextureDownloadReleaseByName = function (name) {
  return Citizen.invokeNative('0x7a17b7981560ffa5', _ts(name));
};

/**
   * _TEXTURE_DOWNLOAD_TEXTURE_NAME_IS_VALID
   *
   * @param {string | number} name
   * @return {boolean}
   */
global.TextureDownloadTextureNameIsValid = function (name) {
  return Citizen.invokeNative('0xe2c3cec3c0903a00', _ts(name), _r);
};

/**
   * _UGC_HAS_PRIVILEGE
   * Checks if the user has ROS privilege 14.
   *
  
   * @return {boolean}
   */
global.UgcHasPrivilege = function () {
  return Citizen.invokeNative('0x6506bfa755fb209c', _r);
};

/**
   * _UGC_IS_BOOK_MARKED
   *
   * @param {string | number} contentId
   * @return {boolean}
   */
global.UgcIsBookMarked = function (contentId) {
  return Citizen.invokeNative('0xe42d1042f09865fe', _ts(contentId), _r);
};

/**
   * _UGC_QUERY_BY_CATEGORY
   * Returns ugcRequestId
   *
   * @param {number} categoryType
   * @param {number} p1
   * @param {number} maxGet
   * @param {string | number} contentTypeName
   * @param {number} p4
   * @param {boolean} p5
   * @return {number}
   */
global.UgcQueryByCategory = function (categoryType, p1, maxGet, contentTypeName, p4, p5) {
  return Citizen.invokeNative('0x8c109958c9bb559d', categoryType, p1, maxGet, _ts(contentTypeName), p4, p5, _r, _ri);
};

/**
   * _UGC_QUERY_BY_CONTENT_ID
   * Returns ugcRequestId
   *
   * @param {string | number} contentId
   * @param {boolean} latestVersion
   * @param {string | number} contentTypeName
   * @return {number}
   */
global.UgcQueryByContentId = function (contentId, latestVersion, contentTypeName) {
  return Citizen.invokeNative('0x69d22e183580113f', _ts(contentId), latestVersion, _ts(contentTypeName), _r, _ri);
};

/**
   * _UGC_QUERY_BY_CONTENT_TYPE
   * Returns ugcRequestId
   *
   * @param {number} p0
   * @param {number} maxGet
   * @param {string | number} contentTypeName
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @return {number}
   */
global.UgcQueryByContentType = function (p0, maxGet, contentTypeName, p3, p4, p5) {
  return Citizen.invokeNative('0xf40ef49b3099e98e', p0, maxGet, _ts(contentTypeName), p3, p4, p5, _r, _ri);
};

/**
   * _UGC_QUERY_GET_BOOK_MARKED
   *
   * @param {any} p0
   * @param {number} index
   * @return {boolean}
   */
global.UgcQueryGetBookMarked = function (p0, index) {
  return Citizen.invokeNative('0x98539fc453aea639', p0, index, _r);
};

/**
   * _UGC_QUERY_GET_CREATOR_HANDLE
   *
   * @param {any} p0
   * @param {number} index
   * @param {DataView} gamerHandle
   * @return {any}
   */
global.UgcQueryGetCreatorHandle = function (p0, index, gamerHandle) {
  return Citizen.invokeNative('0xadb56322eedfbdc9', p0, index, gamerHandle, _r);
};

/**
   * _UGC_QUERY_GET_CREATOR_PHOTO
   * Returns string for GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO
   *
   * @param {any} p0
   * @param {number} p1
   * @param {any} p2
   * @return {string | number}
   */
global.UgcQueryGetCreatorPhoto = function (p0, p1, p2) {
  return Citizen.invokeNative('0x409fe0ca6a4d1d49', p0, p1, p2, _r, _s);
};

/**
   * _UGC_QUERY_GET_DATE
   *
   * @param {any} p0
   * @param {number} index
   * @param {DataView} p2
   * @return {void}
   */
global.UgcQueryGetDate = function (p0, index, p2) {
  return Citizen.invokeNative('0xe0cb4ab15cb32710', p0, index, p2);
};

/**
   * _UGC_QUERY_GET_LANGUAGE
   *
   * @param {any} p0
   * @param {number} index
   * @return {number}
   */
global.UgcQueryGetLanguage = function (p0, index) {
  return Citizen.invokeNative('0x97764e8ac6487a9a', p0, index, _r, _ri);
};

/**
   * _UGC_QUERY_GET_MISSION_DESC_HASH
   *
   * @param {any} p0
   * @param {number} index
   * @return {number}
   */
global.UgcQueryGetMissionDescHash = function (p0, index) {
  return Citizen.invokeNative('0xa6bf569956c60a60', p0, index, _r, _ri);
};

/**
   * _UGC_QUERY_GET_NAME
   *
   * @param {any} p0
   * @param {number} index
   * @return {string | number}
   */
global.UgcQueryGetName = function (p0, index) {
  return Citizen.invokeNative('0x2d053ea815702dd1', p0, index, _r, _s);
};

/**
   * _UGC_QUERY_GET_OWNER_ID
   *
   * @param {any} p0
   * @param {number} index
   * @return {string | number}
   */
global.UgcQueryGetOwnerId = function (p0, index) {
  return Citizen.invokeNative('0xf9f0b3028431967b', p0, index, _r, _s);
};

/**
   * _UGC_QUERY_GET_PLAYLIST_NAME
   *
   * @param {any} p0
   * @param {number} index
   * @return {string | number}
   */
global.UgcQueryGetPlaylistName = function (p0, index) {
  return Citizen.invokeNative('0xcaf50048c8d0fba0', p0, index, _r, _s);
};

/**
   * _UGC_QUERY_GET_POSIX_PUBLISHED_DATE
   *
   * @param {any} p0
   * @param {any} p1
   * @return {number}
   */
global.UgcQueryGetPosixPublishedDate = function (p0, p1) {
  return Citizen.invokeNative('0x104080ca9e519b00', p0, p1, _r, _ri);
};

/**
   * _UGC_QUERY_GET_POSIX_UPDATED_DATE
   *
   * @param {any} p0
   * @param {any} p1
   * @return {number}
   */
global.UgcQueryGetPosixUpdatedDate = function (p0, p1) {
  return Citizen.invokeNative('0x21a99a72b00d8002', p0, p1, _r, _ri);
};

/**
   * _UGC_QUERY_GET_PUBLISHED
   *
   * @param {any} p0
   * @param {any} p1
   * @return {boolean}
   */
global.UgcQueryGetPublished = function (p0, p1) {
  return Citizen.invokeNative('0x9993f1e11944a3dd', p0, p1, _r);
};

/**
   * _UGC_QUERY_GET_RATING
   *
   * @param {any} p0
   * @param {number} index
   * @param {number} p2
   * @return {number}
   */
global.UgcQueryGetRating = function (p0, index, p2) {
  return Citizen.invokeNative('0x24cd8faea1368379', p0, index, p2, _r, _rf);
};

/**
   * _UGC_QUERY_GET_ROOT_CONTENT_ID
   *
   * @param {any} p0
   * @param {number} index
   * @return {string | number}
   */
global.UgcQueryGetRootContentId = function (p0, index) {
  return Citizen.invokeNative('0x566ceb0542ef5ecf', p0, index, _r, _s);
};

/**
   * _UGC_QUERY_GET_VERSION
   *
   * @param {any} p0
   * @param {number} index
   * @param {number} p2
   * @return {number}
   */
global.UgcQueryGetVersion = function (p0, index, p2) {
  return Citizen.invokeNative('0x63e9dcbc8b0931ed', p0, index, p2, _r, _ri);
};

/**
   * ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS
   *
   * @param {boolean} enabled
   * @return {void}
   */
global.AllowDamageEventsForNonNetworkedObjects = function (enabled) {
  return Citizen.invokeNative('0xe2b3b852b537c398', enabled);
};

/**
   * ATTACH_PORTABLE_PICKUP_TO_PED
   *
   * @param {number} pickupObject
   * @param {number} ped
   * @return {void}
   */
global.AttachPortablePickupToPed = function (pickupObject, ped) {
  return Citizen.invokeNative('0x8dc39368bdd57755', pickupObject, ped);
};

/**
   * BLOCK_PICKUP_FROM_PLAYER_COLLECTION
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.BlockPickupFromPlayerCollection = function (p0, p1) {
  return Citizen.invokeNative('0xb8f5062070bb6dbd', p0, p1);
};

/**
   * BREAK_ALL_OBJECT_FRAGMENT_BONES
   *
   * @param {number} object
   * @return {void}
   */
global.BreakAllObjectFragmentBones = function (object) {
  return Citizen.invokeNative('0x8462be2341a55b6f', object);
};

/**
   * BREAK_OBJECT_FRAGMENT_CHILD
   *
   * @param {number} object
   * @param {any} p1
   * @param {boolean} p2
   * @return {void}
   */
global.BreakObjectFragmentChild = function (object, p1, p2) {
  return Citizen.invokeNative('0xe7e4c198b0185900', object, p1, p2);
};

/**
   * CONVERT_OLD_PICKUP_TYPE_TO_NEW
   * Old name: _GET_PICKUP_HASH
   *
   * @param {number} pickupHash
   * @return {number}
   */
global.ConvertOldPickupTypeToNew = function (pickupHash) {
  return Citizen.invokeNative('0x5eaad83f8cfb4575', _ch(pickupHash), _r, _ri);
};

/**
   * CREATE_AMBIENT_PICKUP
   * flags: see CREATE_PICKUP
   *
   * @param {number} pickupHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} flags
   * @param {number} value
   * @param {number} modelHash
   * @param {boolean} p7
   * @param {boolean} p8
   * @param {number} p9
   * @param {number} p10
   * @return {number}
   */
global.CreateAmbientPickup = function (pickupHash, x, y, z, flags, value, modelHash, p7, p8, p9, p10) {
  return Citizen.invokeNative('0x673966a0c0fd7171', _ch(pickupHash), _fv(x), _fv(y), _fv(z), flags, value, _ch(modelHash), p7, p8, p9, _fv(p10), _r, _ri);
};

/**
   * CREATE_OBJECT
   *
   * @param {number} modelHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {boolean} isNetwork
   * @param {boolean} bScriptHostObj
   * @param {boolean} dynamic
   * @param {boolean} p7
   * @param {boolean} p8
   * @return {number}
   */
global.CreateObject = function (modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic, p7, p8) {
  return Citizen.invokeNative('0x509d5878eb39e842', _ch(modelHash), _fv(x), _fv(y), _fv(z), isNetwork, bScriptHostObj, dynamic, p7, p8, _r, _ri);
};

/**
   * CREATE_OBJECT_NO_OFFSET
   *
   * @param {number} modelHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {boolean} isNetwork
   * @param {boolean} bScriptHostObj
   * @param {boolean} dynamic
   * @param {boolean} p7
   * @return {number}
   */
global.CreateObjectNoOffset = function (modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic, p7) {
  return Citizen.invokeNative('0x9a294b2138abb884', _ch(modelHash), _fv(x), _fv(y), _fv(z), isNetwork, bScriptHostObj, dynamic, p7, _r, _ri);
};

/**
   * CREATE_OBJECT_SKELETON
   *
   * @param {number} object
   * @return {boolean}
   */
global.CreateObjectSkeleton = function (object) {
  return Citizen.invokeNative('0xb6cbd40f8ea69e8a', object, _r);
};

/**
   * CREATE_PICKUP
   * https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/Placement%20Flags
   * https://github.com/femga/rdr3_discoveries/blob/master/objects/pickup_list.lua
   *
   * @param {number} pickupHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} flags
   * @param {number} p5
   * @param {boolean} p6
   * @param {number} modelHash
   * @param {number} p8
   * @param {number} p9
   * @param {any} p10
   * @return {number}
   */
global.CreatePickup = function (pickupHash, x, y, z, flags, p5, p6, modelHash, p8, p9, p10) {
  return Citizen.invokeNative('0xfba08c503dd5fa58', _ch(pickupHash), _fv(x), _fv(y), _fv(z), flags, p5, p6, _ch(modelHash), p8, _fv(p9), p10, _r, _ri);
};

/**
   * CREATE_PICKUP_ROTATE
   * flags: see CREATE_PICKUP
   *
   * @param {number} pickupHash
   * @param {number} posX
   * @param {number} posY
   * @param {number} posZ
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} flags
   * @param {number} p8
   * @param {number} p9
   * @param {boolean} p10
   * @param {number} modelHash
   * @param {number} p12
   * @param {number} p13
   * @param {any} p14
   * @return {number}
   */
global.CreatePickupRotate = function (pickupHash, posX, posY, posZ, rotX, rotY, rotZ, flags, p8, p9, p10, modelHash, p12, p13, p14) {
  return Citizen.invokeNative('0x891804727e0a98b7', _ch(pickupHash), _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), flags, p8, p9, p10, _ch(modelHash), p12, _fv(p13), p14, _r, _ri);
};

/**
   * CREATE_PORTABLE_PICKUP
   *
   * @param {number} pickupHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {boolean} placeOnGround
   * @param {number} modelHash
   * @return {number}
   */
global.CreatePortablePickup = function (pickupHash, x, y, z, placeOnGround, modelHash) {
  return Citizen.invokeNative('0x2eaf1fdb2fb55698', _ch(pickupHash), _fv(x), _fv(y), _fv(z), placeOnGround, _ch(modelHash), _r, _ri);
};

/**
   * DELETE_OBJECT
   * Deletes the specified object, then sets the handle pointed to by the pointer to NULL.
   *
  
   * @return {number}
   */
global.DeleteObject = function () {
  return Citizen.invokeNative('0x931914268722c263', _i);
};

/**
   * DETACH_PORTABLE_PICKUP_FROM_PED
   *
   * @param {number} pickupObject
   * @return {void}
   */
global.DetachPortablePickupFromPed = function (pickupObject) {
  return Citizen.invokeNative('0xcf463d1e9a0aecb1', pickupObject);
};

/**
   * DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} hash
   * @param {boolean} p5
   * @return {boolean}
   */
global.DoesObjectOfTypeExistAtCoords = function (x, y, z, radius, hash, p5) {
  return Citizen.invokeNative('0xbfa48e2ff417213f', _fv(x), _fv(y), _fv(z), _fv(radius), _ch(hash), p5, _r);
};

/**
   * DOES_PICKUP_EXIST
   *
   * @param {number} pickup
   * @return {boolean}
   */
global.DoesPickupExist = function (pickup) {
  return Citizen.invokeNative('0xafc1ca75ad4074d1', pickup, _r);
};

/**
   * DOES_PICKUP_OBJECT_EXIST
   *
   * @param {number} pickupObject
   * @return {boolean}
   */
global.DoesPickupObjectExist = function (pickupObject) {
  return Citizen.invokeNative('0xd9efb6dbf7daaea3', pickupObject, _r);
};

/**
   * DOES_PICKUP_OF_TYPE_EXIST_IN_AREA
   *
   * @param {number} pickupHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @return {boolean}
   */
global.DoesPickupOfTypeExistInArea = function (pickupHash, x, y, z, radius) {
  return Citizen.invokeNative('0xf9c36251f6e48e33', _ch(pickupHash), _fv(x), _fv(y), _fv(z), _fv(radius), _r);
};

/**
   * DOES_RAYFIRE_MAP_OBJECT_EXIST
   *
   * @param {number} object
   * @return {boolean}
   */
global.DoesRayfireMapObjectExist = function (object) {
  return Citizen.invokeNative('0x52af537a0c5b8aad', object, _r);
};

/**
   * DOOR_SYSTEM_GET_DOOR_STATE
   *
   * @param {number} doorHash
   * @return {number}
   */
global.DoorSystemGetDoorState = function (doorHash) {
  return Citizen.invokeNative('0x160aa1b32f6139b8', _ch(doorHash), _r, _ri);
};

/**
   * DOOR_SYSTEM_GET_OPEN_RATIO
   *
   * @param {number} doorHash
   * @return {number}
   */
global.DoorSystemGetOpenRatio = function (doorHash) {
  return Citizen.invokeNative('0x65499865fca6e5ec', _ch(doorHash), _r, _rf);
};

/**
   * DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE
   *
   * @param {number} doorHash
   * @param {number} distance
   * @return {void}
   */
global.DoorSystemSetAutomaticDistance = function (doorHash, distance) {
  return Citizen.invokeNative('0x9ba001cb45cbf627', _ch(doorHash), _fv(distance));
};

/**
   * DOOR_SYSTEM_SET_AUTOMATIC_RATE
   *
   * @param {number} doorHash
   * @param {number} rate
   * @return {void}
   */
global.DoorSystemSetAutomaticRate = function (doorHash, rate) {
  return Citizen.invokeNative('0x03c27e13b42a0e82', _ch(doorHash), _fv(rate));
};

/**
   * DOOR_SYSTEM_SET_DOOR_STATE
   * Door lock states:
   * enum eDoorState
   * {
   *   DOORSTATE_INVALID = -1,
   *   DOORSTATE_UNLOCKED,
   *   DOORSTATE_LOCKED_UNBREAKABLE,
   *   DOORSTATE_LOCKED_BREAKABLE,
   *   DOORSTATE_HOLD_OPEN_POSITIVE,
   *   DOORSTATE_HOLD_OPEN_NEGATIVE
   * };
   *
   * @param {number} doorHash
   * @param {number} state
   * @return {void}
   */
global.DoorSystemSetDoorState = function (doorHash, state) {
  return Citizen.invokeNative('0x6bab9442830c7f53', _ch(doorHash), state);
};

/**
   * DOOR_SYSTEM_SET_OPEN_RATIO
   * Sets the ajar angle of a door.
   * Ranges from -1.0 to 1.0, and 0.0 is closed / default.
   *
   * @param {number} doorHash
   * @param {number} ajar
   * @param {boolean} forceUpdate
   * @return {void}
   */
global.DoorSystemSetOpenRatio = function (doorHash, ajar, forceUpdate) {
  return Citizen.invokeNative('0xb6e6fba95c7324ac', _ch(doorHash), _fv(ajar), forceUpdate);
};

/**
   * FIX_OBJECT_FRAGMENT
   *
   * @param {number} object
   * @return {void}
   */
global.FixObjectFragment = function (object) {
  return Citizen.invokeNative('0xf9c1681347c8bd15', object);
};

/**
   * FORCE_PICKUP_REGENERATE
   *
   * @param {any} p0
   * @return {void}
   */
global.ForcePickupRegenerate = function (p0) {
  return Citizen.invokeNative('0x758a5c1b3b1e1990', p0);
};

/**
   * GET_CLOSEST_OBJECT_OF_TYPE
   * Returns the closest object of a specified type within a given radius from a specified position
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} modelHash
   * @param {boolean} missionScriptObject
   * @param {boolean} scriptHostObject
   * @param {boolean} networkObject
   * @return {number}
   */
global.GetClosestObjectOfType = function (x, y, z, radius, modelHash, missionScriptObject, scriptHostObject, networkObject) {
  return Citizen.invokeNative('0xe143fa2249364369', _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), missionScriptObject, scriptHostObject, networkObject, _r, _ri);
};

/**
   * GET_OBJECT_FRAGMENT_DAMAGE_HEALTH
   *
   * @param {any} p0
   * @param {boolean} p1
   * @return {number}
   */
global.GetObjectFragmentDamageHealth = function (p0, p1) {
  return Citizen.invokeNative('0xb6fbfd079b8d0596', p0, p1, _r, _rf);
};

/**
   * GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS
   * Old name: _GET_OBJECT_OFFSET_FROM_COORDS
   *
   * @param {number} xPos
   * @param {number} yPos
   * @param {number} zPos
   * @param {number} heading
   * @param {number} xOffset
   * @param {number} yOffset
   * @param {number} zOffset
   * @return {Vector3}
   */
global.GetOffsetFromCoordAndHeadingInWorldCoords = function (xPos, yPos, zPos, heading, xOffset, yOffset, zOffset) {
  return Citizen.invokeNative('0x163e252de035a133', _fv(xPos), _fv(yPos), _fv(zPos), _fv(heading), _fv(xOffset), _fv(yOffset), _fv(zOffset), _r, _rv);
};

/**
   * GET_PICKUP_COORDS
   *
   * @param {number} pickup
   * @return {Vector3}
   */
global.GetPickupCoords = function (pickup) {
  return Citizen.invokeNative('0x225b8b35c88029b3', pickup, _r, _rv);
};

/**
   * GET_PICKUP_OBJECT
   *
   * @param {number} pickup
   * @return {number}
   */
global.GetPickupObject = function (pickup) {
  return Citizen.invokeNative('0x5099bc55630b25ae', pickup, _r, _ri);
};

/**
   * GET_RAYFIRE_MAP_OBJECT
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {string | number} name
   * @return {number}
   */
global.GetRayfireMapObject = function (x, y, z, radius, name) {
  return Citizen.invokeNative('0xb48fced898292e52', _fv(x), _fv(y), _fv(z), _fv(radius), _ts(name), _r, _ri);
};

/**
   * GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE
   *
   * @param {number} object
   * @return {number}
   */
global.GetRayfireMapObjectAnimPhase = function (object) {
  return Citizen.invokeNative('0x260ee4fdbdf4db01', object, _r, _rf);
};

/**
   * GET_SAFE_PICKUP_COORDS
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {Vector3}
   */
global.GetSafePickupCoords = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x6e16bc2503ff1ff0', p0, p1, p2, p3, p4, p5, _r, _rv);
};

/**
   * GET_STATE_OF_RAYFIRE_MAP_OBJECT
   *
   * @param {number} object
   * @return {number}
   */
global.GetStateOfRayfireMapObject = function (object) {
  return Citizen.invokeNative('0x899ba936634a322e', object, _r, _ri);
};

/**
   * GET_WEAPON_TYPE_FROM_PICKUP_TYPE
   *
   * @param {number} pickupHash
   * @return {number}
   */
global.GetWeaponTypeFromPickupType = function (pickupHash) {
  return Citizen.invokeNative('0x08f96ca6c551ad51', _ch(pickupHash), _r, _ri);
};

/**
   * HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} modelHash
   * @param {any} p5
   * @return {boolean}
   */
global.HasClosestObjectOfTypeBeenBroken = function (p0, p1, p2, p3, modelHash, p5) {
  return Citizen.invokeNative('0x761b0e69ac4d007e', _fv(p0), _fv(p1), _fv(p2), _fv(p3), _ch(modelHash), p5, _r);
};

/**
   * HAS_OBJECT_BEEN_BROKEN
   *
   * @param {any} p0
   * @return {boolean}
   */
global.HasObjectBeenBroken = function (p0) {
  return Citizen.invokeNative('0x8abfb70c49cc43e2', p0, _r);
};

/**
   * HAS_PICKUP_BEEN_COLLECTED
   *
   * @param {number} pickup
   * @return {boolean}
   */
global.HasPickupBeenCollected = function (pickup) {
  return Citizen.invokeNative('0x80ec48e6679313f9', pickup, _r);
};

/**
   * IS_DOOR_CLOSED
   *
   * @param {number} doorHash
   * @return {boolean}
   */
global.IsDoorClosed = function (doorHash) {
  return Citizen.invokeNative('0xc531ee8a1145a149', _ch(doorHash), _r);
};

/**
   * IS_DOOR_REGISTERED_WITH_SYSTEM
   *
   * @param {number} doorHash
   * @return {boolean}
   */
global.IsDoorRegisteredWithSystem = function (doorHash) {
  return Citizen.invokeNative('0xc153c43ea202c8c1', _ch(doorHash), _r);
};

/**
   * IS_OBJECT_A_PORTABLE_PICKUP
   *
   * @param {number} object
   * @return {boolean}
   */
global.IsObjectAPortablePickup = function (object) {
  return Citizen.invokeNative('0x0378c08504160d0d', object, _r);
};

/**
   * IS_OBJECT_VISIBLE
   *
   * @param {number} object
   * @return {boolean}
   */
global.IsObjectVisible = function (object) {
  return Citizen.invokeNative('0x8b32ace6326a7546', object, _r);
};

/**
   * IS_POINT_IN_ANGLED_AREA
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @param {number} p8
   * @param {number} p9
   * @param {boolean} p10
   * @param {boolean} p11
   * @return {boolean}
   */
global.IsPointInAngledArea = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
  return Citizen.invokeNative('0x2a70bae8883e4c81', _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), _fv(p9), p10, p11, _r);
};

/**
   * ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE
   * Old name: _MARK_OBJECT_FOR_DELETION
   *
   * @param {number} object
   * @return {void}
   */
global.OnlyCleanUpObjectWhenOutOfRange = function (object) {
  return Citizen.invokeNative('0xadbe4809f19f927a', object);
};

/**
   * PLACE_OBJECT_ON_GROUND_PROPERLY
   *
   * @param {number} object
   * @param {boolean} p1
   * @return {boolean}
   */
global.PlaceObjectOnGroundProperly = function (object, p1) {
  return Citizen.invokeNative('0x58a850eaee20faa3', object, p1, _r);
};

/**
   * PREVENT_COLLECTION_OF_PORTABLE_PICKUP
   *
   * @param {number} object
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {void}
   */
global.PreventCollectionOfPortablePickup = function (object, p1, p2) {
  return Citizen.invokeNative('0x92aefb5f6e294023', object, p1, p2);
};

/**
   * REMOVE_ALL_PICKUPS_OF_TYPE
   *
   * @param {number} pickupHash
   * @return {void}
   */
global.RemoveAllPickupsOfType = function (pickupHash) {
  return Citizen.invokeNative('0x27f9d613092159cf', _ch(pickupHash));
};

/**
   * REMOVE_DOOR_FROM_SYSTEM
   *
   * @param {number} doorHash
   * @return {void}
   */
global.RemoveDoorFromSystem = function (doorHash) {
  return Citizen.invokeNative('0x464d8e1427156fe4', _ch(doorHash));
};

/**
   * REMOVE_PICKUP
   *
   * @param {number} pickup
   * @return {void}
   */
global.RemovePickup = function (pickup) {
  return Citizen.invokeNative('0x3288d8acaecd2ab2', pickup);
};

/**
   * SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN
   *
   * @param {number} object
   * @param {boolean} toggle
   * @return {void}
   */
global.SetActivateObjectPhysicsAsSoonAsItIsUnfrozen = function (object, toggle) {
  return Citizen.invokeNative('0x406137f8ef90eaf5', object, toggle);
};

/**
   * SET_CUSTOM_TEXTURES_ON_OBJECT
   *
   * @param {number} object
   * @param {number} txdHash
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.SetCustomTexturesOnObject = function (object, txdHash, p2, p3) {
  return Citizen.invokeNative('0xe124889ae0521fcf', object, _ch(txdHash), p2, p3);
};

/**
   * SET_FORCE_OBJECT_THIS_FRAME
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p3
   * @return {void}
   */
global.SetForceObjectThisFrame = function (x, y, z, p3) {
  return Citizen.invokeNative('0xf538081986e49e9d', _fv(x), _fv(y), _fv(z), _fv(p3));
};

/**
   * SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetLocalPlayerCanCollectPortablePickups = function (toggle) {
  return Citizen.invokeNative('0x78857fc65cadb909', toggle);
};

/**
   * SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL
   * Maximum amount of pickup models that can be disallowed is 10.
   * 
   * Old name: _SET_LOCAL_PLAYER_CAN_USE_PICKUPS_WITH_THIS_MODEL
   *
   * @param {number} modelHash
   * @param {boolean} toggle
   * @return {void}
   */
global.SetLocalPlayerPermittedToCollectPickupsWithModel = function (modelHash, toggle) {
  return Citizen.invokeNative('0x88eaec617cd26926', _ch(modelHash), toggle);
};

/**
   * SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER
   *
   * @param {number} modelHash
   * @param {number} p1
   * @return {void}
   */
global.SetMaxNumPortablePickupsCarriedByPlayer = function (modelHash, p1) {
  return Citizen.invokeNative('0x0bf3b3bd47d79c08', _ch(modelHash), p1);
};

/**
   * SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY
   *
   * @param {number} object
   * @param {boolean} toggle
   * @return {void}
   */
global.SetObjectAllowLowLodBuoyancy = function (object, toggle) {
  return Citizen.invokeNative('0x4d89d607cb3dd1d2', object, toggle);
};

/**
   * SET_OBJECT_PHYSICS_PARAMS
   * Adjust the physics parameters of a prop, or otherwise known as "object". This is useful for simulated gravity.
   * 
   * Other parameters seem to be unknown.
   * 
   * p2: seems to be weight and gravity related. Higher value makes the obj fall faster. Very sensitive?
   * p3: seems similar to p2
   * p4: makes obj fall slower the higher the value
   * p5: similar to p4
   *
   * @param {number} object
   * @param {number} weight
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} gravity
   * @param {number} p7
   * @param {number} p8
   * @param {number} p9
   * @param {number} p10
   * @param {number} buoyancy
   * @return {void}
   */
global.SetObjectPhysicsParams = function (object, weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy) {
  return Citizen.invokeNative('0xf6df6e90de7df90f', object, _fv(weight), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(gravity), _fv(p7), _fv(p8), _fv(p9), _fv(p10), _fv(buoyancy));
};

/**
   * SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS
   *
   * @param {number} object
   * @param {boolean} enabled
   * @return {void}
   */
global.SetObjectTakesDamageFromCollidingWithBuildings = function (object, enabled) {
  return Citizen.invokeNative('0xeb6f1a9b5510a5d2', object, enabled);
};

/**
   * SET_OBJECT_TARGETTABLE
   *
   * @param {number} object
   * @param {boolean} targettable
   * @return {void}
   */
global.SetObjectTargettable = function (object, targettable) {
  return Citizen.invokeNative('0x8a7391690f5afd81', object, targettable);
};

/**
   * SET_OBJECT_TINT_INDEX
   * Alt name: _SET_OBJECT_TINT
   * 
   * Old name: _SET_OBJECT_TEXTURE_VARIATION
   *
   * @param {number} object
   * @param {number} textureVariation
   * @return {void}
   */
global.SetObjectTintIndex = function (object, textureVariation) {
  return Citizen.invokeNative('0x971da0055324d033', object, textureVariation);
};

/**
   * SET_PICKUP_DO_NOT_AUTO_PLACE_ON_GROUND
   *
   * @param {number} pickupObject
   * @return {void}
   */
global.SetPickupDoNotAutoPlaceOnGround = function (pickupObject) {
  return Citizen.invokeNative('0x634c19521485ab25', pickupObject);
};

/**
   * SET_PICKUP_GENERATION_RANGE_MULTIPLIER
   *
   * @param {number} multiplier
   * @return {void}
   */
global.SetPickupGenerationRangeMultiplier = function (multiplier) {
  return Citizen.invokeNative('0x318516e02de3ece2', _fv(multiplier));
};

/**
   * SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.SetPickupHiddenWhenUncollectable = function (p0, p1) {
  return Citizen.invokeNative('0x81218ce01b672219', p0, p1);
};

/**
   * SET_PICKUP_NOT_LOOTABLE
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.SetPickupNotLootable = function (p0, p1) {
  return Citizen.invokeNative('0x92e87f60f21a0c3a', p0, p1);
};

/**
   * SET_PICKUP_PARTICLE_FX_HIGHLIGHT
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.SetPickupParticleFxHighlight = function (p0, p1) {
  return Citizen.invokeNative('0x1607c7d9b3021df5', p0, p1);
};

/**
   * SET_PICKUP_PARTICLE_FX_SPAWN
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.SetPickupParticleFxSpawn = function (p0, p1) {
  return Citizen.invokeNative('0xeb9740a38fd6d634', p0, p1);
};

/**
   * SET_PICKUP_REGENERATION_TIME
   *
   * @param {number} pickup
   * @param {number} duration
   * @return {void}
   */
global.SetPickupRegenerationTime = function (pickup, duration) {
  return Citizen.invokeNative('0x78015c9b4b3ecc9d', pickup, duration);
};

/**
   * SET_PICKUP_UNCOLLECTABLE
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.SetPickupUncollectable = function (p0, p1) {
  return Citizen.invokeNative('0x4a8cb328cd6f1c9b', p0, p1);
};

/**
   * SET_STATE_OF_RAYFIRE_MAP_OBJECT
   *
   * @param {number} object
   * @param {number} state
   * @return {void}
   */
global.SetStateOfRayfireMapObject = function (object, state) {
  return Citizen.invokeNative('0x5c29f698d404c5e1', object, state);
};

/**
   * SET_TEAM_PICKUP_OBJECT
   *
   * @param {number} object
   * @param {any} p1
   * @param {boolean} p2
   * @return {void}
   */
global.SetTeamPickupObject = function (object, p1, p2) {
  return Citizen.invokeNative('0x53e0df1a2a3cf0ca', object, p1, p2);
};

/**
   * SLIDE_OBJECT
   *
   * @param {number} object
   * @param {number} toX
   * @param {number} toY
   * @param {number} toZ
   * @param {number} speedX
   * @param {number} speedY
   * @param {number} speedZ
   * @param {boolean} collision
   * @return {boolean}
   */
global.SlideObject = function (object, toX, toY, toZ, speedX, speedY, speedZ, collision) {
  return Citizen.invokeNative('0x2fdff4107b8c1147', object, _fv(toX), _fv(toY), _fv(toZ), _fv(speedX), _fv(speedY), _fv(speedZ), collision, _r);
};

/**
   * SUPPRESS_PICKUP_REWARD_TYPE
   *
   * @param {number} rewardType
   * @param {boolean} suppress
   * @return {void}
   */
global.SuppressPickupRewardType = function (rewardType, suppress) {
  return Citizen.invokeNative('0xf92099527db8e2a7', rewardType, suppress);
};

/**
   * TRACK_OBJECT_VISIBILITY
   *
   * @param {number} object
   * @return {void}
   */
global.TrackObjectVisibility = function (object) {
  return Citizen.invokeNative('0xb252bc036b525623', object);
};

/**
   * _0x08C5825A2932EA7B
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x08C5825A2932EA7B = function (p0) {
  return Citizen.invokeNative('0x08c5825a2932ea7b', p0, _r);
};

/**
   * _0x0943113E02322164
   * Params: p1 = 23 in R* Scripts
   *
   * @param {number} object
   * @param {number} p1
   * @return {any}
   */
global.N_0x0943113E02322164 = function (object, p1) {
  return Citizen.invokeNative('0x0943113e02322164', object, p1, _r);
};

/**
   * _0x0C0A373D181BF900
   * something to do with doors lockdown when navmesh is swapping?UPDATE_WORLD_STATE  seems to be for unlocking something
   *
   * @param {number} doorHash
   * @return {void}
   */
global.N_0x0C0A373D181BF900 = function (doorHash) {
  return Citizen.invokeNative('0x0c0a373d181bf900', _ch(doorHash));
};

/**
   * _0x1F5E07E14A86FAFC
   * _SET_A(MBIENT_PICKUP_?)*
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0x1F5E07E14A86FAFC = function (p0) {
  return Citizen.invokeNative('0x1f5e07e14a86fafc', p0);
};

/**
   * _0x20135AF9C10D2A3D
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x20135AF9C10D2A3D = function (p0) {
  return Citizen.invokeNative('0x20135af9c10d2a3d', p0, _r);
};

/**
   * _0x22031584496CFB70
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x22031584496CFB70 = function (p0, p1) {
  return Citizen.invokeNative('0x22031584496cfb70', p0, p1);
};

/**
   * _0x235C863DA77BD88D
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0x235C863DA77BD88D = function (p0, p1, p2) {
  return Citizen.invokeNative('0x235c863da77bd88d', p0, p1, p2, _r);
};

/**
   * _0x250EBB11E81A10BE
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x250EBB11E81A10BE = function (p0) {
  return Citizen.invokeNative('0x250ebb11e81a10be', p0, _r);
};

/**
   * _0x2BF1953C0C21AC88
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x2BF1953C0C21AC88 = function (p0) {
  return Citizen.invokeNative('0x2bf1953c0c21ac88', p0, _r);
};

/**
   * _0x3A77DAE8B4FD7586
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x3A77DAE8B4FD7586 = function (p0, p1) {
  return Citizen.invokeNative('0x3a77dae8b4fd7586', p0, p1);
};

/**
   * _0x3DF1A0A58498E209
   *
   * @param {number} object
   * @param {any} p1
   * @return {void}
   */
global.N_0x3DF1A0A58498E209 = function (object, p1) {
  return Citizen.invokeNative('0x3df1a0a58498e209', object, p1);
};

/**
   * _0x3E2616E7EA539480
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x3E2616E7EA539480 = function (p0) {
  return Citizen.invokeNative('0x3e2616e7ea539480', p0, _r);
};

/**
   * _0x46CBCF0E98A4E156
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x46CBCF0E98A4E156 = function (p0, p1) {
  return Citizen.invokeNative('0x46cbcf0e98a4e156', p0, p1);
};

/**
   * _0x491439AEF410A2FC
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x491439AEF410A2FC = function (p0) {
  return Citizen.invokeNative('0x491439aef410a2fc', p0);
};

/**
   * _0x4AE07EBA3462C5D5
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x4AE07EBA3462C5D5 = function (p0, p1) {
  return Citizen.invokeNative('0x4ae07eba3462c5d5', p0, p1);
};

/**
   * _0x4D8611DFE1126478
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x4D8611DFE1126478 = function (p0) {
  return Citizen.invokeNative('0x4d8611dfe1126478', p0, _r);
};

/**
   * _0x5230BF34EB0EC645
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x5230BF34EB0EC645 = function (p0) {
  return Citizen.invokeNative('0x5230bf34eb0ec645', p0);
};

/**
   * _0x57C242543B7B8FB9
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x57C242543B7B8FB9 = function (p0, p1) {
  return Citizen.invokeNative('0x57c242543b7b8fb9', p0, p1);
};

/**
   * _0x58DE624FA7FB0E7F
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x58DE624FA7FB0E7F = function (p0) {
  return Citizen.invokeNative('0x58de624fa7fb0e7f', p0, _r);
};

/**
   * _0x614D0B4533F842D3
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x614D0B4533F842D3 = function (p0) {
  return Citizen.invokeNative('0x614d0b4533f842d3', p0, _r);
};

/**
   * _0x6579860A5558524A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x6579860A5558524A = function (p0, p1) {
  return Citizen.invokeNative('0x6579860a5558524a', p0, p1);
};

/**
   * _0x6E2AA80BB0C03728
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x6E2AA80BB0C03728 = function (p0, p1) {
  return Citizen.invokeNative('0x6e2aa80bb0c03728', p0, p1, _r);
};

/**
   * _0x7D4411D6736CD295
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x7D4411D6736CD295 = function (p0, p1) {
  return Citizen.invokeNative('0x7d4411d6736cd295', p0, p1, _r);
};

/**
   * _0x7F458B543006C8FE
   * something to do with doors lockdown when navmesh is swapping? UPDATE_WORLD_STATE, seems to be for locking something
   *
   * @param {number} doorHash
   * @param {number} p1
   * @return {void}
   */
global.N_0x7F458B543006C8FE = function (doorHash, p1) {
  return Citizen.invokeNative('0x7f458b543006c8fe', _ch(doorHash), p1);
};

/**
   * _0x7FCD49388BC9B775
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x7FCD49388BC9B775 = function (p0, p1) {
  return Citizen.invokeNative('0x7fcd49388bc9b775', p0, p1);
};

/**
   * _0x9A74A9CADFA8A598
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x9A74A9CADFA8A598 = function (p0) {
  return Citizen.invokeNative('0x9a74a9cadfa8a598', p0);
};

/**
   * _0x9F52AD67D1A91BAD
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x9F52AD67D1A91BAD = function (p0, p1) {
  return Citizen.invokeNative('0x9f52ad67d1a91bad', p0, p1, _r);
};

/**
   * _0xA93F925F1942E434
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xA93F925F1942E434 = function (p0, p1) {
  return Citizen.invokeNative('0xa93f925f1942e434', p0, p1);
};

/**
   * _0xAAACF33CBF9B990A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xAAACF33CBF9B990A = function (p0, p1) {
  return Citizen.invokeNative('0xaaacf33cbf9b990a', p0, p1);
};

/**
   * _0xACD4F9831DFAD7F5
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xACD4F9831DFAD7F5 = function (p0) {
  return Citizen.invokeNative('0xacd4f9831dfad7f5', p0, _r);
};

/**
   * _SET_OBJECT_PROMPT_NAME
   * Not official native name
   *
   * @param {number} object
   * @param {string | number} name
   * @return {void}
   */
global.SetObjectPromptName = function (object, name) {
  return Citizen.invokeNative('0xaee6c800e124cfe1', object, _ts(name));
};

/**
   * _0xB3B1546D23DF8DE1
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0xB3B1546D23DF8DE1 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xb3b1546d23df8de1', p0, p1, p2, p3, p4);
};

/**
   * _0xC07B91B996C1DE89
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xC07B91B996C1DE89 = function (p0, p1) {
  return Citizen.invokeNative('0xc07b91b996c1de89', p0, p1);
};

/**
   * _0xCAAF2BCCFEF37F77
   * _SET_OBJECT_*
   *
   * @param {number} object
   * @param {any} p1
   * @return {void}
   */
global.N_0xCAAF2BCCFEF37F77 = function (object, p1) {
  return Citizen.invokeNative('0xcaaf2bccfef37f77', object, p1);
};

/**
   * _0xCBFBD38F2E0A263B
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xCBFBD38F2E0A263B = function (p0, p1) {
  return Citizen.invokeNative('0xcbfbd38f2e0a263b', p0, p1);
};

/**
   * _0xCEAB54F4632C6EF6
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xCEAB54F4632C6EF6 = function (p0, p1) {
  return Citizen.invokeNative('0xceab54f4632c6ef6', p0, p1);
};

/**
   * _SET_OBJECT_PROMPT_NAME_FROM_GXT_ENTRY
   * Not official native name
   *
   * @param {number} object
   * @param {number} gxtEntryHash
   * @return {void}
   */
global.SetObjectPromptNameFromGxtEntry = function (object, gxtEntryHash) {
  return Citizen.invokeNative('0xd503d6f0986d58bc', object, _ch(gxtEntryHash));
};

/**
   * _0xD91E55B6C005EB09
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xD91E55B6C005EB09 = function (p0, p1) {
  return Citizen.invokeNative('0xd91e55b6c005eb09', p0, p1, _r);
};

/**
   * _0xDE116ECFFDD4B997
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xDE116ECFFDD4B997 = function (p0, p1) {
  return Citizen.invokeNative('0xde116ecffdd4b997', p0, p1);
};

/**
   * _0xDFA1237F5228263F
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xDFA1237F5228263F = function (p0, p1) {
  return Citizen.invokeNative('0xdfa1237f5228263f', p0, p1);
};

/**
   * _0xE157A8A336C7F04A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xE157A8A336C7F04A = function (p0, p1) {
  return Citizen.invokeNative('0xe157a8a336c7f04a', p0, p1);
};

/**
   * _0xEBA314768FB35D58
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xEBA314768FB35D58 = function (p0) {
  return Citizen.invokeNative('0xeba314768fb35d58', p0, _r);
};

/**
   * _0xF65EDE5D02A7A760
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xF65EDE5D02A7A760 = function (p0, p1) {
  return Citizen.invokeNative('0xf65ede5d02a7a760', p0, p1);
};

/**
   * _0xF6E88489B4E6EBE5
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xF6E88489B4E6EBE5 = function (p0, p1) {
  return Citizen.invokeNative('0xf6e88489b4e6ebe5', p0, p1);
};

/**
   * _0xFA99E8E575F2FEF8
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xFA99E8E575F2FEF8 = function (p0) {
  return Citizen.invokeNative('0xfa99e8e575f2fef8', p0, _r);
};

/**
   * _ADD_DOOR_TO_SYSTEM_NEW
   * Registers a door, hashes: https://github.com/femga/rdr3_discoveries/tree/master/doorHashes
   *
   * @param {number} doorHash
   * @param {boolean} p1
   * @param {boolean} p2
   * @param {boolean} p3
   * @param {number} threadId
   * @param {number} p5
   * @param {boolean} p6
   * @return {void}
   */
global.AddDoorToSystemNew = function (doorHash, p1, p2, p3, threadId, p5, p6) {
  return Citizen.invokeNative('0xd99229fe93b46286', _ch(doorHash), p1, p2, p3, threadId, p5, p6);
};

/**
   * _DAMAGE_BONE_ON_PROP
   *
   * @param {number} object
   * @param {number} bone
   * @return {void}
   */
global.DamageBoneOnProp = function (object, bone) {
  return Citizen.invokeNative('0xe4efb315bcd2a838', object, bone);
};

/**
   * _DOOR_SYSTEM_CHANGE_SCRIPT_OWNER
   *
   * @param {number} doorHash
   * @return {void}
   */
global.DoorSystemChangeScriptOwner = function (doorHash) {
  return Citizen.invokeNative('0x985767f5fa45bc44', _ch(doorHash));
};

/**
   * _DOOR_SYSTEM_FORCE_SHUT
   *
   * @param {number} doorHash
   * @param {boolean} p1
   * @return {void}
   */
global.DoorSystemForceShut = function (doorHash, p1) {
  return Citizen.invokeNative('0x276aaf0f1c7f2494', _ch(doorHash), p1);
};

/**
   * _DOOR_SYSTEM_GET_AUTOMATIC_RATE
   *
   * @param {number} doorHash
   * @return {number}
   */
global.DoorSystemGetAutomaticRate = function (doorHash) {
  return Citizen.invokeNative('0x8433e1954be323fc', _ch(doorHash), _r, _rf);
};

/**
   * _DOOR_SYSTEM_SET_ABLE_TO_CHANGE_OPEN_RATIO_WHILE_LOCKED
   *
   * @param {number} doorHash
   * @param {boolean} p1
   * @return {void}
   */
global.DoorSystemSetAbleToChangeOpenRatioWhileLocked = function (doorHash, p1) {
  return Citizen.invokeNative('0x1f1fabfe9b2a1254', _ch(doorHash), p1);
};

/**
   * _DOOR_SYSTEM_SET_AUTOMATIC_STATE
   * _ALLOW_* - _ATTACH_*
   *
   * @param {number} doorHash
   * @param {boolean} disable
   * @return {void}
   */
global.DoorSystemSetAutomaticState = function (doorHash, disable) {
  return Citizen.invokeNative('0x1bc47a9dedc8df5d', _ch(doorHash), disable);
};

/**
   * _GET_AMMO_TYPE_FROM_PICKUP_TYPE
   *
   * @param {number} pickupHash
   * @return {number}
   */
global.GetAmmoTypeFromPickupType = function (pickupHash) {
  return Citizen.invokeNative('0x44b09a23d728045a', _ch(pickupHash), _r, _ri);
};

/**
   * _GET_LIGHT_INTENSITY_FROM_OBJECT
   *
   * @param {number} object
   * @return {number}
   */
global.GetLightIntensityFromObject = function (object) {
  return Citizen.invokeNative('0xfa3b61ec249b4674', object, _r, _rf);
};

/**
   * _GET_OBJECT_LIGHT_INTENSITY
   * Returns float value to be used with _SET_LIGHT_INTENSITY_FOR_OBJECT
   *
   * @param {number} object
   * @return {number}
   */
global.GetObjectLightIntensity = function (object) {
  return Citizen.invokeNative('0x3397cd4e0353dfba', object, _r, _rf);
};

/**
   * _HIDE_PICKUP_OBJECT
   *
   * @param {number} pickupObject
   * @param {boolean} toggle
   * @return {void}
   */
global.HidePickupObject = function (pickupObject, toggle) {
  return Citizen.invokeNative('0x2777150cc7d9365e', pickupObject, toggle);
};

/**
   * _IS_DOOR_REGISTERED_WITH_NETWORK
   *
   * @param {number} doorHash
   * @return {boolean}
   */
global.IsDoorRegisteredWithNetwork = function (doorHash) {
  return Citizen.invokeNative('0xb5ded7b65c604fdf', _ch(doorHash), _r);
};

/**
   * _IS_DOOR_REGISTERED_WITH_OWNER
   * Returns true if door is alredy registered with owner
   *
   * @param {number} doorHash
   * @return {boolean}
   */
global.IsDoorRegisteredWithOwner = function (doorHash) {
  return Citizen.invokeNative('0x4f89dad4156ba145', _ch(doorHash), _r);
};

/**
   * _IS_PICKUP_TYPE_VALID
   *
   * @param {number} pickupHash
   * @return {boolean}
   */
global.IsPickupTypeValid = function (pickupHash) {
  return Citizen.invokeNative('0x007bd043587f7c82', _ch(pickupHash), _r);
};

/**
   * _MAKE_ITEM_CARRIABLE
   * _PRE* or _Q* or _RE*
   *
   * @param {number} object
   * @return {void}
   */
global.MakeItemCarriable = function (object) {
  return Citizen.invokeNative('0x1461df6db886be3f', object);
};

/**
   * _RESET_OBJECT_VELOCITY
   *
   * @param {number} object
   * @return {void}
   */
global.ResetObjectVelocity = function (object) {
  return Citizen.invokeNative('0xf40ab58d83c35027', object);
};

/**
   * _SET_AMBIENT_PICKUP_LIFETIME
   *
   * @param {number} lifetime
   * @return {void}
   */
global.SetAmbientPickupLifetime = function (lifetime) {
  return Citizen.invokeNative('0xac9ae68f0a463752', lifetime);
};

/**
   * _SET_AUTO_JUMPABLE_BY_HORSE
   * Sets object as auto-jumpable by horse.
   *
   * @param {number} object
   * @param {boolean} p1
   * @return {void}
   */
global.SetAutoJumpableByHorse = function (object, p1) {
  return Citizen.invokeNative('0x98d2d9c053a1f449', object, p1);
};

/**
   * _SET_LIGHT_INTENSITY_FOR_OBJECT
   *
   * @param {number} object
   * @param {number} lightIntensity
   * @return {void}
   */
global.SetLightIntensityForObject = function (object, lightIntensity) {
  return Citizen.invokeNative('0xf49574e2332a8f06', object, _fv(lightIntensity));
};

/**
   * _SET_LIGHT_SCATTERING_DISABLED_FOR_OBJECT
   *
   * @param {number} object
   * @param {boolean} disable
   * @return {void}
   */
global.SetLightScatteringDisabledForObject = function (object, disable) {
  return Citizen.invokeNative('0x04d1d4e411ce52d0', object, disable);
};

/**
   * _SET_LIGHT_TRANSLUCENCY_FOR_OBJECT
   * Params: value = 0.0 - 586.67 (?)
   *
   * @param {number} object
   * @param {number} value
   * @return {void}
   */
global.SetLightTranslucencyForObject = function (object, value) {
  return Citizen.invokeNative('0x63e39f09310f481f', object, _fv(value));
};

/**
   * _SET_NETWORK_PICKUP_USABLE_FOR_PLAYER
   * Params: p2 controls whether to make pickups usable/collectable or not in networked games
   *
   * @param {number} player
   * @param {number} pickupHash
   * @param {boolean} isUsable
   * @return {void}
   */
global.SetNetworkPickupUsableForPlayer = function (player, pickupHash, isUsable) {
  return Citizen.invokeNative('0x94f3d956bfaeae18', player, _ch(pickupHash), isUsable);
};

/**
   * _SET_NOT_JUMPABLE_BY_HORSE
   * Sets object as not jumpable by horse.
   *
   * @param {number} object
   * @param {boolean} p1
   * @return {void}
   */
global.SetNotJumpableByHorse = function (object, p1) {
  return Citizen.invokeNative('0xe1c708ba4885796b', object, p1);
};

/**
   * _SET_OBJECT_BREAK_SCALE
   *
   * @param {number} object
   * @param {number} scale
   * @return {void}
   */
global.SetObjectBreakScale = function (object, scale) {
  return Citizen.invokeNative('0xffb99ffd17f65889', object, _fv(scale));
};

/**
   * _SET_OBJECT_BURN_INTENSITY
   *
   * @param {number} object
   * @param {number} intensity
   * @return {void}
   */
global.SetObjectBurnIntensity = function (object, intensity) {
  return Citizen.invokeNative('0xc8e21c1677dc5e6f', object, _fv(intensity));
};

/**
   * _SET_OBJECT_BURN_LEVEL
   * Seems to mostly have effect on wood-made objects https://imgur.com/a/32oQvOn
   *
   * @param {number} object
   * @param {number} burnLevel
   * @param {boolean} affectAsh
   * @return {void}
   */
global.SetObjectBurnLevel = function (object, burnLevel, affectAsh) {
  return Citizen.invokeNative('0x2797c633dcdbbac5', object, _fv(burnLevel), affectAsh);
};

/**
   * _SET_OBJECT_BURN_OPACITY
   *
   * @param {number} object
   * @param {number} opacity
   * @return {void}
   */
global.SetObjectBurnOpacity = function (object, opacity) {
  return Citizen.invokeNative('0x7d7285efeab5af15', object, _fv(opacity));
};

/**
   * _SET_OBJECT_BURN_SPEED
   * p2 is usually the same as speed parameter
   *
   * @param {number} object
   * @param {number} speed
   * @param {number} p2
   * @return {void}
   */
global.SetObjectBurnSpeed = function (object, speed, p2) {
  return Citizen.invokeNative('0x646564a3b7df68f8', object, _fv(speed), _fv(p2));
};

/**
   * _SET_OBJECT_KICKABLE
   *
   * @param {number} object
   * @param {boolean} kickable
   * @return {void}
   */
global.SetObjectKickable = function (object, kickable) {
  return Citizen.invokeNative('0xb7017da4d498269f', object, kickable);
};

/**
   * _SET_OBJECT_TARGETTABLE_2
   *
   * @param {number} object
   * @param {boolean} targettable
   * @return {void}
   */
global.SetObjectTargettable_2 = function (object, targettable) {
  return Citizen.invokeNative('0x581edbe56e8d62c9', object, targettable);
};

/**
   * _SET_OBJECT_TARGETTABLE_FOCUS
   * focus on objects like focus on peds, p1 is to enable/disable p2 is to enable/disable focus when you have a weapon out
   *
   * @param {number} object
   * @param {boolean} toggle
   * @param {boolean} weaponLock
   * @return {void}
   */
global.SetObjectTargettableFocus = function (object, toggle, weaponLock) {
  return Citizen.invokeNative('0xa22712e8471aa08e', object, toggle, weaponLock);
};

/**
   * _SET_PICKUP_COLLECTABLE_ON_MOUNT
   *
   * @param {number} object
   * @return {void}
   */
global.SetPickupCollectableOnMount = function (object) {
  return Citizen.invokeNative('0x00ee08603eadee92', object);
};

/**
   * CLEAR_CONTROL_LIGHT_EFFECT
   * nullsub, doesn't do anything
   *
   * @param {number} control
   * @return {void}
   */
global.ClearControlLightEffect = function (control) {
  return Citizen.invokeNative('0xcb0360efefb2580d', control);
};

/**
   * CLEAR_CONTROL_SHAKE_SUPPRESSED_ID
   * Old name: _CLEAR_SUPPRESSED_PAD_RUMBLE
   *
   * @param {number} control
   * @return {void}
   */
global.ClearControlShakeSuppressedId = function (control) {
  return Citizen.invokeNative('0xa0cefcea390aab9b', control);
};

/**
   * DISABLE_ALL_CONTROL_ACTIONS
   *
   * @param {number} control
   * @return {void}
   */
global.DisableAllControlActions = function (control) {
  return Citizen.invokeNative('0x5f4b6931816e599b', control);
};

/**
   * DISABLE_CONTROL_ACTION
   *
   * @param {number} control
   * @param {number} action
   * @param {boolean} disableRelatedActions
   * @return {void}
   */
global.DisableControlAction = function (control, action, disableRelatedActions) {
  return Citizen.invokeNative('0xfe99b66d079cf6bc', control, _ch(action), disableRelatedActions);
};

/**
   * ENABLE_CONTROL_ACTION
   *
   * @param {number} control
   * @param {number} action
   * @param {boolean} enableRelatedActions
   * @return {void}
   */
global.EnableControlAction = function (control, action, enableRelatedActions) {
  return Citizen.invokeNative('0x351220255d64c155', control, _ch(action), enableRelatedActions);
};

/**
   * GET_CONTROL_HOW_LONG_AGO
   * Returns time in ms since last input.
   *
   * @param {number} control
   * @return {number}
   */
global.GetControlHowLongAgo = function (control) {
  return Citizen.invokeNative('0xd7d22f5592aed8ba', control, _r, _ri);
};

/**
   * GET_CONTROL_NORMAL
   *
   * @param {number} control
   * @param {number} action
   * @return {number}
   */
global.GetControlNormal = function (control, action) {
  return Citizen.invokeNative('0xec3c9b8d5327b563', control, _ch(action), _r, _rf);
};

/**
   * GET_CONTROL_UNBOUND_NORMAL
   *
   * @param {number} control
   * @param {number} action
   * @return {number}
   */
global.GetControlUnboundNormal = function (control, action) {
  return Citizen.invokeNative('0x5b84d09cec5209c5', control, _ch(action), _r, _rf);
};

/**
   * GET_CONTROL_VALUE
   *
   * @param {number} control
   * @param {number} action
   * @return {number}
   */
global.GetControlValue = function (control, action) {
  return Citizen.invokeNative('0xd95e79e8686d2c27', control, _ch(action), _r, _ri);
};

/**
   * GET_DISABLED_CONTROL_NORMAL
   *
   * @param {number} control
   * @param {number} action
   * @return {number}
   */
global.GetDisabledControlNormal = function (control, action) {
  return Citizen.invokeNative('0x11e65974a982637c', control, _ch(action), _r, _rf);
};

/**
   * GET_DISABLED_CONTROL_UNBOUND_NORMAL
   *
   * @param {number} control
   * @param {number} action
   * @return {number}
   */
global.GetDisabledControlUnboundNormal = function (control, action) {
  return Citizen.invokeNative('0x4f8a26a890fd62fb', control, _ch(action), _r, _rf);
};

/**
   * HAVE_CONTROLS_CHANGED
   *
   * @param {number} control
   * @return {boolean}
   */
global.HaveControlsChanged = function (control) {
  return Citizen.invokeNative('0x6cd79468a1e595c6', control, _r);
};

/**
   * IS_CONTROL_ENABLED
   *
   * @param {number} control
   * @param {number} action
   * @return {boolean}
   */
global.IsControlEnabled = function (control, action) {
  return Citizen.invokeNative('0x1cea6bfdf248e5d9', control, _ch(action), _r);
};

/**
   * IS_CONTROL_JUST_PRESSED
   *
   * @param {number} control
   * @param {number} action
   * @return {boolean}
   */
global.IsControlJustPressed = function (control, action) {
  return Citizen.invokeNative('0x580417101ddb492f', control, _ch(action), _r);
};

/**
   * IS_CONTROL_JUST_RELEASED
   *
   * @param {number} control
   * @param {number} action
   * @return {boolean}
   */
global.IsControlJustReleased = function (control, action) {
  return Citizen.invokeNative('0x50f940259d3841e6', control, _ch(action), _r);
};

/**
   * IS_CONTROL_PRESSED
   *
   * @param {number} control
   * @param {number} action
   * @return {boolean}
   */
global.IsControlPressed = function (control, action) {
  return Citizen.invokeNative('0xf3a21bcd95725a4a', control, _ch(action), _r);
};

/**
   * IS_CONTROL_RELEASED
   *
   * @param {number} control
   * @param {number} action
   * @return {boolean}
   */
global.IsControlReleased = function (control, action) {
  return Citizen.invokeNative('0x648ee3e7f38877dd', control, _ch(action), _r);
};

/**
   * IS_DISABLED_CONTROL_JUST_PRESSED
   *
   * @param {number} control
   * @param {number} action
   * @return {boolean}
   */
global.IsDisabledControlJustPressed = function (control, action) {
  return Citizen.invokeNative('0x91aef906bca88877', control, _ch(action), _r);
};

/**
   * IS_DISABLED_CONTROL_JUST_RELEASED
   *
   * @param {number} control
   * @param {number} action
   * @return {boolean}
   */
global.IsDisabledControlJustReleased = function (control, action) {
  return Citizen.invokeNative('0x305c8dcd79da8b0f', control, _ch(action), _r);
};

/**
   * IS_DISABLED_CONTROL_PRESSED
   *
   * @param {number} control
   * @param {number} action
   * @return {boolean}
   */
global.IsDisabledControlPressed = function (control, action) {
  return Citizen.invokeNative('0xe2587f8cbbd87b1d', control, _ch(action), _r);
};

/**
   * IS_LOOK_INVERTED
   *
  
   * @return {boolean}
   */
global.IsLookInverted = function () {
  return Citizen.invokeNative('0x77b612531280010d', _r);
};

/**
   * IS_USING_KEYBOARD_AND_MOUSE
   * padIndex is not used
   * 
   * Old name: _IS_USING_KEYBOARD
   *
   * @param {number} control
   * @return {boolean}
   */
global.IsUsingKeyboardAndMouse = function (control) {
  return Citizen.invokeNative('0xa571d46727e2b718', control, _r);
};

/**
   * SET_CONTROL_LIGHT_EFFECT_COLOR
   * nullsub, doesn't do anything
   * 
   * Old name: _SET_CONTROL_GROUP_COLOR
   *
   * @param {number} control
   * @param {number} red
   * @param {number} green
   * @param {number} blue
   * @return {void}
   */
global.SetControlLightEffectColor = function (control, red, green, blue) {
  return Citizen.invokeNative('0x8290252fff36acb5', control, red, green, blue);
};

/**
   * SET_CONTROL_LIGHT_EFFECT_FLASHING_COLOR
   * nullsub, doesn't do anything
   *
   * @param {number} control
   * @param {number} red
   * @param {number} green
   * @param {number} blue
   * @return {void}
   */
global.SetControlLightEffectFlashingColor = function (control, red, green, blue) {
  return Citizen.invokeNative('0xa45884db10ec7ee3', control, red, green, blue);
};

/**
   * SET_CONTROL_SHAKE
   * Old name: SET_PAD_SHAKE
   *
   * @param {number} control
   * @param {number} duration
   * @param {number} frequency
   * @return {void}
   */
global.SetControlShake = function (control, duration, frequency) {
  return Citizen.invokeNative('0x48b3886c1358d0d5', control, duration, frequency);
};

/**
   * SET_CONTROL_SHAKE_SUPPRESSED_ID
   * Old name: SET_PAD_SHAKE_SUPPRESSED_ID
   *
   * @param {number} control
   * @param {number} uniqueId
   * @return {void}
   */
global.SetControlShakeSuppressedId = function (control, uniqueId) {
  return Citizen.invokeNative('0xf239400e16c23e08', control, uniqueId);
};

/**
   * SET_CONTROL_TRIGGER_SHAKE
   * nullsub, doesn't do anything
   *
   * @param {number} control
   * @param {number} leftDuration
   * @param {number} leftFrequency
   * @param {number} rightDuration
   * @param {number} rightFrequency
   * @return {void}
   */
global.SetControlTriggerShake = function (control, leftDuration, leftFrequency, rightDuration, rightFrequency) {
  return Citizen.invokeNative('0x14d29bb12d47f68c', control, leftDuration, leftFrequency, rightDuration, rightFrequency);
};

/**
   * SET_CONTROL_VALUE_NEXT_FRAME
   * This is for simulating player input.
   * value is a float value from 0 - 1
   * 
   * control: see IS_CONTROL_ENABLED
   * 
   * Old name: _SET_CONTROL_NORMAL
   *
   * @param {number} control
   * @param {number} action
   * @param {number} value
   * @return {boolean}
   */
global.SetControlValueNextFrame = function (control, action, value) {
  return Citizen.invokeNative('0xe8a25867fba3b05e', control, _ch(action), _fv(value), _r);
};

/**
   * SET_INPUT_EXCLUSIVE
   *
   * @param {number} control
   * @param {number} action
   * @return {void}
   */
global.SetInputExclusive = function (control, action) {
  return Citizen.invokeNative('0xede476e5ee29edb1', control, _ch(action));
};

/**
   * STOP_CONTROL_SHAKE
   * Old name: STOP_PAD_SHAKE
   *
   * @param {number} control
   * @return {void}
   */
global.StopControlShake = function (control) {
  return Citizen.invokeNative('0x38c16a305e8cdc8d', control);
};

/**
   * _0x1252C029FC8EBB4D
   * _IS_R* - _IS_S*
   *
  
   * @return {boolean}
   */
global.N_0x1252C029FC8EBB4D = function () {
  return Citizen.invokeNative('0x1252c029fc8ebb4d', _r);
};

/**
   * _0x43F35DDB2905D945
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x43F35DDB2905D945 = function (p0, p1) {
  return Citizen.invokeNative('0x43f35ddb2905d945', p0, p1, _r);
};

/**
   * _0x52C68E92D6E23ADD
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x52C68E92D6E23ADD = function (p0) {
  return Citizen.invokeNative('0x52c68e92d6e23add', p0);
};

/**
   * _0x5F217BC1190503D8
   * rumbleCurve: common_0/data/rumblecurves.meta
   *
   * @param {string | number} rumbleCurve
   * @param {number} p1
   * @return {void}
   */
global.N_0x5F217BC1190503D8 = function (rumbleCurve, p1) {
  return Citizen.invokeNative('0x5f217bc1190503d8', _ts(rumbleCurve), _fv(p1));
};

/**
   * _0x709BA8C08C5C008D
   *
  
   * @return {void}
   */
global.N_0x709BA8C08C5C008D = function () {
  return Citizen.invokeNative('0x709ba8c08c5c008d');
};

/**
   * _0xBD629C1C4F501C80
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xBD629C1C4F501C80 = function (p0) {
  return Citizen.invokeNative('0xbd629c1c4f501c80', p0, _r);
};

/**
   * _GET_CURRENT_CONTROL_CONTEXT
   * Gets the current control context. See: _SET_CONTROL_CONTEXT
   *
   * @param {number} control
   * @return {number}
   */
global.GetCurrentControlContext = function (control) {
  return Citizen.invokeNative('0xddceb0f26c89c00f', control, _r, _ri);
};

/**
   * _GET_DISABLED_CONTROL_HOW_LONG_AGO
   *
   * @param {number} control
   * @return {number}
   */
global.GetDisabledControlHowLongAgo = function (control) {
  return Citizen.invokeNative('0x771dfcb24d19c2f6', control, _r, _ri);
};

/**
   * _IS_CONTROL_ACTION_VALID
   *
   * @param {number} action
   * @param {number} control
   * @return {boolean}
   */
global.IsControlActionValid = function (action, control) {
  return Citizen.invokeNative('0xbc0884bc590951c7', _ch(action), control, _r);
};

/**
   * _SET_CONTROL_CONTEXT
   * Sets the current control context. Must be called every frame.
   * 
   * context: https://alloc8or.re/rdr3/doc/misc/input_contexts.txt
   * For more information, see common:/data/control/settings.meta
   * https://github.com/femga/rdr3_discoveries/tree/master/Controls
   *
   * @param {number} control
   * @param {number} context
   * @return {void}
   */
global.SetControlContext = function (control, context) {
  return Citizen.invokeNative('0x2804658eb7d8a50b', control, _ch(context));
};

/**
   * ADD_NAVMESH_BLOCKING_OBJECT
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {boolean} p7
   * @param {any} p8
   * @return {any}
   */
global.AddNavmeshBlockingObject = function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
  return Citizen.invokeNative('0xfcd5c8e06e502f5a', _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), p7, p8, _r);
};

/**
   * ADD_NAVMESH_REQUIRED_REGION
   *
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @return {void}
   */
global.AddNavmeshRequiredRegion = function (x, y, radius) {
  return Citizen.invokeNative('0x387ead7ee42f6685', _fv(x), _fv(y), _fv(radius));
};

/**
   * ARE_NODES_LOADED_FOR_AREA
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} x2
   * @param {number} y2
   * @return {boolean}
   */
global.AreNodesLoadedForArea = function (x1, y1, x2, y2) {
  return Citizen.invokeNative('0xf7b79a50b905a30d', _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r);
};

/**
   * DOES_NAVMESH_BLOCKING_OBJECT_EXIST
   *
   * @param {any} p0
   * @return {boolean}
   */
global.DoesNavmeshBlockingObjectExist = function (p0) {
  return Citizen.invokeNative('0x0eaeb0db4b132399', p0, _r);
};

/**
   * GET_APPROX_FLOOR_FOR_POINT
   * Returns CGameWorldHeightMap's minimum Z value at specified point (grid node).
   *
   * @param {number} x
   * @param {number} y
   * @return {number}
   */
global.GetApproxFloorForPoint = function (x, y) {
  return Citizen.invokeNative('0x336511a34f2e5185', _fv(x), _fv(y), _r, _rf);
};

/**
   * GET_CLOSEST_ROAD
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p3
   * @param {number} p4
   * @param {DataView} p7
   * @param {DataView} p8
   * @param {boolean} p10
   * @return {[any, Vector3, Vector3, number]}
   */
global.GetClosestRoad = function (x, y, z, p3, p4, p7, p8, p10) {
  return Citizen.invokeNative('0x132f52bba570fe92', _fv(x), _fv(y), _fv(z), _fv(p3), p4, _v, _v, p7, p8, _f, p10, _r);
};

/**
   * GET_CLOSEST_VEHICLE_NODE
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} nodeType
   * @param {number} p5
   * @param {number} p6
   * @return {[boolean, Vector3]}
   */
global.GetClosestVehicleNode = function (x, y, z, nodeType, p5, p6) {
  return Citizen.invokeNative('0x240a18690ae96513', _fv(x), _fv(y), _fv(z), _v, nodeType, _fv(p5), _fv(p6), _r);
};

/**
   * GET_CLOSEST_VEHICLE_NODE_WITH_HEADING
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} nodeType
   * @param {number} p6
   * @param {number} p7
   * @return {[boolean, Vector3, number]}
   */
global.GetClosestVehicleNodeWithHeading = function (x, y, z, nodeType, p6, p7) {
  return Citizen.invokeNative('0x23cffd4ccb243354', _fv(x), _fv(y), _fv(z), _v, _f, nodeType, _fv(p6), _fv(p7), _r);
};

/**
   * GET_GPS_BLIP_ROUTE_FOUND
   *
  
   * @return {boolean}
   */
global.GetGpsBlipRouteFound = function () {
  return Citizen.invokeNative('0x869daacbbe9fa006', _r);
};

/**
   * GET_GPS_BLIP_ROUTE_LENGTH
   *
  
   * @return {number}
   */
global.GetGpsBlipRouteLength = function () {
  return Citizen.invokeNative('0xbbb45c3cf5c8aa85', _r, _ri);
};

/**
   * GET_NTH_CLOSEST_VEHICLE_NODE
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} nthClosest
   * @param {number} unknown1
   * @param {number} unknown2
   * @param {any} unknown3
   * @return {[boolean, Vector3]}
   */
global.GetNthClosestVehicleNode = function (x, y, z, nthClosest, unknown1, unknown2, unknown3) {
  return Citizen.invokeNative('0x5a6d8df6fbc5d0c4', _fv(x), _fv(y), _fv(z), nthClosest, _v, unknown1, _fv(unknown2), unknown3, _r);
};

/**
   * GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} desiredX
   * @param {number} desiredY
   * @param {number} desiredZ
   * @param {number} nthClosest
   * @param {number} nodetype
   * @param {any} p10
   * @param {any} p11
   * @return {[boolean, Vector3, number]}
   */
global.GetNthClosestVehicleNodeFavourDirection = function (x, y, z, desiredX, desiredY, desiredZ, nthClosest, nodetype, p10, p11) {
  return Citizen.invokeNative('0x2fac235a6062f14a', _fv(x), _fv(y), _fv(z), _fv(desiredX), _fv(desiredY), _fv(desiredZ), nthClosest, _v, _f, nodetype, p10, p11, _r);
};

/**
   * GET_NTH_CLOSEST_VEHICLE_NODE_ID
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} nth
   * @param {number} nodetype
   * @param {number} p5
   * @param {number} p6
   * @return {number}
   */
global.GetNthClosestVehicleNodeId = function (x, y, z, nth, nodetype, p5, p6) {
  return Citizen.invokeNative('0x116443008e5cefc3', _fv(x), _fv(y), _fv(z), nth, nodetype, _fv(p5), _fv(p6), _r, _ri);
};

/**
   * GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING
   * Returns the nth closest vehicle node with a heading to a coord
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} nthClosest
   * @param {number} nodeFlags
   * @param {number} zMeasureMult
   * @param {number} zTolerance
   * @return {[number, number, number]}
   */
global.GetNthClosestVehicleNodeIdWithHeading = function (x, y, z, nthClosest, nodeFlags, zMeasureMult, zTolerance) {
  return Citizen.invokeNative('0x4114eaa8a7f7766d', _fv(x), _fv(y), _fv(z), nthClosest, _f, _i, nodeFlags, _fv(zMeasureMult), _fv(zTolerance), _r, _ri);
};

/**
   * GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} nthClosest
   * @param {DataView} unknown1
   * @param {number} unknown2
   * @param {number} unknown3
   * @param {number} unknown4
   * @return {[boolean, Vector3, number]}
   */
global.GetNthClosestVehicleNodeWithHeading = function (x, y, z, nthClosest, unknown1, unknown2, unknown3, unknown4) {
  return Citizen.invokeNative('0x591b40d4390db54a', _fv(x), _fv(y), _fv(z), nthClosest, _v, _f, unknown1, unknown2, _fv(unknown3), _fv(unknown4), _r);
};

/**
   * GET_NUM_NAVMESHES_EXISTING_IN_AREA
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @return {number}
   */
global.GetNumNavmeshesExistingInArea = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x01708e8dd3ff8c65', _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _r, _ri);
};

/**
   * GET_RANDOM_VEHICLE_NODE
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} minLanes
   * @param {boolean} avoidDeadEnds
   * @param {boolean} avoidHighways
   * @return {[boolean, Vector3, number]}
   */
global.GetRandomVehicleNode = function (x, y, z, radius, minLanes, avoidDeadEnds, avoidHighways) {
  return Citizen.invokeNative('0x93e0db8440b73a7d', _fv(x), _fv(y), _fv(z), _fv(radius), minLanes, avoidDeadEnds, avoidHighways, _v, _i, _r);
};

/**
   * GET_SAFE_COORD_FOR_PED
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {boolean} onGround
   * @param {number} flags
   * @return {[boolean, Vector3]}
   */
global.GetSafeCoordForPed = function (x, y, z, onGround, flags) {
  return Citizen.invokeNative('0xb61c8e878a4199ca', _fv(x), _fv(y), _fv(z), onGround, _v, flags, _r);
};

/**
   * GET_VEHICLE_NODE_IS_SWITCHED_OFF
   *
   * @param {number} nodeId
   * @return {boolean}
   */
global.GetVehicleNodeIsSwitchedOff = function (nodeId) {
  return Citizen.invokeNative('0x28533dbddf7c2c97', nodeId, _r);
};

/**
   * GET_VEHICLE_NODE_POSITION
   *
   * @param {number} nodeId
   * @return {Vector3}
   */
global.GetVehicleNodePosition = function (nodeId) {
  return Citizen.invokeNative('0x8e8d72ff24dee1fb', nodeId, _v);
};

/**
   * IS_NAVMESH_LOADED_IN_AREA
   * Returns whether navmesh for the region is loaded.
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @return {boolean}
   */
global.IsNavmeshLoadedInArea = function (x1, y1, z1, x2, y2, z2) {
  return Citizen.invokeNative('0xf813c7e63f9062a5', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r);
};

/**
   * IS_POINT_ON_ROAD
   * Gets a value indicating whether the specified position is on a road.
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} vehicle
   * @return {boolean}
   */
global.IsPointOnRoad = function (x, y, z, vehicle) {
  return Citizen.invokeNative('0x125bf4abfc536b09', _fv(x), _fv(y), _fv(z), vehicle, _r);
};

/**
   * IS_VEHICLE_NODE_ID_VALID
   * Returns true if the id is non zero.
   *
   * @param {number} vehicleNodeId
   * @return {boolean}
   */
global.IsVehicleNodeIdValid = function (vehicleNodeId) {
  return Citizen.invokeNative('0x5829a02af4f0b3cb', vehicleNodeId, _r);
};

/**
   * NAVMESH_REQUEST_PATH
   * Starts a nav mesh query for a path between coordinates with a given ped and returns a handle to be validated by _NAVMESH_REQUESTED_QUERY_STATUS and then _NAVMESH_REQUESTED_PATH_WAYPOINTS_FOUND
   * 
   * Only bit flag values used in scripts are 0, 23, and 29. 23 is used with dogs and horses. 29 with legendary animals.
   *
   * @param {number} ped
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {number} bitFlag
   * @return {number}
   */
global.NavmeshRequestPath = function (ped, x1, y1, z1, x2, y2, z2, bitFlag) {
  return Citizen.invokeNative('0x348f211ca2404039', ped, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), bitFlag, _r, _ri);
};

/**
   * REMOVE_NAVMESH_BLOCKING_OBJECT
   *
   * @param {any} p0
   * @return {void}
   */
global.RemoveNavmeshBlockingObject = function (p0) {
  return Citizen.invokeNative('0x46399a7895957c0e', p0);
};

/**
   * REQUEST_PATH_NODES_IN_AREA_THIS_FRAME
   * Old name: REQUEST_PATHS_PREFER_ACCURATE_BOUNDINGSTRUCT
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} x2
   * @param {number} y2
   * @return {boolean}
   */
global.RequestPathNodesInAreaThisFrame = function (x1, y1, x2, y2) {
  return Citizen.invokeNative('0x07fb139b592fa687', _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r);
};

/**
   * RESET_ROADS_IN_VOLUME
   *
   * @param {number} volume
   * @param {boolean} p1
   * @return {void}
   */
global.ResetRoadsInVolume = function (volume, p1) {
  return Citizen.invokeNative('0xd17672447692478e', volume, p1);
};

/**
   * SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME
   *
   * @param {number} multiplier
   * @return {void}
   */
global.SetAmbientPedRangeMultiplierThisFrame = function (multiplier) {
  return Citizen.invokeNative('0x0b919e1fb47cc4e0', _fv(multiplier));
};

/**
   * SET_IGNORE_NO_GPS_FLAG
   * nullsub, doesn't do anything
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetIgnoreNoGpsFlag = function (toggle) {
  return Citizen.invokeNative('0x72751156e7678833', toggle);
};

/**
   * SET_PED_PATHS_BACK_TO_ORIGINAL
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.SetPedPathsBackToOriginal = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xe04b48f2cc926253', p0, p1, p2, p3, p4, p5, p6);
};

/**
   * SET_PED_PATHS_IN_AREA
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {boolean} unknown
   * @param {any} p7
   * @return {void}
   */
global.SetPedPathsInArea = function (x1, y1, z1, x2, y2, z2, unknown, p7) {
  return Citizen.invokeNative('0x34f060f4bf92e018', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), unknown, p7);
};

/**
   * SET_ROADS_BACK_TO_ORIGINAL
   *
   * @param {number} xMin
   * @param {number} yMin
   * @param {number} zMin
   * @param {number} xMax
   * @param {number} yMax
   * @param {number} zMax
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.SetRoadsBackToOriginal = function (xMin, yMin, zMin, xMax, yMax, zMax, p6, p7) {
  return Citizen.invokeNative('0x1ee7063b80ffc77c', _fv(xMin), _fv(yMin), _fv(zMin), _fv(xMax), _fv(yMax), _fv(zMax), p6, p7);
};

/**
   * SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @return {void}
   */
global.SetRoadsBackToOriginalInAngledArea = function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
  return Citizen.invokeNative('0x0027501b9f3b407e', p0, p1, p2, p3, p4, p5, p6, p7, p8);
};

/**
   * SET_ROADS_IN_ANGLED_AREA
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @return {void}
   */
global.SetRoadsInAngledArea = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
  return Citizen.invokeNative('0x1a5aa1208af5db59', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
};

/**
   * SET_ROADS_IN_AREA
   *
   * @param {number} xMin
   * @param {number} yMin
   * @param {number} zMin
   * @param {number} xMax
   * @param {number} yMax
   * @param {number} zMax
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @return {void}
   */
global.SetRoadsInArea = function (xMin, yMin, zMin, xMax, yMax, zMax, p6, p7, p8) {
  return Citizen.invokeNative('0xbf1a602b5ba52fee', _fv(xMin), _fv(yMin), _fv(zMin), _fv(xMax), _fv(yMax), _fv(zMax), p6, p7, p8);
};

/**
   * SET_ROADS_IN_VOLUME
   *
   * @param {number} volume
   * @param {boolean} p1
   * @param {boolean} p2
   * @param {boolean} p3
   * @return {void}
   */
global.SetRoadsInVolume = function (volume, p1, p2, p3) {
  return Citizen.invokeNative('0xc1799fafd2fdf52b', volume, p1, p2, p3);
};

/**
   * SIMULATED_ROUTE_GET_ETA
   *
   * @param {any} p0
   * @return {number}
   */
global.SimulatedRouteGetEta = function (p0) {
  return Citizen.invokeNative('0x2dd5f78d73b24172', p0, _r, _rf);
};

/**
   * SIMULATED_ROUTE_IS_LOADED
   *
   * @param {any} p0
   * @return {boolean}
   */
global.SimulatedRouteIsLoaded = function (p0) {
  return Citizen.invokeNative('0x240915043cb799d7', p0, _r);
};

/**
   * SIMULATED_ROUTE_TRAVEL_TO_POINT
   *
   * @param {any} p0
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.SimulatedRouteTravelToPoint = function (p0, p1, p2) {
  return Citizen.invokeNative('0xa1a3de1c215c7394', p0, _fv(p1), _fv(p2));
};

/**
   * _0x264E9A5CD78C338F
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x264E9A5CD78C338F = function (p0) {
  return Citizen.invokeNative('0x264e9a5cd78c338f', p0);
};

/**
   * _0x34C9AF25649172D0
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x34C9AF25649172D0 = function (p0) {
  return Citizen.invokeNative('0x34c9af25649172d0', p0);
};

/**
   * _0x4358BCF14C91761C
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @return {void}
   */
global.N_0x4358BCF14C91761C = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
  return Citizen.invokeNative('0x4358bcf14c91761c', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
};

/**
   * _0x4BDEBEA5702B97A9
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.N_0x4BDEBEA5702B97A9 = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x4bdebea5702b97a9', p0, p1, p2, p3, p4, p5);
};

/**
   * _0x54F4D7B6670FBB5A
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {any}
   */
global.N_0x54F4D7B6670FBB5A = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x54f4d7b6670fbb5a', p0, p1, p2, p3, p4, _r);
};

/**
   * _0x5A3B54ADDF5472A3
   *
   * @param {string | number} p0
   * @return {number}
   */
global.N_0x5A3B54ADDF5472A3 = function (p0) {
  return Citizen.invokeNative('0x5a3b54addf5472a3', _ts(p0), _r, _ri);
};

/**
   * _0x5A4E1A41E3A02AD0
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x5A4E1A41E3A02AD0 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x5a4e1a41e3a02ad0', p0, p1, p2);
};

/**
   * _0x665B21666351CB37
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0x665B21666351CB37 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x665b21666351cb37', p0, p1, p2, _r);
};

/**
   * _0x6C3F12ECEB6D2E2A
   *
   * @param {number} xMin
   * @param {number} yMin
   * @param {number} zMin
   * @param {number} xMax
   * @param {number} yMax
   * @param {number} zMax
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.N_0x6C3F12ECEB6D2E2A = function (xMin, yMin, zMin, xMax, yMax, zMax, p6, p7) {
  return Citizen.invokeNative('0x6c3f12eceb6d2e2a', _fv(xMin), _fv(yMin), _fv(zMin), _fv(xMax), _fv(yMax), _fv(zMax), p6, p7);
};

/**
   * _0x6DAD6630AE4A74CB
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x6DAD6630AE4A74CB = function (p0, p1) {
  return Citizen.invokeNative('0x6dad6630ae4a74cb', p0, p1);
};

/**
   * _0x869A7015BD4606E9
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x869A7015BD4606E9 = function (p0) {
  return Citizen.invokeNative('0x869a7015bd4606e9', p0);
};

/**
   * _0xA33914B00CA55756
   *
   * @param {string | number} p0
   * @param {number} p1
   * @return {any}
   */
global.N_0xA33914B00CA55756 = function (p0, p1) {
  return Citizen.invokeNative('0xa33914b00ca55756', _ts(p0), p1, _r);
};

/**
   * _0xAFE2AE66F6251C66
   *
   * @param {number} xMin
   * @param {number} yMin
   * @param {number} zMin
   * @param {number} xMax
   * @param {number} yMax
   * @param {number} zMax
   * @param {number} p6
   * @param {any} p7
   * @return {void}
   */
global.N_0xAFE2AE66F6251C66 = function (xMin, yMin, zMin, xMax, yMax, zMax, p6, p7) {
  return Citizen.invokeNative('0xafe2ae66f6251c66', _fv(xMin), _fv(yMin), _fv(zMin), _fv(xMax), _fv(yMax), _fv(zMax), p6, p7);
};

/**
   * _0xB03944057FD735BA
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xB03944057FD735BA = function (p0, p1, p2) {
  return Citizen.invokeNative('0xb03944057fd735ba', p0, p1, p2);
};

/**
   * _0xCA27A86CAA4E98ED
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {any}
   */
global.N_0xCA27A86CAA4E98ED = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xca27a86caa4e98ed', p0, p1, p2, p3, p4, p5, p6, _r);
};

/**
   * _0xCF213A5FC3ABFC08
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xCF213A5FC3ABFC08 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xcf213a5fc3abfc08', p0, p1, p2);
};

/**
   * _0xE5EF9DE716FF737E
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xE5EF9DE716FF737E = function (p0, p1, p2) {
  return Citizen.invokeNative('0xe5ef9de716ff737e', p0, p1, p2);
};

/**
   * _0xEFC535C9FAF563B3
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xEFC535C9FAF563B3 = function (p0) {
  return Citizen.invokeNative('0xefc535c9faf563b3', p0, _r);
};

/**
   * _0xF2A2177AC848B3A8
   * GPS disabled zone: p1 = 0
   * Clearing GPS disabled zone: p1 = 1
   *
   * @param {number} volume
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.N_0xF2A2177AC848B3A8 = function (volume, p1, p2) {
  return Citizen.invokeNative('0xf2a2177ac848b3a8', volume, p1, p2);
};

/**
   * _ADD_NAVMESH_BLOCKING_VOLUME
   *
   * @param {number} volume
   * @param {number} flags
   * @return {boolean}
   */
global.AddNavmeshBlockingVolume = function (volume, flags) {
  return Citizen.invokeNative('0x19c7567d2f2287d6', volume, flags, _r);
};

/**
   * _DOES_NAVMESH_BLOCKING_VOLUME_EXIST
   *
   * @param {number} volume
   * @return {boolean}
   */
global.DoesNavmeshBlockingVolumeExist = function (volume) {
  return Citizen.invokeNative('0xde0ea444735c1368', volume, _r);
};

/**
   * _GET_SPAWN_DATA_FOR_ROAD_NODE
   *
   * @param {number} nodeId
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {[Vector3, number]}
   */
global.GetSpawnDataForRoadNode = function (nodeId, x, y, z) {
  return Citizen.invokeNative('0xa3791b915b8b84c6', nodeId, _fv(x), _fv(y), _fv(z), _v, _f);
};

/**
   * _NAVMESH_ACTIVATE_SWAP
   *
   * @param {string | number} name
   * @return {boolean}
   */
global.NavmeshActivateSwap = function (name) {
  return Citizen.invokeNative('0x7c334ff4d9215912', _ts(name), _r);
};

/**
   * _NAVMESH_ASSIGN_NAVMESH_TO_VEHICLE
   *
   * @param {number} vehicle
   * @param {string | number} navMeshName
   * @return {boolean}
   */
global.NavmeshAssignNavmeshToVehicle = function (vehicle, navMeshName) {
  return Citizen.invokeNative('0x44026e3db3ced602', vehicle, _ts(navMeshName), _r);
};

/**
   * _NAVMESH_CLEAR_REQUESTED_PATH
   * Called in scripts after finished with requested pathes. Immediately resets all values connected to the path handle except query status, which changes from 1 to 2 before eventually becoming fully invalidated to 0.
   *
   * @param {number} path
   * @return {boolean}
   */
global.NavmeshClearRequestedPath = function (path) {
  return Citizen.invokeNative('0x661bb1e1ff77742d', path, _r);
};

/**
   * _NAVMESH_DEACTIVATE_SWAP
   *
   * @param {string | number} name
   * @return {boolean}
   */
global.NavmeshDeactivateSwap = function (name) {
  return Citizen.invokeNative('0x527b97c203bb8606', name, _r);
};

/**
   * _NAVMESH_DOES_SWAP_EXIST
   *
   * @param {string | number} name
   * @return {boolean}
   */
global.NavmeshDoesSwapExist = function (name) {
  return Citizen.invokeNative('0x495cfab2924237c7', name, _r);
};

/**
   * _NAVMESH_IS_SWAP_ACTIVE
   *
   * @param {string | number} name
   * @return {boolean}
   */
global.NavmeshIsSwapActive = function (name) {
  return Citizen.invokeNative('0x5ac0944c156e5f44', name, _r);
};

/**
   * _NAVMESH_REQUESTED_PATH_NUM_WAYPOINTS
   * Returns the number of waypoints for a requested path (NAVMESH_REQUEST_PATH) if the query is completed (_NAVMESH_REQUESTED_QUERY_STATUS). For use with _NAVMESH_REQUESTED_PATH_WAYPOINT_BY_INDEX
   *
   * @param {number} path
   * @return {number}
   */
global.NavmeshRequestedPathNumWaypoints = function (path) {
  return Citizen.invokeNative('0xd470725e0703d22f', path, _r, _ri);
};

/**
   * _NAVMESH_REQUESTED_PATH_WAYPOINTS_FOUND
   * Returns true if a path of waypoints was found. Waypoints can be retrieved with _NAVMESH_REQUESTED_PATH_NUM_WAYPOINTS and _NAVMESH_REQUESTED_PATH_WAYPOINT_BY_INDEX
   *
   * @param {number} path
   * @return {boolean}
   */
global.NavmeshRequestedPathWaypointsFound = function (path) {
  return Citizen.invokeNative('0x8800776e410eb669', path, _r);
};

/**
   * _NAVMESH_REQUESTED_PATH_WAYPOINTS_TERRAIN
   * Returns a bit flag for seemingly terrain within the waypoints in the path. Checked against bit value 2 to match water in the path, seems to always contain at least 1 though regardless of location/ped.
   *
   * @param {number} path
   * @return {number}
   */
global.NavmeshRequestedPathWaypointsTerrain = function (path) {
  return Citizen.invokeNative('0xf61cfedeab627bfa', path, _r, _ri);
};

/**
   * _NAVMESH_REQUESTED_PATH_WAYPOINT_BY_INDEX
   * Returns a vector3 waypoint at the specified index for a path. Use _NAVMESH_REQUESTED_PATH_NUM_WAYPOINTS to get available indexes.
   *
   * @param {number} path
   * @param {number} waypointIndex
   * @return {Vector3}
   */
global.NavmeshRequestedPathWaypointByIndex = function (path, waypointIndex) {
  return Citizen.invokeNative('0x430f8319ae56c8a9', path, waypointIndex, _r, _rv);
};

/**
   * _NAVMESH_REQUESTED_QUERY_STATUS
   * Returns eNavMeshQueryStatus
   * enum eNavMeshQueryStatus
   * {
   *   QS_NOT_FOUND,
   *   QS_COMPLETE,
   *   QS_PENDING
   * };
   * 
   * It appears that the pending state of 2 is at least also used when cleaning up a request (_NAVMESH_CLEAR_REQUESTED_PATH) or if a request never completes. Eventually queries are invalidated and return 0.
   * 
   * Old name: _NAVMESH_QUERY_STATUS
   *
   * @param {number} path
   * @return {number}
   */
global.NavmeshRequestedQueryStatus = function (path) {
  return Citizen.invokeNative('0x3a0f82f6ee2291c8', path, _r, _ri);
};

/**
   * _REMOVE_NAVMESH_BLOCKING_VOLUME
   *
   * @param {number} volume
   * @return {void}
   */
global.RemoveNavmeshBlockingVolume = function (volume) {
  return Citizen.invokeNative('0x2c87c3e1c7b96ee2', volume);
};

/**
   * _SIMULATED_ROUTE_CREATE
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {number} p6
   * @return {any}
   */
global.SimulatedRouteCreate = function (x1, y1, z1, x2, y2, z2, p6) {
  return Citizen.invokeNative('0xfd5bb35aab83fd48', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p6, _r);
};

/**
   * _SIMULATED_ROUTE_DELETE
   *
   * @param {any} p0
   * @return {void}
   */
global.SimulatedRouteDelete = function (p0) {
  return Citizen.invokeNative('0x4907d0e4fb26ee65', p0);
};

/**
   * _SIMULATED_ROUTE_EXISTS
   *
   * @param {any} p0
   * @return {boolean}
   */
global.SimulatedRouteExists = function (p0) {
  return Citizen.invokeNative('0x65a8196b8d7f5e0b', p0, _r);
};

/**
   * ADD_ARMOUR_TO_PED
   * Same as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.
   *
   * @param {number} ped
   * @param {number} amount
   * @return {void}
   */
global.AddArmourToPed = function (ped, amount) {
  return Citizen.invokeNative('0x5ba652a0cd14df2f', ped, amount);
};

/**
   * ADD_CUSTOM_FORMATION_LOCATION
   *
   * @param {number} groupId
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} position
   * @return {void}
   */
global.AddCustomFormationLocation = function (groupId, x, y, z, position) {
  return Citizen.invokeNative('0x4e23cd07bd161e06', groupId, _fv(x), _fv(y), _fv(z), position);
};

/**
   * ADD_FORMATION_LOCATION
   *
   * @param {number} groupId
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @return {boolean}
   */
global.AddFormationLocation = function (groupId, p1, p2, p3) {
  return Citizen.invokeNative('0xb05945c1e9e60d91', groupId, _fv(p1), _fv(p2), _fv(p3), _r);
};

/**
   * ADD_RELATIONSHIP_GROUP
   * The hash of the created relationship group is output in the second parameter.
   *
   * @param {string | number} name
   * @param {number} groupHash
   * @return {boolean}
   */
global.AddRelationshipGroup = function (name, groupHash) {
  return Citizen.invokeNative('0xf372bc22fcb88606', name, _ch(groupHash), _r);
};

/**
   * ADD_SCENARIO_BLOCKING_AREA
   * blockingFlags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eScenarioBlockingFlags
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {boolean} p6
   * @param {number} blockingFlags
   * @return {number}
   */
global.AddScenarioBlockingArea = function (x1, y1, z1, x2, y2, z2, p6, blockingFlags) {
  return Citizen.invokeNative('0x1b5c85c612e5256e', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p6, blockingFlags, _r, _ri);
};

/**
   * APPLY_DAMAGE_TO_PED
   * damages a ped with the given amount
   *
   * @param {number} ped
   * @param {number} damageAmount
   * @param {boolean} damageArmour
   * @param {number} boneId
   * @param {number} pedKiller
   * @return {void}
   */
global.ApplyDamageToPed = function (ped, damageAmount, damageArmour, boneId, pedKiller) {
  return Citizen.invokeNative('0x697157ced63f18d4', ped, damageAmount, damageArmour, boneId, pedKiller);
};

/**
   * APPLY_PED_BLOOD_SPECIFIC
   *
   * @param {number} ped
   * @param {any} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {any} p6
   * @param {number} p7
   * @param {DataView} p8
   * @return {void}
   */
global.ApplyPedBloodSpecific = function (ped, p1, p2, p3, p4, p5, p6, p7, p8) {
  return Citizen.invokeNative('0xef0d582cbf2d9b0f', ped, p1, _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, _fv(p7), p8);
};

/**
   * APPLY_PED_DAMAGE_PACK
   * https://github.com/femga/rdr3_discoveries/blob/master/peds_customization/ped_decals.lua
   *
   * @param {number} ped
   * @param {string | number} damagePack
   * @param {number} damage
   * @param {number} mult
   * @return {void}
   */
global.ApplyPedDamagePack = function (ped, damagePack, damage, mult) {
  return Citizen.invokeNative('0x46df918788cb093f', ped, damagePack, _fv(damage), _fv(mult));
};

/**
   * CAN_KNOCK_PED_OFF_VEHICLE
   *
   * @param {number} ped
   * @return {boolean}
   */
global.CanKnockPedOffVehicle = function (ped) {
  return Citizen.invokeNative('0x51ac07a44d4f5b8a', ped, _r);
};

/**
   * CAN_PED_BE_MOUNTED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.CanPedBeMounted = function (ped) {
  return Citizen.invokeNative('0x2d64376cf437363e', ped, _r);
};

/**
   * CAN_PED_IN_COMBAT_SEE_TARGET
   *
   * @param {number} ped
   * @param {number} target
   * @return {boolean}
   */
global.CanPedInCombatSeeTarget = function (ped, target) {
  return Citizen.invokeNative('0xead42de3610d0721', ped, target, _r);
};

/**
   * CAN_PED_RAGDOLL
   *
   * @param {number} ped
   * @return {boolean}
   */
global.CanPedRagdoll = function (ped) {
  return Citizen.invokeNative('0x128f79edcece4fd5', ped, _r);
};

/**
   * CAN_PED_SEE_ENTITY
   * Returns:
   * 0 - CTR_CANNOT_TARGET
   * 1 - CTR_CAN_TARGET
   * 2 - CTR_NOT_SURE_YET
   *
   * @param {number} ped
   * @param {number} targetEntity
   * @param {boolean} p2
   * @param {boolean} p3
   * @return {number}
   */
global.CanPedSeeEntity = function (ped, targetEntity, p2, p3) {
  return Citizen.invokeNative('0x7f9b9791d4cb71f6', ped, targetEntity, p2, p3, _r, _ri);
};

/**
   * CAN_PED_SEE_PED_CACHED
   *
   * @param {number} ped
   * @param {number} targetPed
   * @param {boolean} p2
   * @return {number}
   */
global.CanPedSeePedCached = function (ped, targetPed, p2) {
  return Citizen.invokeNative('0x9d9473cb82d83a30', ped, targetPed, p2, _r, _ri);
};

/**
   * CLEAR_FACIAL_IDLE_ANIM_OVERRIDE
   *
   * @param {number} ped
   * @return {void}
   */
global.ClearFacialIdleAnimOverride = function (ped) {
  return Citizen.invokeNative('0x726256cc1eeb182f', ped);
};

/**
   * CLEAR_PED_BLOOD_DAMAGE
   *
   * @param {number} ped
   * @return {void}
   */
global.ClearPedBloodDamage = function (ped) {
  return Citizen.invokeNative('0x8fe22675a5a45817', ped);
};

/**
   * CLEAR_PED_BLOOD_DAMAGE_BY_ZONE
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.ClearPedBloodDamageByZone = function (ped, p1) {
  return Citizen.invokeNative('0x56e3b78c5408d9f4', ped, p1);
};

/**
   * CLEAR_PED_DAMAGE_DECAL_BY_ZONE
   *
   * @param {number} ped
   * @param {number} p1
   * @param {string | number} p2
   * @return {void}
   */
global.ClearPedDamageDecalByZone = function (ped, p1, p2) {
  return Citizen.invokeNative('0x523c79aeefcc4a2a', ped, p1, p2);
};

/**
   * CLEAR_PED_DECORATIONS
   *
   * @param {number} ped
   * @return {void}
   */
global.ClearPedDecorations = function (ped) {
  return Citizen.invokeNative('0x0e5173c163976e38', ped);
};

/**
   * CLEAR_PED_ENV_DIRT
   *
   * @param {number} ped
   * @return {void}
   */
global.ClearPedEnvDirt = function (ped) {
  return Citizen.invokeNative('0x6585d955a68452a5', ped);
};

/**
   * CLEAR_PED_LAST_DAMAGE_BONE
   *
   * @param {number} ped
   * @return {void}
   */
global.ClearPedLastDamageBone = function (ped) {
  return Citizen.invokeNative('0x8ef6b7ac68e2f01b', ped);
};

/**
   * CLEAR_PED_NON_CREATION_AREA
   *
  
   * @return {void}
   */
global.ClearPedNonCreationArea = function () {
  return Citizen.invokeNative('0x2e05208086ba0651');
};

/**
   * CLEAR_PED_WETNESS
   * It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.
   *
   * @param {number} ped
   * @return {void}
   */
global.ClearPedWetness = function (ped) {
  return Citizen.invokeNative('0x9c720776daa43e7e', ped);
};

/**
   * CLEAR_RAGDOLL_BLOCKING_FLAGS
   * flags: see SET_RAGDOLL_BLOCKING_FLAGS
   *
   * @param {number} ped
   * @param {number} flags
   * @return {void}
   */
global.ClearRagdollBlockingFlags = function (ped, flags) {
  return Citizen.invokeNative('0xd86d101fcfd00a4b', ped, flags);
};

/**
   * CLEAR_RELATIONSHIP_BETWEEN_GROUPS
   *
   * @param {number} relationship
   * @param {number} group1
   * @param {number} group2
   * @return {void}
   */
global.ClearRelationshipBetweenGroups = function (relationship, group1, group2) {
  return Citizen.invokeNative('0x5e29243fb56fc6d4', relationship, _ch(group1), _ch(group2));
};

/**
   * CLONE_PED
   *
   * @param {number} ped
   * @param {boolean} isNetwork
   * @param {boolean} bScriptHostPed
   * @param {boolean} copyHeadBlendFlag
   * @return {number}
   */
global.ClonePed = function (ped, isNetwork, bScriptHostPed, copyHeadBlendFlag) {
  return Citizen.invokeNative('0xef29a16337facadb', ped, isNetwork, bScriptHostPed, copyHeadBlendFlag, _r, _ri);
};

/**
   * CLONE_PED_TO_TARGET
   * Copies ped's components and props to targetPed.
   * Can be used to clear anything from a ped by cloning it, including bullet holes.
   *
   * @param {number} ped
   * @param {number} targetPed
   * @return {void}
   */
global.ClonePedToTarget = function (ped, targetPed) {
  return Citizen.invokeNative('0xe952d6431689ad9a', ped, targetPed);
};

/**
   * COMPUTE_SATCHEL_ITEM_FOR_PED_DAMAGE
   *
   * @param {any} p0
   * @param {number} pedAttached
   * @param {number} damageCleanliness
   * @return {boolean}
   */
global.ComputeSatchelItemForPedDamage = function (p0, pedAttached, damageCleanliness) {
  return Citizen.invokeNative('0x9e7738b291706746', p0, pedAttached, damageCleanliness, _r);
};

/**
   * COUNT_PEDS_IN_COMBAT_WITH_TARGET
   *
   * @param {number} ped
   * @param {number} flag
   * @return {number}
   */
global.CountPedsInCombatWithTarget = function (ped, flag) {
  return Citizen.invokeNative('0x5407b7288d0478b7', ped, flag, _r, _ri);
};

/**
   * COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} flag
   * @return {number}
   */
global.CountPedsInCombatWithTargetWithinRadius = function (ped, x, y, z, radius, flag) {
  return Citizen.invokeNative('0x336b3d200ab007cb', ped, _fv(x), _fv(y), _fv(z), _fv(radius), flag, _r, _ri);
};

/**
   * CREATE_GROUP
   * Creates a new ped group.
   * Groups can contain up to 8 peds.
   * 
   * The parameter is unused.
   * 
   * Returns a handle to the created group, or 0 if a group couldn't be created.
   *
   * @param {number} taskAllocator
   * @return {number}
   */
global.CreateGroup = function (taskAllocator) {
  return Citizen.invokeNative('0x90370ebe0fee1a3d', taskAllocator, _r, _ri);
};

/**
   * CREATE_PED
   *
   * @param {number} modelHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} heading
   * @param {boolean} isNetwork
   * @param {boolean} bScriptHostPed
   * @param {boolean} p7
   * @param {boolean} p8
   * @return {number}
   */
global.CreatePed = function (modelHash, x, y, z, heading, isNetwork, bScriptHostPed, p7, p8) {
  return Citizen.invokeNative('0xd49f9b0955c367de', _ch(modelHash), _fv(x), _fv(y), _fv(z), _fv(heading), isNetwork, bScriptHostPed, p7, p8, _r, _ri);
};

/**
   * CREATE_PED_INSIDE_VEHICLE
   * seatIndex:
   * enum eVehicleSeat
   * {
   *   VS_ANY_PASSENGER = -2,
   *   VS_DRIVER,
   *   VS_FRONT_RIGHT,
   *   VS_BACK_LEFT,
   *   VS_BACK_RIGHT,
   *   VS_EXTRA_LEFT_1,
   *   VS_EXTRA_RIGHT_1,
   *   VS_EXTRA_LEFT_2,
   *   VS_EXTRA_RIGHT_2,
   *   VS_EXTRA_LEFT_3,
   *   VS_EXTRA_RIGHT_3,
   *   VS_NUM_SEATS
   * };
   *
   * @param {number} vehicle
   * @param {number} modelHash
   * @param {number} seatIndex
   * @param {boolean} p3
   * @param {boolean} p4
   * @param {boolean} p5
   * @return {number}
   */
global.CreatePedInsideVehicle = function (vehicle, modelHash, seatIndex, p3, p4, p5) {
  return Citizen.invokeNative('0x7dd959874c1fd534', vehicle, _ch(modelHash), seatIndex, p3, p4, p5, _r, _ri);
};

/**
   * CREATE_PED_ON_MOUNT
   *
   * @param {number} mount
   * @param {number} modelHash
   * @param {number} index
   * @param {boolean} p3
   * @param {boolean} p4
   * @param {boolean} p5
   * @param {boolean} p6
   * @return {number}
   */
global.CreatePedOnMount = function (mount, modelHash, index, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xf89aa2bd01fc06b7', mount, _ch(modelHash), index, p3, p4, p5, p6, _r, _ri);
};

/**
   * DELETE_PED
   * Deletes the specified ped, then sets the handle pointed to by the pointer to NULL.
   *
  
   * @return {number}
   */
global.DeletePed = function () {
  return Citizen.invokeNative('0xcc0ef140f99365c5', _i);
};

/**
   * DETACH_CARRIABLE_ENTITY
   *
   * @param {number} entity
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {void}
   */
global.DetachCarriableEntity = function (entity, p1, p2) {
  return Citizen.invokeNative('0xed00d72f81cf7278', entity, p1, p2);
};

/**
   * DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR
   *
   * @param {number} ped
   * @return {void}
   */
global.DisablePedInjuredOnGroundBehaviour = function (ped) {
  return Citizen.invokeNative('0x733c87d4ce22bea2', ped);
};

/**
   * DOES_GROUP_EXIST
   *
   * @param {number} groupId
   * @return {boolean}
   */
global.DoesGroupExist = function (groupId) {
  return Citizen.invokeNative('0x7c6b0c22f9f40bbe', groupId, _r);
};

/**
   * EXPLODE_PED_HEAD
   * Forces the ped to fall back and kills it.
   * 
   * It doesn't really explode the ped's head but it kills the ped
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @return {void}
   */
global.ExplodePedHead = function (ped, weaponHash) {
  return Citizen.invokeNative('0x2d05ced3a38d0f3a', ped, _ch(weaponHash));
};

/**
   * FADE_AND_DESTROY_PED
   *
  
   * @return {number}
   */
global.FadeAndDestroyPed = function () {
  return Citizen.invokeNative('0x7043d0681285ba2d', _i);
};

/**
   * FIND_ALL_ATTACHED_CARRIABLE_ENTITIES
   *
   * @param {number} ped
   * @param {number} itemset
   * @return {void}
   */
global.FindAllAttachedCarriableEntities = function (ped, itemset) {
  return Citizen.invokeNative('0xb5ace8b23a438ec0', ped, itemset);
};

/**
   * FORCE_ALL_HEADING_VALUES_TO_ALIGN
   * Old name: _FREEZE_PED_CAMERA_ROTATION
   *
   * @param {number} ped
   * @return {void}
   */
global.ForceAllHeadingValuesToAlign = function (ped) {
  return Citizen.invokeNative('0xff287323b0e2c69a', ped);
};

/**
   * FORCE_PED_AI_AND_ANIMATION_UPDATE
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {void}
   */
global.ForcePedAiAndAnimationUpdate = function (ped, p1, p2) {
  return Citizen.invokeNative('0x2208438012482a1a', ped, p1, p2);
};

/**
   * FORCE_PED_MOTION_STATE
   * motionStateHash: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CPedMotionStates__eMotionState
   *
   * @param {number} ped
   * @param {number} motionStateHash
   * @param {boolean} p2
   * @param {number} p3
   * @param {boolean} p4
   * @return {boolean}
   */
global.ForcePedMotionState = function (ped, motionStateHash, p2, p3, p4) {
  return Citizen.invokeNative('0xf28965d04f570dca', ped, _ch(motionStateHash), p2, p3, p4, _r);
};

/**
   * GET_ANIM_INITIAL_OFFSET_POSITION
   *
   * @param {string | number} animDict
   * @param {string | number} animName
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} xRot
   * @param {number} yRot
   * @param {number} zRot
   * @param {number} p8
   * @param {number} p9
   * @return {Vector3}
   */
global.GetAnimInitialOffsetPosition = function (animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9) {
  return Citizen.invokeNative('0xbe22b26dd764c040', animDict, animName, _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), _fv(p8), p9, _r, _rv);
};

/**
   * GET_ANIM_INITIAL_OFFSET_ROTATION
   *
   * @param {string | number} animDict
   * @param {string | number} animName
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} xRot
   * @param {number} yRot
   * @param {number} zRot
   * @param {number} p8
   * @param {number} p9
   * @return {Vector3}
   */
global.GetAnimInitialOffsetRotation = function (animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9) {
  return Citizen.invokeNative('0x4b805e6046ee9e47', animDict, animName, _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), _fv(p8), p9, _r, _rv);
};

/**
   * GET_CARRIED_ATTACHED_INFO_FOR_SLOT
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {any}
   */
global.GetCarriedAttachedInfoForSlot = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x608bc6a6aacd5036', p0, p1, p2, p3, _r);
};

/**
   * GET_CLOSEST_PED
   * Gets the closest ped in a radius.
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {boolean} p4
   * @param {boolean} p5
   * @param {boolean} p7
   * @param {boolean} p8
   * @param {boolean} p9
   * @param {number} pedType
   * @return {[boolean, Ped]}
   */
global.GetClosestPed = function (x, y, z, radius, p4, p5, p7, p8, p9, pedType) {
  return Citizen.invokeNative('0xc33ab876a77f8164', _fv(x), _fv(y), _fv(z), _fv(radius), p4, p5, _i, p7, p8, p9, pedType, _r);
};

/**
   * GET_COMBAT_FLOAT
   *
   * @param {number} ped
   * @param {number} combatType
   * @return {number}
   */
global.GetCombatFloat = function (ped, combatType) {
  return Citizen.invokeNative('0x52dff8a10508090a', ped, combatType, _r, _rf);
};

/**
   * GET_CURRENT_TARGET_FOR_PED
   *
   * @param {number} ped
   * @return {number}
   */
global.GetCurrentTargetForPed = function (ped) {
  return Citizen.invokeNative('0xcd66fea29400a0b5', ped, _r, _ri);
};

/**
   * GET_DEAD_PED_PICKUP_COORDS
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @return {Vector3}
   */
global.GetDeadPedPickupCoords = function (ped, p1, p2) {
  return Citizen.invokeNative('0xcd5003b097200f36', ped, _fv(p1), _fv(p2), _r, _rv);
};

/**
   * GET_GROUP_SIZE
   *
   * @param {number} groupId
   * @return {[boolean, number]}
   */
global.GetGroupSize = function (groupId) {
  return Citizen.invokeNative('0x8de69fe35ca09a45', groupId, /* actually bool */ _i, _i);
};

/**
   * GET_IS_PED_RESPONDING_TO_NEGATIVE_INTERACTION
   *
   * @param {number} ped
   * @param {number} player
   * @return {boolean}
   */
global.GetIsPedRespondingToNegativeInteraction = function (ped, player) {
  return Citizen.invokeNative('0xa454d234e45bb6e5', ped, player, _r);
};

/**
   * GET_IS_PED_RESPONDING_TO_POSITIVE_INTERACTION
   *
   * @param {number} ped
   * @param {number} player
   * @return {boolean}
   */
global.GetIsPedRespondingToPositiveInteraction = function (ped, player) {
  return Citizen.invokeNative('0x9337183fda2e9035', ped, player, _r);
};

/**
   * GET_JACK_TARGET
   *
   * @param {number} ped
   * @return {number}
   */
global.GetJackTarget = function (ped) {
  return Citizen.invokeNative('0x5486a79d9fbd342d', ped, _r, _ri);
};

/**
   * GET_LOOTING_PICKUP_TARGET_ENTITY
   *
   * @param {number} ped
   * @return {number}
   */
global.GetLootingPickupTargetEntity = function (ped) {
  return Citizen.invokeNative('0x14169fa823679e41', ped, _r, _ri);
};

/**
   * GET_MELEE_TARGET_FOR_PED
   *
   * @param {number} ped
   * @return {number}
   */
global.GetMeleeTargetForPed = function (ped) {
  return Citizen.invokeNative('0x18a3e9ee1297fd39', ped, _r, _ri);
};

/**
   * GET_META_PED_ASSET_GUIDS
   * This is a way to get what drawables a ped has equipped
   * Example: you are able to tell if the ped has the drawable PLAYER_ZERO_HAT_017 attached
   * Note: this works with non shop components, direct .ydd files.
   *
   * @param {number} ped
   * @param {number} index
   * @return {[boolean, number, number, number, number]}
   */
global.GetMetaPedAssetGuids = function (ped, index) {
  return Citizen.invokeNative('0xa9c28516a6dc9d56', ped, index, _i, _i, _i, _i, _r);
};

/**
   * GET_META_PED_ASSET_TINT
   *
   * @param {number} ped
   * @param {number} index
   * @return {[boolean, number, number, number, number]}
   */
global.GetMetaPedAssetTint = function (ped, index) {
  return Citizen.invokeNative('0xe7998fec53a33bbe', ped, index, _i, _i, _i, _i, _r);
};

/**
   * GET_MOUNT
   *
   * @param {number} ped
   * @return {number}
   */
global.GetMount = function (ped) {
  return Citizen.invokeNative('0xe7e11b8dcbed1058', ped, _r, _ri);
};

/**
   * GET_NUM_META_PED_OUTFITS
   *
   * @param {number} ped
   * @return {number}
   */
global.GetNumMetaPedOutfits = function (ped) {
  return Citizen.invokeNative('0x10c70a515bc03707', ped, _r, _ri);
};

/**
   * GET_PEDS_JACKER
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedsJacker = function (ped) {
  return Citizen.invokeNative('0x9b128dc36c1e04cf', ped, _r, _ri);
};

/**
   * GET_PED_ACCURACY
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedAccuracy = function (ped) {
  return Citizen.invokeNative('0x37f4ad56ecbc0cd6', ped, _r, _ri);
};

/**
   * GET_PED_AS_GROUP_LEADER
   *
   * @param {number} groupId
   * @return {number}
   */
global.GetPedAsGroupLeader = function (groupId) {
  return Citizen.invokeNative('0x5cce68dbd5fe93ec', groupId, _r, _ri);
};

/**
   * GET_PED_AS_GROUP_MEMBER
   *
   * @param {number} groupId
   * @param {number} memberNumber
   * @return {number}
   */
global.GetPedAsGroupMember = function (groupId, memberNumber) {
  return Citizen.invokeNative('0x51455483cf23ed97', groupId, memberNumber, _r, _ri);
};

/**
   * GET_PED_BLACKBOARD_SCRIPT_BOOL
   *
   * @param {number} ped
   * @param {string | number} variableName
   * @return {boolean}
   */
global.GetPedBlackboardScriptBool = function (ped, variableName) {
  return Citizen.invokeNative('0x4912dfe492db98cd', ped, variableName, _r);
};

/**
   * GET_PED_BLACKBOARD_SCRIPT_FLOAT
   *
   * @param {number} ped
   * @param {string | number} variableName
   * @return {number}
   */
global.GetPedBlackboardScriptFloat = function (ped, variableName) {
  return Citizen.invokeNative('0xa29fd00d45311eb7', ped, variableName, _r, _rf);
};

/**
   * GET_PED_BLACKBOARD_SCRIPT_INT
   *
   * @param {number} ped
   * @param {string | number} variableName
   * @return {number}
   */
global.GetPedBlackboardScriptInt = function (ped, variableName) {
  return Citizen.invokeNative('0xb71b91b398f8f067', ped, variableName, _r, _ri);
};

/**
   * GET_PED_BONE_COORDS
   * Gets the position of the specified bone of the specified ped.
   * 
   * ped: The ped to get the position of a bone from.
   * boneId: The ID of the bone to get the position from. This is NOT the index.
   * offsetX: The X-component of the offset to add to the position relative to the bone's rotation.
   * offsetY: The Y-component of the offset to add to the position relative to the bone's rotation.
   * offsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.
   *
   * @param {number} ped
   * @param {number} boneId
   * @param {number} offsetX
   * @param {number} offsetY
   * @param {number} offsetZ
   * @return {Vector3}
   */
global.GetPedBoneCoords = function (ped, boneId, offsetX, offsetY, offsetZ) {
  return Citizen.invokeNative('0x17c07fc640e86b4e', ped, boneId, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _r, _rv);
};

/**
   * GET_PED_BONE_INDEX
   * no bone = -1
   *
   * @param {number} ped
   * @param {number} boneId
   * @return {number}
   */
global.GetPedBoneIndex = function (ped, boneId) {
  return Citizen.invokeNative('0x3f428d08be5aae31', ped, boneId, _r, _ri);
};

/**
   * GET_PED_CAUSE_OF_DEATH
   * Returns the hash of the weapon/model/object that killed the ped.
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedCauseOfDeath = function (ped) {
  return Citizen.invokeNative('0x16ffe42ab2d2dc59', ped, _r, _ri);
};

/**
   * GET_PED_COMBAT_MOVEMENT
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedCombatMovement = function (ped) {
  return Citizen.invokeNative('0xdea92412fcaeb3f5', ped, _r, _ri);
};

/**
   * GET_PED_CONFIG_FLAG
   * flagId: see SET_PED_CONFIG_FLAG
   *
   * @param {number} ped
   * @param {number} flagId
   * @param {boolean} p2
   * @return {boolean}
   */
global.GetPedConfigFlag = function (ped, flagId, p2) {
  return Citizen.invokeNative('0x7ee53118c892b513', ped, flagId, p2, _r);
};

/**
   * GET_PED_CROUCH_MOVEMENT
   *
   * @param {number} ped
   * @return {boolean}
   */
global.GetPedCrouchMovement = function (ped) {
  return Citizen.invokeNative('0xd5fe956c70ff370b', ped, _r);
};

/**
   * GET_PED_CURRENT_MOVE_BLEND_RATIO
   * Old name: _GET_PED_CURRENT_MOVEMENT_SPEED
   *
   * @param {number} ped
   * @return {[boolean, number, number]}
   */
global.GetPedCurrentMoveBlendRatio = function (ped) {
  return Citizen.invokeNative('0xf60165e1d2c5370b', ped, _f, _f, _r);
};

/**
   * GET_PED_DEFENSIVE_AREA_POSITION
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {Vector3}
   */
global.GetPedDefensiveAreaPosition = function (ped, p1) {
  return Citizen.invokeNative('0x3c06b8786dd94cd1', ped, p1, _r, _rv);
};

/**
   * GET_PED_GRAPPLE_STATE
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedGrappleState = function (ped) {
  return Citizen.invokeNative('0x2311f15d971aa680', ped, _r, _ri);
};

/**
   * GET_PED_GROUP_INDEX
   * Returns the groupId of which the specified ped is a member of.
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedGroupIndex = function (ped) {
  return Citizen.invokeNative('0xf162e133b4e7a675', ped, _r, _ri);
};

/**
   * GET_PED_IS_BEING_GRAPPLED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.GetPedIsBeingGrappled = function (ped) {
  return Citizen.invokeNative('0x3bdfcf25b58b0415', ped, _r);
};

/**
   * GET_PED_IS_DOING_COMBAT_ROLL
   *
   * @param {number} ped
   * @return {boolean}
   */
global.GetPedIsDoingCombatRoll = function (ped) {
  return Citizen.invokeNative('0xc48a9eb0d499b3e5', ped, _r);
};

/**
   * GET_PED_IS_GRAPPLING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.GetPedIsGrappling = function (ped) {
  return Citizen.invokeNative('0x0e99e3bf11bb6367', ped, _r);
};

/**
   * GET_PED_LAST_DAMAGE_BONE
   *
   * @param {number} ped
   * @return {[boolean, number]}
   */
global.GetPedLastDamageBone = function (ped) {
  return Citizen.invokeNative('0xd75960f6bd9ea49c', ped, _i, _r);
};

/**
   * GET_PED_LOOT_STATUS_MP
   * enum ePedLootStatus
   * {
   *   PLS_NONE,
   *   PLS_PRE_LOOT,
   *   PLS_SAMPLING,
   *   PLS_SKINNING
   * };
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedLootStatusMp = function (ped) {
  return Citizen.invokeNative('0xc737697c41628340', ped, _r, _ri);
};

/**
   * GET_PED_MAX_HEALTH
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedMaxHealth = function (ped) {
  return Citizen.invokeNative('0x4700a416e8324ef3', ped, _r, _ri);
};

/**
   * GET_PED_MONEY
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedMoney = function (ped) {
  return Citizen.invokeNative('0x3f69145bba87bae7', ped, _r, _ri);
};

/**
   * GET_PED_MOTION_FOCUS_ENTITY
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedMotionFocusEntity = function (ped) {
  return Citizen.invokeNative('0x243e1b4607040057', ped, _r, _ri);
};

/**
   * GET_PED_NEARBY_PEDS
   *
   * @param {number} ped
   * @param {DataView} sizeAndPeds
   * @param {number} ignoredPedType
   * @param {number} p3
   * @return {number}
   */
global.GetPedNearbyPeds = function (ped, sizeAndPeds, ignoredPedType, p3) {
  return Citizen.invokeNative('0x23f8f5fc7e8c4a6b', ped, sizeAndPeds, ignoredPedType, p3, _r, _ri);
};

/**
   * GET_PED_NEARBY_VEHICLES
   *
   * @param {number} ped
   * @param {DataView} sizeAndVehs
   * @return {number}
   */
global.GetPedNearbyVehicles = function (ped, sizeAndVehs) {
  return Citizen.invokeNative('0xcff869cbfa210d82', ped, sizeAndVehs, _r, _ri);
};

/**
   * GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedRelationshipGroupDefaultHash = function (ped) {
  return Citizen.invokeNative('0x42fdd0f017b1e38e', ped, _r, _ri);
};

/**
   * GET_PED_RELATIONSHIP_GROUP_HASH
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedRelationshipGroupHash = function (ped) {
  return Citizen.invokeNative('0x7dbdd04862d95f04', ped, _r, _ri);
};

/**
   * GET_PED_RESET_FLAG
   *
   * @param {number} ped
   * @param {number} flagId
   * @return {boolean}
   */
global.GetPedResetFlag = function (ped, flagId) {
  return Citizen.invokeNative('0xaf9e59b1b1fbf2a0', ped, flagId, _r);
};

/**
   * GET_PED_SOURCE_OF_DEATH
   * Returns the entity that killed the ped
   * 
   * It is best to check if the Ped is dead before asking for its killer.
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedSourceOfDeath = function (ped) {
  return Citizen.invokeNative('0x93c8b64deb84728c', ped, _r, _ri);
};

/**
   * GET_PED_STEALTH_MOVEMENT
   * Returns whether the entity is in stealth mode
   *
   * @param {number} ped
   * @return {boolean}
   */
global.GetPedStealthMovement = function (ped) {
  return Citizen.invokeNative('0x7c2ac9ca66575fbf', ped, _r);
};

/**
   * GET_PED_TIME_OF_DEATH
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedTimeOfDeath = function (ped) {
  return Citizen.invokeNative('0x1e98817b311ae98a', ped, _r, _ri);
};

/**
   * GET_PED_TO_PLAYER_WEAPON_DAMAGE_MODIFIER
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedToPlayerWeaponDamageModifier = function (ped) {
  return Citizen.invokeNative('0x936e7cad0ae2ee14', ped, _r, _rf);
};

/**
   * GET_PED_TYPE
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedType = function (ped) {
  return Citizen.invokeNative('0xff059e1e4c01e63c', ped, _r, _ri);
};

/**
   * GET_PLAYER_PED_IS_FOLLOWING
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPlayerPedIsFollowing = function (ped) {
  return Citizen.invokeNative('0x6a3975dea89f9a17', ped, _r, _ri);
};

/**
   * GET_RELATIONSHIP_BETWEEN_GROUPS
   *
   * @param {number} group1
   * @param {number} group2
   * @return {number}
   */
global.GetRelationshipBetweenGroups = function (group1, group2) {
  return Citizen.invokeNative('0x9e6b70061662ae5c', _ch(group1), _ch(group2), _r, _ri);
};

/**
   * GET_RELATIONSHIP_BETWEEN_PEDS
   *
   * @param {number} ped1
   * @param {number} ped2
   * @return {number}
   */
global.GetRelationshipBetweenPeds = function (ped1, ped2) {
  return Citizen.invokeNative('0xeba5ad3a0eaf7121', ped1, ped2, _r, _ri);
};

/**
   * GET_SEAT_PED_IS_TRYING_TO_ENTER
   *
   * @param {number} ped
   * @return {number}
   */
global.GetSeatPedIsTryingToEnter = function (ped) {
  return Citizen.invokeNative('0x6f4c85acd641bcd2', ped, _r, _ri);
};

/**
   * GET_SEAT_PED_IS_USING
   *
   * @param {number} ped
   * @return {number}
   */
global.GetSeatPedIsUsing = function (ped) {
  return Citizen.invokeNative('0x4e76cb57222a00e5', ped, _r, _ri);
};

/**
   * GET_TRACKED_PED_PIXELCOUNT
   *
   * @param {number} ped
   * @return {number}
   */
global.GetTrackedPedPixelcount = function (ped) {
  return Citizen.invokeNative('0x511f1a683387c7e2', ped, _r, _ri);
};

/**
   * GET_VEHICLE_PED_IS_ENTERING
   *
   * @param {number} ped
   * @return {number}
   */
global.GetVehiclePedIsEntering = function (ped) {
  return Citizen.invokeNative('0xf92691aed837a5fc', ped, _r, _ri);
};

/**
   * GET_VEHICLE_PED_IS_IN
   * Gets the vehicle the specified Ped is in.
   * 
   * If the Ped is not in a vehicle and includeLastVehicle is true, the vehicle they were last in is returned.
   *
   * @param {number} ped
   * @param {boolean} lastVehicle
   * @return {number}
   */
global.GetVehiclePedIsIn = function (ped, lastVehicle) {
  return Citizen.invokeNative('0x9a9112a0fe9a4713', ped, lastVehicle, _r, _ri);
};

/**
   * GET_VEHICLE_PED_IS_USING
   *
   * @param {number} ped
   * @return {number}
   */
global.GetVehiclePedIsUsing = function (ped) {
  return Citizen.invokeNative('0x6094ad011a2ea87d', ped, _r, _ri);
};

/**
   * GIVE_PED_HASH_SCENARIO_PROP
   *
   * @param {number} ped
   * @param {number} object
   * @param {string | number} conditionalAnim
   * @param {number} scenarioType
   * @param {number} p4
   * @param {boolean} p5
   * @return {boolean}
   */
global.GivePedHashScenarioProp = function (ped, object, conditionalAnim, scenarioType, p4, p5) {
  return Citizen.invokeNative('0x2b02db082258625f', ped, object, conditionalAnim, _ch(scenarioType), _ch(p4), p5, _r);
};

/**
   * HAS_MOTION_TYPE_ASSET_LOADED
   *
   * @param {number} nameHash
   * @param {number} ped
   * @return {boolean}
   */
global.HasMotionTypeAssetLoaded = function (nameHash, ped) {
  return Citizen.invokeNative('0x854bc9b1a1ccd034', _ch(nameHash), ped, _r);
};

/**
   * INIT_PED_DEFAULT_HEALTH
   *
   * @param {number} ped
   * @return {void}
   */
global.InitPedDefaultHealth = function (ped) {
  return Citizen.invokeNative('0x7dd7fb3480d8083e', ped);
};

/**
   * INSTANTLY_FILL_PED_POPULATION
   *
  
   * @return {void}
   */
global.InstantlyFillPedPopulation = function () {
  return Citizen.invokeNative('0x4759cc730f947c81');
};

/**
   * IS_ANIMAL_INTERACTION_POSSIBLE
   *
   * @param {number} ped
   * @param {number} animal
   * @return {boolean}
   */
global.IsAnimalInteractionPossible = function (ped, animal) {
  return Citizen.invokeNative('0xd543d3a8fde4f185', ped, animal, _r);
};

/**
   * IS_ANY_HOSTILE_PED_NEAR_POINT
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @return {boolean}
   */
global.IsAnyHostilePedNearPoint = function (ped, x, y, z, radius) {
  return Citizen.invokeNative('0x68772db2b2526f9f', ped, _fv(x), _fv(y), _fv(z), _fv(radius), _r);
};

/**
   * IS_ANY_PED_NEAR_POINT
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @return {boolean}
   */
global.IsAnyPedNearPoint = function (x, y, z, radius) {
  return Citizen.invokeNative('0x083961498679dc9f', _fv(x), _fv(y), _fv(z), _fv(radius), _r);
};

/**
   * IS_ANY_PED_SHOOTING_IN_AREA
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {boolean} p6
   * @param {boolean} p7
   * @return {boolean}
   */
global.IsAnyPedShootingInArea = function (x1, y1, z1, x2, y2, z2, p6, p7) {
  return Citizen.invokeNative('0xa0d3d71ea1086c55', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p6, p7, _r);
};

/**
   * IS_EVENT_IN_QUEUE
   *
   * @param {number} ped
   * @param {number} eventType
   * @return {boolean}
   */
global.IsEventInQueue = function (ped, eventType) {
  return Citizen.invokeNative('0xc8d523bf5bbd3808', ped, _ch(eventType), _r);
};

/**
   * IS_GROUP_LOCALLY_CONTROLLED
   *
   * @param {number} groupId
   * @return {boolean}
   */
global.IsGroupLocallyControlled = function (groupId) {
  return Citizen.invokeNative('0x909ad9e9a92a10df', groupId, _r);
};

/**
   * IS_INSTANTLY_FILL_PED_POPULATION_FINISHED
   *
  
   * @return {boolean}
   */
global.IsInstantlyFillPedPopulationFinished = function () {
  return Citizen.invokeNative('0x0ee3f0d7feccc54f', _r);
};

/**
   * IS_LOCATION_SPAWN_SAFE
   *
   * @param {number} ped
   * @param {number} p1
   * @return {boolean}
   */
global.IsLocationSpawnSafe = function (ped, p1) {
  return Citizen.invokeNative('0xfb1e7998b8595825', ped, _fv(p1), _r);
};

/**
   * IS_PED_AIMING_FROM_COVER
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedAimingFromCover = function (ped) {
  return Citizen.invokeNative('0x3998b1276a3300e5', ped, _r);
};

/**
   * IS_PED_A_PLAYER
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedAPlayer = function (ped) {
  return Citizen.invokeNative('0x12534c348c6cb68b', ped, _r);
};

/**
   * IS_PED_BEING_DRAGGED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedBeingDragged = function (ped) {
  return Citizen.invokeNative('0xef3a8772f085b4aa', ped, _r);
};

/**
   * IS_PED_BEING_HOGTIED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedBeingHogtied = function (ped) {
  return Citizen.invokeNative('0xd453bb601d4a606e', ped, _r);
};

/**
   * IS_PED_BEING_JACKED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedBeingJacked = function (ped) {
  return Citizen.invokeNative('0x9a497fe2df198913', ped, _r);
};

/**
   * IS_PED_BEING_STEALTH_KILLED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedBeingStealthKilled = function (ped) {
  return Citizen.invokeNative('0x863b23efde9c5df2', ped, _r);
};

/**
   * IS_PED_BEING_STUNNED
   *
   * @param {number} ped
   * @param {number} weaponType
   * @return {boolean}
   */
global.IsPedBeingStunned = function (ped, weaponType) {
  return Citizen.invokeNative('0x4fbacce3b4138ee8', ped, _ch(weaponType), _r);
};

/**
   * IS_PED_CARRYING_SOMETHING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedCarryingSomething = function (ped) {
  return Citizen.invokeNative('0xa911ee21edf69daf', ped, _r);
};

/**
   * IS_PED_CLIMBING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedClimbing = function (ped) {
  return Citizen.invokeNative('0x53e8cb4f48bfe623', ped, _r);
};

/**
   * IS_PED_DEAD_OR_DYING
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {boolean}
   */
global.IsPedDeadOrDying = function (ped, p1) {
  return Citizen.invokeNative('0x3317dedb88c95038', ped, p1, _r);
};

/**
   * IS_PED_DEFENSIVE_AREA_ACTIVE
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {boolean}
   */
global.IsPedDefensiveAreaActive = function (ped, p1) {
  return Citizen.invokeNative('0xba63d9fe45412247', ped, p1, _r);
};

/**
   * IS_PED_DIVING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedDiving = function (ped) {
  return Citizen.invokeNative('0x5527b8246fef9b11', ped, _r);
};

/**
   * IS_PED_ENTERING_ANY_TRANSPORT
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedEnteringAnyTransport = function (ped) {
  return Citizen.invokeNative('0x1d46b417f926d34d', ped, _r);
};

/**
   * IS_PED_EVASIVE_DIVING
   * Presumably returns the Entity that the Ped is currently diving out of the way of.
   *
   * @param {number} ped
   * @param {number} evadingEntity
   * @return {boolean}
   */
global.IsPedEvasiveDiving = function (ped, evadingEntity) {
  return Citizen.invokeNative('0x414641c26e105898', ped, _ii(evadingEntity), _r);
};

/**
   * IS_PED_FACING_PED
   * angle is ped's view cone
   *
   * @param {number} ped
   * @param {number} otherPed
   * @param {number} angle
   * @return {boolean}
   */
global.IsPedFacingPed = function (ped, otherPed, angle) {
  return Citizen.invokeNative('0xd71649db0a545aa3', ped, otherPed, _fv(angle), _r);
};

/**
   * IS_PED_FALLING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedFalling = function (ped) {
  return Citizen.invokeNative('0xfb92a102f1c4dfa3', ped, _r);
};

/**
   * IS_PED_FALLING_OVER
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedFallingOver = function (ped) {
  return Citizen.invokeNative('0x3e592d0486dec0f6', ped, _r);
};

/**
   * IS_PED_FATALLY_INJURED
   * Gets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.
   * If the handle is invalid, the function returns true.
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedFatallyInjured = function (ped) {
  return Citizen.invokeNative('0xd839450756ed5a80', ped, _r);
};

/**
   * IS_PED_FLEEING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedFleeing = function (ped) {
  return Citizen.invokeNative('0xbbcce00b381f8482', ped, _r);
};

/**
   * IS_PED_FULLY_ON_MOUNT
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {boolean}
   */
global.IsPedFullyOnMount = function (ped, p1) {
  return Citizen.invokeNative('0x95cbc65780de7eb1', ped, p1, _r);
};

/**
   * IS_PED_GETTING_INTO_A_VEHICLE
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedGettingIntoAVehicle = function (ped) {
  return Citizen.invokeNative('0xbb062b2b5722478e', ped, _r);
};

/**
   * IS_PED_GOING_INTO_COVER
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedGoingIntoCover = function (ped) {
  return Citizen.invokeNative('0x9f65dbc537e59ad5', ped, _r);
};

/**
   * IS_PED_GROUP_MEMBER
   *
   * @param {number} ped
   * @param {number} groupId
   * @param {boolean} p2
   * @return {boolean}
   */
global.IsPedGroupMember = function (ped, groupId, p2) {
  return Citizen.invokeNative('0x9bb01e3834671191', ped, groupId, p2, _r);
};

/**
   * IS_PED_HANGING_ON_TO_VEHICLE
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedHangingOnToVehicle = function (ped) {
  return Citizen.invokeNative('0x1c86d8aef8254b78', ped, _r);
};

/**
   * IS_PED_HEADING_TOWARDS_POSITION
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p4
   * @return {boolean}
   */
global.IsPedHeadingTowardsPosition = function (ped, x, y, z, p4) {
  return Citizen.invokeNative('0xfcf37a457cb96dc0', ped, _fv(x), _fv(y), _fv(z), _fv(p4), _r);
};

/**
   * IS_PED_HEADTRACKING_ENTITY
   *
   * @param {number} ped
   * @param {number} entity
   * @return {boolean}
   */
global.IsPedHeadtrackingEntity = function (ped, entity) {
  return Citizen.invokeNative('0x813a0a7c9d2e831f', ped, entity, _r);
};

/**
   * IS_PED_HEADTRACKING_PED
   *
   * @param {number} ped1
   * @param {number} ped2
   * @return {boolean}
   */
global.IsPedHeadtrackingPed = function (ped1, ped2) {
  return Citizen.invokeNative('0x5cd3cb88a7f8850d', ped1, ped2, _r);
};

/**
   * IS_PED_HOGTIED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedHogtied = function (ped) {
  return Citizen.invokeNative('0x3aa24ccc0d451379', ped, _r);
};

/**
   * IS_PED_HOGTYING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedHogtying = function (ped) {
  return Citizen.invokeNative('0x42429c674b61238b', ped, _r);
};

/**
   * IS_PED_HUMAN
   * Returns true/false if the ped is/isn't humanoid.
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedHuman = function (ped) {
  return Citizen.invokeNative('0xb980061da992779d', ped, _r);
};

/**
   * IS_PED_INCAPACITATED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedIncapacitated = function (ped) {
  return Citizen.invokeNative('0xb655db7582aec805', ped, _r);
};

/**
   * IS_PED_INJURED
   * Gets a value indicating whether this ped's health is below its injured threshold.
   * 
   * The default threshold is 100.
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedInjured = function (ped) {
  return Citizen.invokeNative('0x84a2dd9ac37c35c1', ped, _r);
};

/**
   * IS_PED_IN_ANY_BOAT
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedInAnyBoat = function (ped) {
  return Citizen.invokeNative('0x2e0e1c2b4f6cb339', ped, _r);
};

/**
   * IS_PED_IN_ANY_HELI
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedInAnyHeli = function (ped) {
  return Citizen.invokeNative('0x298b91ae825e5705', ped, _r);
};

/**
   * IS_PED_IN_ANY_PLANE
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedInAnyPlane = function (ped) {
  return Citizen.invokeNative('0x5fff4cfc74d8fb80', ped, _r);
};

/**
   * IS_PED_IN_ANY_TAXI
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedInAnyTaxi = function (ped) {
  return Citizen.invokeNative('0x6e575d6a898ab852', ped, _r);
};

/**
   * IS_PED_IN_ANY_TRAIN
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedInAnyTrain = function (ped) {
  return Citizen.invokeNative('0x6f972c1ab75a1ed0', ped, _r);
};

/**
   * IS_PED_IN_ANY_VEHICLE
   * Gets a value indicating whether the specified ped is in any vehicle.
   *
   * @param {number} ped
   * @param {boolean} atGetIn
   * @return {boolean}
   */
global.IsPedInAnyVehicle = function (ped, atGetIn) {
  return Citizen.invokeNative('0x997abd671d25ca0b', ped, atGetIn, _r);
};

/**
   * IS_PED_IN_COMBAT
   *
   * @param {number} ped
   * @param {number} target
   * @return {boolean}
   */
global.IsPedInCombat = function (ped, target) {
  return Citizen.invokeNative('0x4859f1fc66a6278e', ped, target, _r);
};

/**
   * IS_PED_IN_COVER
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {boolean}
   */
global.IsPedInCover = function (ped, p1, p2) {
  return Citizen.invokeNative('0x60dfd0691a170b88', ped, p1, p2, _r);
};

/**
   * IS_PED_IN_COVER_FACING_LEFT
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedInCoverFacingLeft = function (ped) {
  return Citizen.invokeNative('0x845333b3150583ab', ped, _r);
};

/**
   * IS_PED_IN_FLYING_VEHICLE
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedInFlyingVehicle = function (ped) {
  return Citizen.invokeNative('0x9134873537fa419c', ped, _r);
};

/**
   * IS_PED_IN_GROUP
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedInGroup = function (ped) {
  return Citizen.invokeNative('0x5891cac5d4acff74', ped, _r);
};

/**
   * IS_PED_IN_MELEE_COMBAT
   * Notes: The function only returns true while the ped is: 
   * A.) Swinging a random melee attack (including pistol-whipping)
   * 
   * B.) Reacting to being hit by a melee attack (including pistol-whipping)
   * 
   * C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter). 
   * 
   * You don't have to be holding the melee-targeting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedInMeleeCombat = function (ped) {
  return Citizen.invokeNative('0x4e209b2c1ead5159', ped, _r);
};

/**
   * IS_PED_IN_MODEL
   *
   * @param {number} ped
   * @param {number} modelHash
   * @return {boolean}
   */
global.IsPedInModel = function (ped, modelHash) {
  return Citizen.invokeNative('0x796d90efb19aa332', ped, _ch(modelHash), _r);
};

/**
   * IS_PED_IN_VEHICLE
   * Gets a value indicating whether the specified ped is in the specified vehicle.
   *
   * @param {number} ped
   * @param {number} vehicle
   * @param {boolean} atGetIn
   * @return {boolean}
   */
global.IsPedInVehicle = function (ped, vehicle, atGetIn) {
  return Citizen.invokeNative('0xa3ee4a07279bb9db', ped, vehicle, atGetIn, _r);
};

/**
   * IS_PED_JACKING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedJacking = function (ped) {
  return Citizen.invokeNative('0x4ae4ff911dfb61da', ped, _r);
};

/**
   * IS_PED_JUMPING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedJumping = function (ped) {
  return Citizen.invokeNative('0xcedabc5900a0bf97', ped, _r);
};

/**
   * IS_PED_LASSOED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedLassoed = function (ped) {
  return Citizen.invokeNative('0x9682f850056c9ade', ped, _r);
};

/**
   * IS_PED_MALE
   * Returns true/false if the ped is/isn't male.
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedMale = function (ped) {
  return Citizen.invokeNative('0x6d9f5faa7488ba46', ped, _r);
};

/**
   * IS_PED_MODEL
   *
   * @param {number} ped
   * @param {number} modelHash
   * @return {boolean}
   */
global.IsPedModel = function (ped, modelHash) {
  return Citizen.invokeNative('0xc9d55b1a358a5bf7', ped, _ch(modelHash), _r);
};

/**
   * IS_PED_ON_FOOT
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedOnFoot = function (ped) {
  return Citizen.invokeNative('0x01fee67db37f59b2', ped, _r);
};

/**
   * IS_PED_ON_MOUNT
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedOnMount = function (ped) {
  return Citizen.invokeNative('0x460bc76a0e10655e', ped, _r);
};

/**
   * IS_PED_ON_SPECIFIC_VEHICLE
   *
   * @param {number} ped
   * @param {number} vehicle
   * @return {boolean}
   */
global.IsPedOnSpecificVehicle = function (ped, vehicle) {
  return Citizen.invokeNative('0xec5f66e459af3bb2', ped, vehicle, _r);
};

/**
   * IS_PED_ON_VEHICLE
   * Gets a value indicating whether the specified ped is on top of any vehicle.
   * 
   * Return 1 when ped is on vehicle.
   * Return 0 when ped is not on a vehicle.
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {boolean}
   */
global.IsPedOnVehicle = function (ped, p1) {
  return Citizen.invokeNative('0x67722aeb798e5fab', ped, p1, _r);
};

/**
   * IS_PED_OPENING_DOOR
   * Returns true if the ped is currently opening a door (CTaskOpenDoor).
   * 
   * Old name: _IS_PED_OPENING_A_DOOR
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedOpeningDoor = function (ped) {
  return Citizen.invokeNative('0x26af0e8e30bd2a2c', ped, _r);
};

/**
   * IS_PED_PERFORMING_MELEE_ACTION
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @return {boolean}
   */
global.IsPedPerformingMeleeAction = function (ped, p1, p2) {
  return Citizen.invokeNative('0xdcca191df9980fd7', ped, p1, _ch(p2), _r);
};

/**
   * IS_PED_PLANTING_BOMB
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedPlantingBomb = function (ped) {
  return Citizen.invokeNative('0xc70b5fae151982d8', ped, _r);
};

/**
   * IS_PED_PRONE
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedProne = function (ped) {
  return Citizen.invokeNative('0xd6a86331a537a7b9', ped, _r);
};

/**
   * IS_PED_RAGDOLL
   * If the ped handle passed through the parenthesis is in a ragdoll state this will return true.
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedRagdoll = function (ped) {
  return Citizen.invokeNative('0x47e4e977581c5b55', ped, _r);
};

/**
   * IS_PED_READY_TO_RENDER
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedReadyToRender = function (ped) {
  return Citizen.invokeNative('0xa0bc8faed8cfeb3c', ped, _r);
};

/**
   * IS_PED_RELOADING
   * Returns whether the specified ped is reloading.
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedReloading = function (ped) {
  return Citizen.invokeNative('0x24b100c68c645951', ped, _r);
};

/**
   * IS_PED_RESPONDING_TO_EVENT
   * eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
   *
   * @param {number} ped
   * @param {number} eventType
   * @return {boolean}
   */
global.IsPedRespondingToEvent = function (ped, eventType) {
  return Citizen.invokeNative('0x625b774d75c87068', ped, _ch(eventType), _r);
};

/**
   * IS_PED_RESPONDING_TO_THREAT
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedRespondingToThreat = function (ped) {
  return Citizen.invokeNative('0x77525bbf433f2cd6', ped, _r);
};

/**
   * IS_PED_RUNNING_MOBILE_PHONE_TASK
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedRunningMobilePhoneTask = function (ped) {
  return Citizen.invokeNative('0x2afe52f782f25775', ped, _r);
};

/**
   * IS_PED_RUNNING_RAGDOLL_TASK
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedRunningRagdollTask = function (ped) {
  return Citizen.invokeNative('0xe3b6097cc25aa69e', ped, _r);
};

/**
   * IS_PED_SHOOTING
   * Returns whether the specified ped is shooting.
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedShooting = function (ped) {
  return Citizen.invokeNative('0x34616828cd07f1a1', ped, _r);
};

/**
   * IS_PED_SITTING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedSitting = function (ped) {
  return Citizen.invokeNative('0x84d0bf2b21862059', ped, _r);
};

/**
   * IS_PED_SITTING_IN_ANY_VEHICLE
   * Detect if ped is in any vehicle
   * [True/False]
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedSittingInAnyVehicle = function (ped) {
  return Citizen.invokeNative('0x826aa586edb9fef8', ped, _r);
};

/**
   * IS_PED_SITTING_IN_VEHICLE
   * Detect if ped is sitting in the specified vehicle
   * [True/False]
   *
   * @param {number} ped
   * @param {number} vehicle
   * @return {boolean}
   */
global.IsPedSittingInVehicle = function (ped, vehicle) {
  return Citizen.invokeNative('0xa808aa1d79230fc2', ped, vehicle, _r);
};

/**
   * IS_PED_STOPPED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedStopped = function (ped) {
  return Citizen.invokeNative('0x530944f6f4b8a214', ped, _r);
};

/**
   * IS_PED_SWIMMING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedSwimming = function (ped) {
  return Citizen.invokeNative('0x9de327631295b4c2', ped, _r);
};

/**
   * IS_PED_SWIMMING_UNDER_WATER
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedSwimmingUnderWater = function (ped) {
  return Citizen.invokeNative('0xc024869a53992f34', ped, _r);
};

/**
   * IS_PED_USING_ACTION_MODE
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedUsingActionMode = function (ped) {
  return Citizen.invokeNative('0x00e73468d085f745', ped, _r);
};

/**
   * IS_PED_USING_ANY_SCENARIO
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedUsingAnyScenario = function (ped) {
  return Citizen.invokeNative('0x57ab4a3080f85143', ped, _r);
};

/**
   * IS_PED_USING_SCENARIO_HASH
   * Equivalent to IS_PED_USING_SCENARIO from V but takes a hash instead of a string.
   *
   * @param {number} ped
   * @param {number} scenarioHash
   * @return {boolean}
   */
global.IsPedUsingScenarioHash = function (ped, scenarioHash) {
  return Citizen.invokeNative('0x34d6ac1157c8226c', ped, _ch(scenarioHash), _r);
};

/**
   * IS_PED_USING_THIS_SCENARIO
   *
   * @param {number} ped
   * @param {number} scenario
   * @return {boolean}
   */
global.IsPedUsingThisScenario = function (ped, scenario) {
  return Citizen.invokeNative('0x9c54041bb66bcf9e', ped, scenario, _r);
};

/**
   * IS_PED_VAULTING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedVaulting = function (ped) {
  return Citizen.invokeNative('0x117c70d1f5730b5e', ped, _r);
};

/**
   * IS_TARGET_PED_IN_PERCEPTION_AREA
   * Returns true if ped is in perception (focused and looking at target ped)
   * Most float params are -1.f in R* Scripts
   *
   * @param {number} ped
   * @param {number} targetPed
   * @param {number} p2
   * @param {number} customDistance
   * @param {number} p4
   * @param {number} p5
   * @return {boolean}
   */
global.IsTargetPedInPerceptionArea = function (ped, targetPed, p2, customDistance, p4, p5) {
  return Citizen.invokeNative('0x06087579e7aa85a9', ped, targetPed, _fv(p2), _fv(customDistance), _fv(p4), _fv(p5), _r);
};

/**
   * IS_TRACKED_PED_VISIBLE
   * Returns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.
   * Target needs to be tracked first, won't work otherwise.
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsTrackedPedVisible = function (ped) {
  return Citizen.invokeNative('0x91c8e617f64188ac', ped, _r);
};

/**
   * KNOCK_OFF_PED_PROP
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {boolean} p2
   * @param {boolean} p3
   * @param {boolean} p4
   * @return {void}
   */
global.KnockOffPedProp = function (ped, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x6fd7816a36615f48', ped, p1, p2, p3, p4);
};

/**
   * KNOCK_PED_OFF_VEHICLE
   *
   * @param {number} ped
   * @return {void}
   */
global.KnockPedOffVehicle = function (ped) {
  return Citizen.invokeNative('0x45bbcba77c29a841', ped);
};

/**
   * PED_COWER_IN_PLACE
   *
   * @param {number} ped
   * @param {number} ped2
   * @return {void}
   */
global.PedCowerInPlace = function (ped, ped2) {
  return Citizen.invokeNative('0xf6e1e9f47a7686f8', ped, ped2);
};

/**
   * PED_COWER_MOVE_TO_POINT
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} ped2
   * @param {number} p5
   * @return {void}
   */
global.PedCowerMoveToPoint = function (ped, p1, p2, p3, ped2, p5) {
  return Citizen.invokeNative('0x1e4c940233fc0c6f', ped, _fv(p1), _fv(p2), _fv(p3), ped2, _fv(p5));
};

/**
   * REGISTER_HATED_TARGETS_AROUND_PED
   * Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).
   *
   * @param {number} ped
   * @param {number} radius
   * @return {void}
   */
global.RegisterHatedTargetsAroundPed = function (ped, radius) {
  return Citizen.invokeNative('0x9222f300bf8354fe', ped, _fv(radius));
};

/**
   * REGISTER_TARGET
   *
   * @param {number} ped
   * @param {number} targetPed
   * @param {boolean} p2
   * @return {void}
   */
global.RegisterTarget = function (ped, targetPed, p2) {
  return Citizen.invokeNative('0x2f25d9aefa34fba2', ped, targetPed, p2);
};

/**
   * RELEASE_PED_VISIBILITY_TRACKING
   *
   * @param {number} ped
   * @return {void}
   */
global.ReleasePedVisibilityTracking = function (ped) {
  return Citizen.invokeNative('0x3088634cf8c819cf', ped);
};

/**
   * REMOVE_GROUP
   *
   * @param {number} groupId
   * @return {void}
   */
global.RemoveGroup = function (groupId) {
  return Citizen.invokeNative('0x8eb2f69076af7053', groupId);
};

/**
   * REMOVE_PED_DEFENSIVE_AREA
   * Ped will no longer get angry when you stay near him.
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.RemovePedDefensiveArea = function (ped, toggle) {
  return Citizen.invokeNative('0x74d4e028107450a9', ped, toggle);
};

/**
   * REMOVE_PED_FROM_GROUP
   *
   * @param {number} ped
   * @return {void}
   */
global.RemovePedFromGroup = function (ped) {
  return Citizen.invokeNative('0xed74007ffb146bc2', ped);
};

/**
   * REMOVE_RELATIONSHIP_GROUP
   *
   * @param {number} groupHash
   * @return {void}
   */
global.RemoveRelationshipGroup = function (groupHash) {
  return Citizen.invokeNative('0xb6ba2444ab393da2', _ch(groupHash));
};

/**
   * REMOVE_SCENARIO_BLOCKING_AREA
   *
   * @param {any} p0
   * @param {boolean} p1
   * @return {void}
   */
global.RemoveScenarioBlockingArea = function (p0, p1) {
  return Citizen.invokeNative('0x31d16b74c6e29d66', p0, p1);
};

/**
   * REMOVE_SCENARIO_BLOCKING_AREAS
   *
  
   * @return {void}
   */
global.RemoveScenarioBlockingAreas = function () {
  return Citizen.invokeNative('0xd37401d78a929a49');
};

/**
   * REMOVE_SHOP_ITEM_FROM_PED_BY_CATEGORY
   * Params: p2, p3 usually 0 in R* Scripts
   *
   * @param {number} ped
   * @param {number} componentCategory
   * @param {number} p2
   * @param {boolean} p3
   * @return {void}
   */
global.RemoveShopItemFromPedByCategory = function (ped, componentCategory, p2, p3) {
  return Citizen.invokeNative('0xdf631e4bce1b1fc4', ped, _ch(componentCategory), p2, p3);
};

/**
   * REMOVE_TAG_FROM_META_PED
   *
   * @param {number} ped
   * @param {number} component
   * @param {number} p2
   * @return {void}
   */
global.RemoveTagFromMetaPed = function (ped, component, p2) {
  return Citizen.invokeNative('0xd710a5007c2ac539', ped, _ch(component), p2);
};

/**
   * REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.RequestPedUseSmallBboxVisibilityTracking = function (ped, p1) {
  return Citizen.invokeNative('0x75ba1cb3b7d40caf', ped, p1);
};

/**
   * REQUEST_PED_VEHICLE_VISIBILITY_TRACKING
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.RequestPedVehicleVisibilityTracking = function (ped, p1) {
  return Citizen.invokeNative('0x2bc338a7b21f4608', ped, p1);
};

/**
   * REQUEST_PED_VISIBILITY_TRACKING
   *
   * @param {number} ped
   * @return {void}
   */
global.RequestPedVisibilityTracking = function (ped) {
  return Citizen.invokeNative('0x7d7a2e43e74e2eb8', ped);
};

/**
   * RESET_AI_WEAPON_DAMAGE_MODIFIER
   *
  
   * @return {void}
   */
global.ResetAiWeaponDamageModifier = function () {
  return Citizen.invokeNative('0xea16670e7ba4743c');
};

/**
   * RESET_GROUP_FORMATION_DEFAULT_SPACING
   *
   * @param {number} groupId
   * @return {void}
   */
global.ResetGroupFormationDefaultSpacing = function (groupId) {
  return Citizen.invokeNative('0x63dab4ccb3273205', groupId);
};

/**
   * RESET_HORSE_AVOIDANCE_LEVEL_TO_DEFAULT
   *
   * @param {number} horse
   * @return {void}
   */
global.ResetHorseAvoidanceLevelToDefault = function (horse) {
  return Citizen.invokeNative('0x2a5afd2b8381a6e1', horse);
};

/**
   * RESET_PED_IN_VEHICLE_CONTEXT
   *
   * @param {number} ped
   * @return {void}
   */
global.ResetPedInVehicleContext = function (ped) {
  return Citizen.invokeNative('0x22ef8ff8778030eb', ped);
};

/**
   * RESET_PED_LAST_VEHICLE
   * Resets the value for the last vehicle driven by the Ped.
   *
   * @param {number} ped
   * @return {void}
   */
global.ResetPedLastVehicle = function (ped) {
  return Citizen.invokeNative('0xbb8de8cf6a8dd8bb', ped);
};

/**
   * RESET_PED_RAGDOLL_TIMER
   *
   * @param {number} ped
   * @return {void}
   */
global.ResetPedRagdollTimer = function (ped) {
  return Citizen.invokeNative('0x9fa4664cf62e47e8', ped);
};

/**
   * RESET_PED_WEAPON_MOVEMENT_CLIPSET
   *
   * @param {number} ped
   * @return {void}
   */
global.ResetPedWeaponMovementClipset = function (ped) {
  return Citizen.invokeNative('0x97b0db5b4aa74e77', ped);
};

/**
   * RESURRECT_PED
   * This function will simply bring the dead ped back to life.
   * 
   * Before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at because theres a chance the ped will fall through the map
   * 
   * Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.
   *
   * @param {number} ped
   * @return {void}
   */
global.ResurrectPed = function (ped) {
  return Citizen.invokeNative('0x71bc8e838b9c6035', ped);
};

/**
   * REVIVE_INJURED_PED
   *
   * @param {number} ped
   * @return {void}
   */
global.ReviveInjuredPed = function (ped) {
  return Citizen.invokeNative('0x8d8acd8388cd99ce', ped);
};

/**
   * SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER
   *
   * @param {number} modifier
   * @return {void}
   */
global.SetAiMeleeWeaponDamageModifier = function (modifier) {
  return Citizen.invokeNative('0x66460deddd417254', _fv(modifier));
};

/**
   * SET_AI_WEAPON_DAMAGE_MODIFIER
   *
   * @param {number} value
   * @return {void}
   */
global.SetAiWeaponDamageModifier = function (value) {
  return Citizen.invokeNative('0x1b1e2a40a65b8521', _fv(value));
};

/**
   * SET_BLOCKING_OF_NON_TEMPORARY_EVENTS
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetBlockingOfNonTemporaryEvents = function (ped, toggle) {
  return Citizen.invokeNative('0x9f8aa94d6d97dbf4', ped, toggle);
};

/**
   * SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME
   *
   * @param {boolean} p0
   * @return {void}
   */
global.SetBlockingOfNonTemporaryEventsForAmbientPedsThisFrame = function (p0) {
  return Citizen.invokeNative('0x9911f4a24485f653', p0);
};

/**
   * SET_COMBAT_FLOAT
   * combatType can be between 0-14. See GET_COMBAT_FLOAT below for a list of possible parameters.
   * https://github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_FLOATS 
   * https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eCombatAttributeFloats
   *
   * @param {number} ped
   * @param {number} combatType
   * @param {number} newValue
   * @return {void}
   */
global.SetCombatFloat = function (ped, combatType, newValue) {
  return Citizen.invokeNative('0xff41b4b141ed981c', ped, combatType, _fv(newValue));
};

/**
   * SET_CREATE_RANDOM_COPS
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetCreateRandomCops = function (toggle) {
  return Citizen.invokeNative('0x102e68b2024d536d', toggle);
};

/**
   * SET_ENABLE_BOUND_ANKLES
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetEnableBoundAnkles = function (ped, toggle) {
  return Citizen.invokeNative('0xc52e0f855c58fc2e', ped, toggle);
};

/**
   * SET_ENABLE_HANDCUFFS
   * Ped can not pull out a weapon when true
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {void}
   */
global.SetEnableHandcuffs = function (ped, p1, p2) {
  return Citizen.invokeNative('0xdf1af8b5d56542fa', ped, p1, p2);
};

/**
   * SET_FACIAL_IDLE_ANIM_OVERRIDE
   *
   * @param {number} ped
   * @param {string | number} animName
   * @param {string | number} animDict
   * @return {void}
   */
global.SetFacialIdleAnimOverride = function (ped, animName, animDict) {
  return Citizen.invokeNative('0xffc24b988b938b38', ped, animName, animDict);
};

/**
   * SET_FORMATION_POSITIONS_TARGET_RADIUS
   *
   * @param {number} groupId
   * @param {number} radius
   * @return {boolean}
   */
global.SetFormationPositionsTargetRadius = function (groupId, radius) {
  return Citizen.invokeNative('0x7cc7d3b7af7fb71f', groupId, _fv(radius), _r);
};

/**
   * SET_GROUP_FORMATION
   * eFormationType
   * 
   * 0: Default
   * 1: Circle Around Leader
   * 2: Alternative Circle Around Leader
   * 3: Line, with Leader at center
   *
   * @param {number} groupId
   * @param {number} formationType
   * @return {void}
   */
global.SetGroupFormation = function (groupId, formationType) {
  return Citizen.invokeNative('0xce2f5fc3af7e8c1e', groupId, formationType);
};

/**
   * SET_GROUP_FORMATION_SPACING
   *
   * @param {number} groupId
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @return {void}
   */
global.SetGroupFormationSpacing = function (groupId, p1, p2, p3) {
  return Citizen.invokeNative('0x1d9d45004c28c916', groupId, _fv(p1), _fv(p2), _fv(p3));
};

/**
   * SET_GROUP_SEPARATION_RANGE
   * Sets the range at which members will automatically leave the group.
   *
   * @param {number} groupId
   * @param {number} separationRange
   * @return {void}
   */
global.SetGroupSeparationRange = function (groupId, separationRange) {
  return Citizen.invokeNative('0x4102c7858cfee4e4', groupId, _fv(separationRange));
};

/**
   * SET_HORSE_AVOIDANCE_LEVEL
   * -1 - HORSE_ASSIST__NO_CHANGE
   *  0 - HORSE_ASSIST__MANUAL
   *  1 - HORSE_ASSIST__SEMIASSIST
   *  2 - HORSE_ASSIST__FULLASSIST
   *
   * @param {number} horse
   * @param {number} avoidanceLevel
   * @return {void}
   */
global.SetHorseAvoidanceLevel = function (horse, avoidanceLevel) {
  return Citizen.invokeNative('0xddcf6fea5d7acc17', horse, avoidanceLevel);
};

/**
   * SET_IK_TARGET
   *
   * @param {number} ped
   * @param {number} ikIndex
   * @param {number} entityLookAt
   * @param {number} boneLookAt
   * @param {number} offsetX
   * @param {number} offsetY
   * @param {number} offsetZ
   * @param {any} p7
   * @param {number} blendInDuration
   * @param {number} blendOutDuration
   * @return {void}
   */
global.SetIkTarget = function (ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, p7, blendInDuration, blendOutDuration) {
  return Citizen.invokeNative('0xc32779c16fceecd9', ped, ikIndex, entityLookAt, boneLookAt, _fv(offsetX), _fv(offsetY), _fv(offsetZ), p7, blendInDuration, blendOutDuration);
};

/**
   * SET_LOOTING_FLAG
   * https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CLootingFlags__Flags
   * https://github.com/femga/rdr3_discoveries/tree/master/AI/LOOTING_FLAGS
   * 
   * lootFlag:
   * enum eLootFlag
   * {
   *   LOOT_FLAG_IS_CRITICAL_LOOT_TARGET = 7,
   *   LOOT_FLAG_IGNORE_WATER_CHECKS = 8,
   *   LOOT_FLAG_ANIMAL_FLAGGED_FOR_TAGGING = 23,
   * };
   *
   * @param {number} ped
   * @param {number} lootFlag
   * @param {boolean} enabled
   * @return {void}
   */
global.SetLootingFlag = function (ped, lootFlag, enabled) {
  return Citizen.invokeNative('0x6569f31a01b4c097', ped, lootFlag, enabled);
};

/**
   * SET_PAUSE_PED_WRITHE_BLEEDOUT
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPausePedWritheBleedout = function (ped, toggle) {
  return Citizen.invokeNative('0x925a160133003ac6', ped, toggle);
};

/**
   * SET_PED_ACCURACY
   * accuracy = 0-100, 100 being perfectly accurate
   *
   * @param {number} ped
   * @param {number} accuracy
   * @return {void}
   */
global.SetPedAccuracy = function (ped, accuracy) {
  return Citizen.invokeNative('0x7aefb85c1d49deb6', ped, accuracy);
};

/**
   * SET_PED_AS_COP
   * Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. Toggling ped as "false" has no effect; you must change p0's ped model to disable the effect.
   * toggle = bSetRelGroup
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedAsCop = function (ped, toggle) {
  return Citizen.invokeNative('0xbb03c38dd3fb7ffd', ped, toggle);
};

/**
   * SET_PED_AS_GROUP_LEADER
   *
   * @param {number} ped
   * @param {number} groupId
   * @param {boolean} p2
   * @return {void}
   */
global.SetPedAsGroupLeader = function (ped, groupId, p2) {
  return Citizen.invokeNative('0x2a7819605465fbce', ped, groupId, p2);
};

/**
   * SET_PED_AS_GROUP_MEMBER
   *
   * @param {number} ped
   * @param {number} groupId
   * @return {void}
   */
global.SetPedAsGroupMember = function (ped, groupId) {
  return Citizen.invokeNative('0x9f3480fe65db31b5', ped, groupId);
};

/**
   * SET_PED_CAN_ARM_IK
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedCanArmIk = function (ped, toggle) {
  return Citizen.invokeNative('0x6c3b4d6d13b4c841', ped, toggle);
};

/**
   * SET_PED_CAN_BE_INCAPACITATED
   * When set on a player ped, its just like when you die in RDO
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedCanBeIncapacitated = function (ped, toggle) {
  return Citizen.invokeNative('0x5240864e847c691c', ped, toggle);
};

/**
   * SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE
   * state:
   * enum eKnockOffVehicle
   * {
   *   KNOCKOFFVEHICLE_DEFAULT,
   *   KNOCKOFFVEHICLE_NEVER,
   *   KNOCKOFFVEHICLE_EASY,
   *   KNOCKOFFVEHICLE_HARD
   * };
   *
   * @param {number} ped
   * @param {number} state
   * @return {void}
   */
global.SetPedCanBeKnockedOffVehicle = function (ped, state) {
  return Citizen.invokeNative('0x7a6535691b477c48', ped, state);
};

/**
   * SET_PED_CAN_BE_TARGETTED
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedCanBeTargetted = function (ped, toggle) {
  return Citizen.invokeNative('0x63f58f7c80513aad', ped, toggle);
};

/**
   * SET_PED_CAN_BE_TARGETTED_BY_PLAYER
   *
   * @param {number} ped
   * @param {number} player
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedCanBeTargettedByPlayer = function (ped, player, toggle) {
  return Citizen.invokeNative('0x66b57b72e0836a76', ped, player, toggle);
};

/**
   * SET_PED_CAN_BE_TARGETTED_BY_TEAM
   *
   * @param {number} ped
   * @param {number} team
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedCanBeTargettedByTeam = function (ped, team, toggle) {
  return Citizen.invokeNative('0xbf1ca77833e58f2c', ped, team, toggle);
};

/**
   * SET_PED_CAN_HEAD_IK
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedCanHeadIk = function (ped, toggle) {
  return Citizen.invokeNative('0xc11c18092c5530dc', ped, toggle);
};

/**
   * SET_PED_CAN_LEG_IK
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedCanLegIk = function (ped, toggle) {
  return Citizen.invokeNative('0x73518ece2485412b', ped, toggle);
};

/**
   * SET_PED_CAN_PLAY_AMBIENT_ANIMS
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedCanPlayAmbientAnims = function (ped, toggle) {
  return Citizen.invokeNative('0x6373d1349925a70e', ped, toggle);
};

/**
   * SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedCanPlayAmbientBaseAnims = function (ped, toggle) {
  return Citizen.invokeNative('0x0eb0585d15254740', ped, toggle);
};

/**
   * SET_PED_CAN_PLAY_GESTURE_ANIMS
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.SetPedCanPlayGestureAnims = function (ped, p1, p2) {
  return Citizen.invokeNative('0xbaf20c5432058024', ped, p1, p2);
};

/**
   * SET_PED_CAN_RAGDOLL
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedCanRagdoll = function (ped, toggle) {
  return Citizen.invokeNative('0xb128377056a54e2a', ped, toggle);
};

/**
   * SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedCanRagdollFromPlayerImpact = function (ped, toggle) {
  return Citizen.invokeNative('0xdf993ee5e90aba25', ped, toggle);
};

/**
   * SET_PED_CAN_TELEPORT_TO_GROUP_LEADER
   * This only will teleport the ped to the group leader if the group leader teleports (sets coords).
   * 
   * Only works in singleplayer
   *
   * @param {number} pedHandle
   * @param {number} groupId
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedCanTeleportToGroupLeader = function (pedHandle, groupId, toggle) {
  return Citizen.invokeNative('0x2e2f4240b3f24647', pedHandle, groupId, toggle);
};

/**
   * SET_PED_CAN_TORSO_IK
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedCanTorsoIk = function (ped, toggle) {
  return Citizen.invokeNative('0xf2b7106d37947ce0', ped, toggle);
};

/**
   * SET_PED_CAN_TORSO_REACT_IK
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedCanTorsoReactIk = function (ped, toggle) {
  return Citizen.invokeNative('0xf5846edb26a98a24', ped, toggle);
};

/**
   * SET_PED_CAN_TORSO_VEHICLE_IK
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedCanTorsoVehicleIk = function (ped, toggle) {
  return Citizen.invokeNative('0x6647c5f6f5792496', ped, toggle);
};

/**
   * SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedCanUseAutoConversationLookat = function (ped, toggle) {
  return Citizen.invokeNative('0xec4686ec06434678', ped, toggle);
};

/**
   * SET_PED_CAPSULE
   * Overrides the ped's collision capsule radius for the current tick.
   * Must be called every tick to be effective.
   * 
   * Setting this to 0.001 will allow warping through some objects.
   *
   * @param {number} ped
   * @param {number} value
   * @return {void}
   */
global.SetPedCapsule = function (ped, value) {
  return Citizen.invokeNative('0x364df566ec833de2', ped, _fv(value));
};

/**
   * SET_PED_CLOTH_PIN_FRAMES
   * Old name: SET_PED_CLOTH_PACKAGE_INDEX
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.SetPedClothPinFrames = function (ped, p1) {
  return Citizen.invokeNative('0x78c4e9961db3eb5b', ped, p1);
};

/**
   * SET_PED_COMBAT_ABILITY
   * abilityLevel:
   * enum eCombatAbilityLevel
   * {
   *   CAL_POOR,
   *   CAL_AVERAGE,
   *   CAL_PROFESSIONAL
   * };
   *
   * @param {number} ped
   * @param {number} abilityLevel
   * @return {void}
   */
global.SetPedCombatAbility = function (ped, abilityLevel) {
  return Citizen.invokeNative('0xc7622c0d36b2fda8', ped, abilityLevel);
};

/**
   * SET_PED_COMBAT_ATTRIBUTES
   * attributeIndex: https://alloc8or.re/rdr3/doc/enums/eCombatAttribute.txt
   * https://github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_ATTRIBUTES
   *
   * @param {number} ped
   * @param {number} attributeIndex
   * @param {boolean} enabled
   * @return {void}
   */
global.SetPedCombatAttributes = function (ped, attributeIndex, enabled) {
  return Citizen.invokeNative('0x9f7794730795e019', ped, attributeIndex, enabled);
};

/**
   * SET_PED_COMBAT_MOVEMENT
   * 0 - Stationary (Will just stand in place)
   * 1 - Defensive (Will try to find cover and very likely to blind fire)
   * 2 - Offensive (Will attempt to charge at enemy but take cover as well)
   * 3 - Suicidal Offensive (Will try to flank enemy in a suicidal attack)
   *
   * @param {number} ped
   * @param {number} combatMovement
   * @return {void}
   */
global.SetPedCombatMovement = function (ped, combatMovement) {
  return Citizen.invokeNative('0x4d9ca1009afbd057', ped, combatMovement);
};

/**
   * SET_PED_COMBAT_RANGE
   * range:
   * enum eCombatRange
   * {
   *   CR_NEAR,
   *   CR_MEDIUM,
   *   CR_FAR,
   *   CR_VERY_FAR
   * };
   *
   * @param {number} ped
   * @param {number} range
   * @return {void}
   */
global.SetPedCombatRange = function (ped, range) {
  return Citizen.invokeNative('0x3c606747b23e497b', ped, range);
};

/**
   * SET_PED_CONFIG_FLAG
   * flagId: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePedScriptConfigFlags
   * https://alloc8or.re/rdr3/doc/enums/ePedScriptConfigFlags.txt
   * https://github.com/femga/rdr3_discoveries/tree/master/AI/CPED_CONFIG_FLAGS
   *
   * @param {number} ped
   * @param {number} flagId
   * @param {boolean} value
   * @return {void}
   */
global.SetPedConfigFlag = function (ped, flagId, value) {
  return Citizen.invokeNative('0x1913fe4cbf41c463', ped, flagId, value);
};

/**
   * SET_PED_DEFENSIVE_AREA_DIRECTION
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {boolean} p4
   * @return {void}
   */
global.SetPedDefensiveAreaDirection = function (ped, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x413c6c763a4affad', ped, _fv(p1), _fv(p2), _fv(p3), p4);
};

/**
   * SET_PED_DEFENSIVE_AREA_VOLUME
   *
   * @param {number} ped
   * @param {number} volume
   * @param {boolean} p2
   * @param {boolean} p3
   * @param {boolean} p4
   * @return {void}
   */
global.SetPedDefensiveAreaVolume = function (ped, volume, p2, p3, p4) {
  return Citizen.invokeNative('0xfc3db99c8144cd81', ped, volume, p2, p3, p4);
};

/**
   * SET_PED_DESIRED_HEADING
   *
   * @param {number} ped
   * @param {number} heading
   * @return {void}
   */
global.SetPedDesiredHeading = function (ped, heading) {
  return Citizen.invokeNative('0xaa5a7ece2aa8fe70', ped, _fv(heading));
};

/**
   * SET_PED_FIRING_PATTERN
   * Used in various R* MP & SP Scripts
   *
   * @param {number} ped
   * @param {number} patternHash
   * @return {void}
   */
global.SetPedFiringPattern = function (ped, patternHash) {
  return Citizen.invokeNative('0x9ac577f5a12ad8a9', ped, _ch(patternHash));
};

/**
   * SET_PED_FLEE_ATTRIBUTES
   * https://github.com/femga/rdr3_discoveries/tree/master/AI/FLEE_ATTRIBUTES
   * 
   * attributeFlags:
   * enum eFleeAttribute
   * {
   *   FA_FORCE_EXIT_VEHICLE = (1 << 16),
   *   FA_DISABLE_MOUNT_USAGE = (1 << 20),
   *   FA_DISABLE_ENTER_VEHICLES = (1 << 22),
   * };
   *
   * @param {number} ped
   * @param {number} attributeFlags
   * @param {boolean} enable
   * @return {void}
   */
global.SetPedFleeAttributes = function (ped, attributeFlags, enable) {
  return Citizen.invokeNative('0x70a2d1137c8ed7c9', ped, attributeFlags, enable);
};

/**
   * SET_PED_GESTURE_GROUP
   *
   * @param {number} ped
   * @param {string | number} gesture
   * @param {number} p2
   * @return {void}
   */
global.SetPedGestureGroup = function (ped, gesture, p2) {
  return Citizen.invokeNative('0xddf803377f94aaa8', ped, gesture, p2);
};

/**
   * SET_PED_GRAVITY
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedGravity = function (ped, toggle) {
  return Citizen.invokeNative('0x9ff447b6b6ad960a', ped, toggle);
};

/**
   * SET_PED_GROUP_MEMBER_PASSENGER_INDEX
   *
   * @param {number} ped
   * @param {number} index
   * @return {void}
   */
global.SetPedGroupMemberPassengerIndex = function (ped, index) {
  return Citizen.invokeNative('0x0bddb8d9ec6bcf3c', ped, index);
};

/**
   * SET_PED_HEARING_RANGE
   *
   * @param {number} ped
   * @param {number} value
   * @return {void}
   */
global.SetPedHearingRange = function (ped, value) {
  return Citizen.invokeNative('0x33a8f7f7d5f7f33c', ped, _fv(value));
};

/**
   * SET_PED_HIGHLY_PERCEPTIVE
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedHighlyPerceptive = function (ped, toggle) {
  return Citizen.invokeNative('0x52d59ab61ddc05dd', ped, toggle);
};

/**
   * SET_PED_ID_RANGE
   *
   * @param {number} ped
   * @param {number} value
   * @return {void}
   */
global.SetPedIdRange = function (ped, value) {
  return Citizen.invokeNative('0xf107e836a70dce05', ped, _fv(value));
};

/**
   * SET_PED_INJURED_ON_GROUND_BEHAVIOUR
   *
   * @param {number} ped
   * @param {number} unk
   * @return {void}
   */
global.SetPedInjuredOnGroundBehaviour = function (ped, unk) {
  return Citizen.invokeNative('0xec4b4b3b9908052a', ped, _fv(unk));
};

/**
   * SET_PED_INTO_VEHICLE
   * Ped: The ped to warp.
   * vehicle: The vehicle to warp the ped into.
   * seatIndex: see CREATE_PED_INSIDE_VEHICLE
   *
   * @param {number} ped
   * @param {number} vehicle
   * @param {number} seatIndex
   * @return {void}
   */
global.SetPedIntoVehicle = function (ped, vehicle, seatIndex) {
  return Citizen.invokeNative('0xf75b0d629e1c063d', ped, vehicle, seatIndex);
};

/**
   * SET_PED_KEEP_TASK
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedKeepTask = function (ped, toggle) {
  return Citizen.invokeNative('0x971d38760fbc02ef', ped, toggle);
};

/**
   * SET_PED_LASSO_HOGTIE_FLAG
   *
   * @param {number} ped
   * @param {number} flagId
   * @param {boolean} value
   * @return {void}
   */
global.SetPedLassoHogtieFlag = function (ped, flagId, value) {
  return Citizen.invokeNative('0xae6004120c18df97', ped, flagId, value);
};

/**
   * SET_PED_LEG_IK_MODE
   *
   * @param {number} ped
   * @param {number} mode
   * @return {void}
   */
global.SetPedLegIkMode = function (ped, mode) {
  return Citizen.invokeNative('0xc396f5b86ff9febd', ped, mode);
};

/**
   * SET_PED_LOD_MULTIPLIER
   *
   * @param {number} ped
   * @param {number} multiplier
   * @return {void}
   */
global.SetPedLodMultiplier = function (ped, multiplier) {
  return Citizen.invokeNative('0xdc2c5c242aac342b', ped, _fv(multiplier));
};

/**
   * SET_PED_MAX_HEALTH
   * Sets the maximum health of a ped.
   *
   * @param {number} ped
   * @param {number} value
   * @return {void}
   */
global.SetPedMaxHealth = function (ped, value) {
  return Citizen.invokeNative('0xf5f6378c4f3419d3', ped, value);
};

/**
   * SET_PED_MAX_MOVE_BLEND_RATIO
   *
   * @param {number} ped
   * @param {number} value
   * @return {void}
   */
global.SetPedMaxMoveBlendRatio = function (ped, value) {
  return Citizen.invokeNative('0x433083750c5e064a', ped, _fv(value));
};

/**
   * SET_PED_MAX_TIME_IN_WATER
   *
   * @param {number} ped
   * @param {number} value
   * @return {void}
   */
global.SetPedMaxTimeInWater = function (ped, value) {
  return Citizen.invokeNative('0x43c851690662113d', ped, _fv(value));
};

/**
   * SET_PED_MAX_TIME_UNDERWATER
   *
   * @param {number} ped
   * @param {number} value
   * @return {void}
   */
global.SetPedMaxTimeUnderwater = function (ped, value) {
  return Citizen.invokeNative('0x6ba428c528d9e522', ped, _fv(value));
};

/**
   * SET_PED_MIN_MOVE_BLEND_RATIO
   *
   * @param {number} ped
   * @param {number} value
   * @return {void}
   */
global.SetPedMinMoveBlendRatio = function (ped, value) {
  return Citizen.invokeNative('0x01a898d26e2333dd', ped, _fv(value));
};

/**
   * SET_PED_MODEL_IS_SUPPRESSED
   *
   * @param {number} model
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedModelIsSuppressed = function (model, toggle) {
  return Citizen.invokeNative('0xe163a4bce4de6f11', _ch(model), toggle);
};

/**
   * SET_PED_MONEY
   *
   * @param {number} ped
   * @param {number} amount
   * @return {void}
   */
global.SetPedMoney = function (ped, amount) {
  return Citizen.invokeNative('0xa9c8960e8684c1b5', ped, amount);
};

/**
   * SET_PED_MOVE_ANIMS_BLEND_OUT
   *
   * @param {number} ped
   * @return {void}
   */
global.SetPedMoveAnimsBlendOut = function (ped) {
  return Citizen.invokeNative('0x9e8c908f41584ecd', ped);
};

/**
   * SET_PED_MOVE_RATE_OVERRIDE
   * Min: 0.0f
   * Max: 1.15f
   *
   * @param {number} ped
   * @param {number} value
   * @return {void}
   */
global.SetPedMoveRateOverride = function (ped, value) {
  return Citizen.invokeNative('0x085bf80fa50a39d1', ped, _fv(value));
};

/**
   * SET_PED_NAME_DEBUG
   * nullsub, doesn't do anything
   *
   * @param {number} ped
   * @param {string | number} name
   * @return {void}
   */
global.SetPedNameDebug = function (ped, name) {
  return Citizen.invokeNative('0x98efa132a4117be1', ped, name);
};

/**
   * SET_PED_NON_CREATION_AREA
   * The distance between these points, is the diagonal of a box (remember it's 3D).
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @return {void}
   */
global.SetPedNonCreationArea = function (x1, y1, z1, x2, y2, z2) {
  return Citizen.invokeNative('0xee01041d559983ea', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2));
};

/**
   * SET_PED_ONTO_MOUNT
   *
   * @param {number} ped
   * @param {number} mount
   * @param {number} seatIndex
   * @param {boolean} p3
   * @return {void}
   */
global.SetPedOntoMount = function (ped, mount, seatIndex, p3) {
  return Citizen.invokeNative('0x028f76b6e78246eb', ped, mount, seatIndex, p3);
};

/**
   * SET_PED_OWNS_ANIMAL
   *
   * @param {number} ped
   * @param {number} animal
   * @param {boolean} p2
   * @return {void}
   */
global.SetPedOwnsAnimal = function (ped, animal, p2) {
  return Citizen.invokeNative('0x931b241409216c1f', ped, animal, p2);
};

/**
   * SET_PED_PANIC_EXIT_SCENARIO
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {boolean}
   */
global.SetPedPanicExitScenario = function (ped, x, y, z) {
  return Citizen.invokeNative('0xfe07ff6495d52e2a', ped, _fv(x), _fv(y), _fv(z), _r);
};

/**
   * SET_PED_RAGDOLL_FORCE_FALL
   *
   * @param {number} ped
   * @return {void}
   */
global.SetPedRagdollForceFall = function (ped) {
  return Citizen.invokeNative('0x01f6594b923b9251', ped);
};

/**
   * SET_PED_RAGDOLL_ON_COLLISION
   * Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @param {boolean} p2
   * @return {void}
   */
global.SetPedRagdollOnCollision = function (ped, toggle, p2) {
  return Citizen.invokeNative('0xf0a4f1bbf4fa7497', ped, toggle, p2);
};

/**
   * SET_PED_RANDOM_COMPONENT_VARIATION
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.SetPedRandomComponentVariation = function (ped, p1) {
  return Citizen.invokeNative('0xc8a9481a01e63c28', ped, p1);
};

/**
   * SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH
   *
   * @param {number} ped
   * @param {number} hash
   * @return {void}
   */
global.SetPedRelationshipGroupDefaultHash = function (ped, hash) {
  return Citizen.invokeNative('0xadb3f206518799e8', ped, _ch(hash));
};

/**
   * SET_PED_RELATIONSHIP_GROUP_HASH
   *
   * @param {number} ped
   * @param {number} relationshipGroup
   * @return {void}
   */
global.SetPedRelationshipGroupHash = function (ped, relationshipGroup) {
  return Citizen.invokeNative('0xc80a74ac829ddd92', ped, _ch(relationshipGroup));
};

/**
   * SET_PED_RESET_FLAG
   * Needs to be called every frame
   * 
   * flagid:https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePedScriptResetFlags
   * https://github.com/femga/rdr3_discoveries/tree/master/AI/CPED_RESET_FLAGS
   *
   * @param {number} ped
   * @param {number} flagId
   * @param {boolean} doReset
   * @return {void}
   */
global.SetPedResetFlag = function (ped, flagId, doReset) {
  return Citizen.invokeNative('0xc1e8a365bf3b29f2', ped, flagId, doReset);
};

/**
   * SET_PED_SEEING_RANGE
   *
   * @param {number} ped
   * @param {number} value
   * @return {void}
   */
global.SetPedSeeingRange = function (ped, value) {
  return Citizen.invokeNative('0xf29cf591c4bf6cee', ped, _fv(value));
};

/**
   * SET_PED_SHOOT_RATE
   * Params: shootRate = 0 - 1000
   *
   * @param {number} ped
   * @param {number} shootRate
   * @return {void}
   */
global.SetPedShootRate = function (ped, shootRate) {
  return Citizen.invokeNative('0x614da022990752dc', ped, shootRate);
};

/**
   * SET_PED_SHOULD_PLAY_COMBAT_SCENARIO_EXIT
   * lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} lookIntensity
   * @return {boolean}
   */
global.SetPedShouldPlayCombatScenarioExit = function (ped, x, y, z, lookIntensity) {
  return Citizen.invokeNative('0x802092b07e3b1eea', ped, _fv(x), _fv(y), _fv(z), lookIntensity, _r);
};

/**
   * SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT
   * Old name: _SET_PED_SHOULD_PLAY_DIRECTED_SCENARIO_EXIT
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {boolean}
   */
global.SetPedShouldPlayDirectedNormalScenarioExit = function (ped, x, y, z) {
  return Citizen.invokeNative('0xec6935ebe0847b90', ped, _fv(x), _fv(y), _fv(z), _r);
};

/**
   * SET_PED_SHOULD_PLAY_EMOTIONAL_SCENARIO_EXIT
   * lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} lookIntensity
   * @param {boolean} p5
   * @return {boolean}
   */
global.SetPedShouldPlayEmotionalScenarioExit = function (ped, x, y, z, lookIntensity, p5) {
  return Citizen.invokeNative('0x62fdad5e01d2dd47', ped, _fv(x), _fv(y), _fv(z), lookIntensity, p5, _r);
};

/**
   * SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
   * lookIntensity:
   * 0 - REACT_LOOK_NONE
   * 1 - REACT_LOOK_LOW
   * 2 - REACT_LOOK_MEDIUM
   * 3 - REACT_LOOK_HIGH
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} lookIntensity
   * @return {boolean}
   */
global.SetPedShouldPlayFleeScenarioExit = function (ped, x, y, z, lookIntensity) {
  return Citizen.invokeNative('0xeeed8fafec331a70', ped, _fv(x), _fv(y), _fv(z), lookIntensity, _r);
};

/**
   * SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT
   *
   * @param {number} ped
   * @return {void}
   */
global.SetPedShouldPlayImmediateScenarioExit = function (ped) {
  return Citizen.invokeNative('0xf1c03a5352243a30', ped);
};

/**
   * SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT
   *
   * @param {number} ped
   * @return {void}
   */
global.SetPedShouldPlayNormalScenarioExit = function (ped) {
  return Citizen.invokeNative('0xa3a9299c4f2adb98', ped);
};

/**
   * SET_PED_SHOULD_PLAY_QUICK_SCENARIO_EXIT
   * lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} lookIntensity
   * @param {boolean} p5
   * @return {boolean}
   */
global.SetPedShouldPlayQuickScenarioExit = function (ped, x, y, z, lookIntensity, p5) {
  return Citizen.invokeNative('0x463803429297117c', ped, _fv(x), _fv(y), _fv(z), lookIntensity, p5, _r);
};

/**
   * SET_PED_SPHERE_DEFENSIVE_AREA
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {boolean} p5
   * @param {boolean} p6
   * @param {boolean} p7
   * @return {void}
   */
global.SetPedSphereDefensiveArea = function (ped, x, y, z, radius, p5, p6, p7) {
  return Citizen.invokeNative('0x9d3151a373974804', ped, _fv(x), _fv(y), _fv(z), _fv(radius), p5, p6, p7);
};

/**
   * SET_PED_STEALTH_MOVEMENT
   * Not implemented.
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.SetPedStealthMovement = function (ped, toggle, p2, p3) {
  return Citizen.invokeNative('0x88cbb5ceb96b7bd2', ped, toggle, p2, p3);
};

/**
   * SET_PED_SWEAT
   *
   * @param {number} ped
   * @param {number} sweat
   * @return {void}
   */
global.SetPedSweat = function (ped, sweat) {
  return Citizen.invokeNative('0x27b0405f59637d1f', ped, _fv(sweat));
};

/**
   * SET_PED_TARGET_LOSS_RESPONSE
   * TLR_ExitTask = 0,
   * TLR_NeverLoseTarget,
   * TLR_SearchForTarget
   *
   * @param {number} ped
   * @param {number} responseType
   * @return {void}
   */
global.SetPedTargetLossResponse = function (ped, responseType) {
  return Citizen.invokeNative('0x0703b9079823da4a', ped, responseType);
};

/**
   * SET_PED_TO_INFORM_RESPECTED_FRIENDS
   *
   * @param {number} ped
   * @param {number} radius
   * @param {number} maxFriends
   * @return {void}
   */
global.SetPedToInformRespectedFriends = function (ped, radius, maxFriends) {
  return Citizen.invokeNative('0x112942c6e708f70b', ped, _fv(radius), maxFriends);
};

/**
   * SET_PED_TO_PLAYER_WEAPON_DAMAGE_MODIFIER
   * Old name: _SET_PED_DAMAGE_MODIFIER
   *
   * @param {number} ped
   * @param {number} damageModifier
   * @return {void}
   */
global.SetPedToPlayerWeaponDamageModifier = function (ped, damageModifier) {
  return Citizen.invokeNative('0xd77ae48611b7b10a', ped, _fv(damageModifier));
};

/**
   * SET_PED_TO_RAGDOLL
   * nmTaskMessageParameterName: See physicstasks.ymt. Search for DraggedByCart or 0xD00820D7 (Used in R* SP Script marston8)
   *
   * @param {number} ped
   * @param {number} timeMin
   * @param {number} timeMax
   * @param {number} ragdollType
   * @param {boolean} abortIfInjured
   * @param {boolean} abortIfDead
   * @param {string | number} nmTaskMessageParameterName
   * @return {boolean}
   */
global.SetPedToRagdoll = function (ped, timeMin, timeMax, ragdollType, abortIfInjured, abortIfDead, nmTaskMessageParameterName) {
  return Citizen.invokeNative('0xae99fb955581844a', ped, timeMin, timeMax, ragdollType, abortIfInjured, abortIfDead, nmTaskMessageParameterName, _r);
};

/**
   * SET_PED_TO_RAGDOLL_WITH_FALL
   *
   * @param {number} ped
   * @param {number} timeMin
   * @param {number} timeMax
   * @param {number} ragdollType
   * @param {number} falldirX
   * @param {number} falldirY
   * @param {number} falldirZ
   * @param {number} p7
   * @param {number} p8
   * @param {number} p9
   * @param {number} p10
   * @param {number} p11
   * @param {number} p12
   * @param {number} p13
   * @return {boolean}
   */
global.SetPedToRagdollWithFall = function (ped, timeMin, timeMax, ragdollType, falldirX, falldirY, falldirZ, p7, p8, p9, p10, p11, p12, p13) {
  return Citizen.invokeNative('0xd76632d99e4966c8', ped, timeMin, timeMax, ragdollType, _fv(falldirX), _fv(falldirY), _fv(falldirZ), _fv(p7), _fv(p8), _fv(p9), _fv(p10), _fv(p11), _fv(p12), _fv(p13), _r);
};

/**
   * SET_PED_USING_ACTION_MODE
   *
   * @param {number} ped
   * @param {boolean} bActionModeEnabled
   * @param {number} p2
   * @param {string | number} action
   * @return {void}
   */
global.SetPedUsingActionMode = function (ped, bActionModeEnabled, p2, action) {
  return Citizen.invokeNative('0xd75accf5e0fb5367', ped, bActionModeEnabled, p2, action);
};

/**
   * SET_PED_VISUAL_FIELD_CENTER_ANGLE
   *
   * @param {number} ped
   * @param {number} angle
   * @return {void}
   */
global.SetPedVisualFieldCenterAngle = function (ped, angle) {
  return Citizen.invokeNative('0x3b6405e8ab34a907', ped, _fv(angle));
};

/**
   * SET_PED_VISUAL_FIELD_MAX_ANGLE
   *
   * @param {number} ped
   * @param {number} value
   * @return {void}
   */
global.SetPedVisualFieldMaxAngle = function (ped, value) {
  return Citizen.invokeNative('0x70793bdca1e854d4', ped, _fv(value));
};

/**
   * SET_PED_VISUAL_FIELD_MIN_ANGLE
   *
   * @param {number} ped
   * @param {number} value
   * @return {void}
   */
global.SetPedVisualFieldMinAngle = function (ped, value) {
  return Citizen.invokeNative('0x2db492222fb21e26', ped, _fv(value));
};

/**
   * SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE
   *
   * @param {number} ped
   * @param {number} range
   * @return {void}
   */
global.SetPedVisualFieldPeripheralRange = function (ped, range) {
  return Citizen.invokeNative('0x9c74b0bc831b753a', ped, _fv(range));
};

/**
   * SET_PED_WETNESS_ENABLED_THIS_FRAME
   * combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function
   *
   * @param {number} ped
   * @return {void}
   */
global.SetPedWetnessEnabledThisFrame = function (ped) {
  return Citizen.invokeNative('0xb5485e4907b53019', ped);
};

/**
   * SET_PED_WETNESS_HEIGHT
   * It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.
   *
   * @param {number} ped
   * @param {number} height
   * @return {void}
   */
global.SetPedWetnessHeight = function (ped, height) {
  return Citizen.invokeNative('0x44cb6447d2571aa0', ped, _fv(height));
};

/**
   * SET_POP_CONTROL_SPHERE_THIS_FRAME
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.SetPopControlSphereThisFrame = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xd8c3be3ee94caf2d', p0, p1, p2, p3, p4);
};

/**
   * SET_RAGDOLL_BLOCKING_FLAGS
   * https://github.com/femga/rdr3_discoveries/tree/master/AI/RAGDOLL_BLOCKING_FLAGS
   * 
   * flags:
   * enum eRagdollBlockingFlags
   * {
   *   RBF_BULLET_IMPACT = (1 << 0),
   *   RBF_VEHICLE_IMPACT = (1 << 1),
   *   RBF_FIRE = (1 << 2),
   *   RBF_ELECTROCUTION = (1 << 3),
   *   RBF_PLAYER_IMPACT = (1 << 4),
   *   RBF_EXPLOSION = (1 << 5),
   *   RBF_IMPACT_OBJECT = (1 << 6),
   *   RBF_MELEE = (1 << 7),
   *   RBF_RUBBER_BULLET = (1 << 8),
   *   RBF_FALLING = (1 << 9),
   *   RBF_WATER_JET = (1 << 10),
   *   RBF_DROWNING = (1 << 11),
   *   RBF_0x9F52E2C4 = (1 << 12),
   *   RBF_PLAYER_BUMP = (1 << 13),
   *   RBF_PLAYER_RAGDOLL_BUMP = (1 << 14),
   *   RBF_PED_RAGDOLL_BUMP = (1 << 15),
   *   RBF_VEHICLE_GRAB = (1 << 16),
   *   RBF_SMOKE_GRENADE = (1 << 17),
   *   RBF_HORSE_BUMP = (1 << 18),
   *   RBF_ACTIVATE_ON_COLLISION = (1 << 19)
   * };
   *
   * @param {number} ped
   * @param {number} flags
   * @return {void}
   */
global.SetRagdollBlockingFlags = function (ped, flags) {
  return Citizen.invokeNative('0x26695ec767728d84', ped, flags);
};

/**
   * SET_RELATIONSHIP_BETWEEN_GROUPS
   *
   * @param {number} relationship
   * @param {number} group1
   * @param {number} group2
   * @return {void}
   */
global.SetRelationshipBetweenGroups = function (relationship, group1, group2) {
  return Citizen.invokeNative('0xbf25eb89375a37ad', relationship, _ch(group1), _ch(group2));
};

/**
   * SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME
   *
   * @param {number} multiplier
   * @return {void}
   */
global.SetScenarioPedDensityMultiplierThisFrame = function (multiplier) {
  return Citizen.invokeNative('0x7a556143a1c03898', _fv(multiplier));
};

/**
   * SPAWNPOINTS_CANCEL_SEARCH
   *
  
   * @return {void}
   */
global.SpawnpointsCancelSearch = function () {
  return Citizen.invokeNative('0xfee4a5459472a9f8');
};

/**
   * SPAWNPOINTS_GET_NUM_SEARCH_RESULTS
   *
  
   * @return {number}
   */
global.SpawnpointsGetNumSearchResults = function () {
  return Citizen.invokeNative('0xa635c11b8c44afc2', _r, _ri);
};

/**
   * SPAWNPOINTS_GET_SEARCH_RESULT
   *
   * @param {number} randomInt
   * @param {DataView} y
   * @return {[number, number]}
   */
global.SpawnpointsGetSearchResult = function (randomInt, y) {
  return Citizen.invokeNative('0x280c7e3ac7f56e90', randomInt, _f, y, _f);
};

/**
   * SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS
   *
   * @param {any} p0
   * @param {DataView} p1
   * @return {void}
   */
global.SpawnpointsGetSearchResultFlags = function (p0, p1) {
  return Citizen.invokeNative('0xb782f8238512bad5', p0, p1);
};

/**
   * SPAWNPOINTS_IS_SEARCH_ACTIVE
   *
  
   * @return {boolean}
   */
global.SpawnpointsIsSearchActive = function () {
  return Citizen.invokeNative('0x3c67506996001f5e', _r);
};

/**
   * SPAWNPOINTS_IS_SEARCH_COMPLETE
   *
  
   * @return {boolean}
   */
global.SpawnpointsIsSearchComplete = function () {
  return Citizen.invokeNative('0xa586fbeb32a53dbb', _r);
};

/**
   * SPAWNPOINTS_IS_SEARCH_FAILED
   *
  
   * @return {boolean}
   */
global.SpawnpointsIsSearchFailed = function () {
  return Citizen.invokeNative('0xf445de8da80a1792', _r);
};

/**
   * SPAWNPOINTS_START_SEARCH
   * Params: p4 = 35.f, duration = 5000 in R* Scripts
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} width
   * @param {number} p4
   * @param {number} spawnpointsFlag
   * @param {number} p6
   * @param {number} duration
   * @param {number} p8
   * @return {void}
   */
global.SpawnpointsStartSearch = function (x, y, z, width, p4, spawnpointsFlag, p6, duration, p8) {
  return Citizen.invokeNative('0x2df9038c90ad5264', _fv(x), _fv(y), _fv(z), _fv(width), _fv(p4), spawnpointsFlag, _fv(p6), duration, _fv(p8));
};

/**
   * SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA
   * Searching area between coords 1 and 2
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {number} width
   * @param {number} spawnpointsFlag
   * @param {number} p8
   * @param {number} duration
   * @param {number} p10
   * @return {void}
   */
global.SpawnpointsStartSearchInAngledArea = function (x1, y1, z1, x2, y2, z2, width, spawnpointsFlag, p8, duration, p10) {
  return Citizen.invokeNative('0xb2aff10216defa2f', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), spawnpointsFlag, _fv(p8), duration, _fv(p10));
};

/**
   * SPECIAL_FUNCTION_DO_NOT_USE
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.SpecialFunctionDoNotUse = function (ped, p1) {
  return Citizen.invokeNative('0xf9acf4a08098ea25', ped, p1);
};

/**
   * TIME_SINCE_PED_LAST_SHOT
   * Returns time since the specified ped last shot, in seconds. (fPlayerJustShotTime)
   *
   * @param {number} ped
   * @return {number}
   */
global.TimeSincePedLastShot = function (ped) {
  return Citizen.invokeNative('0x285d36c5c72b0569', ped, _r, _rf);
};

/**
   * TOGGLE_SCENARIO_PED_COWER_IN_PLACE
   * If toggle is true, when the ped is using a scenario he will stop it and become scared
   * If toggle is false, the ped will not be scared anymore and continue his scenario
   * 
   * Old name: _SET_PED_SCARED_WHEN_USING_SCENARIO
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.ToggleScenarioPedCowerInPlace = function (ped, toggle) {
  return Citizen.invokeNative('0x9a77dfd295e29b09', ped, toggle);
};

/**
   * WAS_PED_SKELETON_UPDATED
   * Despite this function's name, it simply returns whether the specified handle is a Ped.
   *
   * @param {number} ped
   * @return {boolean}
   */
global.WasPedSkeletonUpdated = function (ped) {
  return Citizen.invokeNative('0x11b499c1e0ff8559', ped, _r);
};

/**
   * _0x00B380FF2DF6AB7A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x00B380FF2DF6AB7A = function (p0, p1) {
  return Citizen.invokeNative('0x00b380ff2df6ab7a', p0, p1);
};

/**
   * _0x0105FEE8F9091255
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x0105FEE8F9091255 = function (p0, p1) {
  return Citizen.invokeNative('0x0105fee8f9091255', p0, p1, _r);
};

/**
   * _0x024EC9B649111915
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x024EC9B649111915 = function (ped, p1) {
  return Citizen.invokeNative('0x024ec9b649111915', ped, p1);
};

/**
   * _0x028E7B3BBA0BD2FC
   * _SET_ST* - _SET_SW*
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x028E7B3BBA0BD2FC = function (ped) {
  return Citizen.invokeNative('0x028e7b3bba0bd2fc', ped);
};

/**
   * _0x02E741E19E39628C
   * _SET_PLAYER_SN* - _SET_PLAYER_STAMINA*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x02E741E19E39628C = function (ped, p1) {
  return Citizen.invokeNative('0x02e741e19e39628c', ped, _fv(p1));
};

/**
   * _0x0455546F23FF08E4
   * _DOES_GROUP_* - _DOES_N*
   *
   * @param {number} groupId
   * @return {boolean}
   */
global.N_0x0455546F23FF08E4 = function (groupId) {
  return Citizen.invokeNative('0x0455546f23ff08e4', groupId, _r);
};

/**
   * _0x06A10B4D7F50B0C3
   * _GET_PED_D*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x06A10B4D7F50B0C3 = function (ped) {
  return Citizen.invokeNative('0x06a10b4d7f50b0c3', ped, _r);
};

/**
   * _0x070A3841406C43D5
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x070A3841406C43D5 = function (p0, p1) {
  return Citizen.invokeNative('0x070a3841406c43d5', p0, p1);
};

/**
   * _0x07EA5B053FA60AC7
   *
   * @param {number} groupId
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x07EA5B053FA60AC7 = function (groupId, p1) {
  return Citizen.invokeNative('0x07ea5b053fa60ac7', groupId, p1);
};

/**
   * _0x09171A6F8FDE5DC1
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0x09171A6F8FDE5DC1 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x09171a6f8fde5dc1', p0, p1, p2, p3, p4);
};

/**
   * _0x095C2277FED731DB
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x095C2277FED731DB = function (p0) {
  return Citizen.invokeNative('0x095c2277fed731db', p0, _r);
};

/**
   * _0x09D7AFD3716DA8E1
   *
   * @param {number} ped
   * @param {number} p1
   * @return {boolean}
   */
global.N_0x09D7AFD3716DA8E1 = function (ped, p1) {
  return Citizen.invokeNative('0x09d7afd3716da8e1', ped, p1, _r);
};

/**
   * _TOGGLE_PLAYER_PED_FLINCH
   * _TOGGLE_S* - _UPDATE_*
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} scale
   * @return {void}
   */
global.TogglePlayerPedFlinch = function (ped, x, y, z, scale) {
  return Citizen.invokeNative('0x09e378c52b1433b5', ped, _fv(x), _fv(y), _fv(z), _fv(scale));
};

/**
   * _0x0A4618FFD517E24D
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x0A4618FFD517E24D = function (p0, p1) {
  return Citizen.invokeNative('0x0a4618ffd517e24d', p0, p1);
};

/**
   * _0x0ADA3EC589E1736E
   *
  
   * @return {void}
   */
global.N_0x0ADA3EC589E1736E = function () {
  return Citizen.invokeNative('0x0ada3ec589e1736e');
};

/**
   * _0x0B787A37EEDD226F
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x0B787A37EEDD226F = function (p0, p1) {
  return Citizen.invokeNative('0x0b787a37eedd226f', p0, p1);
};

/**
   * _0x0D3B1568917EBDA0
   * _IS_PED_M*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {boolean}
   */
global.N_0x0D3B1568917EBDA0 = function (ped, p1) {
  return Citizen.invokeNative('0x0d3b1568917ebda0', ped, p1, _r);
};

/**
   * _0x0D497AA69059FE40
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x0D497AA69059FE40 = function (p0, p1) {
  return Citizen.invokeNative('0x0d497aa69059fe40', p0, p1);
};

/**
   * _0x0EA9EACBA3B01601
   * _CAN_PED_B* - _CAN_PED_I*
   *
   * @param {number} ped1
   * @param {number} ped2
   * @param {boolean} p2
   * @return {number}
   */
global.N_0x0EA9EACBA3B01601 = function (ped1, ped2, p2) {
  return Citizen.invokeNative('0x0ea9eacba3b01601', ped1, ped2, p2, _r, _rf);
};

/**
   * _0x0EEF7A81C17679DB
   * _IS_PED_L* - _IS_PED_M*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x0EEF7A81C17679DB = function (ped) {
  return Citizen.invokeNative('0x0eef7a81c17679db', ped, _r);
};

/**
   * _0x0F967019CC853BCC
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x0F967019CC853BCC = function (p0, p1) {
  return Citizen.invokeNative('0x0f967019cc853bcc', p0, p1);
};

/**
   * _0x0FB1BA7FF73B41E1
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x0FB1BA7FF73B41E1 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x0fb1ba7ff73b41e1', p0, p1, p2);
};

/**
   * _0x0FFDF937E5C11382
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.N_0x0FFDF937E5C11382 = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x0ffdf937e5c11382', p0, p1, p2, p3, p4, p5);
};

/**
   * _0x101B45C5F56D970F
   *
   * @param {DataView} p0
   * @param {number} ped
   * @param {number} damageCleanliness
   * @param {number} p3
   * @return {boolean}
   */
global.N_0x101B45C5F56D970F = function (p0, ped, damageCleanliness, p3) {
  return Citizen.invokeNative('0x101b45c5f56d970f', p0, ped, damageCleanliness, p3, _r);
};

/**
   * _0x10F96086123B939F
   * NB_CUSTOM_CLIENT_ON_CREATE_COMPLETE - set legendary to not avoid prey
   *
   * @param {number} legendaryPed
   * @param {number} preyPed
   * @param {number} p2
   * @return {void}
   */
global.N_0x10F96086123B939F = function (legendaryPed, preyPed, p2) {
  return Citizen.invokeNative('0x10f96086123b939f', legendaryPed, preyPed, _fv(p2));
};

/**
   * _0x1148F706CF4EBDDA
   * _CAN_PED_SEE* - _CAN_PED_USE_(SCENARIO_HASH?)*
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @return {boolean}
   */
global.N_0x1148F706CF4EBDDA = function (ped, p1, p2) {
  return Citizen.invokeNative('0x1148f706cf4ebdda', ped, _ch(p1), p2, _r);
};

/**
   * _0x1298B3D8E4C2409F
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x1298B3D8E4C2409F = function (p0) {
  return Citizen.invokeNative('0x1298b3d8e4c2409f', p0);
};

/**
   * _0x12EB4E31F092C9B3
   * _GET_IS_PED_(BLEEDING_OUT?)*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x12EB4E31F092C9B3 = function (ped) {
  return Citizen.invokeNative('0x12eb4e31f092c9b3', ped, _r);
};

/**
   * _0x12F2D161BF4031FC
   * _SET_A* - _SET_B*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x12F2D161BF4031FC = function (ped, p1) {
  return Citizen.invokeNative('0x12f2d161bf4031fc', ped, _fv(p1));
};

/**
   * _0x134775B093AD5C38
   * _GET_PED_M*
   *
   * @param {number} ped
   * @return {number}
   */
global.N_0x134775B093AD5C38 = function (ped) {
  return Citizen.invokeNative('0x134775b093ad5c38', ped, _r, _rf);
};

/**
   * _0x154B7E841AC7412F
   * _SET_SCENARIO_PED_* - _SET_SPAWNER_*
   *
   * @param {number} groupId
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x154B7E841AC7412F = function (groupId, p1) {
  return Citizen.invokeNative('0x154b7e841ac7412f', groupId, p1);
};

/**
   * _0x15F4732C357B1D6D
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x15F4732C357B1D6D = function (p0, p1, p2) {
  return Citizen.invokeNative('0x15f4732c357b1d6d', p0, p1, p2);
};

/**
   * _0x16802C32B2FCA06B
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x16802C32B2FCA06B = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x16802c32b2fca06b', p0, p1, p2, p3);
};

/**
   * _0x16F798A05BB9E3B5
   * _PED_COWER_M*
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x16F798A05BB9E3B5 = function (ped) {
  return Citizen.invokeNative('0x16f798a05bb9e3b5', ped);
};

/**
   * _0x1D23D3F70606D788
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x1D23D3F70606D788 = function (p0, p1) {
  return Citizen.invokeNative('0x1d23d3f70606d788', p0, p1);
};

/**
   * _0x1D4636C90BBEFACB
   * _SET_PED_CA* - _SET_PED_CO*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x1D4636C90BBEFACB = function (ped, p1) {
  return Citizen.invokeNative('0x1d4636c90bbefacb', ped, p1);
};

/**
   * _0x1E017404784AA6A3
   * something to do with speech lines? 
   *  some hashs MAR2_RIDE1, MAR2_RIDE1, RBCH1_RIDE1, SAD5_RIDE1
   *
   * @param {number} ped
   * @param {number} p1
   * @return {boolean}
   */
global.N_0x1E017404784AA6A3 = function (ped, p1) {
  return Citizen.invokeNative('0x1e017404784aa6a3', ped, _ch(p1), _r);
};

/**
   * _0x1F44B7E283C09EDE
   * Only used in SP R* Scripts
   * Params: p2 = same as p2 of 0x3C529A827998F9B3
   * _SET_PED_TA* - _SET_PED_TO_*
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.N_0x1F44B7E283C09EDE = function (ped, p1, p2) {
  return Citizen.invokeNative('0x1f44b7e283c09ede', ped, _fv(p1), p2);
};

/**
   * _APPLY_COLD_TO_PED
   * Apply cold intensity to ped from 0.0 to 1.0
   *
   * @param {number} ped
   * @param {number} intensity
   * @param {number} p2
   * @return {void}
   */
global.ApplyColdToPed = function (ped, intensity, p2) {
  return Citizen.invokeNative('0x1f8215d0e446f593', ped, _fv(intensity), p2);
};

/**
   * _0x2371C39D4F91C288
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x2371C39D4F91C288 = function (ped) {
  return Citizen.invokeNative('0x2371c39d4f91c288', ped);
};

/**
   * _0x23BDE06596A22CEC
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x23BDE06596A22CEC = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0x23bde06596a22cec', ped, p1, _fv(p2), p3);
};

/**
   * _0x242EDF85D4E87B65
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x242EDF85D4E87B65 = function (p0) {
  return Citizen.invokeNative('0x242edf85d4e87b65', p0, _r);
};

/**
   * _0x256EDD55C6BE1482
   * _IS_PED_FL* - _IS_PED_FU*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x256EDD55C6BE1482 = function (ped) {
  return Citizen.invokeNative('0x256edd55c6be1482', ped, _r);
};

/**
   * _0x273915CE30780986
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x273915CE30780986 = function (p0, p1) {
  return Citizen.invokeNative('0x273915ce30780986', p0, p1, _r);
};

/**
   * _0x27E8A84C12B0B7D1
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0x27E8A84C12B0B7D1 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x27e8a84c12b0b7d1', p0, p1, p2, _r);
};

/**
   * _0x28508173C6A7CC18
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x28508173C6A7CC18 = function (p0) {
  return Citizen.invokeNative('0x28508173c6a7cc18', p0);
};

/**
   * _0x290B2E6CCDE532E1
   * _IS_PED_L* - _IS_PED_M*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x290B2E6CCDE532E1 = function (ped) {
  return Citizen.invokeNative('0x290b2e6ccde532e1', ped, _r);
};

/**
   * _0x29924EB8EE9DB926
   * _SET_PED_K* or _SET_PED_L*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x29924EB8EE9DB926 = function (ped, p1) {
  return Citizen.invokeNative('0x29924eb8ee9db926', ped, _fv(p1));
};

/**
   * _0x29F3539189D3E277
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x29F3539189D3E277 = function (p0, p1) {
  return Citizen.invokeNative('0x29f3539189d3e277', p0, p1);
};

/**
   * _0x2B4CE170DE09F346
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x2B4CE170DE09F346 = function (ped, p1) {
  return Citizen.invokeNative('0x2b4ce170de09f346', ped, _ch(p1));
};

/**
   * _0x2BA9D7BF629F920C
   * Used in Script Function CHECK_IS_PLAYER_SEEN
   * _GET_PED_*
   *
   * @param {number} ped
   * @return {number}
   */
global.N_0x2BA9D7BF629F920C = function (ped) {
  return Citizen.invokeNative('0x2ba9d7bf629f920c', ped, _r, _rf);
};

/**
   * _0x2D976DBDC731DF80
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x2D976DBDC731DF80 = function (ped) {
  return Citizen.invokeNative('0x2d976dbdc731df80', ped);
};

/**
   * _0x2DC0E8DCBD3546E9
   * _IS_PED_D*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x2DC0E8DCBD3546E9 = function (ped) {
  return Citizen.invokeNative('0x2dc0e8dcbd3546e9', ped, _r);
};

/**
   * _0x2DD4E0E26DFAD97D
   * _IS_PED_M* - _IS_PED_O*
   *
   * @param {number} ped1
   * @param {number} ped2
   * @param {number} p2
   * @return {boolean}
   */
global.N_0x2DD4E0E26DFAD97D = function (ped1, ped2, p2) {
  return Citizen.invokeNative('0x2dd4e0e26dfad97d', ped1, ped2, _fv(p2), _r);
};

/**
   * _0x2E5B5D1F1453E08E
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x2E5B5D1F1453E08E = function (ped, p1) {
  return Citizen.invokeNative('0x2e5b5d1f1453e08e', ped, p1);
};

/**
   * _0x2FA568BFA725F8D6
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x2FA568BFA725F8D6 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x2fa568bfa725f8d6', p0, p1, p2, p3);
};

/**
   * _0x31B2E7F2E3C58B89
   * _GET_SHOP_ITEM_NUM_*? returns a number of ? p1 seems to be always joaat("base") 
   *
   * @param {number} componentHash
   * @param {number} p1
   * @param {number} metapedType
   * @param {boolean} isMp
   * @return {number}
   */
global.N_0x31B2E7F2E3C58B89 = function (componentHash, p1, metapedType, isMp) {
  return Citizen.invokeNative('0x31b2e7f2e3c58b89', _ch(componentHash), _ch(p1), metapedType, isMp, _r, _ri);
};

/**
   * _0x32417CB860A3BDC4
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x32417CB860A3BDC4 = function (p0, p1) {
  return Citizen.invokeNative('0x32417cb860a3bdc4', p0, p1, _r);
};

/**
   * _0x326F7951EF0D7F75
   * Only used in R* SP Script short_update
   * _GET_TARGET_* - _GET_TRACKED*
   *
   * @param {number} ped
   * @param {number} eventType
   * @return {any}
   */
global.N_0x326F7951EF0D7F75 = function (ped, eventType) {
  return Citizen.invokeNative('0x326f7951ef0d7f75', ped, _ch(eventType), _r);
};

/**
   * _0x329772C47DBB2FBC
   * _SET_PED_P* - _SET_PED_R*
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x329772C47DBB2FBC = function (ped) {
  return Citizen.invokeNative('0x329772c47dbb2fbc', ped);
};

/**
   * _0x32CCAD8A981B53D3
   * _STOP_(?)*
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x32CCAD8A981B53D3 = function (ped) {
  return Citizen.invokeNative('0x32ccad8a981b53d3', ped);
};

/**
   * _0x32CEDA9A0AB4CEF7
   *
   * @param {number} ped
   * @param {number} p1
   * @param {boolean} p2
   * @return {void}
   */
global.N_0x32CEDA9A0AB4CEF7 = function (ped, p1, p2) {
  return Citizen.invokeNative('0x32ceda9a0ab4cef7', ped, _ch(p1), p2);
};

/**
   * _0x34B5CEAC180A5D6E
   *
   * @param {number} ped
   * @param {number} p1
   * @param {boolean} p2
   * @return {void}
   */
global.N_0x34B5CEAC180A5D6E = function (ped, p1, p2) {
  return Citizen.invokeNative('0x34b5ceac180a5d6e', ped, _ch(p1), p2);
};

/**
   * _0x34C11114887150FD
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x34C11114887150FD = function (p0, p1) {
  return Citizen.invokeNative('0x34c11114887150fd', p0, p1);
};

/**
   * _0x34EDDD59364AD74A
   *
   * @param {number} ped
   * @param {DataView} p1
   * @return {void}
   */
global.N_0x34EDDD59364AD74A = function (ped, p1) {
  return Citizen.invokeNative('0x34eddd59364ad74a', ped, p1);
};

/**
   * _0x354CA4DDDEEC397A
   *
   * @param {number} ped
   * @return {number}
   */
global.N_0x354CA4DDDEEC397A = function (ped) {
  return Citizen.invokeNative('0x354ca4dddeec397a', ped, _r, _ri);
};

/**
   * _RESET_PED_STAMINA
   * Seems to set the peds stamina to 30%
   *
   * @param {number} ped
   * @return {void}
   */
global.ResetPedStamina = function (ped) {
  return Citizen.invokeNative('0x36513affc703c60d', ped);
};

/**
   * _0x370A973252741AC4
   * _RESET_PED_*
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x370A973252741AC4 = function (ped, p1) {
  return Citizen.invokeNative('0x370a973252741ac4', ped, p1);
};

/**
   * _0x3A5697B80FED5EBE
   * _SET_PED_MO*
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @return {void}
   */
global.N_0x3A5697B80FED5EBE = function (ped, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x3a5697b80fed5ebe', ped, _fv(p1), _fv(p2), _fv(p3), _fv(p4));
};

/**
   * _0x3ACCE14DFA6BA8C2
   * Used in R* Script net_fetch (NET_FETCH_UPDATE_RECIPIENT_PROP_ILO_IN_COMBAT) and various SP Scripts
   * Params: p1 = 4/5/6, p5 = 40.f/100.f, coords = Player ped
   * Perhaps returns some distance (Clearing that the local player is able to use ILO while in combat because they are near the recipient but also near hated peds)
   * _GET_NUM_M* - _GET_PEDS_J*
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p5
   * @param {number} itemset
   * @return {number}
   */
global.N_0x3ACCE14DFA6BA8C2 = function (ped, p1, x, y, z, p5, itemset) {
  return Citizen.invokeNative('0x3acce14dfa6ba8c2', ped, p1, _fv(x), _fv(y), _fv(z), _fv(p5), itemset, _r, _ri);
};

/**
   * _0x3AEC4A410ECAF30D
   * _IS_PED_R*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x3AEC4A410ECAF30D = function (ped) {
  return Citizen.invokeNative('0x3aec4a410ecaf30d', ped, _r);
};

/**
   * _0x3C529A827998F9B3
   * _SET_PED_TA* - _SET_PED_TO_*
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.N_0x3C529A827998F9B3 = function (ped, p1, p2) {
  return Citizen.invokeNative('0x3c529a827998f9b3', ped, p1, p2);
};

/**
   * _0x3D9F958834AB9C30
   *
   * @param {number} ped
   * @return {number}
   */
global.N_0x3D9F958834AB9C30 = function (ped) {
  return Citizen.invokeNative('0x3d9f958834ab9c30', ped, _r, _ri);
};

/**
   * _0x3EFED081B4834BA1
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x3EFED081B4834BA1 = function (p0) {
  return Citizen.invokeNative('0x3efed081b4834ba1', p0);
};

/**
   * _0x3FCBB5FCFD968698
   * Used for script function PROCESS_PLAYER_HAT_EVENT
   * Returns requestId to be used with 0x13E7320C762F0477
   *
   * @param {number} drawable
   * @param {number} albedo
   * @param {number} normal
   * @param {number} material
   * @param {any} p4
   * @return {number}
   */
global.N_0x3FCBB5FCFD968698 = function (drawable, albedo, normal, material, p4) {
  return Citizen.invokeNative('0x3fcbb5fcfd968698', _ch(drawable), _ch(albedo), _ch(normal), _ch(material), p4, _r, _ri);
};

/**
   * _0x3FDBB99EFD8CE4AF
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x3FDBB99EFD8CE4AF = function (p0, p1, p2) {
  return Citizen.invokeNative('0x3fdbb99efd8ce4af', p0, p1, p2);
};

/**
   * _0x3FDCC1F8C17E303E
   * Changes health bar around heart core icon
   * INITIALISE_NEW_ROLE - Applying Super Jump buffs: p1 = 10, p2 = 0.0f
   * INITIALISE_NEW_ROLE - Clearing up Super Jump buffs: p1 = 10, p2 = 1.0f
   * _SET_D*
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.N_0x3FDCC1F8C17E303E = function (ped, p1, p2) {
  return Citizen.invokeNative('0x3fdcc1f8c17e303e', ped, p1, _fv(p2));
};

/**
   * _0x405180B14DA5A935
   * _SET_PED_A*
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x405180B14DA5A935 = function (ped, p1) {
  return Citizen.invokeNative('0x405180b14da5a935', ped, p1);
};

/**
   * _0x40C3524D4ED83554
   * _SET_SCENARIO_PED_* - _SET_SPAWNER_*
   *
   * @param {number} groupId
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x40C3524D4ED83554 = function (groupId, p1) {
  return Citizen.invokeNative('0x40c3524d4ed83554', groupId, p1);
};

/**
   * _0x40C9155AF8BC13F3
   * _IS_PED_RE*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x40C9155AF8BC13F3 = function (ped) {
  return Citizen.invokeNative('0x40c9155af8bc13f3', ped, _r);
};

/**
   * _0x413697EC260AABBF
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x413697EC260AABBF = function (p0, p1, p2) {
  return Citizen.invokeNative('0x413697ec260aabbf', p0, p1, p2);
};

/**
   * _0x41C23A8E6B344867
   * _SET_PED_IN*
   *
   * @param {number} ped
   * @param {string | number} p1
   * @return {void}
   */
global.N_0x41C23A8E6B344867 = function (ped, p1) {
  return Citizen.invokeNative('0x41c23a8e6b344867', ped, _ts(p1));
};

/**
   * _0x45FEA6D5539BD474
   * _SET_PED_IN*
   *
   * @param {number} ped
   * @param {string | number} p1
   * @return {void}
   */
global.N_0x45FEA6D5539BD474 = function (ped, p1) {
  return Citizen.invokeNative('0x45fea6d5539bd474', ped, _ts(p1));
};

/**
   * _0x4642182A298187D0
   *
   * @param {number} ped
   * @param {number} p1
   * @param {DataView} p2
   * @param {number} p3
   * @param {number} p4
   * @return {number}
   */
global.N_0x4642182A298187D0 = function (ped, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x4642182a298187d0', ped, p1, p2, p3, p4, _r, _ri);
};

/**
   * _0x46BF2A810679D6E6
   * Returns vehicle (desired) speed
   * _COMPUTE_(VEHICLE_SPEED_USING_BLEND_RATIO?)*
   *
   * @param {number} ped
   * @param {number} maxMoveBlendRatio
   * @return {number}
   */
global.N_0x46BF2A810679D6E6 = function (ped, maxMoveBlendRatio) {
  return Citizen.invokeNative('0x46bf2a810679d6e6', ped, _fv(maxMoveBlendRatio), _r, _rf);
};

/**
   * _0x49DADFC4CD808B0A
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x49DADFC4CD808B0A = function (p0, p1, p2) {
  return Citizen.invokeNative('0x49dadfc4cd808b0a', p0, p1, p2);
};

/**
   * _0x4B19F171450E0D4F
   *
   * @param {number} ped
   * @return {number}
   */
global.N_0x4B19F171450E0D4F = function (ped) {
  return Citizen.invokeNative('0x4b19f171450e0d4f', ped, _r, _ri);
};

/**
   * _0x4E68C7EF706DF35D
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p4
   * @param {number} relationshipGroup
   * @return {void}
   */
global.N_0x4E68C7EF706DF35D = function (ped, x, y, z, p4, relationshipGroup) {
  return Citizen.invokeNative('0x4e68c7ef706df35d', ped, _fv(x), _fv(y), _fv(z), _fv(p4), _ch(relationshipGroup));
};

/**
   * _0x4EC4EA2F72B36358
   * _SET_PED_A*
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x4EC4EA2F72B36358 = function (ped, p1) {
  return Citizen.invokeNative('0x4ec4ea2f72b36358', ped, p1);
};

/**
   * _0x4F27603E44A8E4C0
   *
   * @param {number} ped
   * @param {number} p1
   * @param {boolean} p2
   * @return {void}
   */
global.N_0x4F27603E44A8E4C0 = function (ped, p1, p2) {
  return Citizen.invokeNative('0x4f27603e44a8e4c0', ped, p1, p2);
};

/**
   * _0x4F63433CE3C08230
   * Only used in R* Script shop_harriet
   * _SET_PED_F*
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x4F63433CE3C08230 = function (ped, p1) {
  return Citizen.invokeNative('0x4f63433ce3c08230', ped, p1);
};

/**
   * _0x5203038FF8BAE577
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @return {boolean}
   */
global.N_0x5203038FF8BAE577 = function (ped, p1, p2) {
  return Citizen.invokeNative('0x5203038ff8bae577', ped, p1, p2, _r);
};

/**
   * _0x52250B92EA70BE3D
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x52250B92EA70BE3D = function (p0) {
  return Citizen.invokeNative('0x52250b92ea70be3d', p0, _r);
};

/**
   * _0x52A24D8A1DA89658
   *
   * @param {number} ped
   * @param {number} p1
   * @param {boolean} p2
   * @return {void}
   */
global.N_0x52A24D8A1DA89658 = function (ped, p1, p2) {
  return Citizen.invokeNative('0x52a24d8a1da89658', ped, p1, p2);
};

/**
   * _0x53BA7D96B9A421D9
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x53BA7D96B9A421D9 = function (p0, p1) {
  return Citizen.invokeNative('0x53ba7d96b9a421d9', p0, p1);
};

/**
   * _0x54D3CD482742C482
   *
   * @param {number} animal
   * @param {number} p2
   * @return {void}
   */
global.N_0x54D3CD482742C482 = function (animal, p2) {
  return Citizen.invokeNative('0x54d3cd482742c482', animal, _fv(p2));
};

/**
   * _0x550CB89DD7F4FA3D
   * _HAS_PED_*
   *
   * @param {number} ped1
   * @param {number} ped2
   * @return {boolean}
   */
global.N_0x550CB89DD7F4FA3D = function (ped1, ped2) {
  return Citizen.invokeNative('0x550cb89dd7f4fa3d', ped1, ped2, _r);
};

/**
   * _0x55546004A244302A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x55546004A244302A = function (p0, p1) {
  return Citizen.invokeNative('0x55546004a244302a', p0, p1);
};

/**
   * _0x56076667E7C2DCD6
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x56076667E7C2DCD6 = function (p0, p1) {
  return Citizen.invokeNative('0x56076667e7c2dcd6', p0, p1);
};

/**
   * _0x56E4BAD93D33453C
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x56E4BAD93D33453C = function (p0, p1) {
  return Citizen.invokeNative('0x56e4bad93d33453c', p0, p1, _r);
};

/**
   * _0x577C60BA06D0EA64
   * _IS_PED_C* - _IS_PED_D*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x577C60BA06D0EA64 = function (ped) {
  return Citizen.invokeNative('0x577c60ba06d0ea64', ped, _r);
};

/**
   * _0x57F35552E771BE9D
   * _SET_PED_M*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x57F35552E771BE9D = function (ped, p1) {
  return Citizen.invokeNative('0x57f35552e771be9d', ped, p1);
};

/**
   * _APPLY_PED_DAMAGE_PACK_TO_BONE
   * seems to only work with PD_Vomit ? 
   *
   * @param {number} ped
   * @param {number} boneId
   * @param {number} xOffset
   * @param {number} yOffset
   * @param {number} zOffset
   * @param {number} xRot
   * @param {number} yRot
   * @param {number} zRot
   * @param {string | number} damagePack
   * @return {void}
   */
global.ApplyPedDamagePackToBone = function (ped, boneId, xOffset, yOffset, zOffset, xRot, yRot, zRot, damagePack) {
  return Citizen.invokeNative('0x58d32261ae0f0843', ped, boneId, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), _ts(damagePack));
};

/**
   * _0x5A1A929C8B729B4A
   * _C*
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x5A1A929C8B729B4A = function (ped) {
  return Citizen.invokeNative('0x5a1a929c8b729b4a', ped);
};

/**
   * _0x5AF24CA9C974E51A
   * _SET_C*
   *
   * @param {number} ped1
   * @param {number} ped2
   * @return {void}
   */
global.N_0x5AF24CA9C974E51A = function (ped1, ped2) {
  return Citizen.invokeNative('0x5af24ca9c974e51a', ped1, ped2);
};

/**
   * _0x5B73975B4F12F7F3
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0x5B73975B4F12F7F3 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x5b73975b4f12f7f3', p0, p1, p2, p3, p4);
};

/**
   * _0x5BB04BC74A474B47
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x5BB04BC74A474B47 = function (p0, p1) {
  return Citizen.invokeNative('0x5bb04bc74a474b47', p0, p1);
};

/**
   * _0x5BF0B9D9A8E227A0
   * _IS_PED_B* - _IS_PED_C*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x5BF0B9D9A8E227A0 = function (ped) {
  return Citizen.invokeNative('0x5bf0b9d9a8e227a0', ped, _r);
};

/**
   * _0x5C6C7C70CA302801
   * _IS_PED_IN*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x5C6C7C70CA302801 = function (ped) {
  return Citizen.invokeNative('0x5c6c7c70ca302801', ped, _r);
};

/**
   * _0x5C90E20C25E6D83C
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x5C90E20C25E6D83C = function (p0) {
  return Citizen.invokeNative('0x5c90e20c25e6d83c', p0);
};

/**
   * _0x5CA20FBE49891BBD
   * Used in Script Function MP_MAIN_OFFLINE__INITIALIZE_FLOW & PROCESS_GENERIC_PLAYER_INITIALIZATION
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x5CA20FBE49891BBD = function (ped, p1) {
  return Citizen.invokeNative('0x5ca20fbe49891bbd', ped, p1);
};

/**
   * _0x5CB2EBB467BE3ED6
   *
   * @param {number} animal
   * @param {number} p2
   * @return {void}
   */
global.N_0x5CB2EBB467BE3ED6 = function (animal, p2) {
  return Citizen.invokeNative('0x5cb2ebb467be3ed6', animal, _fv(p2));
};

/**
   * _0x5D4CD22A8C82A81A
   * Related to ped hat
   * _SET_PED_LA* - _SET_PED_LE*
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x5D4CD22A8C82A81A = function (ped, p1) {
  return Citizen.invokeNative('0x5d4cd22a8c82a81a', ped, p1);
};

/**
   * _0x5DA36CCCB63C0895
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0x5DA36CCCB63C0895 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x5da36cccb63c0895', p0, p1, p2, _r);
};

/**
   * _0x5E9FAF6C513347B4
   * Only used in R* SP Scripts
   * _GET_PED_IN*
   *
   * @param {number} ped
   * @param {number} eventType
   * @return {number}
   */
global.N_0x5E9FAF6C513347B4 = function (ped, eventType) {
  return Citizen.invokeNative('0x5e9faf6c513347b4', ped, _ch(eventType), _r, _ri);
};

/**
   * _0x5EFA8A3D8A60D662
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x5EFA8A3D8A60D662 = function (p0, p1) {
  return Citizen.invokeNative('0x5efa8a3d8a60d662', p0, p1, _r);
};

/**
   * _0x5FCF25D584065BFD
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x5FCF25D584065BFD = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x5fcf25d584065bfd', p0, p1, p2, p3);
};

/**
   * _0x600BBDD29820370C
   * Not implemented.
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x600BBDD29820370C = function (ped) {
  return Citizen.invokeNative('0x600bbdd29820370c', ped);
};

/**
   * _0x604E1010E3162E86
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x604E1010E3162E86 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x604e1010e3162e86', p0, p1, p2);
};

/**
   * _0x606D529DADA3C940
   * Not implemented.
   *
   * @param {number} ped
   * @param {any} p1
   * @return {void}
   */
global.N_0x606D529DADA3C940 = function (ped, p1) {
  return Citizen.invokeNative('0x606d529dada3c940', ped, p1);
};

/**
   * _0x62FDF4E678E40CC6
   * Returns p1 value for 0x8E84119A23C16623
   *
   * @param {number} entity
   * @param {any} p1
   * @return {any}
   */
global.N_0x62FDF4E678E40CC6 = function (entity, p1) {
  return Citizen.invokeNative('0x62fdf4e678e40cc6', entity, p1, _r);
};

/**
   * _0x633F83B301C87994
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x633F83B301C87994 = function (p0, p1) {
  return Citizen.invokeNative('0x633f83b301c87994', p0, p1);
};

/**
   * _0x642720D8D69328B6
   * _SET_PED_M*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x642720D8D69328B6 = function (ped, p1) {
  return Citizen.invokeNative('0x642720d8d69328b6', ped, _ch(p1));
};

/**
   * _0x6507AC3BD7C99009
   * _IS_N* - _IS_P*
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p3
   * @return {boolean}
   */
global.N_0x6507AC3BD7C99009 = function (x, y, z, p3) {
  return Citizen.invokeNative('0x6507ac3bd7c99009', _fv(x), _fv(y), _fv(z), _fv(p3), _r);
};

/**
   * _0x6734F0A6A52C371C
   *
   * @param {number} player
   * @param {number} horseSlot
   * @return {void}
   */
global.N_0x6734F0A6A52C371C = function (player, horseSlot) {
  return Citizen.invokeNative('0x6734f0a6a52c371c', player, horseSlot);
};

/**
   * _0x6A190B94C2541A99
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x6A190B94C2541A99 = function (p0) {
  return Citizen.invokeNative('0x6a190b94c2541a99', p0);
};

/**
   * _0x6A489892E813951A
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x6A489892E813951A = function (p0) {
  return Citizen.invokeNative('0x6a489892e813951a', p0);
};

/**
   * _0x6B67320E0D57856A
   *
   * @param {number} ped
   * @param {DataView} p1
   * @param {number} p2
   * @param {boolean} p3
   * @return {void}
   */
global.N_0x6B67320E0D57856A = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0x6b67320e0d57856a', ped, p1, p2, p3);
};

/**
   * _0x6DB875AFC584FA32
   * Only used in R* SP Script winter1: p1 = 5000
   * _SET_PED_M*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {any}
   */
global.N_0x6DB875AFC584FA32 = function (ped, p1) {
  return Citizen.invokeNative('0x6db875afc584fa32', ped, p1, _r);
};

/**
   * _0x6E8B87139854022D
   * Only used in SP R* Script train_robbery3: p1 = CLIPSET@VEH_TRAIN@HANDCART@BASE_PANIC & CLIPSET@VEH_TRAIN@HANDCART@BASE_PANIC_JOHN
   *
   * @param {number} ped
   * @param {string | number} clipset
   * @return {void}
   */
global.N_0x6E8B87139854022D = function (ped, clipset) {
  return Citizen.invokeNative('0x6e8b87139854022d', ped, clipset);
};

/**
   * _GET_CARRIED_PELT_SKINS
   *
   * @param {number} mount
   * @param {DataView} outData
   * @return {number}
   */
global.GetCarriedPeltSkins = function (mount, outData) {
  return Citizen.invokeNative('0x6f43c351a5d51e2f', mount, outData, _r, _ri);
};

/**
   * _0x6F46F8ACB44C4FC1
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x6F46F8ACB44C4FC1 = function (p0) {
  return Citizen.invokeNative('0x6f46f8acb44c4fc1', p0, _r);
};

/**
   * _0x7020839C7302D8AC
   * _HAS_*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x7020839C7302D8AC = function (ped) {
  return Citizen.invokeNative('0x7020839c7302d8ac', ped, _r);
};

/**
   * _0x704C908E9C405136
   * _CLEAR*
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x704C908E9C405136 = function (ped) {
  return Citizen.invokeNative('0x704c908e9c405136', ped);
};

/**
   * _0x712B2C2B2471B493
   * _SET_PED_MO*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x712B2C2B2471B493 = function (ped, p1) {
  return Citizen.invokeNative('0x712b2c2b2471b493', ped, _ch(p1));
};

/**
   * _0x735662994E60A710
   * _SET_PED_F*
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x735662994E60A710 = function (ped, p1) {
  return Citizen.invokeNative('0x735662994e60a710', ped, p1);
};

/**
   * _0x7406C71F4AC2FFCC
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x7406C71F4AC2FFCC = function (p0) {
  return Citizen.invokeNative('0x7406c71f4ac2ffcc', p0);
};

/**
   * _0x758F081DB204DDDE
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x758F081DB204DDDE = function (ped) {
  return Citizen.invokeNative('0x758f081db204ddde', ped, _r);
};

/**
   * _0x75A082563B4452E5
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x75A082563B4452E5 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x75a082563b4452e5', p0, p1, p2, p3);
};

/**
   * _0x75D3333409CD33CE
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x75D3333409CD33CE = function (p0, p1, p2) {
  return Citizen.invokeNative('0x75d3333409cd33ce', p0, p1, p2);
};

/**
   * _0x763FA8A9D76EE3A7
   * Used in Script Function NB_EVENT_OVERRIDE__HANDLE__EVENT_DAMAGE_ENTITY
   *
   * @param {number} ped
   * @return {number}
   */
global.N_0x763FA8A9D76EE3A7 = function (ped) {
  return Citizen.invokeNative('0x763fa8a9d76ee3a7', ped, _r, _rf);
};

/**
   * _0x77243ED4F7CAAA55
   * _IS_I* - _IS_L*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x77243ED4F7CAAA55 = function (ped) {
  return Citizen.invokeNative('0x77243ed4f7caaa55', ped, _r);
};

/**
   * _0x7ABBD9E449E0DB00
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x7ABBD9E449E0DB00 = function (ped, p1) {
  return Citizen.invokeNative('0x7abbd9e449e0db00', ped, p1);
};

/**
   * _0x7B5C293238EE4F20
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x7B5C293238EE4F20 = function (p0) {
  return Citizen.invokeNative('0x7b5c293238ee4f20', p0, _r);
};

/**
   * _0x7BB810E8B343AC7B
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x7BB810E8B343AC7B = function (p0) {
  return Citizen.invokeNative('0x7bb810e8b343ac7b', p0, _r);
};

/**
   * _0x7C08E7CB8D951B70
   * Only used in SP
   * _SET_REMOVE_PED*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x7C08E7CB8D951B70 = function (ped, p1) {
  return Citizen.invokeNative('0x7c08e7cb8d951b70', ped, _fv(p1));
};

/**
   * _0x7C10221CE718AA72
   * _CLEAR_PED_M*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x7C10221CE718AA72 = function (ped, p1) {
  return Citizen.invokeNative('0x7c10221ce718aa72', ped, p1);
};

/**
   * _0x7C8AA850617651D9
   * Returns wether `0x1E017404784AA6A3` was applied on the ped.
   *  some hashs MAR2_RIDE1, MAR2_RIDE1, RBCH1_RIDE1, SAD5_RIDE1
   *
   * @param {number} ped
   * @param {number} p1
   * @return {any}
   */
global.N_0x7C8AA850617651D9 = function (ped, p1) {
  return Citizen.invokeNative('0x7c8aa850617651d9', ped, _ch(p1), _r);
};

/**
   * _0x7E5185B979706210
   * _SET_FORMATION_P*
   *
   * @param {number} groupId
   * @param {number} p1
   * @return {void}
   */
global.N_0x7E5185B979706210 = function (groupId, p1) {
  return Citizen.invokeNative('0x7e5185b979706210', groupId, p1);
};

/**
   * _0x7E8F9949B7AABBF0
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x7E8F9949B7AABBF0 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x7e8f9949b7aabbf0', p0, p1, p2);
};

/**
   * _0x7EDB3C766B0D073F
   * Only used in R* Script net_moonshine_property
   * _A* - _B*
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x7EDB3C766B0D073F = function (ped) {
  return Citizen.invokeNative('0x7edb3c766b0d073f', ped);
};

/**
   * _0x7EE3A8660F38797E
   * _IS_PED_H* - _IS_PED_I*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x7EE3A8660F38797E = function (ped) {
  return Citizen.invokeNative('0x7ee3a8660f38797e', ped, _r);
};

/**
   * _0x7F090958AE95B61B
   *
   * @param {number} ped
   * @param {number} p1
   * @return {boolean}
   */
global.N_0x7F090958AE95B61B = function (ped, p1) {
  return Citizen.invokeNative('0x7f090958ae95b61b', ped, p1, _r);
};

/**
   * _0x8101BA1C0B462412
   * _ATTACH_*
   *
   * @param {number} ped
   * @param {number} ropeId
   * @return {void}
   */
global.N_0x8101BA1C0B462412 = function (ped, ropeId) {
  return Citizen.invokeNative('0x8101ba1c0b462412', ped, ropeId);
};

/**
   * _0x815C0074A1BC0D93
   * _SET_PED_COMBAT_R - _SET_PED_C*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x815C0074A1BC0D93 = function (ped, p1) {
  return Citizen.invokeNative('0x815c0074a1bc0d93', ped, p1);
};

/**
   * _0x82CB0F3F0C7785E5
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x82CB0F3F0C7785E5 = function (p0) {
  return Citizen.invokeNative('0x82cb0f3f0c7785e5', p0, _r);
};

/**
   * _0x851966E1E35AF491
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x851966E1E35AF491 = function (p0, p1) {
  return Citizen.invokeNative('0x851966e1e35af491', p0, p1);
};

/**
   * _0x85F500F4E24CA43E
   * Used in Script Function SKCS_PLAYER_ROBBING
   * _SET_PED_A*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x85F500F4E24CA43E = function (ped, p1) {
  return Citizen.invokeNative('0x85f500f4e24ca43e', ped, _fv(p1));
};

/**
   * _0x86F0B6730C32AC14
   * _SET_PED_*
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x86F0B6730C32AC14 = function (ped, p1) {
  return Citizen.invokeNative('0x86f0b6730c32ac14', ped, p1);
};

/**
   * _0x86FAFC18E3D4380C
   *
   * @param {number} groupId
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x86FAFC18E3D4380C = function (groupId, p1) {
  return Citizen.invokeNative('0x86fafc18e3d4380c', groupId, p1);
};

/**
   * _0x878E8104FA27CDAE
   *
   * @param {number} vehicle
   * @param {number} p1
   * @return {void}
   */
global.N_0x878E8104FA27CDAE = function (vehicle, p1) {
  return Citizen.invokeNative('0x878e8104fa27cdae', vehicle, _ch(p1));
};

/**
   * _0x87C2724A56F66020
   * _CLEAR_PED_E* - _CLEAR_PED_L*
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x87C2724A56F66020 = function (ped) {
  return Citizen.invokeNative('0x87c2724a56f66020', ped);
};

/**
   * _0x8822F124788B8D0A
   * Only used in R* Script train_robbery4
   * _SET_PED_D*
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x8822F124788B8D0A = function (ped, p1) {
  return Citizen.invokeNative('0x8822f124788b8d0a', ped, p1);
};

/**
   * _0x8822F139408B8D0A
   * If returned true, SET_ENABLE_BOUND_ANKLES is called in R* Script guama2
   * _GET_D* - _GET_E*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x8822F139408B8D0A = function (ped) {
  return Citizen.invokeNative('0x8822f139408b8d0a', ped, _r);
};

/**
   * _0x88A5564B19C15391
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x88A5564B19C15391 = function (ped) {
  return Citizen.invokeNative('0x88a5564b19c15391', ped, _r);
};

/**
   * _0x88A95BB640FC186F
   * Used in R* Script generic_weight_control_item
   * _CLEAR_PED_E* - CLEAR_PED_(G?)L*
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x88A95BB640FC186F = function (ped) {
  return Citizen.invokeNative('0x88a95bb640fc186f', ped);
};

/**
   * _0x88B2026A3B0BE33D
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x88B2026A3B0BE33D = function (ped, p1) {
  return Citizen.invokeNative('0x88b2026a3b0be33d', ped, _fv(p1));
};

/**
   * _0x897934E868EDDD6C
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @return {void}
   */
global.N_0x897934E868EDDD6C = function (ped, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x897934e868eddd6c', ped, p1, _fv(p2), _fv(p3), _fv(p4));
};

/**
   * _0x89816B58C3466262
   * _GET_PED_B* - _GET_PED_C*
   *
   * @param {number} ped
   * @return {any}
   */
global.N_0x89816B58C3466262 = function (ped) {
  return Citizen.invokeNative('0x89816b58c3466262', ped, _r);
};

/**
   * _0x899DFA0009AC93DE
   * _SET_PED_O*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x899DFA0009AC93DE = function (ped, p1) {
  return Citizen.invokeNative('0x899dfa0009ac93de', ped, _fv(p1));
};

/**
   * _0x89E59DBD15E21177
   * _SET_C*
   *
   * @param {number} groupId
   * @param {number} p1
   * @return {void}
   */
global.N_0x89E59DBD15E21177 = function (groupId, p1) {
  return Citizen.invokeNative('0x89e59dbd15e21177', groupId, p1);
};

/**
   * _0x8AF46E5159A5B620
   * _SET_PED_IN*
   *
   * @param {number} ped
   * @param {number} speechParams
   * @return {void}
   */
global.N_0x8AF46E5159A5B620 = function (ped, speechParams) {
  return Citizen.invokeNative('0x8af46e5159a5b620', ped, _ch(speechParams));
};

/**
   * _0x8AF8E647D6B2A649
   * Returns offset (0 < 32) to be used with MISC::SET_BIT
   * _GET_PED_CR*
   *
   * @param {number} groupId
   * @param {number} ped
   * @return {number}
   */
global.N_0x8AF8E647D6B2A649 = function (groupId, ped) {
  return Citizen.invokeNative('0x8af8e647d6b2a649', groupId, ped, _r, _ri);
};

/**
   * _0x8AFCCC0F18D70018
   * _SET_FORMATION_*
   *
   * @param {number} groupId
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x8AFCCC0F18D70018 = function (groupId, p1) {
  return Citizen.invokeNative('0x8afccc0f18d70018', groupId, p1);
};

/**
   * _0x8BA0C65AC15A7D33
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x8BA0C65AC15A7D33 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x8ba0c65ac15a7d33', p0, p1, p2, p3);
};

/**
   * _0x8BE24D74D74C6E9B
   * Used in Script Function NET_CAMP_DOG_CLIENT_HANDLE_ANIMAL_INTERACTION
   *
   * @param {number} ped
   * @return {number}
   */
global.N_0x8BE24D74D74C6E9B = function (ped) {
  return Citizen.invokeNative('0x8be24d74d74c6e9b', ped, _r, _ri);
};

/**
   * _0x8CB2553C559102C1
   * _SET_PED_T* - SET_PED_U*
   *
   * @param {number} ped
   * @param {number} p1
   * @param {boolean} p2
   * @return {void}
   */
global.N_0x8CB2553C559102C1 = function (ped, p1, p2) {
  return Citizen.invokeNative('0x8cb2553c559102c1', ped, p1, p2);
};

/**
   * _0x8D9DB115FBA8E23D
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x8D9DB115FBA8E23D = function (p0) {
  return Citizen.invokeNative('0x8d9db115fba8e23d', p0);
};

/**
   * _0x900CA00CE703E1E2
   * Used in Script Function AGGRO_SHOULD_PED_HEAR_DEATH
   * _GET_PED_*
   *
   * @param {number} ped
   * @return {number}
   */
global.N_0x900CA00CE703E1E2 = function (ped) {
  return Citizen.invokeNative('0x900ca00ce703e1e2', ped, _r, _rf);
};

/**
   * _0x9078FB0557364099
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x9078FB0557364099 = function (p0) {
  return Citizen.invokeNative('0x9078fb0557364099', p0);
};

/**
   * _0x913D04A5176F84C9
   * _IS_PED_S* - _IS_PED_U*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x913D04A5176F84C9 = function (ped) {
  return Citizen.invokeNative('0x913d04a5176f84c9', ped, _r);
};

/**
   * _0x9184788BFF1EDAD7
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x9184788BFF1EDAD7 = function (p0, p1) {
  return Citizen.invokeNative('0x9184788bff1edad7', p0, p1);
};

/**
   * _0x91BAB9E064F036CD
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x91BAB9E064F036CD = function (p0, p1) {
  return Citizen.invokeNative('0x91bab9e064f036cd', p0, p1);
};

/**
   * _0x92A1B55A59720395
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x92A1B55A59720395 = function (p0, p1) {
  return Citizen.invokeNative('0x92a1b55a59720395', p0, p1);
};

/**
   * _0x94132D7C8D3575C4
   * _GET_IS_PED_*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x94132D7C8D3575C4 = function (ped) {
  return Citizen.invokeNative('0x94132d7c8d3575c4', ped, _r);
};

/**
   * _HAS_PED_INTERACTED_WITH_PLAYER_RECENTLY
   * Returns whether a ped has interacted with a player recently.
   * flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/0x947E43F544B6AB34
   *
   * @param {number} ped
   * @param {number} player
   * @param {number} flag
   * @param {number} ms
   * @return {boolean}
   */
global.HasPedInteractedWithPlayerRecently = function (ped, player, flag, ms) {
  return Citizen.invokeNative('0x947e43f544b6ab34', ped, player, flag, ms, _r);
};

/**
   * _0x9629FAF6460D35CB
   *
   * @param {number} group
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x9629FAF6460D35CB = function (group, p1) {
  return Citizen.invokeNative('0x9629faf6460d35cb', _ch(group), p1);
};

/**
   * _0x96595B36D6A2279B
   * Only used in R* Script mob4 combined with SET_ANIMAL_TUNING_BOOL_PARAM
   * _SET_PED_S* - _SET_PED_TARGET_*
   *
   * @param {number} animal
   * @param {boolean} toggle
   * @return {void}
   */
global.N_0x96595B36D6A2279B = function (animal, toggle) {
  return Citizen.invokeNative('0x96595b36d6a2279b', animal, toggle);
};

/**
   * _0x966DE09688A1DE39
   * _SET_FORMATION_P*
   *
   * @param {number} groupId
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @return {void}
   */
global.N_0x966DE09688A1DE39 = function (groupId, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x966de09688a1de39', groupId, _fv(p1), _fv(p2), _fv(p3), _fv(p4));
};

/**
   * _0x96C7B659854DE629
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x96C7B659854DE629 = function (p0, p1) {
  return Citizen.invokeNative('0x96c7b659854de629', p0, p1);
};

/**
   * _0x97A38B65EBDA3D50
   * _SET_PED_D*
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x97A38B65EBDA3D50 = function (ped, p1) {
  return Citizen.invokeNative('0x97a38b65ebda3d50', ped, p1);
};

/**
   * _0x97B06669AC569003
   * _CLEAR*
   *
   * @param {number} ped1
   * @param {number} ped2
   * @return {void}
   */
global.N_0x97B06669AC569003 = function (ped1, ped2) {
  return Citizen.invokeNative('0x97b06669ac569003', ped1, ped2);
};

/**
   * _0x97C475212B327666
   * _SET_SCENARIO_PED_* - _SET_SPAWNER_*
   *
   * @param {number} groupId
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x97C475212B327666 = function (groupId, p1) {
  return Citizen.invokeNative('0x97c475212b327666', groupId, p1);
};

/**
   * _0x9851DE7AEC10B4E1
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p3
   * @param {number} p4
   * @param {any} p5
   * @return {void}
   */
global.N_0x9851DE7AEC10B4E1 = function (x, y, z, p3, p4, p5) {
  return Citizen.invokeNative('0x9851de7aec10b4e1', _fv(x), _fv(y), _fv(z), _fv(p3), p4, p5);
};

/**
   * _0x992187D975635DF5
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x992187D975635DF5 = function (p0, p1) {
  return Citizen.invokeNative('0x992187d975635df5', p0, p1);
};

/**
   * _0x99DF2639DA76C1DC
   * _CAN_PED_*
   *
   * @param {number} ped1
   * @param {number} ped2
   * @param {number} p2
   * @return {boolean}
   */
global.N_0x99DF2639DA76C1DC = function (ped1, ped2, p2) {
  return Citizen.invokeNative('0x99df2639da76c1dc', ped1, ped2, p2, _r);
};

/**
   * _0x9A4AC116CC1EEE14
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x9A4AC116CC1EEE14 = function (p0) {
  return Citizen.invokeNative('0x9a4ac116cc1eee14', p0);
};

/**
   * _0x9AB33CB5834885B3
   * _SET_PED_M*
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @return {void}
   */
global.N_0x9AB33CB5834885B3 = function (ped, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x9ab33cb5834885b3', ped, _fv(p1), _fv(p2), _fv(p3), _fv(p4));
};

/**
   * _0x9B65444C07B782BF
   * Only used in SP R* Script winter1: p1 = Winter1Mount
   *
   * @param {number} ped
   * @param {string | number} p1
   * @return {void}
   */
global.N_0x9B65444C07B782BF = function (ped, p1) {
  return Citizen.invokeNative('0x9b65444c07b782bf', ped, _ts(p1));
};

/**
   * _GET_CATEGORY_OF_COMPONENT_AT_INDEX
   *
   * @param {number} ped
   * @param {number} componentIndex
   * @param {any} p2
   * @return {number}
   */
global.GetCategoryOfComponentAtIndex = function (ped, componentIndex, p2) {
  return Citizen.invokeNative('0x9b90842304c938a7', ped, componentIndex, p2, _r, _ri);
};

/**
   * _0x9B9B9FA0EA283E3D
   * Used in Script Function SKCS_PLAYER_ROBBING
   * _SET_PED_SHOULD_PLAY_* - _SET_PED_SW*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x9B9B9FA0EA283E3D = function (ped, p1) {
  return Citizen.invokeNative('0x9b9b9fa0ea283e3d', ped, _fv(p1));
};

/**
   * _0x9BBEAF8B0C007F1E
   * _SET_PLAYER_CAN_B* - _SET_PLAYER_CAN_U*
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x9BBEAF8B0C007F1E = function (ped, p1) {
  return Citizen.invokeNative('0x9bbeaf8b0c007f1e', ped, p1);
};

/**
   * _HAS_PED_BEEN_SHOT_BY_PLAYER_RECENTLY
   * this native checks if player has shot a specific ped for the duration passed p2 is in milliseconds 
   *
   * @param {number} player
   * @param {number} ped
   * @param {number} duration
   * @return {boolean}
   */
global.HasPedBeenShotByPlayerRecently = function (player, ped, duration) {
  return Citizen.invokeNative('0x9c81338b2e62ce0a', player, ped, duration, _r);
};

/**
   * _0x9D8DFE2DE9CB4DFC
   * _RESET_PED_*
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x9D8DFE2DE9CB4DFC = function (ped) {
  return Citizen.invokeNative('0x9d8dfe2de9cb4dfc', ped);
};

/**
   * _0x9E3842E5DAD69F80
   * Only used in SP R* Script loanshark_hunter
   *
   * @param {number} volume
   * @return {void}
   */
global.N_0x9E3842E5DAD69F80 = function (volume) {
  return Citizen.invokeNative('0x9e3842e5dad69f80', volume);
};

/**
   * _0x9E66708B2B41F14A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x9E66708B2B41F14A = function (p0, p1) {
  return Citizen.invokeNative('0x9e66708b2b41f14a', p0, p1);
};

/**
   * _0x9F0F28B42C4EE80A
   *
   * @param {number} animal
   * @param {number} p2
   * @return {void}
   */
global.N_0x9F0F28B42C4EE80A = function (animal, p2) {
  return Citizen.invokeNative('0x9f0f28b42c4ee80a', animal, _fv(p2));
};

/**
   * _0x9F933E0985E12C51
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @return {void}
   */
global.N_0x9F933E0985E12C51 = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0x9f933e0985e12c51', ped, _fv(p1), _fv(p2), _fv(p3));
};

/**
   * _0xA064BBABB064446F
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xA064BBABB064446F = function (p0) {
  return Citizen.invokeNative('0xa064bbabb064446f', p0);
};

/**
   * _0xA180FBD502A03125
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0xA180FBD502A03125 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xa180fbd502a03125', p0, p1, p2, _r);
};

/**
   * _0xA1FBAC56D38563E2
   *
   * @param {number} volume
   * @return {boolean}
   */
global.N_0xA1FBAC56D38563E2 = function (volume) {
  return Citizen.invokeNative('0xa1fbac56d38563e2', volume, _r);
};

/**
   * _0xA2116C1E4ED85C24
   * _SET_PED_*
   *
   * @param {number} ped
   * @param {boolean} inverted
   * @return {void}
   */
global.N_0xA2116C1E4ED85C24 = function (ped, inverted) {
  return Citizen.invokeNative('0xa2116c1e4ed85c24', ped, inverted);
};

/**
   * _0xA218D2BBCAA7388C
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xA218D2BBCAA7388C = function (p0, p1) {
  return Citizen.invokeNative('0xa218d2bbcaa7388c', p0, p1, _r);
};

/**
   * _0xA274F51EF7E34B95
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xA274F51EF7E34B95 = function (p0, p1) {
  return Citizen.invokeNative('0xa274f51ef7e34b95', p0, p1, _r);
};

/**
   * _0xA2B8E47442C76CEC
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xA2B8E47442C76CEC = function (p0, p1) {
  return Citizen.invokeNative('0xa2b8e47442c76cec', p0, p1);
};

/**
   * _0xA2F8B3B5FEDFC100
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xA2F8B3B5FEDFC100 = function (p0, p1) {
  return Citizen.invokeNative('0xa2f8b3b5fedfc100', p0, p1);
};

/**
   * _0xA31D350D66FA1855
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xA31D350D66FA1855 = function (p0) {
  return Citizen.invokeNative('0xa31d350d66fa1855', p0, _r);
};

/**
   * _0xA405BF9F01960C16
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xA405BF9F01960C16 = function (p0) {
  return Citizen.invokeNative('0xa405bf9f01960c16', p0);
};

/**
   * _0xA4AC05B1A364EBC5
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0xA4AC05B1A364EBC5 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xa4ac05b1a364ebc5', p0, p1, p2, _r);
};

/**
   * _0xA4B6432E3880F2F9
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0xA4B6432E3880F2F9 = function (ped) {
  return Citizen.invokeNative('0xa4b6432e3880f2f9', ped, _r);
};

/**
   * _0xA691C10054275290
   *
   * @param {number} mount
   * @param {number} player
   * @param {number} dismountedTimestamp
   * @return {void}
   */
global.N_0xA691C10054275290 = function (mount, player, dismountedTimestamp) {
  return Citizen.invokeNative('0xa691c10054275290', mount, player, dismountedTimestamp);
};

/**
   * _0xA6D6F03095C88F59
   * _DELETE_*
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0xA6D6F03095C88F59 = function (ped) {
  return Citizen.invokeNative('0xa6d6f03095c88f59', ped);
};

/**
   * _0xA7A806677F8DE138
   * Washing player's face/hands now
   * _CLEAR_PED_E* - _CLEAR_PED_L*
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0xA7A806677F8DE138 = function (ped) {
  return Citizen.invokeNative('0xa7a806677f8de138', ped);
};

/**
   * _0xA7DC9266ED6A4E51
   * _CLEAR_PED_B* - _CLEAR_PED_C*
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0xA7DC9266ED6A4E51 = function (ped) {
  return Citizen.invokeNative('0xa7dc9266ed6a4e51', ped);
};

/**
   * _0xA8A95CECB1906EA2
   * _SET_ENABLE_B* - _SET_ENABLE_H*
   *
   * @param {number} groupId
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xA8A95CECB1906EA2 = function (groupId, p1) {
  return Citizen.invokeNative('0xa8a95cecb1906ea2', groupId, p1);
};

/**
   * _0xA90684ED185CCB4B
   * Only used in R* Script mob4 and rcm_mason4
   * _SET_PED_DEFENSIVE_* - _SET_PED_DESIRED_*
   *
   * @param {number} animal
   * @param {boolean} p1
   * @param {number} p2
   * @param {number} p3
   * @return {void}
   */
global.N_0xA90684ED185CCB4B = function (animal, p1, p2, p3) {
  return Citizen.invokeNative('0xa90684ed185ccb4b', animal, p1, _fv(p2), _fv(p3));
};

/**
   * _0xA967D6A8ED2D713B
   * _SET_PED_P* - _SET_PED_R*
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xA967D6A8ED2D713B = function (ped, p1) {
  return Citizen.invokeNative('0xa967d6a8ed2d713b', ped, p1);
};

/**
   * _0xAA6C49AE90A32299
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0xAA6C49AE90A32299 = function (ped, p1) {
  return Citizen.invokeNative('0xaa6c49ae90a32299', ped, _ch(p1));
};

/**
   * _SET_ACTIVE_META_PED_COMPONENTS_UPDATED
   * Related to _0x704C908E9C405136 for component loading
   * Can be used to fix missing outfit changes, always paired with _UPDATE_PED_VARIATION
   * _S*
   * Doesn't actually return anything.
   *
   * @param {number} ped
   * @param {boolean} isMp
   * @return {any}
   */
global.SetActiveMetaPedComponentsUpdated = function (ped, isMp) {
  return Citizen.invokeNative('0xaab86462966168ce', ped, isMp, _r);
};

/**
   * _0xAAC0EE3B4999ABB5
   *
   * @param {number} ped
   * @param {number} targetPed
   * @return {void}
   */
global.N_0xAAC0EE3B4999ABB5 = function (ped, targetPed) {
  return Citizen.invokeNative('0xaac0ee3b4999abb5', ped, targetPed);
};

/**
   * _0xAD3330E3C3E98007
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xAD3330E3C3E98007 = function (p0, p1) {
  return Citizen.invokeNative('0xad3330e3c3e98007', p0, p1);
};

/**
   * _0xAE6B68A83ABBE7C0
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xAE6B68A83ABBE7C0 = function (p0) {
  return Citizen.invokeNative('0xae6b68a83abbe7c0', p0);
};

/**
   * _0xAF041C10756C30FB
   * _CLEAR_PED_D*
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {boolean} p2
   * @param {boolean} p3
   * @return {void}
   */
global.N_0xAF041C10756C30FB = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0xaf041c10756c30fb', ped, p1, p2, p3);
};

/**
   * _0xB05CC690CDE8A4A9
   * Used to set up bad guy groups in nb_kidnapped R* Script (MP_RE_KIDNAPPED): p1 = 4.f
   * _SET_FORMATION_*
   *
   * @param {number} groupId
   * @param {number} p1
   * @return {boolean}
   */
global.N_0xB05CC690CDE8A4A9 = function (groupId, p1) {
  return Citizen.invokeNative('0xb05cc690cde8a4a9', groupId, _fv(p1), _r);
};

/**
   * _0xB06F5F1DEF417216
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0xB06F5F1DEF417216 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xb06f5f1def417216', p0, p1, p2, p3);
};

/**
   * _GET_META_PED_RACE
   *
   * @param {number} ped
   * @return {number}
   */
global.GetMetaPedRace = function (ped) {
  return Citizen.invokeNative('0xb292203008ebbaac', ped, _r, _ri);
};

/**
   * _0xB29C553BA582D09E
   * Used in Script Function SATCHEL_COUNT_BREAKDOWN_COMPONENTS
   *
   * @param {DataView} p0
   * @param {number} model
   * @param {number} damageCleanliness
   * @param {number} p3
   * @return {any}
   */
global.N_0xB29C553BA582D09E = function (p0, model, damageCleanliness, p3) {
  return Citizen.invokeNative('0xb29c553ba582d09e', p0, _ch(model), damageCleanliness, p3, _r);
};

/**
   * _0xB4B7C92FCE7347B7
   * _RESET_PED_C*
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0xB4B7C92FCE7347B7 = function (ped) {
  return Citizen.invokeNative('0xb4b7c92fce7347b7', ped);
};

/**
   * _0xB65927F861E7AE39
   *
   * @param {number} ped
   * @param {number} p1
   * @return {boolean}
   */
global.N_0xB65927F861E7AE39 = function (ped, p1) {
  return Citizen.invokeNative('0xb65927f861e7ae39', ped, p1, _r);
};

/**
   * _0xB7DBB2986B87E230
   *
   * @param {number} ped
   * @param {number} p1
   * @return {boolean}
   */
global.N_0xB7DBB2986B87E230 = function (ped, p1) {
  return Citizen.invokeNative('0xb7dbb2986b87e230', ped, _fv(p1), _r);
};

/**
   * _0xB8AB265426CFE6DD
   * _SET_HO*
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xB8AB265426CFE6DD = function (ped, p1) {
  return Citizen.invokeNative('0xb8ab265426cfe6dd', ped, p1);
};

/**
   * _0xB8E2D655E1D5BD39
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xB8E2D655E1D5BD39 = function (p0) {
  return Citizen.invokeNative('0xb8e2d655e1d5bd39', p0, _r);
};

/**
   * _0xB91AB3BE7F655D49
   * _IS_PED_J* - _IS_PED_L*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0xB91AB3BE7F655D49 = function (ped) {
  return Citizen.invokeNative('0xb91ab3be7f655d49', ped, _r);
};

/**
   * _0xB9BDFAE609DFB7C5
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xB9BDFAE609DFB7C5 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xb9bdfae609dfb7c5', p0, p1, p2);
};

/**
   * _SET_PED_DESIRES_GROUP
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedDesiresGroup = function (ped, toggle) {
  return Citizen.invokeNative('0xbad2a311667a50d7', ped, toggle);
};

/**
   * _0xBB3E5370EBB6BE28
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xBB3E5370EBB6BE28 = function (p0, p1) {
  return Citizen.invokeNative('0xbb3e5370ebb6be28', p0, p1, _r);
};

/**
   * _0xBC1DC48270468444
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xBC1DC48270468444 = function (p0) {
  return Citizen.invokeNative('0xbc1dc48270468444', p0);
};

/**
   * _0xBD0E4F52F6D95242
   * _IS_PED_M* - _IS_PED_O*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0xBD0E4F52F6D95242 = function (ped) {
  return Citizen.invokeNative('0xbd0e4f52f6d95242', ped, _r);
};

/**
   * _0xBF567DF2BEF211A6
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xBF567DF2BEF211A6 = function (p0, p1) {
  return Citizen.invokeNative('0xbf567df2bef211a6', p0, p1);
};

/**
   * _0xBFA6B7731C3BAF02
   * Only used in R* Script tg_p (CLIENT__AMBIENT_POPULATION - Player starts the populate in region)
   *
  
   * @return {void}
   */
global.N_0xBFA6B7731C3BAF02 = function () {
  return Citizen.invokeNative('0xbfa6b7731c3baf02');
};

/**
   * _0xC17A94CC8FC3C61A
   * _SET_PED_P* - _SET_PED_R*
   *
   * @param {number} entity
   * @param {number} boneId
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @return {void}
   */
global.N_0xC17A94CC8FC3C61A = function (entity, boneId, p2, p3, p4) {
  return Citizen.invokeNative('0xc17a94cc8fc3c61a', entity, boneId, _fv(p2), _fv(p3), _fv(p4));
};

/**
   * _0xC2722B252C79E641
   * _FORCE_PED_*
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {boolean} p3
   * @return {void}
   */
global.N_0xC2722B252C79E641 = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0xc2722b252c79e641', ped, p1, p2, p3);
};

/**
   * _0xC2EF407645BEECDC
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xC2EF407645BEECDC = function (p0) {
  return Citizen.invokeNative('0xc2ef407645beecdc', p0, _r);
};

/**
   * _0xC3995D396F1D97B6
   * _GET_PED_G* - _GET_PED_I*
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @return {boolean}
   */
global.N_0xC3995D396F1D97B6 = function (ped, p1, p2) {
  return Citizen.invokeNative('0xc3995d396f1d97b6', ped, p1, p2, _r);
};

/**
   * _SET_PELT_FOR_HORSE_BY_INVENTORY_ITEM
   * Set the pelt of the animal to the back of the horse
   * EXAMPLE:
   * local mount = GetMountOwnedByPlayer(PlayerId())
   * Citizen.InvokeNative(0xC412AA1C73111FE0,mount,GetHashKey('PROVISION_DEER_HIDE_POOR'),GetHashKey('a_c_deer_01_uppr_000_c0_001_ab'),0,0)
   *
   * @param {number} horse
   * @param {number} itemHash
   * @param {number} albedo
   * @param {number} normal
   * @param {boolean} p4
   * @return {void}
   */
global.SetPeltForHorseByInventoryItem = function (horse, itemHash, albedo, normal, p4) {
  return Citizen.invokeNative('0xc412aa1c73111fe0', horse, _ch(itemHash), _ch(albedo), _ch(normal), p4);
};

/**
   * _0xC48AF420371C7407
   * _SET_PED_M*
   *
   * @param {number} ped
   * @param {number} grapple
   * @return {any}
   */
global.N_0xC48AF420371C7407 = function (ped, grapple) {
  return Citizen.invokeNative('0xc48af420371c7407', ped, _ch(grapple), _r);
};

/**
   * _PED_SET_SIMPLE_PLAYER_MEMORY
   * memoryType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/_PED_SET_SIMPLE_PLAYER_MEMORY
   *
   * @param {number} ped
   * @param {number} memoryType
   * @return {void}
   */
global.PedSetSimplePlayerMemory = function (ped, memoryType) {
  return Citizen.invokeNative('0xc494c76a34266e82', ped, memoryType);
};

/**
   * _GET_PED_RAGDOLL_BONE_INDEX
   * Returns boneIndex
   *
   * @param {number} ped
   * @param {number} boneId
   * @return {number}
   */
global.GetPedRagdollBoneIndex = function (ped, boneId) {
  return Citizen.invokeNative('0xc5303f460a40d21d', ped, boneId, _r, _ri);
};

/**
   * _0xC5B78E41DCF8227C
   * _SET_H* - _SET_I*
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xC5B78E41DCF8227C = function (ped, p1) {
  return Citizen.invokeNative('0xc5b78e41dcf8227c', ped, p1);
};

/**
   * _0xC6136B40FFFB778B
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0xC6136B40FFFB778B = function (p0) {
  return Citizen.invokeNative('0xc6136b40fffb778b', p0);
};

/**
   * _0xC6981AFF6D2A71C2
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xC6981AFF6D2A71C2 = function (p0) {
  return Citizen.invokeNative('0xc6981aff6d2a71c2', p0);
};

/**
   * _0xC6C4E15CF7D52FEA
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xC6C4E15CF7D52FEA = function (p0, p1) {
  return Citizen.invokeNative('0xc6c4e15cf7d52fea', p0, p1);
};

/**
   * _0xC9151483CC06A414
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0xC9151483CC06A414 = function (ped) {
  return Citizen.invokeNative('0xc9151483cc06a414', ped);
};

/**
   * _0xC991EF46FE323867
   * Not implemented.
   *
   * @param {number} ped
   * @param {any} p1
   * @return {void}
   */
global.N_0xC991EF46FE323867 = function (ped, p1) {
  return Citizen.invokeNative('0xc991ef46fe323867', ped, p1);
};

/**
   * _0xC99F104BDF8C7F5A
   * _SET_PLAYER_N* - _SET_PLAYER_S*
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xC99F104BDF8C7F5A = function (ped, p1) {
  return Citizen.invokeNative('0xc99f104bdf8c7f5a', ped, p1);
};

/**
   * _0xCA95924C893A0C91
   * Returns vehicle speed
   * _COMPUTE_*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {number}
   */
global.N_0xCA95924C893A0C91 = function (ped, p1) {
  return Citizen.invokeNative('0xca95924c893a0c91', ped, _fv(p1), _r, _rf);
};

/**
   * _0xCA95C156C14B2054
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xCA95C156C14B2054 = function (p0, p1) {
  return Citizen.invokeNative('0xca95c156c14b2054', p0, p1);
};

/**
   * _0xCAC43D060099EA72
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0xCAC43D060099EA72 = function (ped) {
  return Citizen.invokeNative('0xcac43d060099ea72', ped);
};

/**
   * _0xCB1A3864C524F784
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xCB1A3864C524F784 = function (p0, p1) {
  return Citizen.invokeNative('0xcb1a3864c524f784', p0, p1);
};

/**
   * _0xCB86D3E3E3708901
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {any}
   */
global.N_0xCB86D3E3E3708901 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xcb86d3e3e3708901', p0, p1, p2, p3, p4, _r);
};

/**
   * _0xCB8F4C9343EBE240
   * Only used in R* SP Scripts
   * _GET_PLAYER_W* - _GET_RANDOM_*
   *
   * @param {number} ped
   * @param {number} eventType
   * @return {[boolean, Vector3]}
   */
global.N_0xCB8F4C9343EBE240 = function (ped, eventType) {
  return Citizen.invokeNative('0xcb8f4c9343ebe240', ped, _ch(eventType), _v, _r);
};

/**
   * _0xCBDE59C48F2B06F5
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xCBDE59C48F2B06F5 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xcbde59c48f2b06f5', p0, p1, p2);
};

/**
   * _0xCD9E5F94A2F38683
   * _SET_PED_R* - _SET_PED_S*
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xCD9E5F94A2F38683 = function (ped, p1) {
  return Citizen.invokeNative('0xcd9e5f94a2f38683', ped, p1);
};

/**
   * _0xCDFB8C04D4C95D9B
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0xCDFB8C04D4C95D9B = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xcdfb8c04d4c95d9b', p0, p1, p2, p3);
};

/**
   * _0xCE7A6C1D5CDE1F9D
   *
   * @param {number} ped
   * @param {number} object
   * @param {string | number} propName
   * @param {string | number} animName
   * @return {void}
   */
global.N_0xCE7A6C1D5CDE1F9D = function (ped, object, propName, animName) {
  return Citizen.invokeNative('0xce7a6c1d5cde1f9d', ped, object, _ts(propName), _ts(animName));
};

/**
   * _0xCF0B19806473D324
   * _SET_PED_COMBAT_*
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.N_0xCF0B19806473D324 = function (ped, x, y, z) {
  return Citizen.invokeNative('0xcf0b19806473d324', ped, _fv(x), _fv(y), _fv(z));
};

/**
   * _0xD049920CD29F6CC8
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0xD049920CD29F6CC8 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xd049920cd29f6cc8', p0, p1, p2, p3, p4);
};

/**
   * _0xD049FDAF089FDDB0
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.N_0xD049FDAF089FDDB0 = function (ped, p1, p2) {
  return Citizen.invokeNative('0xd049fdaf089fddb0', ped, _ch(p1), _fv(p2));
};

/**
   * _0xD103F6DBB5442BE8
   * Params: p1 either a 1 or 0, so perhaps BOOL
   * _SET_PED_A*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0xD103F6DBB5442BE8 = function (ped, p1) {
  return Citizen.invokeNative('0xd103f6dbb5442be8', ped, p1);
};

/**
   * _0xD2F0FE8805D91647
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xD2F0FE8805D91647 = function (p0, p1) {
  return Citizen.invokeNative('0xd2f0fe8805d91647', p0, p1);
};

/**
   * _0xD355E2F1BB41087E
   *
   * @param {number} ped
   * @param {number} p1
   * @return {boolean}
   */
global.N_0xD355E2F1BB41087E = function (ped, p1) {
  return Citizen.invokeNative('0xd355e2f1bb41087e', ped, _fv(p1), _r);
};

/**
   * _0xD4D403EA031F351C
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0xD4D403EA031F351C = function (ped) {
  return Citizen.invokeNative('0xd4d403ea031f351c', ped, _r);
};

/**
   * _0xD55DB4466D00A258
   * Used in Script Function LA_CHECK_ALERTED
   * _GET_IS_PED_*
   *
   * @param {number} legendaryAnimal
   * @return {boolean}
   */
global.N_0xD55DB4466D00A258 = function (legendaryAnimal) {
  return Citizen.invokeNative('0xd55db4466d00a258', legendaryAnimal, _r);
};

/**
   * _0xD5BD1B5318A81994
   * _SET_FORMATION_*
   *
   * @param {number} groupId
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xD5BD1B5318A81994 = function (groupId, p1) {
  return Citizen.invokeNative('0xd5bd1b5318a81994', groupId, p1);
};

/**
   * _0xD61FCF9FCFD515B7
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xD61FCF9FCFD515B7 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xd61fcf9fcfd515b7', p0, p1, p2);
};

/**
   * _0xD7D2F45C56A4F4DF
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xD7D2F45C56A4F4DF = function (p0, p1, p2) {
  return Citizen.invokeNative('0xd7d2f45c56a4f4df', p0, p1, p2);
};

/**
   * _0xD8544F6260F5F01E
   * METAPED_PLAYER_COMPONENTS_SET_META_TYPE_TO_BE_BYPASSED: Setting visibility
   * p1 is mostly 10
   * _CLEAR_PED_N* - _CLEAR_PED_W*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0xD8544F6260F5F01E = function (ped, p1) {
  return Citizen.invokeNative('0xd8544f6260f5f01e', ped, p1);
};

/**
   * _0xD8CEEED54C672B5D
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.N_0xD8CEEED54C672B5D = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xd8ceeed54c672b5d', p0, p1, p2, p3, p4, p5, p6);
};

/**
   * _0xD97BC27AC039F681
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {any}
   */
global.N_0xD97BC27AC039F681 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xd97bc27ac039f681', p0, p1, p2, p3, _r);
};

/**
   * _IS_PED_AFLOAT
   * detects if ped is afloat in water like swimming or in a boat (driving or standing on it)
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedAfloat = function (ped) {
  return Citizen.invokeNative('0xdc88d06719070c39', ped, _r);
};

/**
   * _0xDC91F22F09BC6C2F
   * Used in Script Function MP_MAIN_OFFLINE__INITIALIZE_GAME
   * _SET_RELATIONSHIP_*
   *
   * @param {number} group
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xDC91F22F09BC6C2F = function (group, p1) {
  return Citizen.invokeNative('0xdc91f22f09bc6c2f', _ch(group), p1);
};

/**
   * _0xDD9540E7B1C9714F
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} r
   * @param {number} g
   * @param {number} b
   * @return {void}
   */
global.N_0xDD9540E7B1C9714F = function (ped, p1, r, g, b) {
  return Citizen.invokeNative('0xdd9540e7b1c9714f', ped, _ch(p1), _fv(r), _fv(g), _fv(b));
};

/**
   * _0xDDFAD4DEAA7FA362
   * _SET_FORMATION_P*
   *
   * @param {number} groupId
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @return {void}
   */
global.N_0xDDFAD4DEAA7FA362 = function (groupId, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xddfad4deaa7fa362', groupId, _fv(p1), _fv(p2), _fv(p3), _fv(p4));
};

/**
   * _0xDEDBED3020DA49DC
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xDEDBED3020DA49DC = function (p0) {
  return Citizen.invokeNative('0xdedbed3020da49dc', p0);
};

/**
   * _0xDEE8D30AA5C2E28D
   *
   * @param {number} ped
   * @param {number} p1
   * @param {boolean} p2
   * @return {void}
   */
global.N_0xDEE8D30AA5C2E28D = function (ped, p1, p2) {
  return Citizen.invokeNative('0xdee8d30aa5c2e28d', ped, _ch(p1), p2);
};

/**
   * _0xE0FE107AB174D64A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xE0FE107AB174D64A = function (p0, p1) {
  return Citizen.invokeNative('0xe0fe107ab174d64a', p0, p1);
};

/**
   * _0xE1103300F3456DE7
   * _SET_FORMATION_P*
   *
   * @param {number} groupId
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.N_0xE1103300F3456DE7 = function (groupId, p1, p2) {
  return Citizen.invokeNative('0xe1103300f3456de7', groupId, _fv(p1), _fv(p2));
};

/**
   * _0xE1AADD0055D76603
   * _C*
   *
   * @param {number} ped
   * @param {number} entity
   * @param {number} boneIndex1
   * @param {number} boneIndex2
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p7
   * @param {boolean} p8
   * @param {boolean} p9
   * @param {number} p10
   * @return {void}
   */
global.N_0xE1AADD0055D76603 = function (ped, entity, boneIndex1, boneIndex2, x, y, z, p7, p8, p9, p10) {
  return Citizen.invokeNative('0xe1aadd0055d76603', ped, entity, boneIndex1, boneIndex2, _fv(x), _fv(y), _fv(z), _fv(p7), p8, p9, p10);
};

/**
   * _0xE1B3BE07D3AADDED
   *
   * @param {number} ped
   * @param {number} p1
   * @param {boolean} p2
   * @return {void}
   */
global.N_0xE1B3BE07D3AADDED = function (ped, p1, p2) {
  return Citizen.invokeNative('0xe1b3be07d3aadded', ped, p1, p2);
};

/**
   * _0xE20027B414BFE6C7
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xE20027B414BFE6C7 = function (p0, p1) {
  return Citizen.invokeNative('0xe20027b414bfe6c7', p0, p1);
};

/**
   * _0xE29D8CD66553DBAA
   * _SET_PED_R* -_SET_PED_S*
   *
   * @param {number} horse
   * @return {void}
   */
global.N_0xE29D8CD66553DBAA = function (horse) {
  return Citizen.invokeNative('0xe29d8cd66553dbaa', horse);
};

/**
   * _0xE37ACEE15AC50C7E
   * _SET_PED_IN*
   *
   * @param {number} ped
   * @param {string | number} p1
   * @return {void}
   */
global.N_0xE37ACEE15AC50C7E = function (ped, p1) {
  return Citizen.invokeNative('0xe37acee15ac50c7e', ped, _ts(p1));
};

/**
   * _0xE4C95E0AE31C6512
   *
   * @param {number} ped
   * @param {any} p1
   * @return {void}
   */
global.N_0xE4C95E0AE31C6512 = function (ped, p1) {
  return Citizen.invokeNative('0xe4c95e0ae31c6512', ped, p1);
};

/**
   * _0xE4EF4382E22C780C
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xE4EF4382E22C780C = function (p0) {
  return Citizen.invokeNative('0xe4ef4382e22c780c', p0);
};

/**
   * _0xE50C9816B3F22D8B
   * _SET_D*
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.N_0xE50C9816B3F22D8B = function (ped, p1, p2) {
  return Citizen.invokeNative('0xe50c9816b3f22d8b', ped, _ch(p1), _fv(p2));
};

/**
   * _0xE6CB36F43A95D75F
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xE6CB36F43A95D75F = function (p0) {
  return Citizen.invokeNative('0xe6cb36f43a95d75f', p0);
};

/**
   * _0xE735A7DA22E88359
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xE735A7DA22E88359 = function (p0) {
  return Citizen.invokeNative('0xe735a7da22e88359', p0);
};

/**
   * _0xE737D5F14304A2EC
   * Only used in R* Script nb_animal_attack: p2 = 120000
   * _SET_PED_SH* - _SET_PED_SP*
   *
   * @param {number} ped
   * @param {number} player
   * @param {number} p2
   * @return {void}
   */
global.N_0xE737D5F14304A2EC = function (ped, player, p2) {
  return Citizen.invokeNative('0xe737d5f14304a2ec', ped, player, p2);
};

/**
   * _0xE76687023D8C8505
   * Used for AUDIO / ANIMSCENE (REFERENCE_REGIONAL_CHARACTER)
   * Params: p1 = 0
   * _GET_PED_IN*
   *
   * @param {number} perscharModel
   * @param {number} p1
   * @return {number}
   */
global.N_0xE76687023D8C8505 = function (perscharModel, p1) {
  return Citizen.invokeNative('0xe76687023d8c8505', _ch(perscharModel), p1, _r, _ri);
};

/**
   * _0xE8ABE3B73FC7FE17
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0xE8ABE3B73FC7FE17 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xe8abe3b73fc7fe17', p0, p1, p2, p3);
};

/**
   * _GET_PLAYER_DISMOUNT_TIMESTAMP
   * Returns dismounted timestamp
   *
   * @param {number} mount
   * @param {number} player
   * @return {number}
   */
global.GetPlayerDismountTimestamp = function (mount, player) {
  return Citizen.invokeNative('0xe8d1ccb9375c101b', mount, player, _r, _ri);
};

/**
   * _0xE9E06EA514A69061
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xE9E06EA514A69061 = function (p0, p1) {
  return Citizen.invokeNative('0xe9e06ea514a69061', p0, p1);
};

/**
   * _0xEA8763E505AFD49A
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xEA8763E505AFD49A = function (p0, p1, p2) {
  return Citizen.invokeNative('0xea8763e505afd49a', p0, p1, p2);
};

/**
   * _0xEB8886E1065654CD
   * Washing player's face/hands now
   * _FA* - _FI*
   *
   * @param {number} ped
   * @param {number} p1
   * @param {string | number} p2
   * @param {number} p3
   * @return {void}
   */
global.N_0xEB8886E1065654CD = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0xeb8886e1065654cd', ped, p1, _ts(p2), _fv(p3));
};

/**
   * _0xEBAAC9A750E7563B
   * If returned true: PROCESS_RESIZING_TRACKING_BOUNDS_VOLUME - Scaling UP the bounds due to tracking
   * If returned false: PROCESS_RESIZING_TRACKING_BOUNDS_VOLUME - Scaling DOWN the bounds due to tracking
   * _IS_PED_T* - _IS_PED_U*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0xEBAAC9A750E7563B = function (ped) {
  return Citizen.invokeNative('0xebaac9a750e7563b', ped, _r);
};

/**
   * _0xEBD49472BCCF7642
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xEBD49472BCCF7642 = function (p0, p1) {
  return Citizen.invokeNative('0xebd49472bccf7642', p0, p1);
};

/**
   * _0xEC60D1D225BC50AA
   * _SET_C*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0xEC60D1D225BC50AA = function (ped, p1) {
  return Citizen.invokeNative('0xec60d1d225bc50aa', ped, _fv(p1));
};

/**
   * _0xED1C764997A86D5A
   * Only used in R* Script nb_stalking_hunter
   *
   * @param {number} ped1
   * @param {number} ped2
   * @return {void}
   */
global.N_0xED1C764997A86D5A = function (ped1, ped2) {
  return Citizen.invokeNative('0xed1c764997a86d5a', ped1, ped2);
};

/**
   * _0xEEDC9B29314B2733
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @return {void}
   */
global.N_0xEEDC9B29314B2733 = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
  return Citizen.invokeNative('0xeedc9b29314b2733', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
};

/**
   * _0xEF371232BC6053E1
   * _ADD_*
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0xEF371232BC6053E1 = function (ped) {
  return Citizen.invokeNative('0xef371232bc6053e1', ped);
};

/**
   * _0xF47D54B986F0A346
   * Used in Script Function MOONSHINE_BAND_CLIENT_PATRON_UPDATE
   *
   * @param {number} ped
   * @param {number} danceIntensity
   * @return {void}
   */
global.N_0xF47D54B986F0A346 = function (ped, danceIntensity) {
  return Citizen.invokeNative('0xf47d54b986f0a346', ped, danceIntensity);
};

/**
   * _0xF4860514AD354226
   * Only used in SP Scripts
   * Returns count / index
   * _C*
   *
   * @param {number} shockingEvent
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p4
   * @return {[number, number]}
   */
global.N_0xF4860514AD354226 = function (shockingEvent, x, y, z, p4) {
  return Citizen.invokeNative('0xf4860514ad354226', shockingEvent, _fv(x), _fv(y), _fv(z), _fv(p4), _i, _r, _ri);
};

/**
   * _0xF634E2892220EF34
   *
   * @param {number} ped
   * @param {any} p1
   * @return {void}
   */
global.N_0xF634E2892220EF34 = function (ped, p1) {
  return Citizen.invokeNative('0xf634e2892220ef34', ped, p1);
};

/**
   * _0xF6A8C4B4A11AE89C
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {any}
   */
global.N_0xF6A8C4B4A11AE89C = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xf6a8c4b4a11ae89c', p0, p1, p2, p3, p4, p5, _r);
};

/**
   * _0xF7327ACC7A89AEF1
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0xF7327ACC7A89AEF1 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xf7327acc7a89aef1', p0, p1, p2, _r);
};

/**
   * _0xF917F92BF22ECBAB
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xF917F92BF22ECBAB = function (p0) {
  return Citizen.invokeNative('0xf917f92bf22ecbab', p0);
};

/**
   * _0xF9331B3A314EB49D
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0xF9331B3A314EB49D = function (ped) {
  return Citizen.invokeNative('0xf9331b3a314eb49d', ped, _r);
};

/**
   * _0xF9CBD46433E36713
   * Used in Script Function PLAYER_HEAD_TRACKING_MAINTAIN
   *
   * @param {number} ped
   * @param {number} targetEntity
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @param {number} p8
   * @param {string | number} p9
   * @return {void}
   */
global.N_0xF9CBD46433E36713 = function (ped, targetEntity, p2, p3, p4, p5, p6, p7, p8, p9) {
  return Citizen.invokeNative('0xf9cbd46433e36713', ped, targetEntity, _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), _ts(p9));
};

/**
   * _SET_PED_WETNESS
   * only works when you use SET_PED_WETNESS_HEIGHT first , if you do 0.0 (it resets) you need to apply again with SET_PED_WETNESS_HEIGHT to see the wetness effects again
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.SetPedWetness = function (ped, p1) {
  return Citizen.invokeNative('0xf9cff5bb70e8a2cb', ped, _fv(p1));
};

/**
   * _0xFA0D206B489A6846
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0xFA0D206B489A6846 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xfa0d206b489a6846', p0, p1, p2, p3, p4);
};

/**
   * _0xFA742B82D093D848
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xFA742B82D093D848 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xfa742b82d093d848', p0, p1, p2);
};

/**
   * _0xFA8C10DCE0706D43
   * _HAS_PED_*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0xFA8C10DCE0706D43 = function (ped) {
  return Citizen.invokeNative('0xfa8c10dce0706d43', ped, _r);
};

/**
   * _0xFC23348F0F4E245F
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0xFC23348F0F4E245F = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xfc23348f0f4e245f', p0, p1, p2, p3);
};

/**
   * _GET_NUM_RESERVED_STAMINA
   * returns the number of reserved stamina similar to _GET_NUM_RESERVED_HEALTH
   *
   * @param {number} ped
   * @return {number}
   */
global.GetNumReservedStamina = function (ped) {
  return Citizen.invokeNative('0xfc3b580c4380b5b7', ped, _r, _ri);
};

/**
   * _0xFD3C31A2E45671E7
   * _DISABLE_A* - _DISABLE_C*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0xFD3C31A2E45671E7 = function (ped, p1) {
  return Citizen.invokeNative('0xfd3c31a2e45671e7', ped, p1);
};

/**
   * _0xFD8E853F0BC2E942
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xFD8E853F0BC2E942 = function (p0, p1) {
  return Citizen.invokeNative('0xfd8e853f0bc2e942', p0, p1);
};

/**
   * _0xFEA6126C34DF2532
   * METAPED_PLAYER_COMPONENTS_SET_META_TYPE_TO_BE_BYPASSED: Setting visibility
   * _SET_M* - _SET_P*
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xFEA6126C34DF2532 = function (ped, p1) {
  return Citizen.invokeNative('0xfea6126c34df2532', ped, p1);
};

/**
   * _0xFFA1594703ED27CA
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0xFFA1594703ED27CA = function (ped, p1) {
  return Citizen.invokeNative('0xffa1594703ed27ca', ped, p1);
};

/**
   * _0xFFDE295662405B25
   * _GET_PED_COMBAT_M* - _GET_PED_C*
   *
   * @param {number} ped
   * @return {number}
   */
global.N_0xFFDE295662405B25 = function (ped) {
  return Citizen.invokeNative('0xffde295662405b25', ped, _r, _ri);
};

/**
   * _ADD_PED_STAY_OUT_VOLUME
   *
   * @param {number} ped
   * @param {number} volume
   * @return {boolean}
   */
global.AddPedStayOutVolume = function (ped, volume) {
  return Citizen.invokeNative('0xe9b168527b337bf0', ped, volume, _r);
};

/**
   * _ADD_PED_SUBSCRIBE_TO_LEGENDARY_BLIPS
   *
   * @param {number} ped
   * @return {boolean}
   */
global.AddPedSubscribeToLegendaryBlips = function (ped) {
  return Citizen.invokeNative('0xe37287ee358939c3', ped, _r);
};

/**
   * _ADD_SCENARIO_BLOCKING_VOLUME
   * flag: see ADD_SCENARIO_BLOCKING_AREA
   *
   * @param {number} volume
   * @param {boolean} p1
   * @param {number} flag
   * @return {any}
   */
global.AddScenarioBlockingVolume = function (volume, p1, flag) {
  return Citizen.invokeNative('0x4c39c95ae5db1329', volume, p1, flag, _r);
};

/**
   * _ADD_SCENARIO_TRANSITION
   * Forces transition now, called together with 0xD65FDC686A031C83
   *
   * @param {number} ped
   * @return {void}
   */
global.AddScenarioTransition = function (ped) {
  return Citizen.invokeNative('0x6d07b371e9439019', ped);
};

/**
   * _ADD_TEXTURE_LAYER
   * Creates ped overlay in texture override data and returns it's index.
   * This index are used for further overlay editing.
   * 
   * albedoHash: a hash of overlay's albedo texture
   * colorType: a color type(from 0 to 2). 0 is used for overlays with RGB colors usually.
   *
   * @param {number} textureId
   * @param {number} albedoHash
   * @param {number} normalHash
   * @param {number} materialHash
   * @param {number} blendType
   * @param {number} texAlpha
   * @param {number} sheetGridIndex
   * @return {number}
   */
global.AddTextureLayer = function (textureId, albedoHash, normalHash, materialHash, blendType, texAlpha, sheetGridIndex) {
  return Citizen.invokeNative('0x86bb5ff45f193a02', textureId, _ch(albedoHash), _ch(normalHash), _ch(materialHash), blendType, _fv(texAlpha), sheetGridIndex, _r, _ri);
};

/**
   * _APPLY_PED_META_PED_OUTFIT
   * https://github.com/femga/rdr3_discoveries/blob/master/clothes/metaped_outfits.lua
   *
   * @param {number} requestId
   * @param {number} ped
   * @param {boolean} p2
   * @param {boolean} p3
   * @return {boolean}
   */
global.ApplyPedMetaPedOutfit = function (requestId, ped, p2, p3) {
  return Citizen.invokeNative('0x74f512e29cb717e2', requestId, ped, p2, p3, _r);
};

/**
   * _APPLY_SHOP_ITEM_TO_PED
   *
   * @param {number} ped
   * @param {number} componentHash
   * @param {boolean} immediately
   * @param {boolean} isMp
   * @param {boolean} p4
   * @return {void}
   */
global.ApplyShopItemToPed = function (ped, componentHash, immediately, isMp, p4) {
  return Citizen.invokeNative('0xd3a7b003ed343fd9', ped, _ch(componentHash), immediately, isMp, p4);
};

/**
   * _APPLY_TEXTURE_ON_PED
   *
   * @param {number} ped
   * @param {number} componentHash
   * @param {number} textureId
   * @return {void}
   */
global.ApplyTextureOnPed = function (ped, componentHash, textureId) {
  return Citizen.invokeNative('0x0b46e25761519058', ped, _ch(componentHash), textureId);
};

/**
   * _ARE_ALL_AMBIENT_PED_RESERVATIONS_READY
   *
  
   * @return {boolean}
   */
global.AreAllAmbientPedReservationsReady = function () {
  return Citizen.invokeNative('0x5e420ff293ee5472', _r);
};

/**
   * _ATTACH_VOLUME_TO_ENTITY
   *
   * @param {number} volume
   * @param {number} entity
   * @param {number} offsetX
   * @param {number} offsetY
   * @param {number} offsetZ
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} p8
   * @param {boolean} p9
   * @return {void}
   */
global.AttachVolumeToEntity = function (volume, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, p8, p9) {
  return Citizen.invokeNative('0x7c00cfc48a782dc0', volume, entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), p8, p9);
};

/**
   * _CAN_PED_USE_SCENARIO_POINT
   * p2 is always 0, p3 is always 0, p4 is always 1
   *
   * @param {number} ped
   * @param {number} scenario
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {boolean}
   */
global.CanPedUseScenarioPoint = function (ped, scenario, p2, p3, p4) {
  return Citizen.invokeNative('0xab643407d0b26f07', ped, scenario, p2, p3, p4, _r);
};

/**
   * _CHANGE_PED_STAMINA
   * Alters entity's stamina by 'amount'. Can be negative (to drain stamina). float amount: -1000.0 - 1000.0
   *
   * @param {number} ped
   * @param {number} amount
   * @return {boolean}
   */
global.ChangePedStamina = function (ped, amount) {
  return Citizen.invokeNative('0xc3d4b754c0e86b9e', ped, _fv(amount), _r);
};

/**
   * _CLEAR_ACTIVE_ANIMAL_OWNER
   * Used in Script Functions PLAYER_HORSE_RELEASE_HORSE_TO_AMBIENT_WORLD (p1 = true), HORSE_SETUP_PLAYER_HORSE_ATTRIBUTES (p1 = false)
   * Set to false for player horse in scripts and seems it's only true when releasing/changing a player horse? Cannot determine what effect it has, but it doesn't seem to affect _GET_HORSE_TAMING_STATE
   *
   * @param {number} horse
   * @param {boolean} clear
   * @return {void}
   */
global.ClearActiveAnimalOwner = function (horse, clear) {
  return Citizen.invokeNative('0xbcc76708e5677e1d', horse, clear);
};

/**
   * _CLEAR_PED_ACTION_DISABLE_FLAG
   *
   * @param {number} ped
   * @param {number} actionDisableFlag
   * @return {void}
   */
global.ClearPedActionDisableFlag = function (ped, actionDisableFlag) {
  return Citizen.invokeNative('0x949b2f9ed2917f5d', ped, actionDisableFlag);
};

/**
   * _CLEAR_PED_BLOOD_DAMAGE_FACIAL
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.ClearPedBloodDamageFacial = function (ped, p1) {
  return Citizen.invokeNative('0x7f5d88333ee8a86f', ped, p1);
};

/**
   * _CLEAR_PED_COMBAT_STYLE
   * Params: p1 = 1 in R* Scripts
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.ClearPedCombatStyle = function (ped, p1) {
  return Citizen.invokeNative('0x78815fc52832b690', ped, p1);
};

/**
   * _CLEAR_PED_COMBAT_STYLE_MOD
   * _CLEAR_PED_COMBAT_*
   *
   * @param {number} ped
   * @param {number} combatStyleModHash
   * @return {void}
   */
global.ClearPedCombatStyleMod = function (ped, combatStyleModHash) {
  return Citizen.invokeNative('0x1fa132cbcd7cb239', ped, _ch(combatStyleModHash));
};

/**
   * _CLEAR_PED_DESIRED_LOCO_FOR_MODEL
   * Clears locomotion archetype
   *
   * @param {number} ped
   * @return {void}
   */
global.ClearPedDesiredLocoForModel = function (ped) {
  return Citizen.invokeNative('0x4fd80c3dd84b817b', ped);
};

/**
   * _CLEAR_PED_DESIRED_LOCO_MOTION_TYPE
   *
   * @param {number} ped
   * @return {void}
   */
global.ClearPedDesiredLocoMotionType = function (ped) {
  return Citizen.invokeNative('0x58f7db5bd8fa2288', ped);
};

/**
   * _CLEAR_PED_GRAPPLE_FLAG
   *
   * @param {number} ped
   * @param {number} flag
   * @return {void}
   */
global.ClearPedGrappleFlag = function (ped, flag) {
  return Citizen.invokeNative('0xeae3b5b019c8d23f', ped, flag);
};

/**
   * _CLEAR_PED_TARGET_ACTION_DISABLE_FLAG
   *
   * @param {number} ped
   * @param {number} actionDisableFlag
   * @return {void}
   */
global.ClearPedTargetActionDisableFlag = function (ped, actionDisableFlag) {
  return Citizen.invokeNative('0xbbf6d1d07c02d00a', ped, actionDisableFlag);
};

/**
   * _CLEAR_PED_TEXTURE
   * Removes every texture layer
   * Old Name: _RESET_PED_TEXTURE_2
   *
   * @param {number} textureId
   * @return {void}
   */
global.ClearPedTexture = function (textureId) {
  return Citizen.invokeNative('0xb63b9178d0f58d82', textureId);
};

/**
   * _CLEAR_PELT_FROM_HORSE
   *
   * @param {number} horse
   * @param {number} peltId
   * @return {void}
   */
global.ClearPeltFromHorse = function (horse, peltId) {
  return Citizen.invokeNative('0x627f7f3a0c4c51ff', horse, peltId);
};

/**
   * _COMPUTE_SATCHEL_ITEM_FOR_PED_CARCASS
   * Related to dead animals items/loots
   * Notice: skinningQuality is partially calculated using pedQuality
   *
   * @param {DataView} outInventoryItemArray
   * @param {number} ped
   * @param {number} damageCleanliness
   * @param {number} skinningQuality
   * @return {number}
   */
global.ComputeSatchelItemForPedCarcass = function (outInventoryItemArray, ped, damageCleanliness, skinningQuality) {
  return Citizen.invokeNative('0x6b89faa36fc909a3', outInventoryItemArray, ped, damageCleanliness, skinningQuality, _r, _ri);
};

/**
   * _CREATE_GRAVITY_WELL
   * Creates a handle to an instance of "CScriptResource_GravityWell", this system forces local ped to target specified position when moving, however player still can interrupt this.
   * Can be useful to "point" player at some specific position.
   * Only works while on-foot.
   * 
   * _CREATE_[P-Z]
   *
   * @param {number} xPos
   * @param {number} yPos
   * @param {number} zPos
   * @param {number} heading
   * @param {number} radius
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @param {boolean} stopAtDestination
   * @return {number}
   */
global.CreateGravityWell = function (xPos, yPos, zPos, heading, radius, p5, p6, p7, stopAtDestination) {
  return Citizen.invokeNative('0x4f5ebe70081e5a20', _fv(xPos), _fv(yPos), _fv(zPos), _fv(heading), _fv(radius), _fv(p5), _fv(p6), _fv(p7), stopAtDestination, _r, _ri);
};

/**
   * _CREATE_META_PED
   * Only used in SP scripts, for example odriscolls1: BOOLS: true, true, true, false, false
   *
   * @param {number} requestId
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} heading
   * @param {boolean} p5
   * @param {boolean} p6
   * @param {boolean} p7
   * @param {boolean} p8
   * @param {boolean} p9
   * @return {number}
   */
global.CreateMetaPed = function (requestId, x, y, z, heading, p5, p6, p7, p8, p9) {
  return Citizen.invokeNative('0x0bcd4091c8eaba42', requestId, _fv(x), _fv(y), _fv(z), _fv(heading), p5, p6, p7, p8, p9, _r, _ri);
};

/**
   * _CREATE_META_PED_ASSET
   * Creates prop from metaped asset bundle
   * https://github.com/femga/rdr3_discoveries/blob/master/objects/metaped_asset_bundles_list.lua
   * Creates a pickup-able metaped component. asset doesn't seems to be related to component hashes. Hash example : 0xD20354AB (https ://i.imgur.com/dzHkcDb.png)
   *
   * @param {number} asset
   * @param {number} posX
   * @param {number} posY
   * @param {number} posZ
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {boolean} p7
   * @param {boolean} p8
   * @param {boolean} p9
   * @return {number}
   */
global.CreateMetaPedAsset = function (asset, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9) {
  return Citizen.invokeNative('0x9641a9a20310f6b8', _ch(asset), _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), p7, p8, p9, _r, _ri);
};

/**
   * _CREATE_META_PED_OUTFIT_PED
   * Creates metaped from ped outfit requestId. See _REQUEST_METAPED_OUTFIT
   *
   * @param {number} requestId
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} heading
   * @param {boolean} p5
   * @param {boolean} p6
   * @param {boolean} p7
   * @param {boolean} p8
   * @return {number}
   */
global.CreateMetaPedOutfitPed = function (requestId, x, y, z, heading, p5, p6, p7, p8) {
  return Citizen.invokeNative('0xeaf682a14f8e5f53', requestId, _fv(x), _fv(y), _fv(z), _fv(heading), p5, p6, p7, p8, _r, _ri);
};

/**
   * _DETACH_VOLUME_FROM_ENTITY
   *
   * @param {number} volume
   * @param {number} entity
   * @return {void}
   */
global.DetachVolumeFromEntity = function (volume, entity) {
  return Citizen.invokeNative('0x19c975b81be53c28', volume, entity);
};

/**
   * _DISABLE_ALL_LOOK_AT_REQUESTS
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.DisableAllLookAtRequests = function (ped, p1) {
  return Citizen.invokeNative('0xe1965a380342be1f', ped, p1);
};

/**
   * _DISABLE_AMBIENT_LOOK_AT_REQUESTS
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.DisableAmbientLookAtRequests = function (p0, p1) {
  return Citizen.invokeNative('0x80038740c96ad17f', p0, p1);
};

/**
   * _DOES_META_PED_OUTFIT_EXIST_FOR_PED_MODEL
   *
   * @param {number} outfit
   * @param {number} model
   * @return {boolean}
   */
global.DoesMetaPedOutfitExistForPedModel = function (outfit, model) {
  return Citizen.invokeNative('0xc0e880b7a441164d', _ch(outfit), _ch(model), _r);
};

/**
   * _DOES_META_PED_SUBOUTFIT_EXIST_FOR_PED_MODEL
   *
   * @param {number} outfit
   * @param {number} suboutfit
   * @param {number} model
   * @return {boolean}
   */
global.DoesMetaPedSuboutfitExistForPedModel = function (outfit, suboutfit, model) {
  return Citizen.invokeNative('0x4ff3c2b4e6a196c1', _ch(outfit), _ch(suboutfit), _ch(model), _r);
};

/**
   * _EQUIP_META_PED_OUTFIT
   * Note: you have to update your ped's variation after calling (using 0xCC8CA3E88256E58F)
   * 
   * Body Types:
   * MPCREATOR_NEUTRAL
   * MPCREATOR_SKINNY
   * MPCREATOR_SKINNY_MUSCULAR
   * MPCREATOR_HEAVY
   * MPCREATOR_HEAVY_MUSCULAR
   * 
   * eBodyWeightOutfit (pedattributes.ymt):
   * -2045421226 (smallest)
   * -1745814259
   * -325933489
   * -1065791927
   * -844699484
   * -1273449080
   * 927185840
   * 149872391
   * 399015098
   * -644349862
   * 1745919061 (default)
   * 1004225511
   * 1278600348
   * 502499352
   * -2093198664
   * -1837436619
   * 1736416063
   * 2040610690
   * -1173634986
   * -867801909
   * 1960266524 (biggest)
   * 
   * https://github.com/femga/rdr3_discoveries/blob/master/peds_customization/ped_outfits.lua
   * 
   * Alt name: _EQUIP_META_PED_OUTFIT_COMPONENT
   *
   * @param {number} ped
   * @param {number} hash
   * @return {void}
   */
global.EquipMetaPedOutfit = function (ped, hash) {
  return Citizen.invokeNative('0x1902c4cfcc5be57c', ped, _ch(hash));
};

/**
   * _EQUIP_META_PED_OUTFIT_EXTRA
   * Changes Multiplayer ped face and body type components, they can be stacked
   * Params: p3 = 1
   * Body shape for mp_male from 124 - 128, 110 - 115 for mp_female
   * Face shape for mp_male from 110 - 123, 96 - 109 for mp_female
   * Cloth type for mp_male from 0 - 109, 0 - 95 for mp_female
   *
   * @param {number} ped
   * @param {number} component
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.EquipMetaPedOutfitExtra = function (ped, component, p2, p3) {
  return Citizen.invokeNative('0xa5bae410b03e7371', ped, component, p2, p3);
};

/**
   * _EQUIP_META_PED_OUTFIT_PRESET
   * Sets the outfit preset for the ped. The presetId is an index which determines its preset outfit. p2 is always false in the scripts.
   * If p2 is true as player, then certain components like facial hair and hair will not be removed.
   * Old name: _SET_PED_OUTFIT_PRESET
   *
   * @param {number} ped
   * @param {number} presetId
   * @param {boolean} p2
   * @return {void}
   */
global.EquipMetaPedOutfitPreset = function (ped, presetId, p2) {
  return Citizen.invokeNative('0x77ff8d35eec6bbc4', ped, presetId, p2);
};

/**
   * _EQUIP_META_PED_SUBOUTFIT
   *
   * @param {number} ped
   * @param {number} suboutfit
   * @param {number} p2
   * @return {void}
   */
global.EquipMetaPedSuboutfit = function (ped, suboutfit, p2) {
  return Citizen.invokeNative('0x66ff395445a88a6e', ped, _ch(suboutfit), p2);
};

/**
   * _FAKE_SET_PED_LOCO_INJURED
   *
   * @param {number} ped
   * @param {boolean} enabled
   * @return {void}
   */
global.FakeSetPedLocoInjured = function (ped, enabled) {
  return Citizen.invokeNative('0x8b3cb08158e98481', ped, enabled);
};

/**
   * _FORCE_PED_DEATH
   *
   * @param {number} ped
   * @param {number} pedKiller
   * @param {number} weapon
   * @return {void}
   */
global.ForcePedDeath = function (ped, pedKiller, weapon) {
  return Citizen.invokeNative('0x1ce875505d45338a', ped, pedKiller, _ch(weapon));
};

/**
   * _GET_ACCURACY_AGAINST_LOCAL_PLAYER_MODIFIER
   *
   * @param {number} ped
   * @return {number}
   */
global.GetAccuracyAgainstLocalPlayerModifier = function (ped) {
  return Citizen.invokeNative('0xdc9273d95976ba22', ped, _r, _rf);
};

/**
   * _GET_ACTIVE_ANIMAL_OWNER
   *
   * @param {number} animal
   * @return {number}
   */
global.GetActiveAnimalOwner = function (animal) {
  return Citizen.invokeNative('0xf103823ffe72bb49', animal, _r, _ri);
};

/**
   * _GET_ACTIVE_DYNAMIC_SCENARIO
   * Returns kneeling, sitting, squating, and sleeping scenario hashes
   *
   * @param {number} ped
   * @return {number}
   */
global.GetActiveDynamicScenario = function (ped) {
  return Citizen.invokeNative('0x569f1e1237508deb', ped, _r, _ri);
};

/**
   * _GET_ACTIVE_DYNAMIC_SCENARIO_2
   * Returns kneeling, sitting, squating, and sleeping scenario hashes
   *
   * @param {number} ped
   * @return {number}
   */
global.GetActiveDynamicScenario_2 = function (ped) {
  return Citizen.invokeNative('0xc22aa08a8adb87d4', ped, _r, _ri);
};

/**
   * _GET_BLOCKING_OF_NON_TEMPORARY_EVENTS
   *
   * @param {number} ped
   * @return {boolean}
   */
global.GetBlockingOfNonTemporaryEvents = function (ped) {
  return Citizen.invokeNative('0x268b3aebf032a88d', ped, _r);
};

/**
   * _GET_CARRIER_AS_HUMAN
   *
   * @param {number} entity
   * @return {number}
   */
global.GetCarrierAsHuman = function (entity) {
  return Citizen.invokeNative('0x79443d56c8df45ee', entity, _r, _ri);
};

/**
   * _GET_CARRIER_AS_MOUNT
   *
   * @param {number} entity
   * @return {number}
   */
global.GetCarrierAsMount = function (entity) {
  return Citizen.invokeNative('0xa033d7e4bbf9844d', entity, _r, _ri);
};

/**
   * _GET_CARRIER_AS_PED
   *
   * @param {number} entity
   * @return {number}
   */
global.GetCarrierAsPed = function (entity) {
  return Citizen.invokeNative('0x09b83e68de004cd4', entity, _r, _ri);
};

/**
   * _GET_CHAR_EXPRESSION
   * Gets MetaPedExpression at index specified
   * 
   * For index, see: _SET_CHAR_EXPRESSION
   * 
   * Old name: _GET_PED_FACE_FEATURE
   *
   * @param {number} ped
   * @param {number} index
   * @return {number}
   */
global.GetCharExpression = function (ped, index) {
  return Citizen.invokeNative('0xfd1ba1eef7985bb8', ped, index, _r, _rf);
};

/**
   * _GET_DEFAULT_RELATIONSHIP_GROUP_HASH
   *
   * @param {number} modelHash
   * @return {number}
   */
global.GetDefaultRelationshipGroupHash = function (modelHash) {
  return Citizen.invokeNative('0x3cc4a718c258bdd0', _ch(modelHash), _r, _ri);
};

/**
   * _GET_FIRST_ENTITY_PED_IS_CARRYING
   *
   * @param {number} ped
   * @return {number}
   */
global.GetFirstEntityPedIsCarrying = function (ped) {
  return Citizen.invokeNative('0xd806cd2a4f2c2996', ped, _r, _ri);
};

/**
   * _GET_GROUP_FORMATION
   *
   * @param {number} groupId
   * @return {number}
   */
global.GetGroupFormation = function (groupId) {
  return Citizen.invokeNative('0x13a1b061007c906b', groupId, _r, _ri);
};

/**
   * _GET_HEALTH_RECHARGE_MULTIPLIER
   *
   * @param {number} ped
   * @return {number}
   */
global.GetHealthRechargeMultiplier = function (ped) {
  return Citizen.invokeNative('0x95b8e397b8f4360f', ped, _r, _rf);
};

/**
   * _GET_HORSE_TAMING_STATE
   * Returns an int based on enum eTamingState
   * 
   * enum eTamingState
   * {
   *   ATS_INVALID = 0,
   *   ATS_INACTIVE,
   *   ATS_TARGET_DETECTED,
   *   ATS_CALLED_OUT,
   *   ATS_MOUNTABLE,
   *   ATS_BEING_PATTED,
   *   ATS_BREAKING_ACTIVE,
   *   ATS_SPOOKED,
   *   ATS_RETREATING,
   *   ATS_FLEEING
   * };
   *
   * @param {number} horse
   * @return {number}
   */
global.GetHorseTamingState = function (horse) {
  return Citizen.invokeNative('0x454ad4da6c41b5bd', horse, _r, _ri);
};

/**
   * _GET_INCAPACITATION_TIME_REMAINING
   *
   * @param {number} ped
   * @return {number}
   */
global.GetIncapacitationTimeRemaining = function (ped) {
  return Citizen.invokeNative('0x88d9d76d78065487', ped, _r, _ri);
};

/**
   * _GET_IS_PED_BEING_ROBBED
   * If p2 is false, then this native will return true until the interaction is complete. If true, the native will return true until player pockets robbery item.
   * _GET_IS_PED_[M-R]*
   *
   * @param {number} ped
   * @param {number} player
   * @param {boolean} trueUntilPlayerPocketsItem
   * @return {boolean}
   */
global.GetIsPedBeingRobbed = function (ped, player, trueUntilPlayerPocketsItem) {
  return Citizen.invokeNative('0xe33f98bd76490abc', ped, player, trueUntilPlayerPocketsItem, _r);
};

/**
   * _GET_IS_PED_COMMAND_HASH_PRESENT
   *
   * @param {number} ped
   * @param {number} commandHash
   * @return {boolean}
   */
global.GetIsPedCommandHashPresent = function (ped, commandHash) {
  return Citizen.invokeNative('0x68821369a2ceadd5', ped, _ch(commandHash), _r);
};

/**
   * _GET_IS_PED_IN_DISPUTE_WITH_PED
   * Returns true if ped is in a dispute another ped (pedInDisputeWith can also be 0)
   *
   * @param {number} ped
   * @param {number} pedInDisputeWith
   * @return {boolean}
   */
global.GetIsPedInDisputeWithPed = function (ped, pedInDisputeWith) {
  return Citizen.invokeNative('0x331550b212014b92', ped, pedInDisputeWith, _r);
};

/**
   * _GET_IS_PED_MOTIVATION_STATE_ENABLED
   * motivationState: see _SET_PED_MOTIVATION
   *
   * @param {number} ped
   * @param {number} motivationState
   * @return {boolean}
   */
global.GetIsPedMotivationStateEnabled = function (ped, motivationState) {
  return Citizen.invokeNative('0x33fa048675821da7', ped, motivationState, _r);
};

/**
   * _GET_LASSOED_LASSOER
   *
   * @param {number} ped
   * @return {number}
   */
global.GetLassoedLassoer = function (ped) {
  return Citizen.invokeNative('0x0c31c51168e80365', ped, _r, _ri);
};

/**
   * _GET_LASSOER_OF_PED
   * _IS_PED_S* - _IS_PED_U*
   *
   * @param {number} ped
   * @return {number}
   */
global.GetLassoerOfPed = function (ped) {
  return Citizen.invokeNative('0x833f0053340ef413', ped, _r, _ri);
};

/**
   * _GET_LASSO_TARGET
   *
   * @param {number} ped
   * @return {number}
   */
global.GetLassoTarget = function (ped) {
  return Citizen.invokeNative('0xb65a4dab460a19bd', ped, _r, _ri);
};

/**
   * _GET_LAST_LED_MOUNT
   * Returns last horse the ped was leading
   *
   * @param {number} ped
   * @return {number}
   */
global.GetLastLedMount = function (ped) {
  return Citizen.invokeNative('0x693126b5d0457d0d', ped, _r, _ri);
};

/**
   * _GET_LAST_MOUNT
   *
   * @param {number} ped
   * @return {number}
   */
global.GetLastMount = function (ped) {
  return Citizen.invokeNative('0x4c8b59171957bcf7', ped, _r, _ri);
};

/**
   * _GET_LAST_VEHICLE_DRAFT_HORSE_WAS_ATTACHED_TO
   *
   * @param {number} horse
   * @return {number}
   */
global.GetLastVehicleDraftHorseWasAttachedTo = function (horse) {
  return Citizen.invokeNative('0x5064db5083c29921', horse, _r, _ri);
};

/**
   * _GET_LOOTING_FLAG
   * lootFlag: see SET_LOOTING_FLAG
   *
   * @param {number} ped
   * @param {number} lootFlag
   * @return {boolean}
   */
global.GetLootingFlag = function (ped, lootFlag) {
  return Citizen.invokeNative('0xe4c11f104620ddce', ped, lootFlag, _r);
};

/**
   * _GET_META_PED_TYPE
   * enum eMetaPedType
   * {
   *   MPT_MALE,
   *   MPT_FEMALE,
   *   MPT_TEEN,
   *   MPT_ANIMAL,
   *   MPT_NONE
   * };
   *
   * @param {number} ped
   * @return {number}
   */
global.GetMetaPedType = function (ped) {
  return Citizen.invokeNative('0xec9a1261bf0ce510', ped, _r, _ri);
};

/**
   * _GET_NUM_COMPONENTS_IN_PED
   *
   * @param {number} ped
   * @return {number}
   */
global.GetNumComponentsInPed = function (ped) {
  return Citizen.invokeNative('0x90403e8107b60e81', ped, _r, _ri);
};

/**
   * _GET_NUM_COMPONENT_CATEGORIES_IN_PED
   * Works similar to 0x90403E8107B60E81 (_GET_NUM_COMPONENTS_IN_PED) but is used to get category hashes instead
   *
   * @param {number} ped
   * @return {number}
   */
global.GetNumComponentCategoriesInPed = function (ped) {
  return Citizen.invokeNative('0xa622e66eee92a08d', ped, _r, _ri);
};

/**
   * _GET_NUM_FREE_SLOTS_IN_PED_POOL
   *
  
   * @return {number}
   */
global.GetNumFreeSlotsInPedPool = function () {
  return Citizen.invokeNative('0x313778edca9158e2', _r, _ri);
};

/**
   * _GET_NUM_RESERVED_AMBIENT_PEDS_DESIRED
   *
  
   * @return {number}
   */
global.GetNumReservedAmbientPedsDesired = function () {
  return Citizen.invokeNative('0x62de46f061caa468', _r, _ri);
};

/**
   * _GET_NUM_RESERVED_AMBIENT_PEDS_READY
   *
  
   * @return {number}
   */
global.GetNumReservedAmbientPedsReady = function () {
  return Citizen.invokeNative('0x5c16855277819bbf', _r, _ri);
};

/**
   * _GET_NUM_RESERVED_HEALTH
   *
   * @param {number} ped
   * @return {any}
   */
global.GetNumReservedHealth = function (ped) {
  return Citizen.invokeNative('0x16f2c8c084ab2092', ped, _r);
};

/**
   * _GET_PEDS_IN_COMBAT_WITH_TARGET
   *
   * @param {number} ped
   * @param {number} itemset
   * @param {number} flag
   * @return {number}
   */
global.GetPedsInCombatWithTarget = function (ped, itemset, flag) {
  return Citizen.invokeNative('0x7be607daff382fd2', ped, itemset, flag, _r, _ri);
};

/**
   * _GET_PED_ATTITUDE
   * AI_ATTITUDE_NEUTRAL = 0,
   * AI_ATTITUDE_FRIENDLY,
   * AI_ATTITUDE_WARY,
   * AI_ATTITUDE_COMBATIVE,
   * AI_ATTITUDE_NEVER_MET
   *
   * @param {number} ped
   * @param {number} player
   * @return {number}
   */
global.GetPedAttitude = function (ped, player) {
  return Citizen.invokeNative('0x7cc2186c32d3540a', ped, player, _r, _ri);
};

/**
   * _GET_PED_BLACKBOARD_BOOL
   * Can be used to get a peds foliage active status: variableName = FoliageActive
   *
   * @param {number} ped
   * @param {string | number} variableName
   * @return {boolean}
   */
global.GetPedBlackboardBool = function (ped, variableName) {
  return Citizen.invokeNative('0x498f2e77982d6945', ped, _ts(variableName), _r);
};

/**
   * _GET_PED_BLACKBOARD_FLOAT
   * Can be used to get a peds foliage raw height: variableName = FoliageHeight
   *
   * @param {number} ped
   * @param {string | number} variableName
   * @return {number}
   */
global.GetPedBlackboardFloat = function (ped, variableName) {
  return Citizen.invokeNative('0x56e58d4d118fb45e', ped, _ts(variableName), _r, _rf);
};

/**
   * _GET_PED_BLACKBOARD_HASH
   *
   * @param {number} ped
   * @param {string | number} variableName
   * @return {number}
   */
global.GetPedBlackboardHash = function (ped, variableName) {
  return Citizen.invokeNative('0xbf5e791bbbf90a3c', ped, _ts(variableName), _r, _ri);
};

/**
   * _GET_PED_BRAWLING_STYLE
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedBrawlingStyle = function (ped) {
  return Citizen.invokeNative('0xec6b59be445fec51', ped, _r, _ri);
};

/**
   * _GET_PED_CAN_BE_INCAPACITATED_THIS_FRAME
   *
   * @param {number} ped
   * @return {boolean}
   */
global.GetPedCanBeIncapacitatedThisFrame = function (ped) {
  return Citizen.invokeNative('0x7a4e00364b5d727b', ped, _r);
};

/**
   * _GET_PED_COMBAT_ATTRIBUTE
   *
   * @param {number} ped
   * @param {number} attributeIndex
   * @return {boolean}
   */
global.GetPedCombatAttribute = function (ped, attributeIndex) {
  return Citizen.invokeNative('0xcc2b20596e29e4e3', ped, attributeIndex, _r);
};

/**
   * _GET_PED_COMPONENT_CATEGORY_BY_INDEX
   * Returns category hash that each ped component has. Hash examples: MASKS, HATS, HEADS, HORSE_MANES
   *
   * @param {number} ped
   * @param {number} index
   * @return {number}
   */
global.GetPedComponentCategoryByIndex = function (ped, index) {
  return Citizen.invokeNative('0xccb97b51893c662f', ped, index, _r, _ri);
};

/**
   * _GET_PED_DAMAGED
   * Returns true if _GET_PED_DAMAGE_CLEANLINESS was ever lower than 2
   *
   * @param {number} ped
   * @return {boolean}
   */
global.GetPedDamaged = function (ped) {
  return Citizen.invokeNative('0x6cfc373008a1edaf', ped, _r);
};

/**
   * _GET_PED_DAMAGE_CLEANLINESS
   * enum ePedDamageCleanliness
   * {
   *   PED_DAMAGE_CLEANLINESS_POOR,
   *   PED_DAMAGE_CLEANLINESS_GOOD,
   *   PED_DAMAGE_CLEANLINESS_PERFECT
   * };
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedDamageCleanliness = function (ped) {
  return Citizen.invokeNative('0x88effed5fe8b0b4a', ped, _r, _ri);
};

/**
   * _GET_PED_DEFENSIVE_VOLUME
   *
   * @param {number} ped
   * @param {any} p1
   * @return {number}
   */
global.GetPedDefensiveVolume = function (ped, p1) {
  return Citizen.invokeNative('0xef2e6f870783369b', ped, p1, _r, _ri);
};

/**
   * _GET_PED_DRUNKNESS
   * Returns ped drunk level
   * _H* or _I*
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedDrunkness = function (ped) {
  return Citizen.invokeNative('0x6fb76442469abd68', ped, _r, _rf);
};

/**
   * _GET_PED_GRAPPLER
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedGrappler = function (ped) {
  return Citizen.invokeNative('0xd0b7aeb56229d317', ped, _r, _ri);
};

/**
   * _GET_PED_GRAPPLE_FLAG
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedGrappleFlag = function (ped) {
  return Citizen.invokeNative('0xf3c873ed0c595109', ped, _r, _ri);
};

/**
   * _GET_PED_GRAPPLE_STYLE
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedGrappleStyle = function (ped) {
  return Citizen.invokeNative('0x753b15ad0fd6f3e3', ped, _r, _ri);
};

/**
   * _GET_PED_HEIGHT
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedHeight = function (ped) {
  return Citizen.invokeNative('0x1d491ccf7211fb74', ped, _r, _rf);
};

/**
   * _GET_PED_ID_RANGE
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedIdRange = function (ped) {
  return Citizen.invokeNative('0x31167ed4324b758d', ped, _r, _rf);
};

/**
   * _GET_PED_INCAPACITATION_HEALTH
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedIncapacitationHealth = function (ped) {
  return Citizen.invokeNative('0x89bfdf6d53145545', ped, _r, _ri);
};

/**
   * _GET_PED_INTERACTION_PERSONALITY
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedInteractionPersonality = function (ped) {
  return Citizen.invokeNative('0xd7ad3c7ebaf88c92', ped, _r, _ri);
};

/**
   * _GET_PED_LASSO_HOGTIE_FLAG
   * https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/Lasso%20Hogtie%20Flags
   * https://github.com/femga/rdr3_discoveries/tree/master/AI/LASSO_HOGTIE_FLAG
   *
   * @param {number} ped
   * @param {number} flagId
   * @return {boolean}
   */
global.GetPedLassoHogtieFlag = function (ped, flagId) {
  return Citizen.invokeNative('0x2c76fa0e01681f8d', ped, flagId, _r);
};

/**
   * _GET_PED_LAST_DROPPED_HAT
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedLastDroppedHat = function (ped) {
  return Citizen.invokeNative('0x1f714e7a9dadfc42', ped, _r, _ri);
};

/**
   * _GET_PED_LOD_MULTIPLIER
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedLodMultiplier = function (ped) {
  return Citizen.invokeNative('0x1b710e6f4ab69341', ped, _r, _rf);
};

/**
   * _GET_PED_MAX_STAMINA
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedMaxStamina = function (ped) {
  return Citizen.invokeNative('0xcb42afe2b613ee55', ped, _r, _rf);
};

/**
   * _GET_PED_MELEE_ACTION_PHASE
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedMeleeActionPhase = function (ped) {
  return Citizen.invokeNative('0x6127f25ed21c533c', ped, _r, _rf);
};

/**
   * _GET_PED_META_OUTFIT_HASH
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedMetaOutfitHash = function (ped) {
  return Citizen.invokeNative('0x30569f348d126a5a', ped, _r, _ri);
};

/**
   * _GET_PED_MODEL_SIZE_FROM_HASH
   * PS_SMALL = 0,
   * PS_MEDIUM,
   * PS_MEDIUM_LARGE,
   * PS_LARGE,
   * PS_EXTRA_LARGE
   *
   * @param {number} modelHash
   * @return {number}
   */
global.GetPedModelSizeFromHash = function (modelHash) {
  return Citizen.invokeNative('0xa65aa1ace81e5a77', _ch(modelHash), _r, _ri);
};

/**
   * _GET_PED_MOTIVATION
   * If targetPed is set to 0 the ped motivationState affects everyone
   *
   * @param {number} ped
   * @param {number} motivationState
   * @param {number} targetPed
   * @return {number}
   */
global.GetPedMotivation = function (ped, motivationState, targetPed) {
  return Citizen.invokeNative('0x42688e94e96fd9b4', ped, motivationState, targetPed, _r, _rf);
};

/**
   * _GET_PED_QUALITY
   * Returns Ped Quality to be used to calculate Skinning Quality
   * 
   * enum ePedQuality
   * {
   *   PQ_INVALID = -1,
   *   PQ_LOW,
   *   PQ_MEDIUM,
   *   PQ_HIGH,
   *   PQ_MAX
   * };
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedQuality = function (ped) {
  return Citizen.invokeNative('0x7bcc6087d130312a', ped, _r, _ri);
};

/**
   * _GET_PED_REGISTER_PROP
   * Gets a registered/attached prop entity for a particular ped. Second parameter will detach the prop entity from the ped if true. Props primarily appear to come from scenarios, such as a broom or hay bale.
   * 
   * Known props: https://pastebin.com/ap2NEJqB
   *
   * @param {number} ped
   * @param {string | number} propName
   * @param {boolean} detachProp
   * @return {number}
   */
global.GetPedRegisterProp = function (ped, propName, detachProp) {
  return Citizen.invokeNative('0x4d0d2e3d8bc000eb', ped, _ts(propName), detachProp, _r, _ri);
};

/**
   * _GET_PED_REMAINING_REVIVAL_TIME
   * normalized / non normalized
   * 0.0        / 1000.0         STARTED IN WRITHE STAGE
   * 1.0        / 0.0            END OF WRITHE, DEAD
   * -1.0                        DEAD
   * 
   * Returns some value from AI task 562 (unknown).
   *
   * @param {number} ped
   * @param {boolean} normalized
   * @return {number}
   */
global.GetPedRemainingRevivalTime = function (ped, normalized) {
  return Citizen.invokeNative('0xebe89623eb861271', ped, normalized, _r, _rf);
};

/**
   * _GET_PED_STAMINA
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedStamina = function (ped) {
  return Citizen.invokeNative('0x775a1ca7893aa8b5', ped, _r, _rf);
};

/**
   * _GET_PED_STAMINA_NORMALIZED
   * Returns stamina normalizedValue / normalizedUnlockedMax
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedStaminaNormalized = function (ped) {
  return Citizen.invokeNative('0x22f2a386d43048a9', ped, _r, _rf);
};

/**
   * _GET_PED_TRANQUILIZER
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedTranquilizer = function (ped) {
  return Citizen.invokeNative('0x65c75fdccac86464', ped, _r, _ri);
};

/**
   * _GET_PELT_FROM_HORSE
   * Returns peltId
   *
   * @param {number} horse
   * @param {number} index
   * @return {number}
   */
global.GetPeltFromHorse = function (horse, index) {
  return Citizen.invokeNative('0x0ceeb6f4780b1f2f', horse, index, _r, _ri);
};

/**
   * _GET_PLAYER_CURRENT_ANIMAL_DAMAGE_MODIFIER
   * Returns animal skin quality modifier
   *
   * @param {number} player
   * @return {number}
   */
global.GetPlayerCurrentAnimalDamageModifier = function (player) {
  return Citizen.invokeNative('0xee2d5c819a65bf26', player, _r, _rf);
};

/**
   * _GET_PLAYER_PED_WATER_DEPTH
   * Returns how deep the water is below the ped (if in water)
   * -1.0f = Not in water
   * 10.0f = Max water depth
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPlayerPedWaterDepth = function (ped) {
  return Citizen.invokeNative('0x2942457417a5fd24', ped, _r, _rf);
};

/**
   * _GET_RIDER_OF_MOUNT
   *
   * @param {number} mount
   * @param {boolean} p1
   * @return {number}
   */
global.GetRiderOfMount = function (mount, p1) {
  return Citizen.invokeNative('0xb676efda03dada52', mount, p1, _r, _ri);
};

/**
   * _GET_SHOP_ITEM_BASE_LAYERS
   *
   * @param {number} shopItem
   * @param {any} p1
   * @param {number} ped
   * @param {number} metapedType
   * @param {boolean} p4
   * @return {[boolean, number, number, number, number, number, number, number, number]}
   */
global.GetShopItemBaseLayers = function (shopItem, p1, ped, metapedType, p4) {
  return Citizen.invokeNative('0x63342c50ec115ce8', _ch(shopItem), p1, ped, metapedType, p4, _i, _i, _i, _i, _i, _i, _i, _i, _r);
};

/**
   * _GET_SHOP_ITEM_COMPONENT_AT_INDEX
   *
   * @param {number} ped
   * @param {number} index
   * @param {boolean} p2
   * @param {DataView} argStruct
   * @param {DataView} argStruct2
   * @return {number}
   */
global.GetShopItemComponentAtIndex = function (ped, index, p2, argStruct, argStruct2) {
  return Citizen.invokeNative('0x77ba37622e22023b', ped, index, p2, argStruct, argStruct2, _r, _ri);
};

/**
   * _GET_SHOP_ITEM_COMPONENT_CATEGORY
   *
   * @param {number} componentHash
   * @param {number} metapedType
   * @param {boolean} isMp
   * @return {number}
   */
global.GetShopItemComponentCategory = function (componentHash, metapedType, isMp) {
  return Citizen.invokeNative('0x5ff9a878c3d115b8', _ch(componentHash), metapedType, isMp, _r, _ri);
};

/**
   * _GET_SHOP_ITEM_HAT_COMPONENT
   *
   * @param {number} ped
   * @param {number} metapedType
   * @param {boolean} p2
   * @return {any}
   */
global.GetShopItemHatComponent = function (ped, metapedType, p2) {
  return Citizen.invokeNative('0x7e02e4218d916b94', ped, metapedType, p2, _r);
};

/**
   * _GET_SHOP_ITEM_NUM_WEARABLE_STATES
   * Returns the number of wearable states available for a shop item / component. p2 seems to be true in scripts.
   * 
   * For use with 0x6243635AF2F1B826 (_GET_SHOP_ITEM_AVAILABLE_WEARABLE_STATE_BY_INDEX)
   *
   * @param {number} componentHash
   * @param {boolean} isMpFemale
   * @param {boolean} p2
   * @return {number}
   */
global.GetShopItemNumWearableStates = function (componentHash, isMpFemale, p2) {
  return Citizen.invokeNative('0xffcc2db2d9953401', _ch(componentHash), isMpFemale, p2, _r, _ri);
};

/**
   * _GET_SHOP_ITEM_WEARABLE_STATE_BY_INDEX
   * Gets an available wearable state by index for a shop item / component - it does not retreive what the current state is. p3 seems to be true in scripts.
   * 
   * Use 0xFFCC2DB2D9953401 (_GET_SHOP_ITEM_NUM_WEARABLE_STATES) to get the number of available wearable states
   *
   * @param {number} componentHash
   * @param {number} wearableStateIndex
   * @param {boolean} isMpFemale
   * @param {boolean} p3
   * @return {number}
   */
global.GetShopItemWearableStateByIndex = function (componentHash, wearableStateIndex, isMpFemale, p3) {
  return Citizen.invokeNative('0x6243635af2f1b826', _ch(componentHash), wearableStateIndex, isMpFemale, p3, _r, _ri);
};

/**
   * _GET_STAMINA_DEPLETION_MULTIPLIER
   *
   * @param {number} ped
   * @return {number}
   */
global.GetStaminaDepletionMultiplier = function (ped) {
  return Citizen.invokeNative('0x825f6dd559a0895b', ped, _r, _rf);
};

/**
   * _GET_STAMINA_RECHARGE_MULTIPLIER
   *
   * @param {number} ped
   * @return {number}
   */
global.GetStaminaRechargeMultiplier = function (ped) {
  return Citizen.invokeNative('0xe7687eb2f634abf0', ped, _r, _rf);
};

/**
   * _GET_TOTAL_PED_DAMAGE_FROM_AI
   * _GET_WA*
   *
   * @param {number} ped
   * @return {number}
   */
global.GetTotalPedDamageFromAi = function (ped) {
  return Citizen.invokeNative('0x92c8eaca29f6bed6', ped, _r, _rf);
};

/**
   * _GET_TRANSPORT_PED_IS_SEATED_ON
   *
   * @param {number} ped
   * @return {number}
   */
global.GetTransportPedIsSeatedOn = function (ped) {
  return Citizen.invokeNative('0x849bd6c6314793d0', ped, _r, _ri);
};

/**
   * _GET_VEHICLE_DRAFT_HORSE_IS_ATTACHED_TO
   *
   * @param {number} horse
   * @return {number}
   */
global.GetVehicleDraftHorseIsAttachedTo = function (horse) {
  return Citizen.invokeNative('0xe4770da1b8ff4fd1', horse, _r, _ri);
};

/**
   * _GIVE_PED_HASH_COMMAND
   * Ped Command Hash are special commands, that can be activated to change conditional anim variations or trigger transitions between conditional anims.
   * https://github.com/femga/rdr3_discoveries/blob/master/animations/scenarios
   *
   * @param {number} ped
   * @param {number} commandHash
   * @param {number} activationDuration
   * @return {void}
   */
global.GivePedHashCommand = function (ped, commandHash, activationDuration) {
  return Citizen.invokeNative('0xd65fdc686a031c83', ped, _ch(commandHash), _fv(activationDuration));
};

/**
   * _GIVE_PED_SCENARIO_PROP
   *
   * @param {number} ped
   * @param {number} object
   * @param {string | number} conditionalAnim
   * @param {string | number} p3
   * @param {string | number} p4
   * @param {boolean} p5
   * @return {boolean}
   */
global.GivePedScenarioProp = function (ped, object, conditionalAnim, p3, p4, p5) {
  return Citizen.invokeNative('0x3bbdd6143ff16f98', ped, object, _ts(conditionalAnim), _ts(p3), _ts(p4), p5, _r);
};

/**
   * _GIVE_PED_SCENARIO_PROP_DYNAMIC
   * Only used in SP R* Script rcm_jack2
   *
   * @param {number} ped
   * @param {number} object
   * @param {string | number} p2
   * @param {string | number} p3
   * @param {boolean} p4
   * @return {boolean}
   */
global.GivePedScenarioPropDynamic = function (ped, object, p2, p3, p4) {
  return Citizen.invokeNative('0xa0774e388ce4a679', ped, object, _ts(p2), _ts(p3), p4, _r);
};

/**
   * _HAS_META_PED_ASSET_LOADED
   *
   * @param {number} requestId
   * @return {boolean}
   */
global.HasMetaPedAssetLoaded = function (requestId) {
  return Citizen.invokeNative('0xb0b2c6d170b0e8e5', requestId, _r);
};

/**
   * _HAS_META_PED_OUTFIT_LOADED
   *
   * @param {number} requestId
   * @return {boolean}
   */
global.HasMetaPedOutfitLoaded = function (requestId) {
  return Citizen.invokeNative('0x610438375e5d1801', requestId, _r);
};

/**
   * _HAS_META_PED_REQUEST_LOADED
   *
   * @param {number} requestId
   * @return {boolean}
   */
global.HasMetaPedRequestLoaded = function (requestId) {
  return Citizen.invokeNative('0xc0940ac858c1e126', requestId, _r);
};

/**
   * _HAS_PED_BEEN_SHOVED_RECENTLY
   *
   * @param {number} ped
   * @param {number} ms
   * @return {boolean}
   */
global.HasPedBeenShovedRecently = function (ped, ms) {
  return Citizen.invokeNative('0x29fce825613fefca', ped, ms, _r);
};

/**
   * _HAS_PED_EMOTIONAL_PRESET_LOADED
   * See _REQUEST_PED_EMOTIONAL_PRESET
   *
   * @param {number} ped
   * @param {string | number} name
   * @return {boolean}
   */
global.HasPedEmotionalPresetLoaded = function (ped, name) {
  return Citizen.invokeNative('0xde3904b22695d9f9', ped, _ts(name), _r);
};

/**
   * _HAS_PED_TAKEN_GORE_DAMAGE
   * limb: 3 = Left Hand, 4 = Left Arm, 6 = Right Hand, 7 = Right Arm, 9 = Left Foot, 10 = Left Leg, 12 = Right Foot, 13 = Right Leg, 37 = Head
   *
   * @param {number} ped
   * @param {number} limb
   * @return {boolean}
   */
global.HasPedTakenGoreDamage = function (ped, limb) {
  return Citizen.invokeNative('0xba208a8d6399a3ac', ped, limb, _r);
};

/**
   * _HORSE_AGITATE
   * _H* - _I*
   *
   * @param {number} mount
   * @param {boolean} kickOffRider
   * @return {void}
   */
global.HorseAgitate = function (mount, kickOffRider) {
  return Citizen.invokeNative('0xbae08f00021bffb2', mount, kickOffRider);
};

/**
   * _INCAPACITATED_REVIVE
   *
   * @param {number} ped
   * @param {number} ped2
   * @return {void}
   */
global.IncapacitatedRevive = function (ped, ped2) {
  return Citizen.invokeNative('0xf6262491c7704a63', ped, ped2);
};

/**
   * _IS_ANIMAL_CONTROLLED_BY_A_PLAYER
   * Returns true only if it's a player ped and an animal as well.
   * _IS_ANY_* - _IS_CONTROL_*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsAnimalControlledByAPlayer = function (ped) {
  return Citizen.invokeNative('0x0e2f43516f998269', ped, _r);
};

/**
   * _IS_ANIMAL_INTERACTION_RUNNING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsAnimalInteractionRunning = function (ped) {
  return Citizen.invokeNative('0x7fc84e85d98f063d', ped, _r);
};

/**
   * _IS_META_PED_ASSET_VALID
   *
   * @param {number} requestId
   * @return {boolean}
   */
global.IsMetaPedAssetValid = function (requestId) {
  return Citizen.invokeNative('0x93ffd92f05ec32fd', requestId, _r);
};

/**
   * _IS_META_PED_FISH
   * Returns true if given ped is a fish.
   * _IS_ME* - _IS_MO*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsMetaPedFish = function (ped) {
  return Citizen.invokeNative('0x118d476a6f1a13f1', ped, _r);
};

/**
   * _IS_META_PED_OUTFIT_EQUIPPED
   * Used in script function HORSE_IS_META_PED_OUTFIT_SADDLE_EQUIPPED
   *
   * @param {number} ped
   * @param {number} outfit
   * @return {boolean}
   */
global.IsMetaPedOutfitEquipped = function (ped, outfit) {
  return Citizen.invokeNative('0x98082246107a6acf', ped, _ch(outfit), _r);
};

/**
   * _IS_META_PED_OUTFIT_REQUEST_VALID
   *
   * @param {number} requestId
   * @return {boolean}
   */
global.IsMetaPedOutfitRequestValid = function (requestId) {
  return Citizen.invokeNative('0xb25e57fc8e37114d', requestId, _r);
};

/**
   * _IS_META_PED_REQUEST_VALID
   *
   * @param {number} requestId
   * @return {boolean}
   */
global.IsMetaPedRequestValid = function (requestId) {
  return Citizen.invokeNative('0x43e4da469541a9c9', requestId, _r);
};

/**
   * _IS_META_PED_USING_COMPONENT_CATEGORY
   * checks if a ped is using a component category
   * see component category hashes here https://raw.githubusercontent.com/femga/rdr3_discoveries/refs/heads/master/clothes/cloth_hash_names.lua
   * Old name: _IS_META_PED_USING_COMPONENT
   *
   * @param {number} ped
   * @param {number} componentCategory
   * @return {boolean}
   */
global.IsMetaPedUsingComponentCategory = function (ped, componentCategory) {
  return Citizen.invokeNative('0xfb4891bd7578cdc1', ped, _ch(componentCategory), _r);
};

/**
   * _IS_MOUNT_SEAT_FREE
   *
   * @param {number} mount
   * @param {number} seat
   * @return {boolean}
   */
global.IsMountSeatFree = function (mount, seat) {
  return Citizen.invokeNative('0xaab0fe202e9fc9f0', mount, seat, _r);
};

/**
   * _IS_PED_ACTION_DISABLE_FLAG_ENABLED
   *
   * @param {number} ped
   * @param {number} actionDisableFlag
   * @return {boolean}
   */
global.IsPedActionDisableFlagEnabled = function (ped, actionDisableFlag) {
  return Citizen.invokeNative('0xb346c85d49cc998e', ped, actionDisableFlag, _r);
};

/**
   * _IS_PED_CHILD
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedChild = function (ped) {
  return Citizen.invokeNative('0x137772000daf42c5', ped, _r);
};

/**
   * _IS_PED_CLIMBING_LADDER
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedClimbingLadder = function (ped) {
  return Citizen.invokeNative('0x59643424b68d52b5', ped, _r);
};

/**
   * _IS_PED_COWERING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedCowering = function (ped) {
  return Citizen.invokeNative('0xb086c8c0f5701d14', ped, _r);
};

/**
   * _IS_PED_DOING_SCENARIO_TRANSITION
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedDoingScenarioTransition = function (ped) {
  return Citizen.invokeNative('0xc488b8c0e52560d8', ped, _r);
};

/**
   * _IS_PED_DRAGGING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedDragging = function (ped) {
  return Citizen.invokeNative('0x226cf9b159e38f42', ped, _r);
};

/**
   * _IS_PED_DRUNK
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedDrunk = function (ped) {
  return Citizen.invokeNative('0x50f124e6ef188b22', ped, _r);
};

/**
   * IS_PED_GROUP_LEADER
   *
   * @param {number} ped
   * @param {number} groupId
   * @return {boolean}
   */
global.IsPedGroupLeader = function (ped, groupId) {
  return Citizen.invokeNative('0x878b68960c1c2a35', ped, groupId, _r);
};

/**
   * _IS_PED_INTIMIDATED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedIntimidated = function (ped) {
  return Citizen.invokeNative('0x57779b55b83e2bea', ped, _r);
};

/**
   * _IS_PED_INVESTIGATING
   * _IS_PED_IN*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedInvestigating = function (ped) {
  return Citizen.invokeNative('0x7583a9d35248b83f', ped, _r);
};

/**
   * _IS_PED_IN_POINT
   * If returned true: There are enemy peds near friendly turn in ped. Going to aggro.
   * If returned false: Moving back to idle as there aren't any remaining enemy peds near ped
   * _IS_PED_IN_*
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {boolean} p5
   * @return {boolean}
   */
global.IsPedInPoint = function (ped, x, y, z, radius, p5) {
  return Citizen.invokeNative('0x078076ab50fb117f', ped, _fv(x), _fv(y), _fv(z), _fv(radius), p5, _r);
};

/**
   * _IS_PED_LEADING_ANY_GROUP
   * _IS_PED_L* - _IS_PED_M*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedLeadingAnyGroup = function (ped) {
  return Citizen.invokeNative('0x917760cfe7a0e0f1', ped, _r);
};

/**
   * _IS_PED_MODEL_SUPPRESSED
   *
   * @param {number} model
   * @return {boolean}
   */
global.IsPedModelSuppressed = function (model) {
  return Citizen.invokeNative('0xaa9f048dcf69b6dc', _ch(model), _r);
};

/**
   * _IS_PED_QUEUED_FOR_DELETION
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedQueuedForDeletion = function (ped) {
  return Citizen.invokeNative('0x8d9bfce3352de47f', ped, _r);
};

/**
   * _IS_PED_SLIDING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedSliding = function (ped) {
  return Citizen.invokeNative('0xd6740e14e4cefc0b', ped, _r);
};

/**
   * _IS_PED_TARGET_ACTION_DISABLE_FLAG_ENABLED
   *
   * @param {number} ped
   * @param {number} actionDisableFlag
   * @return {boolean}
   */
global.IsPedTargetActionDisableFlagEnabled = function (ped, actionDisableFlag) {
  return Citizen.invokeNative('0x02aa2096fe00f3e1', ped, actionDisableFlag, _r);
};

/**
   * _IS_PED_USING_ACTION_MODE_2
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedUsingActionMode_2 = function (ped) {
  return Citizen.invokeNative('0xebb208d6ae712c03', ped, _r);
};

/**
   * _IS_PED_VISIBILITY_TRACKED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedVisibilityTracked = function (ped) {
  return Citizen.invokeNative('0x5102307ce88798eb', ped, _r);
};

/**
   * _IS_SCENARIO_BLOCKING_AREA_VALID
   *
   * @param {any} p0
   * @return {boolean}
   */
global.IsScenarioBlockingAreaValid = function (p0) {
  return Citizen.invokeNative('0x91a5f9cbebb9d936', p0, _r);
};

/**
   * _IS_TARGET
   *
   * @param {number} ped
   * @param {number} targetPed
   * @return {boolean}
   */
global.IsTarget = function (ped, targetPed) {
  return Citizen.invokeNative('0x6e5cbcb3941d7d08', ped, targetPed, _r);
};

/**
   * _IS_TEXTURE_VALID
   *
   * @param {number} textureId
   * @return {boolean}
   */
global.IsTextureValid = function (textureId) {
  return Citizen.invokeNative('0x31dc8d3f216d8509', textureId, _r);
};

/**
   * _IS_THIS_MODEL_A_HORSE
   *
   * @param {number} model
   * @return {boolean}
   */
global.IsThisModelAHorse = function (model) {
  return Citizen.invokeNative('0x772a1969f649e902', _ch(model), _r);
};

/**
   * _IS_TRACKED_PED_VISIBILITY_PERCENTAGE_NOT_LESS_THAN
   *
   * @param {number} ped
   * @param {number} percent
   * @return {boolean}
   */
global.IsTrackedPedVisibilityPercentageNotLessThan = function (ped, percent) {
  return Citizen.invokeNative('0x164cecc59e70df86', ped, _fv(percent), _r);
};

/**
   * _IS_USING_SLIPSTREAM
   * _IS_TRACKED_* - IS_V*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsUsingSlipstream = function (ped) {
  return Citizen.invokeNative('0xaf61b3cd8c3b82c3', ped, _r);
};

/**
   * _PED_CLEAR_LOCO_MOTION
   *
   * @param {number} ped
   * @return {void}
   */
global.PedClearLocoMotion = function (ped) {
  return Citizen.invokeNative('0x935cf6e42baf7f4d', ped);
};

/**
   * _PED_DUELING_DID_PLAYER_HEADSHOT_OPPONENT
   *
   * @param {number} ped
   * @return {boolean}
   */
global.PedDuelingDidPlayerHeadshotOpponent = function (ped) {
  return Citizen.invokeNative('0xbd6b242b8bd5543a', ped, _r);
};

/**
   * _PED_EMOTIONAL_PRESET_LOCO_MOTION
   * target: 0 affects everyone
   * duration: -1 indefinite
   * flag: always 4 in R* Scripts
   *
   * @param {number} ped
   * @param {string | number} presetName
   * @param {number} targetPed
   * @param {number} duration
   * @param {number} flag
   * @return {void}
   */
global.PedEmotionalPresetLocoMotion = function (ped, presetName, targetPed, duration, flag) {
  return Citizen.invokeNative('0xaab050da48b57978', ped, _ts(presetName), targetPed, duration, flag);
};

/**
   * _PED_WAS_KILLED_BY_HEADSHOT
   *
   * @param {number} ped
   * @return {boolean}
   */
global.PedWasKilledByHeadshot = function (ped) {
  return Citizen.invokeNative('0x06fa94c835787c64', ped, _r);
};

/**
   * _REFRESH_LOOT_STATE_FOR_PED
   * Returns loot state
   * enum eLootState
   * {
   *   LAP_NONE,
   *   LAP_RESUMING,
   *   LAP_GETTING_ON_FOOT,
   *   LAP_DISTANT_NAV,
   *   LAP_CHOOSING_ACTION,
   *   LAP_APPROACHING,
   *   LAP_ENTERING,
   *   LAP_LOOTING,
   *   LAP_EXITING
   * };
   * 
   * _POSSE_* - _REGISTER_HATED*
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p3
   * @param {number} p4
   * @return {[number, Ped]}
   */
global.RefreshLootStateForPed = function (ped, p1, p3, p4) {
  return Citizen.invokeNative('0x5463c962bc7777c3', ped, p1, _i, p3, p4, _r, _ri);
};

/**
   * _REFRESH_META_PED_SHOP_ITEMS
   * p1 is always 1
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.RefreshMetaPedShopItems = function (ped, p1) {
  return Citizen.invokeNative('0x59bd177a1a48600a', ped, p1);
};

/**
   * _REGISTER_HATED_TARGETS_IN_AREA
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @return {void}
   */
global.RegisterHatedTargetsInArea = function (ped, x, y, z, radius) {
  return Citizen.invokeNative('0xd8736efda38edc5c', ped, _fv(x), _fv(y), _fv(z), _fv(radius));
};

/**
   * _RELEASE_META_PED_ASSET_REQUEST
   *
   * @param {number} requestId
   * @return {void}
   */
global.ReleaseMetaPedAssetRequest = function (requestId) {
  return Citizen.invokeNative('0x13e7320c762f0477', requestId);
};

/**
   * _RELEASE_META_PED_OUTFIT_REQUEST
   *
   * @param {number} requestId
   * @return {void}
   */
global.ReleaseMetaPedOutfitRequest = function (requestId) {
  return Citizen.invokeNative('0x4592b8b9b0ef5f48', requestId);
};

/**
   * _RELEASE_META_PED_REQUEST
   *
   * @param {number} requestId
   * @return {void}
   */
global.ReleaseMetaPedRequest = function (requestId) {
  return Citizen.invokeNative('0x3972f78a78b5d9df', requestId);
};

/**
   * _RELEASE_TEXTURE
   * Removes a texture created by 0xC5E7204F322E49EB.
   *
   * @param {number} textureId
   * @return {void}
   */
global.ReleaseTexture = function (textureId) {
  return Citizen.invokeNative('0x6befaa907b076859', textureId);
};

/**
   * _REMOVE_GRAVITY_WELL
   * Removes gravity well by handle returned from 0x4F5EBE70081E5A20
   *
   * @param {number} handle
   * @return {void}
   */
global.RemoveGravityWell = function (handle) {
  return Citizen.invokeNative('0x87247bc60b60bed8', handle);
};

/**
   * _REMOVE_MOTION_TYPE_ASSET
   *
   * @param {number} nameHash
   * @param {number} ped
   * @return {void}
   */
global.RemoveMotionTypeAsset = function (nameHash, ped) {
  return Citizen.invokeNative('0xde7b2b4144906cdf', _ch(nameHash), ped);
};

/**
   * _REMOVE_PED_BLACKBOARD_BOOL
   *
   * @param {number} ped
   * @param {string | number} variableName
   * @return {void}
   */
global.RemovePedBlackboardBool = function (ped, variableName) {
  return Citizen.invokeNative('0xa6f67bec53379a32', ped, _ts(variableName));
};

/**
   * _REMOVE_PED_BLACKBOARD_FLOAT
   *
   * @param {number} ped
   * @param {string | number} variableName
   * @return {void}
   */
global.RemovePedBlackboardFloat = function (ped, variableName) {
  return Citizen.invokeNative('0x411189e51b8020ba', ped, _ts(variableName));
};

/**
   * _REMOVE_PED_BLACKBOARD_HASH
   *
   * @param {number} ped
   * @param {string | number} variableName
   * @return {void}
   */
global.RemovePedBlackboardHash = function (ped, variableName) {
  return Citizen.invokeNative('0x0e17378642156790', ped, _ts(variableName));
};

/**
   * _REMOVE_PED_BLACKBOARD_INT
   *
   * @param {number} ped
   * @param {string | number} variableName
   * @return {void}
   */
global.RemovePedBlackboardInt = function (ped, variableName) {
  return Citizen.invokeNative('0x81b75428a7813e67', ped, _ts(variableName));
};

/**
   * _REMOVE_PED_EMOTIONAL_PRESET
   * See _REQUEST_PED_EMOTIONAL_PRESET
   *
   * @param {number} ped
   * @param {string | number} name
   * @return {void}
   */
global.RemovePedEmotionalPreset = function (ped, name) {
  return Citizen.invokeNative('0xfc3bab1801a8255a', ped, _ts(name));
};

/**
   * _REMOVE_PED_FROM_MOUNT
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {void}
   */
global.RemovePedFromMount = function (ped, p1, p2) {
  return Citizen.invokeNative('0x5337b721c51883a9', ped, p1, p2);
};

/**
   * _REMOVE_PED_OVERLAY
   *
   * @param {number} textureId
   * @param {number} overlayId
   * @return {void}
   */
global.RemovePedOverlay = function (textureId, overlayId) {
  return Citizen.invokeNative('0x96c349de04c49011', textureId, overlayId);
};

/**
   * _REMOVE_PED_PROP
   *
   * @param {number} ped
   * @param {string | number} propName
   * @return {void}
   */
global.RemovePedProp = function (ped, propName) {
  return Citizen.invokeNative('0x3a50753042b6891b', ped, _ts(propName));
};

/**
   * _REMOVE_PED_STAY_OUT_VOLUME
   *
   * @param {number} ped
   * @param {number} volume
   * @return {boolean}
   */
global.RemovePedStayOutVolume = function (ped, volume) {
  return Citizen.invokeNative('0x0cab404cd2db41f5', ped, volume, _r);
};

/**
   * _REMOVE_PED_SUBSCRIBE_TO_LEGENDARY_BLIPS
   *
   * @param {number} ped
   * @return {boolean}
   */
global.RemovePedSubscribeToLegendaryBlips = function (ped) {
  return Citizen.invokeNative('0x011a42fd923d41ca', ped, _r);
};

/**
   * _REMOVE_SHOP_ITEM_FROM_PED
   * Directly removes a shop item component from a ped
   * Params: p2 and p3 are always 0
   *
   * @param {number} ped
   * @param {number} componentHash
   * @param {number} p2
   * @param {boolean} p3
   * @return {void}
   */
global.RemoveShopItemFromPed = function (ped, componentHash, p2, p3) {
  return Citizen.invokeNative('0x0d7ffa1b2f69ed82', ped, _ch(componentHash), p2, p3);
};

/**
   * _REMOVE_TARGET
   *
   * @param {number} ped
   * @param {number} targetPed
   * @return {void}
   */
global.RemoveTarget = function (ped, targetPed) {
  return Citizen.invokeNative('0x4707e9c23d8ca3fe', ped, targetPed);
};

/**
   * _REQUEST_META_PED
   * Returns requestId
   * Params: p1 = 1 in R* Scripts (Used in SP only)
   *
   * @param {number} model
   * @param {number} p1
   * @return {number}
   */
global.RequestMetaPed = function (model, p1) {
  return Citizen.invokeNative('0xf97c34c33487d569', _ch(model), p1, _r, _ri);
};

/**
   * _REQUEST_META_PED_ASSET_BUNDLE
   * Returns requestId
   * Params: p1 = 1 in R* Scripts
   *
   * @param {number} asset
   * @param {number} p1
   * @return {number}
   */
global.RequestMetaPedAssetBundle = function (asset, p1) {
  return Citizen.invokeNative('0x91fe941f9fcfb702', _ch(asset), p1, _r, _ri);
};

/**
   * _REQUEST_META_PED_COMPONENT
   *
   * @param {number} metaPedType
   * @param {any} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @return {any}
   */
global.RequestMetaPedComponent = function (metaPedType, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xf6d9e1f3560cbf8e', metaPedType, p1, p2, p3, p4, _r);
};

/**
   * _REQUEST_META_PED_OUTFIT
   * https://github.com/femga/rdr3_discoveries/blob/master/clothes/metaped_outfits.lua
   * Returns requestId, to be used with 0x74F512E29CB717E2
   *
   * @param {number} model
   * @param {number} outfit
   * @return {number}
   */
global.RequestMetaPedOutfit = function (model, outfit) {
  return Citizen.invokeNative('0x13154a76ce0cf9ab', _ch(model), _ch(outfit), _r, _ri);
};

/**
   * _REQUEST_MOTION_TYPE_ASSET
   *
   * @param {number} nameHash
   * @param {number} ped
   * @return {void}
   */
global.RequestMotionTypeAsset = function (nameHash, ped) {
  return Citizen.invokeNative('0xf7ea250b9a919e03', _ch(nameHash), ped);
};

/**
   * _REQUEST_PED_EMOTIONAL_PRESET
   * For more information, see common:/data/emotional_presets.meta
   *
   * @param {number} ped
   * @param {string | number} name
   * @return {void}
   */
global.RequestPedEmotionalPreset = function (ped, name) {
  return Citizen.invokeNative('0x5c3c55eaad19915f', ped, _ts(name));
};

/**
   * _REQUEST_PED_FACIAL_MOOD_THIS_FRAME
   * mood: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/fwFacialAnimRequest__Mood
   * Params: p2 = 6 in R* Scripts
   *
   * @param {number} ped
   * @param {number} mood
   * @param {number} p2
   * @return {void}
   */
global.RequestPedFacialMoodThisFrame = function (ped, mood, p2) {
  return Citizen.invokeNative('0x8b3b71c80a29a4bb', ped, _ch(mood), p2);
};

/**
   * _REQUEST_PED_FOR_SCENARIO_TYPE
   *
   * @param {number} ped
   * @param {number} object
   * @param {string | number} p2
   * @param {number} scenarioType
   * @param {string | number} p4
   * @param {boolean} p5
   * @return {any}
   */
global.RequestPedForScenarioType = function (ped, object, p2, scenarioType, p4, p5) {
  return Citizen.invokeNative('0xbded916a9f9b0604', ped, object, _ts(p2), _ch(scenarioType), _ts(p4), p5, _r);
};

/**
   * _REQUEST_PED_GETUP_ANIMATION
   * Known get up animation types: REAR, FRONT
   *
   * @param {number} ped
   * @param {string | number} getUpType
   * @return {void}
   */
global.RequestPedGetupAnimation = function (ped, getUpType) {
  return Citizen.invokeNative('0xeaa8242c8479c27d', ped, _ts(getUpType));
};

/**
   * _REQUEST_PROP_SCENARIO_PED
   *
   * @param {number} ped
   * @param {number} object
   * @param {string | number} p2
   * @param {string | number} p3
   * @param {string | number} p4
   * @param {boolean} p5
   * @return {any}
   */
global.RequestPropScenarioPed = function (ped, object, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xbec65c6049b3219d', ped, object, p2, p3, p4, p5, _r);
};

/**
   * _REQUEST_TEXTURE
   * Creates a texture override data for ped and returns it's index.
   * So you can replace any texture of any ped's component.
   * Also, you can add overlays on it, such as aging, lipstick and more.
   * Textures can be reused by multiple peds at once.
   * You can keep only 32 textures at once(including other peds).
   * 
   * https://github.com/femga/rdr3_discoveries/blob/master/clothes/change_overlays_script.lua
   * materialHash: https://github.com/femga/rdr3_discoveries/blob/master/clothes/cloth_drawable_albedo_normal_material_TEMPORARY.lua
   *
   * @param {number} albedoHash
   * @param {number} normalHash
   * @param {number} materialHash
   * @return {number}
   */
global.RequestTexture = function (albedoHash, normalHash, materialHash) {
  return Citizen.invokeNative('0xc5e7204f322e49eb', _ch(albedoHash), _ch(normalHash), _ch(materialHash), _r, _ri);
};

/**
   * _RESERVE_AMBIENT_PEDS
   *
   * @param {number} numPeds
   * @return {void}
   */
global.ReserveAmbientPeds = function (numPeds) {
  return Citizen.invokeNative('0xed9582b3da8f02b4', numPeds);
};

/**
   * _RESERVE_AMBIENT_PEDS_TOTAL
   *
   * @param {number} numPeds
   * @return {void}
   */
global.ReserveAmbientPedsTotal = function (numPeds) {
  return Citizen.invokeNative('0xf008e0ba1fe1d644', numPeds);
};

/**
   * _RESET_PED_COMPONENTS
   *
   * @param {number} ped
   * @return {void}
   */
global.ResetPedComponents = function (ped) {
  return Citizen.invokeNative('0x0bfa1bd465cdfefd', ped);
};

/**
   * _RESET_PED_INCAPACITATION_BLEED_OUT_DURATION
   *
   * @param {number} ped
   * @return {void}
   */
global.ResetPedIncapacitationBleedOutDuration = function (ped) {
  return Citizen.invokeNative('0x4b9668db91dc39b8', ped);
};

/**
   * _RESET_PED_LADDER_MOVEMENT_SPEED_MODIFIER
   *
   * @param {number} ped
   * @return {void}
   */
global.ResetPedLadderMovementSpeedModifier = function (ped) {
  return Citizen.invokeNative('0x801917e7d7bce418', ped);
};

/**
   * _RESET_PED_TEXTURE
   * Removes every texture layer but the base layer
   * Clearing texture's data: setting params to default values, but keep overlays.
   *
   * @param {number} textureId
   * @return {void}
   */
global.ResetPedTexture = function (textureId) {
  return Citizen.invokeNative('0x8472a1789478f82f', textureId);
};

/**
   * _RESTORE_PED_STAMINA
   * 0.0 <= stamina <= 100.0
   *
   * @param {number} ped
   * @param {number} stamina
   * @return {void}
   */
global.RestorePedStamina = function (ped, stamina) {
  return Citizen.invokeNative('0x675680d089bfa21f', ped, _fv(stamina));
};

/**
   * _SET_ACCURACY_AGAINST_LOCAL_PLAYER_MODIFIER
   *
   * @param {number} ped
   * @param {number} modifier
   * @return {void}
   */
global.SetAccuracyAgainstLocalPlayerModifier = function (ped, modifier) {
  return Citizen.invokeNative('0xc2266aa617668ad3', ped, _fv(modifier));
};

/**
   * _SET_AMBIENT_ANIMAL_DENSITY_MULTIPLIER_THIS_FRAME
   *
   * @param {number} multiplier
   * @return {void}
   */
global.SetAmbientAnimalDensityMultiplierThisFrame = function (multiplier) {
  return Citizen.invokeNative('0xc0258742b034dfaf', _fv(multiplier));
};

/**
   * _SET_AMBIENT_HUMAN_DENSITY_MULTIPLIER_THIS_FRAME
   *
   * @param {number} multiplier
   * @return {void}
   */
global.SetAmbientHumanDensityMultiplierThisFrame = function (multiplier) {
  return Citizen.invokeNative('0xba0980b5c0a11924', _fv(multiplier));
};

/**
   * _SET_AMBIENT_PED_DENSITY_MULTIPLIER_THIS_FRAME
   *
   * @param {number} multiplier
   * @return {void}
   */
global.SetAmbientPedDensityMultiplierThisFrame = function (multiplier) {
  return Citizen.invokeNative('0xab0d553fe20a6e25', _fv(multiplier));
};

/**
   * _SET_CHAR_EXPRESSION
   * Sets MetaPedExpression at index specified. Morphs components, such as changing body size or facial features.
   * 
   * Note: You have to update the ped's variation (using 0xCC8CA3E88256E58F) after calling this native
   * 
   * index = MetaPedExpression IDs
   * List of face features: https://pastebin.com/9jb88FXW
   * Full list of MetaPedExpressions: https://pastebin.com/Ld76cAn7
   * value: -1.0 to 1.0 (values beyond this likely won't sync to other clients)
   * 
   * This native also allows you to change a horse's gender.
   * 
   * Old name: _SET_PED_FACE_FEATURE
   *
   * @param {number} ped
   * @param {number} index
   * @param {number} value
   * @return {void}
   */
global.SetCharExpression = function (ped, index, value) {
  return Citizen.invokeNative('0x5653ab26c82938cf', ped, index, _fv(value));
};

/**
   * _SET_CURRENT_DEFENSE_AGAINST_PLAYERS_MODIFIER
   *
   * @param {number} horse
   * @param {number} modifier
   * @return {void}
   */
global.SetCurrentDefenseAgainstPlayersModifier = function (horse, modifier) {
  return Citizen.invokeNative('0x069eddf1fd4deb0a', horse, _fv(modifier));
};

/**
   * _SET_DEFENSE_MODIFIER_FOR_PED
   *
   * @param {number} ped
   * @param {number} modifier
   * @return {void}
   */
global.SetDefenseModifierForPed = function (ped, modifier) {
  return Citizen.invokeNative('0x9b6808ec46be849b', ped, _fv(modifier));
};

/**
   * _SET_FORMATION_AUTO_ASSIGN_POSITION
   *
   * @param {number} groupId
   * @param {boolean} toggle
   * @return {void}
   */
global.SetFormationAutoAssignPosition = function (groupId, toggle) {
  return Citizen.invokeNative('0x478f6b9920446ce2', groupId, toggle);
};

/**
   * _SET_HEALTH_RECHARGE_MULTIPLIER
   *
   * @param {number} ped
   * @param {number} multiplier
   * @return {void}
   */
global.SetHealthRechargeMultiplier = function (ped, multiplier) {
  return Citizen.invokeNative('0xde1b1907a83a1550', ped, multiplier);
};

/**
   * _SET_INTERACTION_LOCKON_FLAG
   *
   * @param {number} ped
   * @param {number} player
   * @param {number} flag
   * @param {boolean} enable
   * @return {void}
   */
global.SetInteractionLockonFlag = function (ped, player, flag, enable) {
  return Citizen.invokeNative('0xfeca2081f61ed2cd', ped, player, flag, enable);
};

/**
   * _SET_META_PED_TAG
   * Use to apply metaped player components
   * Replaces asset, alternatively you can remove assets using REMOVE_TAG_FROM_META_PED
   *
   * @param {number} ped
   * @param {number} drawable
   * @param {number} albedo
   * @param {number} normal
   * @param {number} material
   * @param {number} palette
   * @param {number} tint0
   * @param {number} tint1
   * @param {number} tint2
   * @return {void}
   */
global.SetMetaPedTag = function (ped, drawable, albedo, normal, material, palette, tint0, tint1, tint2) {
  return Citizen.invokeNative('0xbc6df00d7a4a6819', ped, _ch(drawable), _ch(albedo), _ch(normal), _ch(material), _ch(palette), tint0, tint1, tint2);
};

/**
   * _SET_META_PED_WEARINESS
   * Sets ped eye redness, weariness: 0.f to 1.f
   *
   * @param {number} ped
   * @param {number} weariness
   * @return {void}
   */
global.SetMetaPedWeariness = function (ped, weariness) {
  return Citizen.invokeNative('0x314c5465195f3b30', ped, _fv(weariness));
};

/**
   * _SET_MIN_PED_HEALTH_THRESHOLD
   *
   * @param {number} ped
   * @param {number} healthAmount
   * @return {void}
   */
global.SetMinPedHealthThreshold = function (ped, healthAmount) {
  return Citizen.invokeNative('0x7883aa809df43d98', ped, _fv(healthAmount));
};

/**
   * _SET_MOUNT_BONDING_LEVEL
   *
   * @param {number} ped
   * @param {number} bondingLevel
   * @return {void}
   */
global.SetMountBondingLevel = function (ped, bondingLevel) {
  return Citizen.invokeNative('0xa69899995997a63b', ped, bondingLevel);
};

/**
   * _SET_MOUNT_SECURITY_ENABLED
   * Note: this native was added in build 1232.40
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetMountSecurityEnabled = function (ped, toggle) {
  return Citizen.invokeNative('0x11e6b9629c46d6ec', ped, toggle);
};

/**
   * _SET_PED_ACTION_DISABLE_FLAG
   * https://github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_ACTION_DISABLE_FLAGS
   *
   * @param {number} ped
   * @param {number} actionDisableFlag
   * @return {void}
   */
global.SetPedActionDisableFlag = function (ped, actionDisableFlag) {
  return Citizen.invokeNative('0xb8de69d9473b7593', ped, actionDisableFlag);
};

/**
   * _SET_PED_ACTIVATE_WOUND_EFFECT
   * bloodFountainPressure: visible effect from 0.0 till 20.0
   * yaw: visible effect from -3.0 till 3.0
   * bloodFountainDirection: 1.0 left side, -1.0 right side
   * bloodFountainPulse: from 0.1 (low) till 1.0 (fast)
   * make blood fountain from your stomach: _SET_PED_ACTIVATE_WOUND_EFFECT(ped, unk, 2, 14411, 0.0, 0.1, 0.0, 0.0, 3.0, -1.0, 1.0)
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} boneId
   * @param {number} moveWoundLeftRight
   * @param {number} bloodFountainPressure
   * @param {number} yaw
   * @param {number} bloodFountainDirection
   * @param {number} bloodFountainPulse
   * @param {number} p8
   * @param {number} p9
   * @return {void}
   */
global.SetPedActivateWoundEffect = function (ped, p1, boneId, moveWoundLeftRight, bloodFountainPressure, yaw, bloodFountainDirection, bloodFountainPulse, p8, p9) {
  return Citizen.invokeNative('0xffd54d9fe71b966a', ped, p1, boneId, _fv(moveWoundLeftRight), _fv(bloodFountainPressure), _fv(yaw), _fv(bloodFountainDirection), _fv(bloodFountainPulse), _fv(p8), _fv(p9));
};

/**
   * _SET_PED_ACTIVE_PLAYER_TYPE
   * Params: hash - ARTHUR or JOHN
   * _SET_PED_(A-D)*
   *
   * @param {number} ped
   * @param {number} playerType
   * @return {void}
   */
global.SetPedActivePlayerType = function (ped, playerType) {
  return Citizen.invokeNative('0xb285ad0ec870b2df', ped, _ch(playerType));
};

/**
   * _SET_PED_ANIMAL_DETECTION_MODIFIER
   *
   * @param {number} ped
   * @param {number} modifier
   * @return {void}
   */
global.SetPedAnimalDetectionModifier = function (ped, modifier) {
  return Citizen.invokeNative('0x43ca928e892cfdb8', ped, _fv(modifier));
};

/**
   * _SET_PED_BEAT_MULTIPLIER
   * NET_FETCH_CLIENT_UPDATE_PED_FIGHT_PROFICIENCY: Changing parry multiplier for ped
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.SetPedBeatMultiplier = function (ped, p1) {
  return Citizen.invokeNative('0x6dbf2d78709ad70b', ped, _fv(p1));
};

/**
   * _SET_PED_BLACKBOARD_BOOL
   *
   * @param {number} ped
   * @param {string | number} variableName
   * @param {boolean} value
   * @param {number} removeTimer
   * @return {void}
   */
global.SetPedBlackboardBool = function (ped, variableName, value, removeTimer) {
  return Citizen.invokeNative('0xcb9401f918cb0f75', ped, variableName, value, removeTimer);
};

/**
   * _SET_PED_BLACKBOARD_FLOAT
   *
   * @param {number} ped
   * @param {string | number} variableName
   * @param {number} value
   * @param {number} removeTimer
   * @return {void}
   */
global.SetPedBlackboardFloat = function (ped, variableName, value, removeTimer) {
  return Citizen.invokeNative('0x437c08db4febe2bd', ped, variableName, _fv(value), removeTimer);
};

/**
   * _SET_PED_BLACKBOARD_HASH
   * p1:
   * BodyPartChained
   * OverloadMostInjuredBodyPart
   * 
   * p2:
   * LeftLeg
   * Legs
   * RightArm
   *
   * @param {number} ped
   * @param {string | number} variableName
   * @param {string | number} value
   * @param {number} removeTimer
   * @return {void}
   */
global.SetPedBlackboardHash = function (ped, variableName, value, removeTimer) {
  return Citizen.invokeNative('0xa762c9d6cf165e0d', ped, variableName, value, removeTimer);
};

/**
   * _SET_PED_BLACKBOARD_INT
   * https://github.com/femga/rdr3_discoveries/tree/master/AI/BLACKBOARDS
   * Blackboard natives allow you to apply and check certain data to/for peds.
   * Blackboard bools, floats and strings are subdivided into 6 sections: "all", "animation", "any", "code", "global" and "script"
   * Most changes are only visible for "script" blackboards, some "script" blackboards change ped motions
   * "removeTimer" is self-removal timer, can be "-1" so your data will not be removed by the game (forever); 100 = 1 second
   *
   * @param {number} ped
   * @param {string | number} variableName
   * @param {number} value
   * @param {number} removeTimer
   * @return {void}
   */
global.SetPedBlackboardInt = function (ped, variableName, value, removeTimer) {
  return Citizen.invokeNative('0x5f53010c4c3f6baf', ped, variableName, value, removeTimer);
};

/**
   * _SET_PED_BLEEDOUT_PROFILE
   * Bleedout profiles:
   * Animal_FastBleedout
   * Animal_Generic
   * Human_FastBleedout
   * Human_Generic
   * Human_Mission
   * 
   * For more information, see common/data/ai/peddamageinfo.meta
   *
   * @param {number} ped
   * @param {number} bleedoutProfile
   * @return {void}
   */
global.SetPedBleedoutProfile = function (ped, bleedoutProfile) {
  return Citizen.invokeNative('0x66c047719b0e80e1', ped, _ch(bleedoutProfile));
};

/**
   * _SET_PED_BRAWLING_STYLE
   * brawlingStyle:
   * enum eBrawlingStyle : Hash
   * {
   *   BS_AI = 0x802C604D,
   *   BS_AI_BARBRAWL = 0x4FF5F0C7,
   *   BS_AI_DEFENSIVE = 0xD888F2FD,
   *   BS_AI_MOONSHINE_BARBRAWL = 0xA01B433A,
   *   BS_ALLIGATOR = 0x7A5548ED,
   *   BS_ALLIGATOR_LARGE = 0x368EC7CB,
   *   BS_ALLY = 0x69C76C14,
   *   BS_ANIMAL = 0xD777C754,
   *   BS_BADGER = 0x7E7C3F53,
   *   BS_BEAR = 0x0BC66E35,
   *   BS_BEAVER = 0x4E313783,
   *   BS_BOAR = 0x176A5831,
   *   BS_BOUNTY_HUNTER = 0x3900654C,
   *   BS_BRUISER = 0x4514DB61,
   *   BS_BULL = 0x4E50C5D2,
   *   BS_COUGAR = 0x9DAA7CCB,
   *   BS_COW = 0xB0E91295,
   *   BS_COYOTE = 0xA448EB69,
   *   BS_DEER = 0xA781E6B3,
   *   BS_DOG = 0x5A4155C4,
   *   BS_ELK = 0x408697F0,
   *   BS_FEMALE = 0x6A3BB2C2,
   *   BS_FEMALE_STRONG = 0x4DAFDD84,
   *   BS_GANGUP = 0xD0CECFF2,
   *   BS_GOAT = 0x078E649F,
   *   BS_HORSE = 0xF6B775F3,
   *   BS_MICAH_FINALE = 0x1F0BB27A,
   *   BS_MOOSE = 0x968917AB,
   *   BS_MUSKRAT = 0x1EDC33AC,
   *   BS_NO_MELEE = 0x25B5F931,
   *   BS_PIG = 0x22EAD110,
   *   BS_PLAYER = 0x78BAEF07,
   *   BS_PLAYER_FINALE = 0xF9E77D2D,
   *   BS_PLAYER_MOONSHINER = 0x687BF19F,
   *   BS_PLAYER_WINTER1 = 0x3C6A802F,
   *   BS_QUICK = 0xC4CABB1B,
   *   BS_RACCOON = 0x505F8917,
   *   BS_SHEEP = 0x6827CCCF,
   *   BS_SNAKE = 0x82BEBC4B,
   *   BS_TIMID = 0x431AEF77,
   *   BS_WOLF = 0xA8F023D4
   * };
   *
   * @param {number} ped
   * @param {number} brawlingStyle
   * @return {void}
   */
global.SetPedBrawlingStyle = function (ped, brawlingStyle) {
  return Citizen.invokeNative('0x8ba83cc4288cd56d', ped, _ch(brawlingStyle));
};

/**
   * _SET_PED_CAN_BE_LASSOED
   * SET_PED_CAN_*
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedCanBeLassoed = function (ped, toggle) {
  return Citizen.invokeNative('0xfd6943b6df77e449', ped, toggle);
};

/**
   * SET_PED_CAN_BODY_RECOIL_IK
   *
   * @param {number} pedIndex
   * @param {boolean} bEnableIk
   * @return {void}
   */
global.SetPedCanBodyRecoilIk = function (pedIndex, bEnableIk) {
  return Citizen.invokeNative('0xee9df765990e8d1d', pedIndex, bEnableIk);
};

/**
   * _SET_PED_COMBAT_ATTRIBUTE_HASH
   * Hashes: GUARD, COMBAT_ANIMAL, LAW, LAW_SHERIFF
   * _SET_PED_COMBAT_A* - _SET_PED_COMBAT_M*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.SetPedCombatAttributeHash = function (ped, p1) {
  return Citizen.invokeNative('0xbd75500141e4725c', ped, _ch(p1));
};

/**
   * _SET_PED_COMBAT_BEHAVIOUR
   *
   * @param {number} ped
   * @param {number} behaviour
   * @return {void}
   */
global.SetPedCombatBehaviour = function (ped, behaviour) {
  return Citizen.invokeNative('0x9238a3d970bbb0a9', ped, _ch(behaviour));
};

/**
   * _SET_PED_COMBAT_STYLE
   * https://github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_STYLES
   * Params: p2 is usually 1, sometimes 0 or 2
   * duration in seconds, -1.0 = forever
   *
   * @param {number} ped
   * @param {number} combatStyleHash
   * @param {number} p2
   * @param {number} duration
   * @return {void}
   */
global.SetPedCombatStyle = function (ped, combatStyleHash, p2, duration) {
  return Citizen.invokeNative('0x8acc0506743a8a5c', ped, _ch(combatStyleHash), p2, _fv(duration));
};

/**
   * _SET_PED_COMBAT_STYLE_MOD
   * duration in seconds, -1.0 = forever
   *
   * @param {number} ped
   * @param {number} combatStyleModHash
   * @param {number} duration
   * @return {void}
   */
global.SetPedCombatStyleMod = function (ped, combatStyleModHash, duration) {
  return Citizen.invokeNative('0x8b1e8e35a6e814ea', ped, _ch(combatStyleModHash), _fv(duration));
};

/**
   * _SET_PED_CROUCH_MOVEMENT
   *
   * @param {number} ped
   * @param {boolean} state
   * @param {number} p2
   * @param {boolean} immediately
   * @return {void}
   */
global.SetPedCrouchMovement = function (ped, state, p2, immediately) {
  return Citizen.invokeNative('0x7de9692c6f64cfe8', ped, state, p2, immediately);
};

/**
   * _SET_PED_CULL_RANGE
   * The higher the multiplier the less the engine renders culls (https://docs.unity3d.com/Manual/OcclusionCulling.html)
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.SetPedCullRange = function (ped, p1, p2) {
  return Citizen.invokeNative('0x8ac1d721b2097b6e', ped, _fv(p1), _fv(p2));
};

/**
   * _SET_PED_DAMAGED
   *
   * @param {number} ped
   * @param {boolean} damaged
   * @return {void}
   */
global.SetPedDamaged = function (ped, damaged) {
  return Citizen.invokeNative('0xdace03c65c6666db', ped, damaged);
};

/**
   * _SET_PED_DAMAGE_CLEANLINESS
   * damageCleanliness: see _GET_PED_DAMAGE_CLEANLINESS
   *
   * @param {number} ped
   * @param {number} damageCleanliness
   * @return {void}
   */
global.SetPedDamageCleanliness = function (ped, damageCleanliness) {
  return Citizen.invokeNative('0x7528720101a807a5', ped, damageCleanliness);
};

/**
   * _SET_PED_DEFENSIVE_AREA_TO_ANGLED_AREA
   * _SET_PED_(A?)*
   *
   * @param {number} ped
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {any} p7
   * @param {boolean} p8
   * @param {boolean} p9
   * @param {number} entity
   * @param {boolean} p11
   * @return {void}
   */
global.SetPedDefensiveAreaToAngledArea = function (ped, x1, y1, z1, x2, y2, z2, p7, p8, p9, entity, p11) {
  return Citizen.invokeNative('0xeb2bfe5d009f0331', ped, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p7, p8, p9, entity, p11);
};

/**
   * _SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_ENTITY
   *
   * @param {number} ped
   * @param {number} entity
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} p6
   * @param {boolean} p7
   * @return {void}
   */
global.SetPedDefensiveSphereAttachedToEntity = function (ped, entity, x, y, z, radius, p6, p7) {
  return Citizen.invokeNative('0x1854217c640b39ec', ped, entity, _fv(x), _fv(y), _fv(z), _fv(radius), p6, p7);
};

/**
   * _SET_PED_DESIRED_LOCO_FOR_MODEL
   * Seems to set the ped's loco type.
   * Values used in the scripts:
   * algie
   * angry_female
   * arthur_healthy
   * cowboy
   * cowboy_f
   * default
   * default_female
   * free_slave_01
   * free_slave_02
   * gold_panner
   * guard_lantern
   * injured_general
   * john_marston
   * lilly_millet
   * lone_prisoner
   * lost_man
   * mp_ova_hunter
   * mp_ova_hunter_female
   * murfree
   * old_female
   * primate
   * rally
   * waiter
   * war_veteran
   *
   * @param {number} ped
   * @param {string | number} locomotionArchetype
   * @return {void}
   */
global.SetPedDesiredLocoForModel = function (ped, locomotionArchetype) {
  return Citizen.invokeNative('0x923583741dc87bce', ped, _ts(locomotionArchetype));
};

/**
   * _SET_PED_DESIRED_LOCO_MOTION_TYPE
   * Sets peds motion type
   *
   * @param {number} ped
   * @param {string | number} locoMotionType
   * @return {void}
   */
global.SetPedDesiredLocoMotionType = function (ped, locoMotionType) {
  return Citizen.invokeNative('0x89f5e7adecccb49c', ped, locoMotionType);
};

/**
   * _SET_PED_DIRT_CLEANED
   * Params: ped, 0f, -1, true, true in R* MP Scripts
   * _SET_PED_DE* - _SET_PED_F*
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @param {boolean} p3
   * @param {boolean} p4
   * @return {void}
   */
global.SetPedDirtCleaned = function (ped, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xe3144b932dfdff65', ped, _fv(p1), p2, p3, p4);
};

/**
   * _SET_PED_DISABLE_KICK_MOVE
   * Disables being able to kick move ped.
   *
   * @param {number} ped
   * @param {boolean} disable
   * @return {void}
   */
global.SetPedDisableKickMove = function (ped, disable) {
  return Citizen.invokeNative('0xadd31a5c7a5faa73', ped, disable);
};

/**
   * _SET_PED_DRUNKNESS
   * SOBER = 0.0f, SLIGHTLY_DRUNK = 0.25f, MODERATELY_DRUNK = 0.5f, VERY_DRUNK = 1.0f
   *
   * @param {number} ped
   * @param {boolean} enabled
   * @param {number} drunknessLevel
   * @return {void}
   */
global.SetPedDrunkness = function (ped, enabled, drunknessLevel) {
  return Citizen.invokeNative('0x406ccf555b04fad3', ped, enabled, _fv(drunknessLevel));
};

/**
   * _SET_PED_FIRING_PATTERN_2
   * Used in R* MP Script fm_mission_controller and various R* SP Scripts for ambush*
   *
   * @param {number} ped
   * @param {number} patternHash
   * @return {void}
   */
global.SetPedFiringPattern_2 = function (ped, patternHash) {
  return Citizen.invokeNative('0x20e54854def6a54a', ped, _ch(patternHash));
};

/**
   * _SET_PED_FIRING_PATTERN_3
   * Only used in R* MP Script fm_mission_controller
   *
   * @param {number} ped
   * @param {number} patternHash
   * @return {void}
   */
global.SetPedFiringPattern_3 = function (ped, patternHash) {
  return Citizen.invokeNative('0x244e8c282188e40f', ped, _ch(patternHash));
};

/**
   * _SET_PED_FORMATION_POSITION
   *
   * @param {number} ped
   * @param {number} position
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedFormationPosition = function (ped, position, toggle) {
  return Citizen.invokeNative('0x0e9e95fdedcc9d35', ped, position, toggle);
};

/**
   * _SET_PED_GETUP_ANIMATION
   *
   * @param {number} ped
   * @param {string | number} animName
   * @param {boolean} p2
   * @return {void}
   */
global.SetPedGetupAnimation = function (ped, animName, p2) {
  return Citizen.invokeNative('0x3ae3552e7c207cc5', ped, animName, p2);
};

/**
   * _SET_PED_GRAPPLE_ACTION
   *
   * @param {number} ped
   * @param {number} grappleAction
   * @return {void}
   */
global.SetPedGrappleAction = function (ped, grappleAction) {
  return Citizen.invokeNative('0x8301d87b1b89e219', ped, _ch(grappleAction));
};

/**
   * _SET_PED_GRAPPLE_ANIMATION
   *
   * @param {number} ped
   * @param {number} grappleAnim
   * @return {void}
   */
global.SetPedGrappleAnimation = function (ped, grappleAnim) {
  return Citizen.invokeNative('0x56e9c26cd29d1ed6', ped, _ch(grappleAnim));
};

/**
   * _SET_PED_GRAPPLE_EFFECT_MULTIPLIER
   *
   * @param {number} ped
   * @param {number} multiplier
   * @return {any}
   */
global.SetPedGrappleEffectMultiplier = function (ped, multiplier) {
  return Citizen.invokeNative('0x99a6e246c315bf60', ped, _fv(multiplier), _r);
};

/**
   * _SET_PED_GRAPPLE_FLAG
   *
   * @param {number} ped
   * @param {number} flag
   * @param {boolean} enable
   * @return {void}
   */
global.SetPedGrappleFlag = function (ped, flag, enable) {
  return Citizen.invokeNative('0x789dabd18e9024db', ped, flag, enable);
};

/**
   * _SET_PED_GRAPPLE_SEQUENCE
   *
   * @param {number} ped
   * @param {string | number} grappleSequence
   * @return {void}
   */
global.SetPedGrappleSequence = function (ped, grappleSequence) {
  return Citizen.invokeNative('0x604190f0cf0df158', ped, grappleSequence);
};

/**
   * _SET_PED_GRAPPLE_STYLE
   * Hashes: GS_DRAGGING, GS_FACE_TO_BACK, GS_FACE_TO_FACE, GS_FACE_TO_FACE_WALL, GS_MOUNTED
   *
   * @param {number} ped
   * @param {number} style
   * @return {any}
   */
global.SetPedGrappleStyle = function (ped, style) {
  return Citizen.invokeNative('0x630e7b01f091a197', ped, _ch(style), _r);
};

/**
   * _SET_PED_HEADSHOT_DAMAGE_MULTIPLIER
   *
   * @param {number} ped
   * @param {number} multiplier
   * @return {void}
   */
global.SetPedHeadshotDamageMultiplier = function (ped, multiplier) {
  return Citizen.invokeNative('0x2ba918c823b8ba56', ped, _fv(multiplier));
};

/**
   * _SET_PED_HEALTH_CONFIG
   * configHash: see pedhealth.meta
   *
   * @param {number} ped
   * @param {number} configHash
   * @return {void}
   */
global.SetPedHealthConfig = function (ped, configHash) {
  return Citizen.invokeNative('0xf6b82fce03b43a37', ped, _ch(configHash));
};

/**
   * _SET_PED_IMMERSION_FLAG
   * Only used in R* Script beat_sharp_shooter
   * Blocks ped from swimming underwater
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedImmersionFlag = function (ped, toggle) {
  return Citizen.invokeNative('0x7fb0088e8769cddb', ped, toggle);
};

/**
   * _SET_PED_INCAPACITATION_FLAGS
   *
   * @param {number} ped
   * @param {number} flags
   * @return {void}
   */
global.SetPedIncapacitationFlags = function (ped, flags) {
  return Citizen.invokeNative('0xd67b6f3bcf81ba47', ped, flags);
};

/**
   * _SET_PED_INCAPACITATION_MODIFIERS
   *
   * @param {number} ped
   * @param {boolean} canBeIncapacitated
   * @param {number} threshold
   * @param {number} bleedoutTime
   * @param {number} p4
   * @return {void}
   */
global.SetPedIncapacitationModifiers = function (ped, canBeIncapacitated, threshold, bleedoutTime, p4) {
  return Citizen.invokeNative('0x39ed303390ddeac7', ped, canBeIncapacitated, threshold, bleedoutTime, p4);
};

/**
   * _SET_PED_INCAPACITATION_TOTAL_BLEED_OUT_DURATION
   *
   * @param {number} ped
   * @param {number} duration
   * @return {void}
   */
global.SetPedIncapacitationTotalBleedOutDuration = function (ped, duration) {
  return Citizen.invokeNative('0x2890418b39bc8fff', ped, _fv(duration));
};

/**
   * _SET_PED_INTERACTION_NEGATIVE_RESPONSE
   *
   * @param {number} ped
   * @param {string | number} speech
   * @return {void}
   */
global.SetPedInteractionNegativeResponse = function (ped, speech) {
  return Citizen.invokeNative('0xa3c53cde922bc78b', ped, speech);
};

/**
   * _SET_PED_INTERACTION_PERSONALITY
   * personality (script_mp_rel): NONE, AGGRESSIVE, TIMID (non-aggressive), CRIPPS, SCRIPTEDINTIMIDATION, MAGGIE, MARCEL, SCRIPTEDSALOON
   * personality (script_rel): AVOID, SCRIPTEDOUTLAW, TIMIDGUARDDOG, SCRIPTEDTIMIDROB, AGGRESSIVECAMPER, LAZYDOG, KIERANTIEDUP, SCRIPTEDGALA
   *
   * @param {number} ped
   * @param {number} personality
   * @return {void}
   */
global.SetPedInteractionPersonality = function (ped, personality) {
  return Citizen.invokeNative('0x24c82ef607105faa', ped, _ch(personality));
};

/**
   * _SET_PED_INTERACTION_POSITIVE_RESPONSE
   *
   * @param {number} ped
   * @param {string | number} speech
   * @return {void}
   */
global.SetPedInteractionPositiveResponse = function (ped, speech) {
  return Citizen.invokeNative('0x20c5459379d75c1c', ped, speech);
};

/**
   * _SET_PED_KNOCKED_BY_ONE_HIT
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.SetPedKnockedByOneHit = function (ped, p1) {
  return Citizen.invokeNative('0x5bcf0b79d4f5dba3', ped, _fv(p1));
};

/**
   * _SET_PED_LADDER_MOVEMENT_SPEED_MODIFIER
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.SetPedLadderMovementSpeedModifier = function (ped, p1) {
  return Citizen.invokeNative('0x05ce6af4df071d23', ped, _fv(p1));
};

/**
   * _SET_PED_LIGHTS
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedLights = function (ped, toggle) {
  return Citizen.invokeNative('0x13a210949fcbd92b', ped, toggle);
};

/**
   * _SET_PED_MOTIVATION
   * enum eMotivationState
   * {
   *   TOILET_STATE,
   *   FEAR_STATE,
   *   ANGRY_STATE,
   *   AGITATION_STATE,
   *   HUNGRY_STATE,
   *   TIRED_STATE,
   *   SAD_STATE,
   *   BRAVE_STATE,
   *   OFFER_ITEM_STATE,
   *   SUSPICION,
   *   DRUNK_STATE
   * };
   * 
   * If targetPed is set to 0 the ped motivationState affects everyone
   *
   * @param {number} ped
   * @param {number} motivationState
   * @param {number} threshold
   * @param {number} targetPed
   * @return {void}
   */
global.SetPedMotivation = function (ped, motivationState, threshold, targetPed) {
  return Citizen.invokeNative('0x06d26a96ca1bca75', ped, motivationState, _fv(threshold), targetPed);
};

/**
   * _SET_PED_MOTIVATION_MODIFIER
   * The higher the modifier, the slower the motivationState value will decrease
   *
   * @param {number} ped
   * @param {number} motivationState
   * @param {number} modifier
   * @return {void}
   */
global.SetPedMotivationModifier = function (ped, motivationState, modifier) {
  return Citizen.invokeNative('0xa1eb5d029e0191d3', ped, motivationState, _fv(modifier));
};

/**
   * _SET_PED_MOTIVATION_STATE_OVERRIDE
   * motivationState: see _SET_PED_MOTIVATION
   *
   * @param {number} ped
   * @param {number} motivationState
   * @param {boolean} enabled
   * @return {void}
   */
global.SetPedMotivationStateOverride = function (ped, motivationState, enabled) {
  return Citizen.invokeNative('0x2eb75fb86c41f026', ped, motivationState, enabled);
};

/**
   * _SET_PED_PERSONALITY
   * Hashes: STANDARD_PED_AGRO_GUARD, BOUNTY_HUNTER, PLAYER_HORSE, LAW_POLICE, GUARD_DOG, ATTACK_DOG
   * Personalities can also be found in common:/data/ai/interactionpersonalities
   *
   * @param {number} ped
   * @param {number} personality
   * @return {void}
   */
global.SetPedPersonality = function (ped, personality) {
  return Citizen.invokeNative('0xb8b6430ead2d2437', ped, _ch(personality));
};

/**
   * _SET_PED_PROMPT_NAME
   *
   * @param {number} ped
   * @param {string | number} name
   * @return {void}
   */
global.SetPedPromptName = function (ped, name) {
  return Citizen.invokeNative('0x4a48b6e03babb4ac', ped, name);
};

/**
   * _SET_PED_PROMPT_NAME_2
   *
   * @param {number} ped
   * @param {string | number} name
   * @return {void}
   */
global.SetPedPromptName_2 = function (ped, name) {
  return Citizen.invokeNative('0x19b14e04b009e28b', ped, name);
};

/**
   * _SET_PED_PROMPT_NAME_FROM_GXT_ENTRY
   *
   * @param {number} ped
   * @param {number} gxtEntryHash
   * @return {void}
   */
global.SetPedPromptNameFromGxtEntry = function (ped, gxtEntryHash) {
  return Citizen.invokeNative('0xfca8fb9e15fa80d3', ped, _ch(gxtEntryHash));
};

/**
   * _SET_PED_PROMPT_NAME_FROM_GXT_ENTRY_2
   *
   * @param {number} ped
   * @param {number} gxtEntryHash
   * @return {void}
   */
global.SetPedPromptNameFromGxtEntry_2 = function (ped, gxtEntryHash) {
  return Citizen.invokeNative('0xc2745d9261664901', ped, _ch(gxtEntryHash));
};

/**
   * _SET_PED_QUALITY
   * quality: see _GET_PED_QUALITY
   *
   * @param {number} ped
   * @param {number} quality
   * @return {void}
   */
global.SetPedQuality = function (ped, quality) {
  return Citizen.invokeNative('0xce6b874286d640bb', ped, quality);
};

/**
   * _SET_PED_SCALE
   *
   * @param {number} ped
   * @param {number} scale
   * @return {void}
   */
global.SetPedScale = function (ped, scale) {
  return Citizen.invokeNative('0x25acfc650b65c538', ped, _fv(scale));
};

/**
   * _SET_PED_SCENT
   * 0.0 - 1.0
   * Modifies the "scent line" on the ped's body when using Eagle Eye.
   *
   * @param {number} ped
   * @param {number} scent
   * @return {void}
   */
global.SetPedScent = function (ped, scent) {
  return Citizen.invokeNative('0x01b21b81865e2a1f', ped, _fv(scent));
};

/**
   * _SET_PED_TARGET_ACTION_DISABLE_FLAG
   *
   * @param {number} ped
   * @param {number} actionDisableFlag
   * @return {void}
   */
global.SetPedTargetActionDisableFlag = function (ped, actionDisableFlag) {
  return Citizen.invokeNative('0xc163dac52ac975d3', ped, actionDisableFlag);
};

/**
   * _SET_PED_TO_BE_REMOVED
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {any} p4
   * @return {void}
   */
global.SetPedToBeRemoved = function (ped, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x36e4b61dc56de77c', ped, _fv(p1), _fv(p2), p3, p4);
};

/**
   * _SET_PED_TO_DISABLE_RAGDOLL
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedToDisableRagdoll = function (ped, toggle) {
  return Citizen.invokeNative('0x221f4d9912b7fe86', ped, toggle);
};

/**
   * _SET_PED_TRAIL_EFFECT
   * duration in seconds
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {number} duration
   * @return {void}
   */
global.SetPedTrailEffect = function (ped, p1, duration) {
  return Citizen.invokeNative('0xa5950e16b8f31052', ped, p1, _fv(duration));
};

/**
   * _SET_PED_USE_HORSE_MAP_COLLISION
   * Doesn't actually return anything.
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {any}
   */
global.SetPedUseHorseMapCollision = function (ped, toggle) {
  return Citizen.invokeNative('0xeb72453b6f5b45b0', ped, toggle, _r);
};

/**
   * _SET_PED_VOICE_VOLUME
   * _SET_PED_S* - _SET_PED_T*
   *
   * @param {number} ped
   * @param {number} volume
   * @return {void}
   */
global.SetPedVoiceVolume = function (ped, volume) {
  return Citizen.invokeNative('0xd05ad61f242c626b', ped, _fv(volume));
};

/**
   * _SET_PED_WRITHING_DURATION
   *
   * @param {number} ped
   * @param {number} writhingDuration1
   * @param {number} writhingDuration2
   * @param {number} p3
   * @return {void}
   */
global.SetPedWrithingDuration = function (ped, writhingDuration1, writhingDuration2, p3) {
  return Citizen.invokeNative('0x4db9d03ac4e1fa84', ped, _fv(writhingDuration1), _fv(writhingDuration2), p3);
};

/**
   * _SET_PELT_FOR_HORSE
   *
   * @param {number} horse
   * @param {number} peltId
   * @return {void}
   */
global.SetPeltForHorse = function (horse, peltId) {
  return Citizen.invokeNative('0xa73f50e8796150d5', horse, peltId);
};

/**
   * _SET_PLAYER_ANTAGONIZE_DISABLED_FOR_PED
   *
   * @param {number} ped
   * @param {number} player
   * @param {number} duration
   * @return {void}
   */
global.SetPlayerAntagonizeDisabledForPed = function (ped, player, duration) {
  return Citizen.invokeNative('0x5708edd71b50c008', ped, player, duration);
};

/**
   * _SET_PLAYER_CURRENT_ANIMAL_DAMAGE_MODIFIER
   * Animal Skin Quality Modifier
   * Params: p2 = 2, p3 = 3 in R* Scripts
   *
   * @param {number} player
   * @param {number} modifier
   * @param {number} p2
   * @param {number} p3
   * @return {any}
   */
global.SetPlayerCurrentAnimalDamageModifier = function (player, modifier, p2, p3) {
  return Citizen.invokeNative('0x9eff3c91df38304f', player, _fv(modifier), p2, p3, _r);
};

/**
   * _SET_PLAYER_GREET_DISABLED_FOR_PED
   *
   * @param {number} ped
   * @param {number} player
   * @param {number} duration
   * @return {void}
   */
global.SetPlayerGreetDisabledForPed = function (ped, player, duration) {
  return Citizen.invokeNative('0x19173c3f15367b54', ped, player, duration);
};

/**
   * _SET_RANDOM_OUTFIT_VARIATION
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.SetRandomOutfitVariation = function (ped, p1) {
  return Citizen.invokeNative('0x283978a15512b2fe', ped, p1);
};

/**
   * _SET_REMOVE_PED_NETWORKED
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.SetRemovePedNetworked = function (ped, p1) {
  return Citizen.invokeNative('0x39a2fc5af55a52b1', ped, p1);
};

/**
   * _SET_SCENARIO_ANIMAL_DENSITY_MULTIPLIER_THIS_FRAME
   *
   * @param {number} multiplier
   * @return {void}
   */
global.SetScenarioAnimalDensityMultiplierThisFrame = function (multiplier) {
  return Citizen.invokeNative('0xdb48e99f8e064e56', _fv(multiplier));
};

/**
   * _SET_SCENARIO_HUMAN_DENSITY_MULTIPLIER_THIS_FRAME
   *
   * @param {number} multiplier
   * @return {void}
   */
global.SetScenarioHumanDensityMultiplierThisFrame = function (multiplier) {
  return Citizen.invokeNative('0x28cb6391acedd9db', _fv(multiplier));
};

/**
   * _SET_SCENARIO_PED_DENSITY_THIS_FRAME
   * Sets the scenario ped density to the given config.
   * 
   * Valid configs:
   * - BLACKWATER
   * - DEFAULT
   * - NEWBORDEAUX
   * - RHODES
   * - STRAWBERRY
   * - TUMBLEWEED
   * - VALENTINE
   * - VANHORN
   * 
   * See common/data/ai/densityscoringconfigs.meta for more information.
   *
   * @param {number} configHash
   * @return {void}
   */
global.SetScenarioPedDensityThisFrame = function (configHash) {
  return Citizen.invokeNative('0x95423627a9ca598e', _ch(configHash));
};

/**
   * _SET_SCENARIO_PED_RANGE_MULTIPLIER_THIS_FRAME
   *
   * @param {number} multiplier
   * @return {void}
   */
global.SetScenarioPedRangeMultiplierThisFrame = function (multiplier) {
  return Citizen.invokeNative('0xa77fa7be9312f8c0', _fv(multiplier));
};

/**
   * _SET_STAMINA_DEPLETION_MULTIPLIER
   *
   * @param {number} ped
   * @param {number} multiplier
   * @return {void}
   */
global.SetStaminaDepletionMultiplier = function (ped, multiplier) {
  return Citizen.invokeNative('0xef5a3d2285d8924b', ped, multiplier);
};

/**
   * _SET_STAMINA_RECHARGE_MULTIPLIER
   *
   * @param {number} ped
   * @param {number} multiplier
   * @return {void}
   */
global.SetStaminaRechargeMultiplier = function (ped, multiplier) {
  return Citizen.invokeNative('0x345c9f993a8ab4a4', ped, multiplier);
};

/**
   * _SET_TANK_ATTRIBUTE_SIZE
   * Size will be permanent
   *
   * @param {number} ped
   * @param {number} attributeIndex
   * @param {number} size
   * @return {void}
   */
global.SetTankAttributeSize = function (ped, attributeIndex, size) {
  return Citizen.invokeNative('0x7ff72de061df55e2', ped, attributeIndex, _fv(size));
};

/**
   * _SET_TEXTURE_LAYER_ALPHA
   *
   * @param {number} textureId
   * @param {number} layerId
   * @param {number} texAlpha
   * @return {void}
   */
global.SetTextureLayerAlpha = function (textureId, layerId, texAlpha) {
  return Citizen.invokeNative('0x6c76bc24f8bb709a', textureId, layerId, _fv(texAlpha));
};

/**
   * _SET_TEXTURE_LAYER_MOD
   *
   * @param {number} textureId
   * @param {number} layerId
   * @param {number} modTextureHash
   * @param {number} modAlpha
   * @param {number} modChannel
   * @return {void}
   */
global.SetTextureLayerMod = function (textureId, layerId, modTextureHash, modAlpha, modChannel) {
  return Citizen.invokeNative('0xf2ea041f1146d75b', textureId, layerId, _ch(modTextureHash), _fv(modAlpha), modChannel);
};

/**
   * _SET_TEXTURE_LAYER_PALLETE
   * paletteHash: https://raw.githubusercontent.com/femga/rdr3_discoveries/master/clothes/cloth_color_palletes.lua
   *
   * @param {number} textureId
   * @param {number} layerId
   * @param {number} paletteHash
   * @return {void}
   */
global.SetTextureLayerPallete = function (textureId, layerId, paletteHash) {
  return Citizen.invokeNative('0x1ed8588524ac9be1', textureId, layerId, _ch(paletteHash));
};

/**
   * _SET_TEXTURE_LAYER_ROUGHNESS
   *
   * @param {number} textureId
   * @param {number} layerId
   * @param {number} texRough
   * @return {void}
   */
global.SetTextureLayerRoughness = function (textureId, layerId, texRough) {
  return Citizen.invokeNative('0x057c4f092e2298be', textureId, layerId, _fv(texRough));
};

/**
   * _SET_TEXTURE_LAYER_SHEET_GRID_INDEX
   *
   * @param {number} textureId
   * @param {number} layerId
   * @param {number} sheetGridIndex
   * @return {void}
   */
global.SetTextureLayerSheetGridIndex = function (textureId, layerId, sheetGridIndex) {
  return Citizen.invokeNative('0x3329aae2882fc8e4', textureId, layerId, sheetGridIndex);
};

/**
   * _SET_TEXTURE_LAYER_TEXTURE_MAP
   *
   * @param {number} textureId
   * @param {number} layerId
   * @param {number} albedoHash
   * @param {number} normalHash
   * @param {number} materialHash
   * @return {void}
   */
global.SetTextureLayerTextureMap = function (textureId, layerId, albedoHash, normalHash, materialHash) {
  return Citizen.invokeNative('0x253a63b5badbc398', textureId, layerId, _ch(albedoHash), _ch(normalHash), _ch(materialHash));
};

/**
   * _SET_TEXTURE_LAYER_TINT
   * Seem color is not RGB or HSV
   *
   * @param {number} textureId
   * @param {number} layerId
   * @param {number} tint0
   * @param {number} tint1
   * @param {number} tint2
   * @return {void}
   */
global.SetTextureLayerTint = function (textureId, layerId, tint0, tint1, tint2) {
  return Citizen.invokeNative('0x2df59ffe6ffd6044', textureId, layerId, tint0, tint1, tint2);
};

/**
   * _SET_TEXTURE_OUTFIT_TINTS
   * Used in script function METAPED_CLOTHING__XML__APPLY_OUTFIT_TINTS_TO_PED
   *
   * @param {number} ped
   * @param {number} componentCategory
   * @param {number} palette
   * @param {number} tint0
   * @param {number} tint1
   * @param {number} tint2
   * @return {void}
   */
global.SetTextureOutfitTints = function (ped, componentCategory, palette, tint0, tint1, tint2) {
  return Citizen.invokeNative('0x4efc1f8ff1ad94de', ped, _ch(componentCategory), _ch(palette), tint0, tint1, tint2);
};

/**
   * _SET_TOTAL_PED_DAMAGE_FALLOFF_BONUS
   * _SET_W(EAPON?)*
   *
   * @param {number} ped
   * @param {number} bonus
   * @return {void}
   */
global.SetTotalPedDamageFalloffBonus = function (ped, bonus) {
  return Citizen.invokeNative('0x932786ce3c76477c', ped, _fv(bonus));
};

/**
   * _SET_TOTAL_PED_DAMAGE_FROM_AI
   * _SET_W(EAPON?)*
   *
   * @param {number} ped
   * @param {number} totalDamage
   * @return {void}
   */
global.SetTotalPedDamageFromAi = function (ped, totalDamage) {
  return Citizen.invokeNative('0x73b6f907b913c860', ped, _fv(totalDamage));
};

/**
   * _SHOOT_TRIGGER_AT_COORDS
   * Triggers a gunshot
   * Params: p5 = -1 in R* Scripts
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @return {any}
   */
global.ShootTriggerAtCoords = function (ped, x, y, z, p4, p5, p6, p7) {
  return Citizen.invokeNative('0x4c57f27d1554e6b0', ped, _fv(x), _fv(y), _fv(z), p4, _fv(p5), p6, _fv(p7), _r);
};

/**
   * _SPAWNPOINTS_START_SEARCH_WITH_VOLUME
   *
   * @param {number} volume
   * @param {number} spawnpointsFlag
   * @param {number} p2
   * @param {number} duration
   * @param {number} p4
   * @return {void}
   */
global.SpawnpointsStartSearchWithVolume = function (volume, spawnpointsFlag, p2, duration, p4) {
  return Citizen.invokeNative('0x83ed1fc9df3411f5', volume, spawnpointsFlag, _fv(p2), duration, _fv(p4));
};

/**
   * _UNRESERVE_AMBIENT_PEDS
   *
   * @param {number} numPeds
   * @return {void}
   */
global.UnreserveAmbientPeds = function (numPeds) {
  return Citizen.invokeNative('0x7d4e70a67a651c71', numPeds);
};

/**
   * _UPDATE_ANIMAL_DAMAGE_MODIFIER
   *
   * @param {number} player
   * @return {void}
   */
global.UpdateAnimalDamageModifier = function (player) {
  return Citizen.invokeNative('0x0f9e754ebe8fdbfa', player);
};

/**
   * _UPDATE_PED_TEXTURE
   * Should be called at least once for any new texture override.
   * Otherwise component textures will be just black.
   * Also needs to be called for updating any ped overlays to apply the changes.
   *
   * @param {number} textureId
   * @return {void}
   */
global.UpdatePedTexture = function (textureId) {
  return Citizen.invokeNative('0x92daaba2c1c10b0e', textureId);
};

/**
   * _UPDATE_PED_VARIATION
   * Update variation on ped, needed after first creation, or when component or texture/overlay is changed
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {boolean} p2
   * @param {boolean} p3
   * @param {boolean} p4
   * @param {boolean} p5
   * @return {void}
   */
global.UpdatePedVariation = function (ped, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xcc8ca3e88256e58f', ped, p1, p2, p3, p4, p5);
};

/**
   * _UPDATE_PED_WOUND_EFFECT
   * Params: 0.0f to remove wound effects
   *
   * @param {number} ped
   * @param {number} value
   * @return {void}
   */
global.UpdatePedWoundEffect = function (ped, value) {
  return Citizen.invokeNative('0x66b1cb778d911f49', ped, _fv(value));
};

/**
   * _UPDATE_SHOP_ITEM_WEARABLE_STATE
   *
   * @param {number} ped
   * @param {number} componentHash
   * @param {number} wearableState
   * @param {number} p3
   * @param {boolean} p4
   * @param {number} p5
   * @return {void}
   */
global.UpdateShopItemWearableState = function (ped, componentHash, wearableState, p3, p4, p5) {
  return Citizen.invokeNative('0x66b957aac2eaaeab', ped, _ch(componentHash), _ch(wearableState), p3, p4, p5);
};

/**
   * _WARP_PED_OUT_OF_VEHICLE
   *
   * @param {number} ped
   * @return {void}
   */
global.WarpPedOutOfVehicle = function (ped) {
  return Citizen.invokeNative('0xe0b61ed8bb37712f', ped);
};

/**
   * _0x08FC896D2CB31FCC
   *
   * @param {any} p0
   * @param {boolean} p1
   * @return {number}
   */
global.N_0x08FC896D2CB31FCC = function (p0, p1) {
  return Citizen.invokeNative('0x08fc896d2cb31fcc', p0, p1, _r, _ri);
};

/**
   * _0x0B3A99AB6713AA52
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x0B3A99AB6713AA52 = function (p0) {
  return Citizen.invokeNative('0x0b3a99ab6713aa52', p0);
};

/**
   * _0x112DDF56300BC6E5
   * Returns the PersChar index of the persCharHash passed
   *
   * @param {number} persCharHash
   * @return {number}
   */
global.N_0x112DDF56300BC6E5 = function (persCharHash) {
  return Citizen.invokeNative('0x112ddf56300bc6e5', _ch(persCharHash), _r, _ri);
};

/**
   * _SET_PERSCHAR_OUTFIT
   *
   * @param {number} persCharHash
   * @param {number} outfit
   * @return {void}
   */
global.SetPerscharOutfit = function (persCharHash, outfit) {
  return Citizen.invokeNative('0x2df89cd2ed1d0bde', _ch(persCharHash), _ch(outfit));
};

/**
   * _0x2E957AA81F2C61C9
   *
  
   * @return {void}
   */
global.N_0x2E957AA81F2C61C9 = function () {
  return Citizen.invokeNative('0x2e957aa81f2c61c9');
};

/**
   * _0x406808610220405B
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x406808610220405B = function (p0) {
  return Citizen.invokeNative('0x406808610220405b', p0);
};

/**
   * _0x4AFC7288C77238B3
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x4AFC7288C77238B3 = function (p0) {
  return Citizen.invokeNative('0x4afc7288c77238b3', p0, _r);
};

/**
   * _0x4F81EAD1DE8FA19B
   *
   * @param {number} persChar
   * @return {void}
   */
global.N_0x4F81EAD1DE8FA19B = function (persChar) {
  return Citizen.invokeNative('0x4f81ead1de8fa19b', persChar);
};

/**
   * _0x535A66AAD2BF68F9
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x535A66AAD2BF68F9 = function (p0, p1) {
  return Citizen.invokeNative('0x535a66aad2bf68f9', p0, p1);
};

/**
   * _0x59C7AD6FEA2AC449
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x59C7AD6FEA2AC449 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x59c7ad6fea2ac449', p0, p1, p2, p3);
};

/**
   * _0x5EE6FCCC9C832CA2
   *
   * @param {any} p0
   * @return {Vector3}
   */
global.N_0x5EE6FCCC9C832CA2 = function (p0) {
  return Citizen.invokeNative('0x5ee6fccc9c832ca2', p0, _r, _rv);
};

/**
   * _0x63AA2B8EB087886A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x63AA2B8EB087886A = function (p0, p1) {
  return Citizen.invokeNative('0x63aa2b8eb087886a', p0, p1);
};

/**
   * _0x669C25840C6F7AE2
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x669C25840C6F7AE2 = function (p0, p1) {
  return Citizen.invokeNative('0x669c25840c6f7ae2', p0, p1);
};

/**
   * _0x6759BEE6762E140B
   *
   * @param {number} persChar
   * @return {void}
   */
global.N_0x6759BEE6762E140B = function (persChar) {
  return Citizen.invokeNative('0x6759bee6762e140b', persChar);
};

/**
   * _0x69786495C92A3044
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x69786495C92A3044 = function (p0) {
  return Citizen.invokeNative('0x69786495c92a3044', p0, _r);
};

/**
   * _0x70605812ABC9FF0F
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x70605812ABC9FF0F = function (p0, p1) {
  return Citizen.invokeNative('0x70605812abc9ff0f', p0, p1);
};

/**
   * _0x8AE4EFA464DAE42D
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x8AE4EFA464DAE42D = function (p0, p1) {
  return Citizen.invokeNative('0x8ae4efa464dae42d', p0, p1);
};

/**
   * _RESET_PERSCHAR_SCHEDULE
   *
   * @param {number} persCharHash
   * @return {void}
   */
global.ResetPerscharSchedule = function (persCharHash) {
  return Citizen.invokeNative('0x8b44273a92cd406c', _ch(persCharHash));
};

/**
   * _0x8BC555034A5A5E8C
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x8BC555034A5A5E8C = function (p0, p1) {
  return Citizen.invokeNative('0x8bc555034a5a5e8c', p0, p1);
};

/**
   * _0x92690B0822493CE0
   *
  
   * @return {void}
   */
global.N_0x92690B0822493CE0 = function () {
  return Citizen.invokeNative('0x92690b0822493ce0');
};

/**
   * _0x94995829ED15A598
   *
   * @param {any} p0
   * @return {Vector3}
   */
global.N_0x94995829ED15A598 = function (p0) {
  return Citizen.invokeNative('0x94995829ed15a598', p0, _r, _rv);
};

/**
   * _0x9C7F95946E304778
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x9C7F95946E304778 = function (p0, p1) {
  return Citizen.invokeNative('0x9c7f95946e304778', p0, p1, _r);
};

/**
   * _0xA2B18FF8D39F6D87
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xA2B18FF8D39F6D87 = function (p0) {
  return Citizen.invokeNative('0xa2b18ff8d39f6d87', p0);
};

/**
   * _0xA4DCB3F0DD7488BD
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0xA4DCB3F0DD7488BD = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xa4dcb3f0dd7488bd', p0, p1, p2, p3, p4);
};

/**
   * _0xA8120EBEAF290C7A
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xA8120EBEAF290C7A = function (p0) {
  return Citizen.invokeNative('0xa8120ebeaf290c7a', p0, _r);
};

/**
   * _0xA8C406C2A56EDC16
   *
   * @param {number} persChar
   * @return {void}
   */
global.N_0xA8C406C2A56EDC16 = function (persChar) {
  return Citizen.invokeNative('0xa8c406c2a56edc16', persChar);
};

/**
   * _0xB173599D61FAEB31
   *
  
   * @return {void}
   */
global.N_0xB173599D61FAEB31 = function () {
  return Citizen.invokeNative('0xb173599d61faeb31');
};

/**
   * _0xB65E7F733956CF25
   *
   * @param {number} persChar
   * @return {void}
   */
global.N_0xB65E7F733956CF25 = function (persChar) {
  return Citizen.invokeNative('0xb65e7f733956cf25', persChar);
};

/**
   * _0xBB68908CD11AEBDC
   *
   * @param {number} persChar
   * @return {void}
   */
global.N_0xBB68908CD11AEBDC = function (persChar) {
  return Citizen.invokeNative('0xbb68908cd11aebdc', persChar);
};

/**
   * _0xCEB40B678E403759
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xCEB40B678E403759 = function (p0) {
  return Citizen.invokeNative('0xceb40b678e403759', p0, _r);
};

/**
   * _0xD4B614179BCD0654
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xD4B614179BCD0654 = function (p0) {
  return Citizen.invokeNative('0xd4b614179bcd0654', p0);
};

/**
   * _0xD95D777F828B2BBB
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xD95D777F828B2BBB = function (p0) {
  return Citizen.invokeNative('0xd95d777f828b2bbb', p0);
};

/**
   * _GET_PERSCHAR_OUTFIT
   *
   * @param {number} persCharHash
   * @return {number}
   */
global.GetPerscharOutfit = function (persCharHash) {
  return Citizen.invokeNative('0xdc9655d47dec0353', _ch(persCharHash), _r, _ri);
};

/**
   * _0xE0E65E0D261F7507
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xE0E65E0D261F7507 = function (p0) {
  return Citizen.invokeNative('0xe0e65e0d261f7507', p0);
};

/**
   * _0xE4C51A8A3BD1664C
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xE4C51A8A3BD1664C = function (p0) {
  return Citizen.invokeNative('0xe4c51a8a3bd1664c', p0, _r);
};

/**
   * _0xEC254C2C9B0F08F1
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xEC254C2C9B0F08F1 = function (p0, p1) {
  return Citizen.invokeNative('0xec254c2c9b0f08f1', p0, p1, _r);
};

/**
   * _0xEFC5C6670E0B99BA
   *
  
   * @return {void}
   */
global.N_0xEFC5C6670E0B99BA = function () {
  return Citizen.invokeNative('0xefc5c6670e0b99ba');
};

/**
   * _0xF8DE7154F7D1458F
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xF8DE7154F7D1458F = function (p0) {
  return Citizen.invokeNative('0xf8de7154f7d1458f', p0, _r);
};

/**
   * _0xFCC6DB8DBE709BC8
   *
   * @param {number} persChar
   * @return {void}
   */
global.N_0xFCC6DB8DBE709BC8 = function (persChar) {
  return Citizen.invokeNative('0xfcc6db8dbe709bc8', persChar);
};

/**
   * _CREATE_PERSISTENT_CHARACTER
   *
   * @param {number} hash
   * @return {number}
   */
global.CreatePersistentCharacter = function (hash) {
  return Citizen.invokeNative('0x4f76e3676583d951', _ch(hash), _r, _ri);
};

/**
   * _DELETE_PERSCHAR
   *
   * @param {number} persChar
   * @return {void}
   */
global.DeletePerschar = function (persChar) {
  return Citizen.invokeNative('0xfc77c5b44d5ff7c0', persChar);
};

/**
   * _FORCE_DESPAWN_PERSCHAR
   *
   * @param {number} persChar
   * @return {void}
   */
global.ForceDespawnPerschar = function (persChar) {
  return Citizen.invokeNative('0x7b204f88f6c3d287', persChar);
};

/**
   * _FORCE_SPAWN_PERSCHAR
   *
   * @param {number} persChar
   * @param {boolean} p1
   * @return {number}
   */
global.ForceSpawnPerschar = function (persChar, p1) {
  return Citizen.invokeNative('0x0cadc3a977997472', persChar, p1, _r, _ri);
};

/**
   * _GET_PERSCHAR_INDEX_FROM_PED_INDEX
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPerscharIndexFromPedIndex = function (ped) {
  return Citizen.invokeNative('0x32a1e3b83d501096', ped, _r, _ri);
};

/**
   * _GET_PERSCHAR_MODEL_NAME
   *
   * @param {number} persCharHash
   * @return {number}
   */
global.GetPerscharModelName = function (persCharHash) {
  return Citizen.invokeNative('0xa00df706c60173d1', _ch(persCharHash), _r, _ri);
};

/**
   * _GET_PERSCHAR_PED_INDEX
   *
   * @param {number} persChar
   * @return {number}
   */
global.GetPerscharPedIndex = function (persChar) {
  return Citizen.invokeNative('0x31c70a716cae1fee', persChar, _r, _ri);
};

/**
   * _IS_PERSISTENT_CHARACTER_DEAD
   *
   * @param {number} persChar
   * @return {boolean}
   */
global.IsPersistentCharacterDead = function (persChar) {
  return Citizen.invokeNative('0xeb98b38ca60742d7', persChar, _r);
};

/**
   * _IS_PERSISTENT_CHARACTER_VALID
   *
   * @param {number} persChar
   * @return {boolean}
   */
global.IsPersistentCharacterValid = function (persChar) {
  return Citizen.invokeNative('0x800df3fc913355f3', persChar, _r);
};

/**
   * _RETASK_PERSISTENT_CHARACTER
   *
   * @param {number} persChar
   * @return {void}
   */
global.RetaskPersistentCharacter = function (persChar) {
  return Citizen.invokeNative('0x631cd2d77fdc0316', persChar);
};

/**
   * _REVIVE_PERSCHAR
   *
   * @param {number} persChar
   * @return {boolean}
   */
global.RevivePerschar = function (persChar) {
  return Citizen.invokeNative('0x49a8c2cd97815215', persChar, _r);
};

/**
   * _SET_PERSCHAR_SCHEDULE
   *
   * @param {number} persCharHash
   * @param {string | number} schedule
   * @return {void}
   */
global.SetPerscharSchedule = function (persCharHash, schedule) {
  return Citizen.invokeNative('0x187d65f3aec5d679', _ch(persCharHash), schedule);
};

/**
   * PERSISTENCE_ADD_SCENARIO_LOOTED
   *
   * @param {number} scenario
   * @return {void}
   */
global.PersistenceAddScenarioLooted = function (scenario) {
  return Citizen.invokeNative('0x8245c1f3262f4ac2', scenario);
};

/**
   * PERSISTENCE_REMOVE_ALL_ENTITIES_IN_AREA
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @return {void}
   */
global.PersistenceRemoveAllEntitiesInArea = function (x, y, z, radius) {
  return Citizen.invokeNative('0x9d16896f0dbe78a2', _fv(x), _fv(y), _fv(z), _fv(radius));
};

/**
   * _0x065887B694359799
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x065887B694359799 = function (p0) {
  return Citizen.invokeNative('0x065887b694359799', p0);
};

/**
   * _0x1F56FB3FDB4EAF65
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x1F56FB3FDB4EAF65 = function (p0) {
  return Citizen.invokeNative('0x1f56fb3fdb4eaf65', p0, _r);
};

/**
   * _0x291CC21D1FB6790E
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x291CC21D1FB6790E = function (p0) {
  return Citizen.invokeNative('0x291cc21d1fb6790e', p0);
};

/**
   * _0x2E545965DF98D476
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x2E545965DF98D476 = function (p0) {
  return Citizen.invokeNative('0x2e545965df98d476', p0, _r);
};

/**
   * _0x3CA5E58C9731A16B
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x3CA5E58C9731A16B = function (p0, p1) {
  return Citizen.invokeNative('0x3ca5e58c9731a16b', p0, p1);
};

/**
   * _0x5A79220F6D38D7C3
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x5A79220F6D38D7C3 = function (p0) {
  return Citizen.invokeNative('0x5a79220f6d38d7c3', p0, _r);
};

/**
   * _0x66DAA3A9274E8E82
   * _PERSISTENCE_*
   *
  
   * @return {void}
   */
global.N_0x66DAA3A9274E8E82 = function () {
  return Citizen.invokeNative('0x66daa3a9274e8e82');
};

/**
   * _0x7A1BD123E5CDB6E5
   *
  
   * @return {void}
   */
global.N_0x7A1BD123E5CDB6E5 = function () {
  return Citizen.invokeNative('0x7a1bd123e5cdb6e5');
};

/**
   * _0x8DE104BEC243A73B
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x8DE104BEC243A73B = function (p0) {
  return Citizen.invokeNative('0x8de104bec243a73b', p0);
};

/**
   * _0xB03140014ACA6C40
   * nullsub, doesn't do anything
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xB03140014ACA6C40 = function (p0, p1) {
  return Citizen.invokeNative('0xb03140014aca6c40', p0, p1);
};

/**
   * _0xBA2C49EA6A8D24FF
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {any}
   */
global.N_0xBA2C49EA6A8D24FF = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xba2c49ea6a8d24ff', p0, p1, p2, p3, p4, p5, p6, _r);
};

/**
   * _0xCFDA2518F322D836
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xCFDA2518F322D836 = function (p0) {
  return Citizen.invokeNative('0xcfda2518f322d836', p0, _r);
};

/**
   * _0xDC0A1F0ECEC9F0C0
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xDC0A1F0ECEC9F0C0 = function (p0, p1) {
  return Citizen.invokeNative('0xdc0a1f0ecec9f0c0', p0, p1);
};

/**
   * _0xE225CEF1901F6108
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xE225CEF1901F6108 = function (p0, p1) {
  return Citizen.invokeNative('0xe225cef1901f6108', p0, p1);
};

/**
   * _0xF5622FA6ACFCA7DB
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xF5622FA6ACFCA7DB = function (p0, p1) {
  return Citizen.invokeNative('0xf5622fa6acfca7db', p0, p1);
};

/**
   * _0xFC9806DA9A460093
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @return {void}
   */
global.N_0xFC9806DA9A460093 = function (x1, y1, z1, x2, y2, z2) {
  return Citizen.invokeNative('0xfc9806da9a460093', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2));
};

/**
   * _PERSISTENCE_IS_SCENARIO_MARKED_AS_LOOTED
   *
   * @param {number} scenario
   * @return {boolean}
   */
global.PersistenceIsScenarioMarkedAsLooted = function (scenario) {
  return Citizen.invokeNative('0xfb7cf1de938a3e22', scenario, _r);
};

/**
   * _PERSISTENCE_IS_SCENARIO_MARKED_AS_LOOTED_AT_COORDS
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {boolean}
   */
global.PersistenceIsScenarioMarkedAsLootedAtCoords = function (x, y, z) {
  return Citizen.invokeNative('0xb6e1a185c2b9319a', _fv(x), _fv(y), _fv(z), _r);
};

/**
   * _PERSISTENCE_IS_SCENARIO_MARKED_AS_LOOTED_AT_COORDS_WITH_MODEL
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} model
   * @return {boolean}
   */
global.PersistenceIsScenarioMarkedAsLootedAtCoordsWithModel = function (x, y, z, model) {
  return Citizen.invokeNative('0x188313616d184213', _fv(x), _fv(y), _fv(z), _ch(model), _r);
};

/**
   * _PERSISTENCE_REFRESH_TOWN_VOLUME
   * Only used in R* script long_update.ysc in script function REFRESH_CLOSEST_TOWN
   *
   * @param {number} volume
   * @return {void}
   */
global.PersistenceRefreshTownVolume = function (volume) {
  return Citizen.invokeNative('0xefb5f34cc0953b27', volume);
};

/**
   * ACTIVATE_PHYSICS
   *
   * @param {number} entity
   * @return {void}
   */
global.ActivatePhysics = function (entity) {
  return Citizen.invokeNative('0x710311adf0e20730', entity);
};

/**
   * ADD_ROPE
   * There are 19 types of rope, from type = 0 to type = 18
   * Rope definitions are stored in ropedata.xml
   * Rope types 0, 15 and 18 have proper physics for hanging objects (taut, do not sag, small to medium diameter, good aspect for a rope)
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} length
   * @param {number} ropeType
   * @param {number} maxLength
   * @param {number} minLength
   * @param {number} p10
   * @param {boolean} p11
   * @param {boolean} p12
   * @param {boolean} rigid
   * @param {number} p14
   * @param {boolean} breakWhenShot
   * @param {DataView} unkPtr
   * @param {boolean} p17
   * @return {number}
   */
global.AddRope = function (x, y, z, rotX, rotY, rotZ, length, ropeType, maxLength, minLength, p10, p11, p12, rigid, p14, breakWhenShot, unkPtr, p17) {
  return Citizen.invokeNative('0xe832d760399eb220', _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(length), ropeType, _fv(maxLength), _fv(minLength), _fv(p10), p11, p12, rigid, _fv(p14), breakWhenShot, unkPtr, p17, _r, _ri);
};

/**
   * ATTACH_ENTITIES_TO_ROPE
   * Attaches entity 1 to entity 2.
   * If you use a boneName (p12/p13) make sure boneId (p15/p16) is set to -1.
   *
   * @param {number} ropeId
   * @param {number} entity1
   * @param {number} entity2
   * @param {number} ent1X
   * @param {number} ent1Y
   * @param {number} ent1Z
   * @param {number} ent2X
   * @param {number} ent2Y
   * @param {number} ent2Z
   * @param {number} length
   * @param {number} alwaysZero1
   * @param {number} alwaysZero2
   * @param {string | number} boneName1
   * @param {string | number} boneName2
   * @param {boolean} p14
   * @param {number} boneId1
   * @param {number} boneId2
   * @param {number} alwaysZero3
   * @param {number} alwaysZero4
   * @param {boolean} p19
   * @param {boolean} p20
   * @return {void}
   */
global.AttachEntitiesToRope = function (ropeId, entity1, entity2, ent1X, ent1Y, ent1Z, ent2X, ent2Y, ent2Z, length, alwaysZero1, alwaysZero2, boneName1, boneName2, p14, boneId1, boneId2, alwaysZero3, alwaysZero4, p19, p20) {
  return Citizen.invokeNative('0x3d95ec8b6d940ac3', ropeId, entity1, entity2, _fv(ent1X), _fv(ent1Y), _fv(ent1Z), _fv(ent2X), _fv(ent2Y), _fv(ent2Z), _fv(length), alwaysZero1, alwaysZero2, boneName1, boneName2, p14, boneId1, boneId2, alwaysZero3, alwaysZero4, p19, p20);
};

/**
   * BREAK_ENTITY_GLASS
   *
   * @param {number} entity
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @param {number} p8
   * @param {any} p9
   * @param {boolean} p10
   * @return {void}
   */
global.BreakEntityGlass = function (entity, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
  return Citizen.invokeNative('0x2e648d16f6e308f3', entity, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), p9, p10);
};

/**
   * DELETE_CHILD_ROPE
   *
   * @param {number} ropeId
   * @return {void}
   */
global.DeleteChildRope = function (ropeId) {
  return Citizen.invokeNative('0xaa5d6b1888e4db20', ropeId);
};

/**
   * DELETE_ROPE
   *
  
   * @return {number}
   */
global.DeleteRope = function () {
  return Citizen.invokeNative('0x52b4829281364649', _i);
};

/**
   * DETACH_ROPE_FROM_ENTITY
   *
   * @param {number} ropeId
   * @param {number} entity
   * @return {void}
   */
global.DetachRopeFromEntity = function (ropeId, entity) {
  return Citizen.invokeNative('0xbcf3026912a8647d', ropeId, entity);
};

/**
   * DOES_ROPE_EXIST
   *
   * @param {number} ropeId
   * @return {boolean}
   */
global.DoesRopeExist = function (ropeId) {
  return Citizen.invokeNative('0xfd5448be3111ed96', ropeId, _r);
};

/**
   * GET_ROPE_LAST_VERTEX_COORD
   *
   * @param {number} ropeId
   * @return {Vector3}
   */
global.GetRopeLastVertexCoord = function (ropeId) {
  return Citizen.invokeNative('0x21bb0fbd3e217c2d', ropeId, _r, _rv);
};

/**
   * GET_ROPE_VERTEX_COORD
   *
   * @param {number} ropeId
   * @param {number} vertex
   * @return {Vector3}
   */
global.GetRopeVertexCoord = function (ropeId, vertex) {
  return Citizen.invokeNative('0xea61ca8e80f09e4d', ropeId, vertex, _r, _rv);
};

/**
   * GET_ROPE_VERTEX_COUNT
   *
   * @param {number} ropeId
   * @return {number}
   */
global.GetRopeVertexCount = function (ropeId) {
  return Citizen.invokeNative('0x3655f544cd30f0b5', ropeId, _r, _ri);
};

/**
   * ROPE_DRAW_SHADOW_ENABLED
   *
   * @param {boolean} toggle
   * @return {number}
   */
global.RopeDrawShadowEnabled = function (toggle) {
  return Citizen.invokeNative('0xf159a63806bb5ba8', _i, toggle);
};

/**
   * ROPE_FORCE_LENGTH
   * Forces a rope to a certain length.
   *
   * @param {number} ropeId
   * @param {number} length
   * @return {void}
   */
global.RopeForceLength = function (ropeId, length) {
  return Citizen.invokeNative('0xd009f759a723db1b', ropeId, _fv(length));
};

/**
   * ROPE_SET_UPDATE_ORDER
   *
   * @param {number} ropeId
   * @param {any} p1
   * @return {void}
   */
global.RopeSetUpdateOrder = function (ropeId, p1) {
  return Citizen.invokeNative('0xdc57a637a20006ed', ropeId, p1);
};

/**
   * SET_DAMPING
   *
   * @param {number} entity
   * @param {number} vertex
   * @param {number} value
   * @return {void}
   */
global.SetDamping = function (entity, vertex, value) {
  return Citizen.invokeNative('0xeea3b200a6feb65b', entity, vertex, _fv(value));
};

/**
   * SET_DISABLE_BREAKING
   *
   * @param {number} object
   * @param {boolean} toggle
   * @return {void}
   */
global.SetDisableBreaking = function (object, toggle) {
  return Citizen.invokeNative('0x5cec1a84620e7d5b', object, toggle);
};

/**
   * SET_DISABLE_FRAG_DAMAGE
   *
   * @param {number} object
   * @param {boolean} toggle
   * @return {void}
   */
global.SetDisableFragDamage = function (object, toggle) {
  return Citizen.invokeNative('0x01ba3aed21c16cfb', object, toggle);
};

/**
   * START_ROPE_UNWINDING_FRONT
   *
   * @param {number} ropeId
   * @return {void}
   */
global.StartRopeUnwindingFront = function (ropeId) {
  return Citizen.invokeNative('0x538d1179ec1aa9a9', ropeId);
};

/**
   * START_ROPE_WINDING
   *
   * @param {number} ropeId
   * @return {void}
   */
global.StartRopeWinding = function (ropeId) {
  return Citizen.invokeNative('0x1461c72c889e343e', ropeId);
};

/**
   * STOP_ROPE_UNWINDING_FRONT
   *
   * @param {number} ropeId
   * @return {void}
   */
global.StopRopeUnwindingFront = function (ropeId) {
  return Citizen.invokeNative('0xfff3a50779efbbb3', ropeId);
};

/**
   * STOP_ROPE_WINDING
   *
   * @param {number} ropeId
   * @return {void}
   */
global.StopRopeWinding = function (ropeId) {
  return Citizen.invokeNative('0xcb2d4ab84a19aa7c', ropeId);
};

/**
   * _0x0CB16D05E03FB525
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x0CB16D05E03FB525 = function (p0) {
  return Citizen.invokeNative('0x0cb16d05e03fb525', p0);
};

/**
   * _0x1D97DA8ACB5D2582
   *
   * @param {number} ropeId
   * @param {number} p1
   * @return {void}
   */
global.N_0x1D97DA8ACB5D2582 = function (ropeId, p1) {
  return Citizen.invokeNative('0x1d97da8acb5d2582', ropeId, p1);
};

/**
   * _0x1FC92BDBA1106BD2
   *
   * @param {number} ropeId
   * @param {number} p1
   * @return {void}
   */
global.N_0x1FC92BDBA1106BD2 = function (ropeId, p1) {
  return Citizen.invokeNative('0x1fc92bdba1106bd2', ropeId, _fv(p1));
};

/**
   * _0x21D0890D88DFB0B0
   *
   * @param {number} ropeId
   * @param {boolean} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @param {number} p8
   * @param {number} p9
   * @param {number} p10
   * @return {void}
   */
global.N_0x21D0890D88DFB0B0 = function (ropeId, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
  return Citizen.invokeNative('0x21d0890d88dfb0b0', ropeId, p1, _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), _fv(p9), p10);
};

/**
   * _0x31160EC47E7C9549
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x31160EC47E7C9549 = function (p0, p1) {
  return Citizen.invokeNative('0x31160ec47e7c9549', p0, p1);
};

/**
   * _0x32F4DBFDFCCCC735
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x32F4DBFDFCCCC735 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x32f4dbfdfcccc735', p0, p1, p2);
};

/**
   * _0x3900491C0D61ED4B
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x3900491C0D61ED4B = function (p0, p1) {
  return Citizen.invokeNative('0x3900491c0d61ed4b', p0, p1);
};

/**
   * _0x423C6B1F3786D28B
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x423C6B1F3786D28B = function (p0, p1) {
  return Citizen.invokeNative('0x423c6b1f3786d28b', p0, p1);
};

/**
   * _0x461FCBDEB4D06717
   *
   * @param {number} ropeId
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x461FCBDEB4D06717 = function (ropeId, p1) {
  return Citizen.invokeNative('0x461fcbdeb4d06717', ropeId, p1);
};

/**
   * _0x483D4E917B0D35A9
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x483D4E917B0D35A9 = function (p0, p1) {
  return Citizen.invokeNative('0x483d4e917b0d35a9', p0, p1);
};

/**
   * _0x522FA3F490E2F7AC
   *
   * @param {number} ropeId
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x522FA3F490E2F7AC = function (ropeId, p1, p2) {
  return Citizen.invokeNative('0x522fa3f490e2f7ac', ropeId, p1, p2);
};

/**
   * _0x5A989B7EE3672A56
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x5A989B7EE3672A56 = function (p0, p1) {
  return Citizen.invokeNative('0x5a989b7ee3672a56', p0, p1);
};

/**
   * _0x5BD7457221CC5FF4
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x5BD7457221CC5FF4 = function (p0, p1) {
  return Citizen.invokeNative('0x5bd7457221cc5ff4', p0, p1);
};

/**
   * _0x5E981C764DF33117
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x5E981C764DF33117 = function (p0, p1) {
  return Citizen.invokeNative('0x5e981c764df33117', p0, p1);
};

/**
   * _0x69C810B72291D831
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.N_0x69C810B72291D831 = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0x69c810b72291d831', p0, p1, p2, p3, p4, p5, p6);
};

/**
   * _0x6EA0E93CFFA472CC
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x6EA0E93CFFA472CC = function (p0) {
  return Citizen.invokeNative('0x6ea0e93cffa472cc', p0);
};

/**
   * _0x751DF00EEFF122E3
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x751DF00EEFF122E3 = function (p0) {
  return Citizen.invokeNative('0x751df00eeff122e3', p0);
};

/**
   * _0x76BAD9D538BCA1AA
   *
   * @param {number} ropeId
   * @param {number} p1
   * @return {void}
   */
global.N_0x76BAD9D538BCA1AA = function (ropeId, p1) {
  return Citizen.invokeNative('0x76bad9d538bca1aa', ropeId, _fv(p1));
};

/**
   * _0x814D453FCFDF119F
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x814D453FCFDF119F = function (p0, p1, p2) {
  return Citizen.invokeNative('0x814d453fcfdf119f', p0, p1, p2);
};

/**
   * _0x8D59079C37C21D78
   * _ROPE_SET_*
   *
   * @param {number} ropeId
   * @param {number} p1
   * @return {void}
   */
global.N_0x8D59079C37C21D78 = function (ropeId, p1) {
  return Citizen.invokeNative('0x8d59079c37c21d78', ropeId, _fv(p1));
};

/**
   * _0x8EEDFD8921389928
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @return {void}
   */
global.N_0x8EEDFD8921389928 = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
  return Citizen.invokeNative('0x8eedfd8921389928', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
};

/**
   * _0x9C24846D0A4A2776
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x9C24846D0A4A2776 = function (p0) {
  return Citizen.invokeNative('0x9c24846d0a4a2776', p0);
};

/**
   * _0xB40EA9E0D2E2F7F3
   *
   * @param {number} ropeId
   * @param {number} p1
   * @return {void}
   */
global.N_0xB40EA9E0D2E2F7F3 = function (ropeId, p1) {
  return Citizen.invokeNative('0xb40ea9e0d2e2f7f3', ropeId, _fv(p1));
};

/**
   * _0xB7469CB9AC3C0FD4
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.N_0xB7469CB9AC3C0FD4 = function (p0, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0xb7469cb9ac3c0fd4', p0, p1, p2, p3, p4, p5, p6, p7);
};

/**
   * _0xBB3E9B073E66C3C9
   *
   * @param {number} ropeId
   * @param {boolean} p1
   * @param {boolean} p2
   * @param {boolean} p3
   * @param {boolean} p4
   * @return {void}
   */
global.N_0xBB3E9B073E66C3C9 = function (ropeId, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xbb3e9b073e66c3c9', ropeId, p1, p2, p3, p4);
};

/**
   * _0xBDDA142759307528
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xBDDA142759307528 = function (p0) {
  return Citizen.invokeNative('0xbdda142759307528', p0);
};

/**
   * _0xC64E7A62632AD2FE
   *
   * @param {number} ropeId
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.N_0xC64E7A62632AD2FE = function (ropeId, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0xc64e7a62632ad2fe', ropeId, p1, p2, p3, p4, p5, p6, p7);
};

/**
   * _0xC89E7410A93AC19A
   *
   * @param {number} ropeId
   * @param {number} p1
   * @return {void}
   */
global.N_0xC89E7410A93AC19A = function (ropeId, p1) {
  return Citizen.invokeNative('0xc89e7410a93ac19a', ropeId, _fv(p1));
};

/**
   * _0xD699E688B49C0FD2
   *
   * @param {number} ropeId
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {boolean} p4
   * @return {void}
   */
global.N_0xD699E688B49C0FD2 = function (ropeId, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xd699e688b49c0fd2', ropeId, _fv(p1), _fv(p2), _fv(p3), p4);
};

/**
   * _0xDEDE679ED29DD4E7
   *
   * @param {number} ropeId
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xDEDE679ED29DD4E7 = function (ropeId, p1) {
  return Citizen.invokeNative('0xdede679ed29dd4e7', ropeId, p1);
};

/**
   * _0xE54BF2CE6C7D23A9
   *
   * @param {number} ropeId
   * @param {number} p1
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.N_0xE54BF2CE6C7D23A9 = function (ropeId, p1, x, y, z) {
  return Citizen.invokeNative('0xe54bf2ce6c7d23a9', ropeId, p1, _fv(x), _fv(y), _fv(z));
};

/**
   * _0xEAF529446488EB18
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xEAF529446488EB18 = function (p0) {
  return Citizen.invokeNative('0xeaf529446488eb18', p0);
};

/**
   * _0xF1EA2A881EB7F2CD
   *
   * @param {number} ropeId
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xF1EA2A881EB7F2CD = function (ropeId, p1) {
  return Citizen.invokeNative('0xf1ea2a881eb7f2cd', ropeId, p1);
};

/**
   * _0xF27F1A8DE4F50A1B
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.N_0xF27F1A8DE4F50A1B = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xf27f1a8de4f50a1b', p0, p1, p2, p3, p4, p5, p6);
};

/**
   * _0xF8CA39D5C0D1D9A1
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xF8CA39D5C0D1D9A1 = function (p0, p1) {
  return Citizen.invokeNative('0xf8ca39d5c0d1d9a1', p0, p1);
};

/**
   * _0xFB9153A54AC713E8
   *
   * @param {number} ropeId
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xFB9153A54AC713E8 = function (ropeId, p1) {
  return Citizen.invokeNative('0xfb9153a54ac713e8', ropeId, p1);
};

/**
   * _ADD_ROPE_2
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} length
   * @param {number} ropeType
   * @param {boolean} isNetworked
   * @param {number} p9
   * @param {number} p10
   * @return {number}
   */
global.AddRope_2 = function (x, y, z, rotX, rotY, rotZ, length, ropeType, isNetworked, p9, p10) {
  return Citizen.invokeNative('0xe9c59f6809373a99', _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(length), ropeType, isNetworked, p9, _fv(p10), _r, _ri);
};

/**
   * _ATTACH_ENTITES_TO_ROPE_3
   *
   * @param {number} ropeId
   * @param {number} entity1
   * @param {number} entity2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @param {number} p8
   * @param {any} p9
   * @param {any} p10
   * @return {void}
   */
global.AttachEntitesToRope_3 = function (ropeId, entity1, entity2, p3, p4, p5, p6, p7, p8, p9, p10) {
  return Citizen.invokeNative('0xe9cd9a67834985a7', ropeId, entity1, entity2, _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), p9, p10);
};

/**
   * _ATTACH_ENTITIES_TO_ROPE_2
   * Attaches a rope to two entities: binds two bones from two entities; one entity can be an object, i.e. a suspension point, the other an NPC bone
   *
   * @param {number} ropeId
   * @param {number} entity1
   * @param {number} entity2
   * @param {number} ent1X
   * @param {number} ent1Y
   * @param {number} ent1Z
   * @param {number} ent2X
   * @param {number} ent2Y
   * @param {number} ent2Z
   * @param {string | number} boneName1
   * @param {string | number} boneName2
   * @return {void}
   */
global.AttachEntitiesToRope_2 = function (ropeId, entity1, entity2, ent1X, ent1Y, ent1Z, ent2X, ent2Y, ent2Z, boneName1, boneName2) {
  return Citizen.invokeNative('0x462ff2a432733a44', ropeId, entity1, entity2, _fv(ent1X), _fv(ent1Y), _fv(ent1Z), _fv(ent2X), _fv(ent2Y), _fv(ent2Z), boneName1, boneName2);
};

/**
   * _BREAK_ROPE
   * ropeTop returns top half of rope, ropeBottom returns bottom half of rope
   *
   * @param {number} offsetX
   * @param {number} offsetY
   * @param {number} offsetZ
   * @param {number} p6
   * @return {[number, number, number]}
   */
global.BreakRope = function (offsetX, offsetY, offsetZ, p6) {
  return Citizen.invokeNative('0x4cfa2b7fae115ecb', _i, _i, _i, _fv(offsetX), _fv(offsetY), _fv(offsetZ), p6);
};

/**
   * _CREATE_ROPE_WINDING_ABILITY
   * Combining this with ADD_ROPE enables winding
   * p1: mostly empty (0)
   * ropeModelType: RB_L_Wrist02, RB_R_Wrist02, ropeAttach, noose01x_Rope_03, SKEL_Neck0, SKEL_L_FOOT, SKEL_Neck1, Root_s_meatbit_Chunck_Xlarge01x
   * _CREATE_*
   *
   * @param {number} ropeId
   * @param {string | number} p1
   * @param {string | number} ropeModelType
   * @param {number} length
   * @param {boolean} p4
   * @return {void}
   */
global.CreateRopeWindingAbility = function (ropeId, p1, ropeModelType, length, p4) {
  return Citizen.invokeNative('0x3c6490d940ff5d0b', ropeId, p1, ropeModelType, _fv(length), p4);
};

/**
   * _HITCH_HORSE
   *
   * @param {number} horse
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.HitchHorse = function (horse, x, y, z) {
  return Citizen.invokeNative('0x06aade17334f7a40', horse, _fv(x), _fv(y), _fv(z));
};

/**
   * _IS_ROPE_ATTACHED_TO_ENTITY
   *
   * @param {number} ropeId
   * @param {number} entity
   * @return {boolean}
   */
global.IsRopeAttachedToEntity = function (ropeId, entity) {
  return Citizen.invokeNative('0x9b4f7e3e4f9c77b3', ropeId, entity, _r);
};

/**
   * _IS_ROPE_BROKEN
   *
   * @param {number} ropeId
   * @return {boolean}
   */
global.IsRopeBroken = function (ropeId) {
  return Citizen.invokeNative('0x79c2bec82cfd7f7f', ropeId, _r);
};

/**
   * _RELEASE_ROPE
   *
   * @param {number} ropeId
   * @return {void}
   */
global.ReleaseRope = function (ropeId) {
  return Citizen.invokeNative('0x6076213101a47b3b', ropeId);
};

/**
   * _ROPE_CHANGE_VISIBILITY
   *
   * @param {boolean} visible
   * @return {number}
   */
global.RopeChangeVisibility = function (visible) {
  return Citizen.invokeNative('0x7a54d82227a139db', _i, visible);
};

/**
   * _ROPE_GET_BREAKER_OF_ROPE
   *
   * @param {number} ropeId
   * @return {number}
   */
global.RopeGetBreakerOfRope = function (ropeId) {
  return Citizen.invokeNative('0xee360cfc80c8b2bc', ropeId, _r, _ri);
};

/**
   * _ROPE_GET_FORCED_LENGTH
   *
   * @param {number} ropeId
   * @return {number}
   */
global.RopeGetForcedLength = function (ropeId) {
  return Citizen.invokeNative('0x3d69537039f8d824', ropeId, _r, _rf);
};

/**
   * _START_ROPE_UNWINDING_BACK
   *
   * @param {number} ropeId
   * @return {void}
   */
global.StartRopeUnwindingBack = function (ropeId) {
  return Citizen.invokeNative('0x00f611a794a3c36e', ropeId);
};

/**
   * _STOP_ROPE_UNWINDING_BACK
   *
   * @param {number} ropeId
   * @return {void}
   */
global.StopRopeUnwindingBack = function (ropeId) {
  return Citizen.invokeNative('0x10daa76cb8a201a1', ropeId);
};

/**
   * _UNHITCH_HORSE
   *
   * @param {number} horse
   * @return {void}
   */
global.UnhitchHorse = function (horse) {
  return Citizen.invokeNative('0x0348469daa17576c', horse);
};

/**
   * BOOST_PLAYER_HORSE_SPEED_FOR_TIME
   *
   * @param {number} player
   * @param {number} speedBoost
   * @param {number} duration
   * @return {void}
   */
global.BoostPlayerHorseSpeedForTime = function (player, speedBoost, duration) {
  return Citizen.invokeNative('0x09c28f828ee674fa', player, _fv(speedBoost), duration);
};

/**
   * CAN_PLAYER_START_MISSION
   *
   * @param {number} player
   * @return {boolean}
   */
global.CanPlayerStartMission = function (player) {
  return Citizen.invokeNative('0x2df170b1185af777', player, _r);
};

/**
   * CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED
   *
   * @param {number} player
   * @return {void}
   */
global.ClearPlayerHasDamagedAtLeastOneNonAnimalPed = function (player) {
  return Citizen.invokeNative('0x0361096d6ce4372c', player);
};

/**
   * CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED
   *
   * @param {number} player
   * @return {void}
   */
global.ClearPlayerHasDamagedAtLeastOnePed = function (player) {
  return Citizen.invokeNative('0x270b63a641be32f2', player);
};

/**
   * CLEAR_PLAYER_WANTED_LEVEL
   * nullsub, doesn't do anything
   *
   * @param {number} player
   * @return {void}
   */
global.ClearPlayerWantedLevel = function (player) {
  return Citizen.invokeNative('0x4e4b996c928c7aa6', player);
};

/**
   * DISABLE_PLAYER_FIRING
   * Inhibits the player from using any method of combat including melee and firearms.
   * 
   * NOTE: Only disables the firing for one frame
   *
   * @param {number} player
   * @param {boolean} toggle
   * @return {void}
   */
global.DisablePlayerFiring = function (player, toggle) {
  return Citizen.invokeNative('0x2970929fd5f9fc89', player, toggle);
};

/**
   * EAGLE_EYE_SET_CUSTOM_ENTITY_TINT
   *
   * @param {number} entity
   * @param {number} red
   * @param {number} green
   * @param {number} blue
   * @return {void}
   */
global.EagleEyeSetCustomEntityTint = function (entity, red, green, blue) {
  return Citizen.invokeNative('0x62ed71e133b6c9f1', entity, red, green, blue);
};

/**
   * FORCE_CLEANUP
   *
   * @param {number} cleanupFlags
   * @return {void}
   */
global.ForceCleanup = function (cleanupFlags) {
  return Citizen.invokeNative('0x768c017fb878e4f4', cleanupFlags);
};

/**
   * FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME
   *
   * @param {string | number} name
   * @param {number} cleanupFlags
   * @return {void}
   */
global.ForceCleanupForAllThreadsWithThisName = function (name, cleanupFlags) {
  return Citizen.invokeNative('0xdaacaf8b687f2353', name, cleanupFlags);
};

/**
   * FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID
   *
   * @param {number} id
   * @param {number} cleanupFlags
   * @return {void}
   */
global.ForceCleanupForThreadWithThisId = function (id, cleanupFlags) {
  return Citizen.invokeNative('0xf4c9512a2f0a3031', id, cleanupFlags);
};

/**
   * GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP
   *
  
   * @return {number}
   */
global.GetCauseOfMostRecentForceCleanup = function () {
  return Citizen.invokeNative('0x84e8e29ebd4a46d2', _r, _ri);
};

/**
   * GET_DISCOVERABLE_NAME_HASH_AND_TYPE_FOR_ENTITY
   * Returns name hash (name) and outHash includes the type.
   *
   * @param {number} entity
   * @return {[number, number]}
   */
global.GetDiscoverableNameHashAndTypeForEntity = function (entity) {
  return Citizen.invokeNative('0x0139637a3bff8b6d', entity, _i, _r, _ri);
};

/**
   * GET_ENTITY_PLAYER_IS_FREE_AIMING_AT
   *
   * @param {number} player
   * @param {number} entity
   * @return {boolean}
   */
global.GetEntityPlayerIsFreeAimingAt = function (player, entity) {
  return Citizen.invokeNative('0xa6817c110b830ead', player, _ii(entity), _r);
};

/**
   * GET_HAS_PLAYER_DISCOVERED_CHARACTER_NAME_MP
   *
   * @param {number} discoveryHash
   * @return {boolean}
   */
global.GetHasPlayerDiscoveredCharacterNameMp = function (discoveryHash) {
  return Citizen.invokeNative('0x354f689c4ffaab37', _ch(discoveryHash), _r);
};

/**
   * GET_IS_PLAYER_UI_PROMPT_ACTIVE
   *
   * @param {number} player
   * @param {number} p1
   * @return {boolean}
   */
global.GetIsPlayerUiPromptActive = function (player, p1) {
  return Citizen.invokeNative('0x51bea356b1c60225', player, p1, _r);
};

/**
   * GET_MAX_WANTED_LEVEL
   * Gets the maximum wanted level the player can get.
   * Ranges from 0 to 5.
   *
  
   * @return {number}
   */
global.GetMaxWantedLevel = function () {
  return Citizen.invokeNative('0xd04cfad1e2b7984a', _r, _ri);
};

/**
   * GET_MOUNT_OWNED_BY_PLAYER
   *
   * @param {number} player
   * @return {number}
   */
global.GetMountOwnedByPlayer = function (player) {
  return Citizen.invokeNative('0xf49f14462f0ae27c', player, _r, _ri);
};

/**
   * GET_PLAYERS_LAST_VEHICLE
   *
  
   * @return {number}
   */
global.GetPlayersLastVehicle = function () {
  return Citizen.invokeNative('0x2f96e7720b0b19ea', _r, _ri);
};

/**
   * GET_PLAYER_CURRENT_STEALTH_NOISE
   *
   * @param {number} player
   * @return {number}
   */
global.GetPlayerCurrentStealthNoise = function (player) {
  return Citizen.invokeNative('0xd7ecc25e176ecba5', player, _r, _rf);
};

/**
   * GET_PLAYER_GROUP
   * Returns the group ID the player is member of.
   *
   * @param {number} player
   * @return {number}
   */
global.GetPlayerGroup = function (player) {
  return Citizen.invokeNative('0x9bab31815159abcf', player, _r, _ri);
};

/**
   * GET_PLAYER_INDEX
   * Returns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT
   *
  
   * @return {number}
   */
global.GetPlayerIndex = function () {
  return Citizen.invokeNative('0x47e385b0d957c8d4', _r, _ri);
};

/**
   * GET_PLAYER_INTERACTION_TARGET_ENTITY
   *
   * @param {number} player
   * @param {number} outEntity
   * @param {boolean} p2
   * @param {boolean} p3
   * @return {boolean}
   */
global.GetPlayerInteractionTargetEntity = function (player, outEntity, p2, p3) {
  return Citizen.invokeNative('0x3ee1f7a8c32f24e1', player, _ii(outEntity), p2, p3, _r);
};

/**
   * GET_PLAYER_INVINCIBLE
   * Returns the player's invincibility status.
   *
   * @param {number} player
   * @return {boolean}
   */
global.GetPlayerInvincible = function (player) {
  return Citizen.invokeNative('0x0cbbcb2ccfa7dc4e', player, _r);
};

/**
   * GET_PLAYER_NAME
   *
   * @param {number} player
   * @return {string | number}
   */
global.GetPlayerName = function (player) {
  return Citizen.invokeNative('0x7124fd9ac0e01ba0', player, _r, _s);
};

/**
   * GET_PLAYER_PED
   *
   * @param {number} player
   * @return {number}
   */
global.GetPlayerPed = function (player) {
  return Citizen.invokeNative('0x275f255ed201b937', player, _r, _ri);
};

/**
   * GET_PLAYER_PED_SCRIPT_INDEX
   * Does the same like PLAYER::GET_PLAYER_PED
   *
   * @param {number} player
   * @return {number}
   */
global.GetPlayerPedScriptIndex = function (player) {
  return Citizen.invokeNative('0x5c880f9056d784c8', player, _r, _ri);
};

/**
   * GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY
   *
   * @param {number} player
   * @param {number} p1
   * @param {boolean} p2
   * @return {boolean}
   */
global.GetPlayerReceivedBattleEventRecently = function (player, p1, p2) {
  return Citizen.invokeNative('0xfb6eb8785f808551', player, p1, p2, _r);
};

/**
   * GET_PLAYER_TARGET_ENTITY
   *
   * @param {number} player
   * @param {number} entity
   * @return {boolean}
   */
global.GetPlayerTargetEntity = function (player, entity) {
  return Citizen.invokeNative('0xae663ddd99c8a670', player, _ii(entity), _r);
};

/**
   * GET_PLAYER_TEAM
   * Gets the player's team.
   * Returns -1 in singleplayer.
   *
   * @param {number} player
   * @return {number}
   */
global.GetPlayerTeam = function (player) {
  return Citizen.invokeNative('0xb464eb6a40c7975b', player, _r, _ri);
};

/**
   * GET_PLAYER_WANTED_LEVEL
   *
   * @param {number} player
   * @return {number}
   */
global.GetPlayerWantedLevel = function (player) {
  return Citizen.invokeNative('0xabc532f9098bfd9d', player, _r, _ri);
};

/**
   * GET_TARGET_CHARACTER_NAME_FOR_LOCAL_PLAYER
   *
   * @param {number} ped
   * @return {number}
   */
global.GetTargetCharacterNameForLocalPlayer = function (ped) {
  return Citizen.invokeNative('0x36e3d8b5a6552fe8', ped, _r, _ri);
};

/**
   * GET_TARGET_CHARACTER_NAME_SCRIPT_OVERRIDE_HASH
   *
   * @param {number} ped
   * @return {number}
   */
global.GetTargetCharacterNameScriptOverrideHash = function (ped) {
  return Citizen.invokeNative('0x0335106f3acabbed', ped, _r, _ri);
};

/**
   * GET_TARGET_CHARACTER_NAME_SCRIPT_OVERRIDE_RAW_STRING
   *
   * @param {number} ped
   * @return {string | number}
   */
global.GetTargetCharacterNameScriptOverrideRawString = function (ped) {
  return Citizen.invokeNative('0x755e08680f21ef30', ped, _r, _s);
};

/**
   * GET_WANTED_LEVEL_RADIUS
   *
   * @param {number} p0
   * @return {number}
   */
global.GetWantedLevelRadius = function (p0) {
  return Citizen.invokeNative('0x80b00eb26d9521c7', p0, _r, _rf);
};

/**
   * GET_WANTED_LEVEL_THRESHOLD
   *
   * @param {number} wantedLevel
   * @return {number}
   */
global.GetWantedLevelThreshold = function (wantedLevel) {
  return Citizen.invokeNative('0x1b1a3b358f7d8f07', wantedLevel, _r, _ri);
};

/**
   * HAS_FORCE_CLEANUP_OCCURRED
   *
   * @param {number} cleanupFlags
   * @return {boolean}
   */
global.HasForceCleanupOccurred = function (cleanupFlags) {
  return Citizen.invokeNative('0xc11469dca6fc3bb5', cleanupFlags, _r);
};

/**
   * HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE
   *
   * @param {number} player
   * @return {boolean}
   */
global.HasPlayerBeenSpottedInStolenVehicle = function (player) {
  return Citizen.invokeNative('0xc932f57f31ea9152', player, _r);
};

/**
   * HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED
   *
   * @param {number} player
   * @return {boolean}
   */
global.HasPlayerDamagedAtLeastOneNonAnimalPed = function (player) {
  return Citizen.invokeNative('0x16c8d205dd5a2e90', player, _r);
};

/**
   * HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED
   *
   * @param {number} player
   * @return {boolean}
   */
global.HasPlayerDamagedAtLeastOnePed = function (player) {
  return Citizen.invokeNative('0xda4a4b9b96e20092', player, _r);
};

/**
   * INT_TO_PARTICIPANTINDEX
   * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
   *
   * @param {number} value
   * @return {number}
   */
global.IntToParticipantindex = function (value) {
  return Citizen.invokeNative('0x58ff971fc8f2702c', value, _r, _ri);
};

/**
   * INT_TO_PLAYERINDEX
   * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
   *
   * @param {number} value
   * @return {number}
   */
global.IntToPlayerindex = function (value) {
  return Citizen.invokeNative('0x748b3a65c2604c33', value, _r, _ri);
};

/**
   * IS_PLAYER_BEING_ARRESTED
   * Return true while player is being arrested / busted.
   * 
   * If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)
   * 
   * If atArresting is set to 0, this function will return 1 only when the busted screen is shown.
   *
   * @param {number} player
   * @param {boolean} atArresting
   * @return {boolean}
   */
global.IsPlayerBeingArrested = function (player, atArresting) {
  return Citizen.invokeNative('0xc8183ae963c58374', player, atArresting, _r);
};

/**
   * IS_PLAYER_CLIMBING
   * Returns TRUE if the player ('s ped) is climbing at the moment.
   *
   * @param {number} player
   * @return {boolean}
   */
global.IsPlayerClimbing = function (player) {
  return Citizen.invokeNative('0xb8a70c22fd48197a', player, _r);
};

/**
   * IS_PLAYER_CONTROL_ON
   * Returns whether the player can control himself.
   *
   * @param {number} player
   * @return {boolean}
   */
global.IsPlayerControlOn = function (player) {
  return Citizen.invokeNative('0x7964097fce4c244b', player, _r);
};

/**
   * IS_PLAYER_DEAD
   *
   * @param {number} player
   * @return {boolean}
   */
global.IsPlayerDead = function (player) {
  return Citizen.invokeNative('0x2e9c3fcb6798f397', player, _r);
};

/**
   * IS_PLAYER_FREE_AIMING
   * Gets a value indicating whether the specified player is currently aiming freely.
   *
   * @param {number} player
   * @return {boolean}
   */
global.IsPlayerFreeAiming = function (player) {
  return Citizen.invokeNative('0x936f967d4be1ce9d', player, _r);
};

/**
   * IS_PLAYER_FREE_AIMING_AT_ENTITY
   * Gets a value indicating whether the specified player is currently aiming freely at the specified entity.
   *
   * @param {number} player
   * @param {number} entity
   * @return {boolean}
   */
global.IsPlayerFreeAimingAtEntity = function (player, entity) {
  return Citizen.invokeNative('0x8c67c11c68713d25', player, entity, _r);
};

/**
   * IS_PLAYER_PLAYING
   * Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.
   *
   * @param {number} player
   * @return {boolean}
   */
global.IsPlayerPlaying = function (player) {
  return Citizen.invokeNative('0xbffb35986caae58c', player, _r);
};

/**
   * IS_PLAYER_READY_FOR_CUTSCENE
   *
   * @param {number} player
   * @return {boolean}
   */
global.IsPlayerReadyForCutscene = function (player) {
  return Citizen.invokeNative('0xaa67bcb0097f2fa3', player, _r);
};

/**
   * IS_PLAYER_RIDING_TRAIN
   * Returns true if the player is riding a train.
   *
   * @param {number} player
   * @return {boolean}
   */
global.IsPlayerRidingTrain = function (player) {
  return Citizen.invokeNative('0x2fb0acada6a238dd', player, _r);
};

/**
   * IS_PLAYER_SCRIPT_CONTROL_ON
   *
   * @param {number} player
   * @return {boolean}
   */
global.IsPlayerScriptControlOn = function (player) {
  return Citizen.invokeNative('0xb78350754157c00f', player, _r);
};

/**
   * IS_PLAYER_TARGETTING_ANYTHING
   *
   * @param {number} player
   * @return {boolean}
   */
global.IsPlayerTargettingAnything = function (player) {
  return Citizen.invokeNative('0x4605c66e0f935f83', player, _r);
};

/**
   * IS_PLAYER_TARGETTING_ENTITY
   *
   * @param {number} player
   * @param {number} entity
   * @param {boolean} p2
   * @return {boolean}
   */
global.IsPlayerTargettingEntity = function (player, entity, p2) {
  return Citizen.invokeNative('0x27f89fdc16688a7a', player, entity, p2, _r);
};

/**
   * IS_PLAYER_TELEPORT_ACTIVE
   *
  
   * @return {boolean}
   */
global.IsPlayerTeleportActive = function () {
  return Citizen.invokeNative('0x085eeaeb8783feb5', _r);
};

/**
   * IS_PLAYER_WANTED_LEVEL_GREATER
   *
   * @param {number} player
   * @param {number} wantedLevel
   * @return {boolean}
   */
global.IsPlayerWantedLevelGreater = function (player, wantedLevel) {
  return Citizen.invokeNative('0xe1c0ad4c24324c36', player, wantedLevel, _r);
};

/**
   * IS_SYSTEM_UI_BEING_DISPLAYED
   *
  
   * @return {boolean}
   */
global.IsSystemUiBeingDisplayed = function () {
  return Citizen.invokeNative('0x908258b6209e71f7', _r);
};

/**
   * NETWORK_PLAYER_ID_TO_INT
   * Does exactly the same thing as PLAYER_ID()
   *
  
   * @return {number}
   */
global.NetworkPlayerIdToInt = function () {
  return Citizen.invokeNative('0x8a9386f0749a17fa', _r, _ri);
};

/**
   * PLAYER_ID
   * This returns YOUR 'identity' as a Player type.
   * 
   * Always returns 0 in story mode.
   *
  
   * @return {number}
   */
global.PlayerId = function () {
  return Citizen.invokeNative('0x217e9dc48139933d', _r, _ri);
};

/**
   * PLAYER_PED_ID
   * Returns current player ped
   *
  
   * @return {number}
   */
global.PlayerPedId = function () {
  return Citizen.invokeNative('0x096275889b8e0ee0', _r, _ri);
};

/**
   * REPORT_POLICE_SPOTTED_PLAYER
   *
   * @param {number} player
   * @return {void}
   */
global.ReportPoliceSpottedPlayer = function (player) {
  return Citizen.invokeNative('0xcbccf73ffa69cc6b', player);
};

/**
   * RESET_LAW_RESPONSE_DELAY_OVERRIDE
   *
  
   * @return {void}
   */
global.ResetLawResponseDelayOverride = function () {
  return Citizen.invokeNative('0x5ce5cacc01d0f985');
};

/**
   * RESET_PLAYER_ARREST_STATE
   *
   * @param {number} player
   * @return {void}
   */
global.ResetPlayerArrestState = function (player) {
  return Citizen.invokeNative('0x12917931c31f1750', player);
};

/**
   * RESET_PLAYER_INPUT_GAIT
   *
   * @param {number} player
   * @return {void}
   */
global.ResetPlayerInputGait = function (player) {
  return Citizen.invokeNative('0x61a2eecab274829b', player);
};

/**
   * RESET_WANTED_LEVEL_DIFFICULTY
   *
   * @param {number} player
   * @return {void}
   */
global.ResetWantedLevelDifficulty = function (player) {
  return Citizen.invokeNative('0x062d14f18e8b0cae', player);
};

/**
   * RESTORE_PLAYER_STAMINA
   *
   * @param {number} player
   * @param {number} p1
   * @return {void}
   */
global.RestorePlayerStamina = function (player, p1) {
  return Citizen.invokeNative('0xc41f4b6e23fe6a4a', player, _fv(p1));
};

/**
   * SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE
   * This can be between 1.0f - 50.0f
   *
   * @param {number} player
   * @param {number} multiplier
   * @return {void}
   */
global.SetAirDragMultiplierForPlayersVehicle = function (player, multiplier) {
  return Citizen.invokeNative('0x5da6500fe849da16', player, _fv(multiplier));
};

/**
   * SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME
   *
   * @param {number} player
   * @return {void}
   */
global.SetAllNeutralRandomPedsFleeThisFrame = function (player) {
  return Citizen.invokeNative('0x16752daa7e6d3f72', player);
};

/**
   * SET_ALL_RANDOM_PEDS_FLEE
   * Sets whether all random peds will run away from player if they are agitated (threatened) (bool=true), or some peds can stand up for themselves (bool=false).
   *
   * @param {number} player
   * @param {boolean} toggle
   * @return {void}
   */
global.SetAllRandomPedsFlee = function (player, toggle) {
  return Citizen.invokeNative('0xe705309b8c6445a4', player, toggle);
};

/**
   * SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME
   *
   * @param {number} player
   * @return {void}
   */
global.SetAllRandomPedsFleeThisFrame = function (player) {
  return Citizen.invokeNative('0xd5c198a62f1deb0a', player);
};

/**
   * SET_EVERYONE_IGNORE_PLAYER
   *
   * @param {number} player
   * @param {boolean} toggle
   * @return {void}
   */
global.SetEveryoneIgnorePlayer = function (player, toggle) {
  return Citizen.invokeNative('0x34630a768925b852', player, toggle);
};

/**
   * SET_LAW_RESPONSE_DELAY_OVERRIDE
   *
   * @param {number} p0
   * @return {void}
   */
global.SetLawResponseDelayOverride = function (p0) {
  return Citizen.invokeNative('0xd2dfc9cca5596a11', _fv(p0));
};

/**
   * SET_LOCKON_TO_FRIENDLY_PLAYERS
   *
   * @param {number} player
   * @param {boolean} toggle
   * @return {void}
   */
global.SetLockonToFriendlyPlayers = function (player, toggle) {
  return Citizen.invokeNative('0x4a056257802dd3e5', player, toggle);
};

/**
   * SET_MAX_WANTED_LEVEL
   *
   * @param {number} maxWantedLevel
   * @return {void}
   */
global.SetMaxWantedLevel = function (maxWantedLevel) {
  return Citizen.invokeNative('0x28a4bd2cee236e19', maxWantedLevel);
};

/**
   * SET_MIN_TIME_BEFORE_HORSE_BUCKING
   *
   * @param {number} mount
   * @param {number} iMinBuckTime
   * @return {void}
   */
global.SetMinTimeBeforeHorseBucking = function (mount, iMinBuckTime) {
  return Citizen.invokeNative('0x506ce71fb6e8cf5e', mount, iMinBuckTime);
};

/**
   * SET_PED_AS_TEMP_PLAYER_HORSE
   *
   * @param {number} player
   * @param {number} horse
   * @return {boolean}
   */
global.SetPedAsTempPlayerHorse = function (player, horse) {
  return Citizen.invokeNative('0x227b06324234fb09', player, horse, _r);
};

/**
   * SET_PLAYER_CAN_BE_HASSLED_BY_GANGS
   * Sets whether this player can be hassled by gangs.
   *
   * @param {number} player
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPlayerCanBeHassledByGangs = function (player, toggle) {
  return Citizen.invokeNative('0xc7fe774412046825', player, toggle);
};

/**
   * SET_PLAYER_CAN_USE_COVER
   * Sets whether this player can take cover.
   *
   * @param {number} player
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPlayerCanUseCover = function (player, toggle) {
  return Citizen.invokeNative('0x5eda520f7a3baf4e', player, toggle);
};

/**
   * SET_PLAYER_CLOTH_PIN_FRAMES
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.SetPlayerClothPinFrames = function (ped, p1) {
  return Citizen.invokeNative('0xd0d9317dfeef9a66', ped, p1);
};

/**
   * SET_PLAYER_CONTROL
   * flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eSetPlayerControlFlags
   *
   * @param {number} player
   * @param {boolean} toggle
   * @param {number} flags
   * @param {boolean} bPreventHeadingChange
   * @return {void}
   */
global.SetPlayerControl = function (player, toggle, flags, bPreventHeadingChange) {
  return Citizen.invokeNative('0x4d51e59243281d80', player, toggle, flags, bPreventHeadingChange);
};

/**
   * SET_PLAYER_FORCED_AIM
   *
   * @param {number} player
   * @param {boolean} toggle
   * @param {number} ped
   * @param {number} p3
   * @param {boolean} p4
   * @return {void}
   */
global.SetPlayerForcedAim = function (player, toggle, ped, p3, p4) {
  return Citizen.invokeNative('0xd5fcc166aeb2fd0f', player, toggle, ped, p3, p4);
};

/**
   * SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER
   *
   * @param {number} player
   * @param {number} regenRate
   * @return {void}
   */
global.SetPlayerHealthRechargeMultiplier = function (player, regenRate) {
  return Citizen.invokeNative('0x8899c244ebcf70de', player, _fv(regenRate));
};

/**
   * SET_PLAYER_INVINCIBLE
   * Simply sets you as invincible (Health will not deplete).
   *
   * @param {number} player
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPlayerInvincible = function (player, toggle) {
  return Citizen.invokeNative('0xfebeebc9cbdf4b12', player, toggle);
};

/**
   * SET_PLAYER_LOCKON
   *
   * @param {number} player
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPlayerLockon = function (player, toggle) {
  return Citizen.invokeNative('0x462aa1973cbba75e', player, toggle);
};

/**
   * SET_PLAYER_LOCKON_RANGE_OVERRIDE
   * Affects the range of auto aim target.
   *
   * @param {number} player
   * @param {number} range
   * @return {void}
   */
global.SetPlayerLockonRangeOverride = function (player, range) {
  return Citizen.invokeNative('0x3a3cd06597388322', player, _fv(range));
};

/**
   * SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE
   *
   * @param {number} player
   * @return {void}
   */
global.SetPlayerMayNotEnterAnyVehicle = function (player) {
  return Citizen.invokeNative('0xbec463b3a11c909e', player);
};

/**
   * SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE
   *
   * @param {number} player
   * @param {number} vehicle
   * @return {void}
   */
global.SetPlayerMayOnlyEnterThisVehicle = function (player, vehicle) {
  return Citizen.invokeNative('0xda35a134038557ec', player, vehicle);
};

/**
   * SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER
   *
   * @param {number} player
   * @param {number} modifier
   * @return {void}
   */
global.SetPlayerMeleeWeaponDamageModifier = function (player, modifier) {
  return Citizen.invokeNative('0xe4cb5a3f18170381', player, _fv(modifier));
};

/**
   * SET_PLAYER_MODEL
   * Make sure to request the model first and wait until it has loaded.
   *
   * @param {number} player
   * @param {number} modelHash
   * @param {boolean} p2
   * @return {void}
   */
global.SetPlayerModel = function (player, modelHash, p2) {
  return Citizen.invokeNative('0xed40380076a31506', player, _ch(modelHash), p2);
};

/**
   * SET_PLAYER_NOISE_MULTIPLIER
   *
   * @param {number} player
   * @param {number} multiplier
   * @return {void}
   */
global.SetPlayerNoiseMultiplier = function (player, multiplier) {
  return Citizen.invokeNative('0xb5ec6bdaebca454c', player, _fv(multiplier));
};

/**
   * SET_PLAYER_SIMULATE_AIMING
   *
   * @param {number} player
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPlayerSimulateAiming = function (player, toggle) {
  return Citizen.invokeNative('0xe0447def81ccdfd2', player, toggle);
};

/**
   * SET_PLAYER_SNEAKING_NOISE_MULTIPLIER
   *
   * @param {number} player
   * @param {number} multiplier
   * @return {void}
   */
global.SetPlayerSneakingNoiseMultiplier = function (player, multiplier) {
  return Citizen.invokeNative('0x4de44fa389dca565', player, _fv(multiplier));
};

/**
   * SET_PLAYER_STAMINA_RECHARGE_MULTIPLIER
   *
   * @param {number} player
   * @param {number} multiplier
   * @return {void}
   */
global.SetPlayerStaminaRechargeMultiplier = function (player, multiplier) {
  return Citizen.invokeNative('0xfeca17cf3343694b', player, _fv(multiplier));
};

/**
   * SET_PLAYER_TARGETING_MODE
   * Sets your targeting mode for when you're on foot.
   * enum eTargetingMode
   * {
   *   TARGETING_MODE_INVALID = -1,
   *   TARGETING_MODE_CAUSAL, (Wide)
   *   TARGETING_MODE_NORMAL,
   *   TARGETING_MODE_HARD, (Narrow)
   *   TARGETING_MODE_EXPERT (Free Aim)
   * };
   *
   * @param {number} targetMode
   * @return {void}
   */
global.SetPlayerTargetingMode = function (targetMode) {
  return Citizen.invokeNative('0xd66a941f401e7302', targetMode);
};

/**
   * SET_PLAYER_TEAM
   * Sets the player's team.
   *
   * @param {number} player
   * @param {number} team
   * @param {boolean} bRestrictToThisScript
   * @return {void}
   */
global.SetPlayerTeam = function (player, team, bRestrictToThisScript) {
  return Citizen.invokeNative('0xe8dd8536f01de600', player, team, bRestrictToThisScript);
};

/**
   * SET_PLAYER_WANTED_LEVEL
   * nullsub, doesn't do anything
   *
   * @param {number} player
   * @param {number} wantedLevel
   * @param {boolean} disableNoMission
   * @return {void}
   */
global.SetPlayerWantedLevel = function (player, wantedLevel, disableNoMission) {
  return Citizen.invokeNative('0x384d4765395e006c', player, wantedLevel, disableNoMission);
};

/**
   * SET_PLAYER_WEAPON_DAMAGE_MODIFIER
   * This modifies the damage value of your weapon. Whether it is a multiplier or base damage is unknown.
   *
   * @param {number} player
   * @param {number} modifier
   * @return {void}
   */
global.SetPlayerWeaponDamageModifier = function (player, modifier) {
  return Citizen.invokeNative('0x94d529f7b73d7a85', player, _fv(modifier));
};

/**
   * SET_PLAYER_WEAPON_DEFENSE_MODIFIER
   *
   * @param {number} player
   * @param {number} modifier
   * @return {void}
   */
global.SetPlayerWeaponDefenseModifier = function (player, modifier) {
  return Citizen.invokeNative('0xd15cc2d493160be3', player, _fv(modifier));
};

/**
   * SET_PLAYER_WEAPON_TYPE_DAMAGE_MODIFIER
   *
   * @param {number} player
   * @param {number} weaponHash
   * @param {number} damageModifier
   * @return {void}
   */
global.SetPlayerWeaponTypeDamageModifier = function (player, weaponHash, damageModifier) {
  return Citizen.invokeNative('0xd04ad186ce8bb129', player, _ch(weaponHash), _fv(damageModifier));
};

/**
   * SET_POLICE_RADAR_BLIPS
   * If toggle is set to false:
   *  The police won't be shown on the (mini)map
   * 
   * If toggle is set to true:
   *  The police will be shown on the (mini)map
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPoliceRadarBlips = function (toggle) {
  return Citizen.invokeNative('0x6fd7dd6b63f2820e', toggle);
};

/**
   * SET_SWIM_MULTIPLIER_FOR_PLAYER
   * Swim speed multiplier.
   * Multiplier goes up to 1.49f
   *
   * @param {number} player
   * @param {number} multiplier
   * @return {void}
   */
global.SetSwimMultiplierForPlayer = function (player, multiplier) {
  return Citizen.invokeNative('0xbfceabde34da5085', player, _fv(multiplier));
};

/**
   * SET_WANTED_LEVEL_MULTIPLIER
   *
   * @param {number} multiplier
   * @return {void}
   */
global.SetWantedLevelMultiplier = function (multiplier) {
  return Citizen.invokeNative('0xd7fa719cb54866c2', _fv(multiplier));
};

/**
   * SIMULATE_PLAYER_INPUT_GAIT
   *
   * @param {number} player
   * @param {number} speed
   * @param {number} duration
   * @param {number} heading
   * @param {boolean} p4
   * @param {boolean} p5
   * @return {void}
   */
global.SimulatePlayerInputGait = function (player, speed, duration, heading, p4, p5) {
  return Citizen.invokeNative('0xfa0c063c422c4355', player, _fv(speed), duration, _fv(heading), p4, p5);
};

/**
   * START_PLAYER_TELEPORT
   *
   * @param {number} player
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} heading
   * @param {boolean} p5
   * @param {boolean} p6
   * @param {boolean} p7
   * @param {boolean} p8
   * @return {void}
   */
global.StartPlayerTeleport = function (player, x, y, z, heading, p5, p6, p7, p8) {
  return Citizen.invokeNative('0xdf8822c55edda65b', player, _fv(x), _fv(y), _fv(z), _fv(heading), p5, p6, p7, p8);
};

/**
   * STOP_PLAYER_TELEPORT
   * Disables the player's teleportation
   *
  
   * @return {void}
   */
global.StopPlayerTeleport = function () {
  return Citizen.invokeNative('0x0858b86146601be8');
};

/**
   * SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME
   *
   * @param {number} player
   * @return {void}
   */
global.SuppressWitnessesCallingPoliceThisFrame = function (player) {
  return Citizen.invokeNative('0x96722257e5381e00', player);
};

/**
   * UPDATE_PLAYER_TELEPORT
   *
   * @param {number} player
   * @return {boolean}
   */
global.UpdatePlayerTeleport = function (player) {
  return Citizen.invokeNative('0xc39dce4672cbfbc1', player, _r);
};

/**
   * UPDATE_WANTED_POSITION_THIS_FRAME
   *
   * @param {number} player
   * @return {void}
   */
global.UpdateWantedPositionThisFrame = function (player) {
  return Citizen.invokeNative('0xd0b0b044112bf424', player);
};

/**
   * _0x00B156AFEBCC5AE0
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x00B156AFEBCC5AE0 = function (p0) {
  return Citizen.invokeNative('0x00b156afebcc5ae0', p0);
};

/**
   * _SET_PLAYER_WEAPON_DRAW_SPEED
   *
   * @param {number} player
   * @param {number} weapon
   * @param {number} speed
   * @return {void}
   */
global.SetPlayerWeaponDrawSpeed = function (player, weapon, speed) {
  return Citizen.invokeNative('0x00eb5a760638db55', player, _ch(weapon), _fv(speed));
};

/**
   * _0x03B4B759A8990505
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x03B4B759A8990505 = function (p0) {
  return Citizen.invokeNative('0x03b4b759a8990505', p0, _r);
};

/**
   * _SET_PLAYER_PROMPT_LEAVE_TEXT
   * Sets the stand prompt for a specific player using a predefined text entry. use AddTextEntry for promptTextKey for custom names
   *
   * @param {number} player
   * @param {string | number} promptTextKey
   * @return {void}
   */
global.SetPlayerPromptLeaveText = function (player, promptTextKey) {
  return Citizen.invokeNative('0x06c3db00b69d5435', player, promptTextKey);
};

/**
   * _0x06E1FB78B1E59CA5
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x06E1FB78B1E59CA5 = function (ped, p1) {
  return Citizen.invokeNative('0x06e1fb78b1e59ca5', ped, p1);
};

/**
   * _0x086549F3B0381CB1
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x086549F3B0381CB1 = function (p0, p1) {
  return Citizen.invokeNative('0x086549f3b0381cb1', p0, p1);
};

/**
   * _0x0869D499A7848309
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.N_0x0869D499A7848309 = function (p0, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0x0869d499a7848309', p0, p1, p2, p3, p4, p5, p6, p7);
};

/**
   * _0x08E22898A6AF4905
   * _SET_PLAYER_*? some multiplier or modifier for health or statmina ?
   *
   * @param {number} player
   * @param {number} p1
   * @return {void}
   */
global.N_0x08E22898A6AF4905 = function (player, p1) {
  return Citizen.invokeNative('0x08e22898a6af4905', player, _fv(p1));
};

/**
   * _0x0B7803F6F7BB43E0
   * Hardcoded to return zero/false.
   *
  
   * @return {any}
   */
global.N_0x0B7803F6F7BB43E0 = function () {
  return Citizen.invokeNative('0x0b7803f6f7bb43e0', _r);
};

/**
   * _CLEAR_DEADEYE_AURA_INTENSITY_WITH_FLAG
   * Clears the intensity of aura effects applied to entities for a specific player in Deadeye mode based on a flag parameter. This function is used to reset any intensity modifications set by `_SET_DEADEYE_ENTITY_AURA_INTENSITY_WITH_FLAG - 0x131E294EF60160DF`, restoring affected entities' aura intensity to their default state.
   *
   * @param {number} player
   * @param {number} bitflag
   * @return {void}
   */
global.ClearDeadeyeAuraIntensityWithFlag = function (player, bitflag) {
  return Citizen.invokeNative('0x0e9057a9da78d0f8', player, bitflag);
};

/**
   * _0x0F4EAF69DA41AF43
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x0F4EAF69DA41AF43 = function (p0) {
  return Citizen.invokeNative('0x0f4eaf69da41af43', p0, _r);
};

/**
   * _0x0F9CF06986300875
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x0F9CF06986300875 = function (p0) {
  return Citizen.invokeNative('0x0f9cf06986300875', p0);
};

/**
   * _SET_PLAYER_MELEE_PROMPT_TEXT
   * Sets the melee combat prompt for a specific player using a predefined text entry. use game string or 
   * AddTextEntry("custom_text", "Throw a punch") and use custom_text in the native
   *
   * @param {number} player
   * @param {string | number} label
   * @return {void}
   */
global.SetPlayerMeleePromptText = function (player, label) {
  return Citizen.invokeNative('0x0faf95d71ed67ade', player, label);
};

/**
   * _0x107F2A66E1C4C83A
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x107F2A66E1C4C83A = function (p0) {
  return Citizen.invokeNative('0x107f2a66e1c4c83a', p0);
};

/**
   * _0x113EF458AB6CDA67
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x113EF458AB6CDA67 = function (p0, p1) {
  return Citizen.invokeNative('0x113ef458ab6cda67', p0, p1);
};

/**
   * _0x12E09E278C6C29B7
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x12E09E278C6C29B7 = function (p0) {
  return Citizen.invokeNative('0x12e09e278c6c29b7', p0);
};

/**
   * _SET_DEADEYE_ENTITY_AURA_INTENSITY_WITH_FLAG
   * Applies a customizable aura effect to nearby entities when Deadeye is active, with control over aura intensity and additional behavior based on a flag parameter.
   * - flag (int): A flag that determines the behavior of the aura effect and which entities are affected. 2: Applies aura to humans. 4: Applies aura to animals.
   *
   * @param {number} player
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} intensity
   * @param {number} flag
   * @return {void}
   */
global.SetDeadeyeEntityAuraIntensityWithFlag = function (player, p1, p2, p3, intensity, flag) {
  return Citizen.invokeNative('0x131e294ef60160df', player, _fv(p1), _fv(p2), _fv(p3), _fv(intensity), flag);
};

/**
   * _0x14E57F88BA0A07FC
   *
   * @param {number} location
   * @return {void}
   */
global.N_0x14E57F88BA0A07FC = function (location) {
  return Citizen.invokeNative('0x14e57f88ba0a07fc', _ch(location));
};

/**
   * _0x19B2C7A6C34FAD54
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x19B2C7A6C34FAD54 = function (p0, p1) {
  return Citizen.invokeNative('0x19b2c7a6c34fad54', p0, p1, _r);
};

/**
   * _GET_PEDS_DAMAGED_BY_PLAYER_RECENTLY
   * it is used to check for that period of time if player damaged any peds only returns the last 3 hits with the entity ids so if you hit the same entity 3 times it will return the same entity id 3 times, if you hit 4 different entities within that time it will return the last 3 entity ids
   *  only stores the last 3 hits in the data view buffer
   * duration is in miliseconds
   * you need dataview
   *
   * @param {number} player
   * @param {number} duration
   * @param {DataView} struct
   * @return {boolean}
   */
global.GetPedsDamagedByPlayerRecently = function (player, duration, struct) {
  return Citizen.invokeNative('0x1a6e84f13c952094', player, duration, struct, _r);
};

/**
   * _0x1AD8AD999C27F44A
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x1AD8AD999C27F44A = function (p0) {
  return Citizen.invokeNative('0x1ad8ad999c27f44a', p0);
};

/**
   * _0x1D256EED194F5B58
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x1D256EED194F5B58 = function (p0) {
  return Citizen.invokeNative('0x1d256eed194f5b58', p0);
};

/**
   * _EAGLE_EYE_CAN_PLAYER_FOCUS_ON_TRACK
   * Checks if the player can focus on tracks while in Eagle Eye mode. Returns true if the player is able to focus on a track, otherwise false.
   *
   * @param {number} player
   * @return {boolean}
   */
global.EagleEyeCanPlayerFocusOnTrack = function (player) {
  return Citizen.invokeNative('0x1da5c5b0923e1b85', player, _r);
};

/**
   * _0x1E8099F449ABB0BA
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x1E8099F449ABB0BA = function (p0) {
  return Citizen.invokeNative('0x1e8099f449abb0ba', p0, _r);
};

/**
   * _0x1F488807BC8E0630
   * _RESET_PLAYER_A* - _RESET_PLAYER_I*
   *
   * @param {number} player
   * @return {void}
   */
global.N_0x1F488807BC8E0630 = function (player) {
  return Citizen.invokeNative('0x1f488807bc8e0630', player);
};

/**
   * _0x1FDA57E8908F2609
   *
   * @param {number} player
   * @param {number} ped
   * @param {boolean} useSteerassist
   * @return {void}
   */
global.N_0x1FDA57E8908F2609 = function (player, ped, useSteerassist) {
  return Citizen.invokeNative('0x1fda57e8908f2609', player, ped, useSteerassist);
};

/**
   * _IS_PLAYER_ON_MOUNT_LOCKON_ENTITY
   * This native is used to determine if the player has an active lockon an entity while riding a horse.
   *
   * @param {number} player
   * @return {boolean}
   */
global.IsPlayerOnMountLockonEntity = function (player) {
  return Citizen.invokeNative('0x2009f8ab7a5e9d6d', player, _r);
};

/**
   * _0x21091B4BEB6376EE
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x21091B4BEB6376EE = function (p0) {
  return Citizen.invokeNative('0x21091b4beb6376ee', p0, _r);
};

/**
   * _0x216BC0D3D2E413D2
   *
   * @param {number} player
   * @param {any} p1
   * @return {void}
   */
global.N_0x216BC0D3D2E413D2 = function (player, p1) {
  return Citizen.invokeNative('0x216bc0d3d2e413d2', player, p1);
};

/**
   * _0x22B3CABEDDB538B2
   *
   * @param {number} player
   * @param {number} p1
   * @return {void}
   */
global.N_0x22B3CABEDDB538B2 = function (player, p1) {
  return Citizen.invokeNative('0x22b3cabeddb538b2', player, _fv(p1));
};

/**
   * _EAGLE_EYE_SET_RANGE
   *
   * @param {number} player
   * @param {number} range
   * @return {void}
   */
global.EagleEyeSetRange = function (player, range) {
  return Citizen.invokeNative('0x22c8b10802301381', player, _fv(range));
};

/**
   * _0x263D69767F76059C
   *
   * @param {number} player
   * @param {number} p1
   * @return {void}
   */
global.N_0x263D69767F76059C = function (player, p1) {
  return Citizen.invokeNative('0x263d69767f76059c', player, p1);
};

/**
   * _GET_NUM_DEADEYE_MARKS_ON_PED
   * Retrieves the number of marks placed on a PED when Deadeye mode is active for the specified player. 
   *
   * @param {number} player
   * @param {number} ped
   * @return {number}
   */
global.GetNumDeadeyeMarksOnPed = function (player, ped) {
  return Citizen.invokeNative('0x27ad7162d3fed01e', player, ped, _r, _ri);
};

/**
   * _SET_DEADEYE_ENTITY_AURA_WITH_FLAG
   * Applies a aura effect to nearby entities when Deadeye is active, based on a flag parameter. This includes humans, animals, vehicles, and horses pulling those vehicles. Additionally, depending on the flag value, the player's appearance may change (e.g., turning gray).
   * - flag (int): A flag that determines the behavior of the aura effect. 2 means people 4 means animal etc.
   *
   * @param {number} player
   * @param {number} flag
   * @return {void}
   */
global.SetDeadeyeEntityAuraWithFlag = function (player, flag) {
  return Citizen.invokeNative('0x2b12b6fc8b8772ab', player, flag);
};

/**
   * _0x2BB8D58E88777499
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x2BB8D58E88777499 = function (p0) {
  return Citizen.invokeNative('0x2bb8d58e88777499', p0);
};

/**
   * _0x2BEED53B912537D0
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x2BEED53B912537D0 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x2beed53b912537d0', p0, p1, p2);
};

/**
   * _0x2C2D287748E8E9B7
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0x2C2D287748E8E9B7 = function (p0) {
  return Citizen.invokeNative('0x2c2d287748e8e9b7', p0);
};

/**
   * _0x2E1ABE627C95ED9B
   *
  
   * @return {any}
   */
global.N_0x2E1ABE627C95ED9B = function () {
  return Citizen.invokeNative('0x2e1abe627c95ed9b', _r);
};

/**
   * _0x2E67707BEC52CA4B
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x2E67707BEC52CA4B = function (p0) {
  return Citizen.invokeNative('0x2e67707bec52ca4b', p0);
};

/**
   * _0x310CE349E0C0EC4B
   *
   * @param {number} player
   * @param {number} ped
   * @param {number} p2
   * @return {void}
   */
global.N_0x310CE349E0C0EC4B = function (player, ped, p2) {
  return Citizen.invokeNative('0x310ce349e0c0ec4b', player, ped, p2);
};

/**
   * _0x325434C68358D282
   * Only used in script function UPDATE_PLAYER_JUST_DIED_STATE
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.N_0x325434C68358D282 = function (toggle) {
  return Citizen.invokeNative('0x325434c68358d282', toggle);
};

/**
   * _EAGLE_EYE_SET_HIDE_ALL_TRAILS
   * Sets whether all trails are hidden during Eagle Eye mode.
   *
   * @param {number} player
   * @param {boolean} hide
   * @return {void}
   */
global.EagleEyeSetHideAllTrails = function (player, hide) {
  return Citizen.invokeNative('0x330ca55a3647fa1c', player, hide);
};

/**
   * _0x35A33783EC3C3448
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x35A33783EC3C3448 = function (p0) {
  return Citizen.invokeNative('0x35a33783ec3c3448', p0);
};

/**
   * _EAGLE_EYE_GET_TRACKED_PED_ID
   * Retrieves the ID of the ped that the specified player is currently tracking while in Eagle Eye mode.
   *
   * @param {number} player
   * @return {number}
   */
global.EagleEyeGetTrackedPedId = function (player) {
  return Citizen.invokeNative('0x3813e11a378958a5', player, _r, _ri);
};

/**
   * _ADD_AMBIENT_PLAYER_INTERACTIVE_FOCUS_PRESET
   * Associates a specific interactive focus mode preset between a player and a ped, with a specified location and target entity.
   * To access all available presets, refer to the file located at: `/update_1.rpf/common/data/interactive_focus_mode_presets.meta`
   *
   * @param {number} player
   * @param {number} ped
   * @param {string | number} preset
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} targetEntity
   * @param {string | number} name
   * @return {void}
   */
global.AddAmbientPlayerInteractiveFocusPreset = function (player, ped, preset, x, y, z, targetEntity, name) {
  return Citizen.invokeNative('0x3946fc742ac305cd', player, ped, preset, _fv(x), _fv(y), _fv(z), targetEntity, name);
};

/**
   * _0x39D8D7082BC34B72
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x39D8D7082BC34B72 = function (p0) {
  return Citizen.invokeNative('0x39d8d7082bc34b72', p0);
};

/**
   * _0x3A8611BD7BDE84F7
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x3A8611BD7BDE84F7 = function (p0, p1) {
  return Citizen.invokeNative('0x3a8611bd7bde84f7', p0, p1);
};

/**
   * _0x3ACAC8832E77BC93
   * Used in script function INIT_DEADEYE_SLOWDOWN
   *
   * @param {number} player
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x3ACAC8832E77BC93 = function (player, p1) {
  return Citizen.invokeNative('0x3acac8832e77bc93', player, p1);
};

/**
   * _0x3AD212429E095EFB
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x3AD212429E095EFB = function (p0, p1) {
  return Citizen.invokeNative('0x3ad212429e095efb', p0, p1);
};

/**
   * _0x3B296934DB026873
   * nullsub, doesn't do anything
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x3B296934DB026873 = function (p0, p1) {
  return Citizen.invokeNative('0x3b296934db026873', p0, p1);
};

/**
   * _0x3BB84F812E052C90
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x3BB84F812E052C90 = function (p0) {
  return Citizen.invokeNative('0x3bb84f812e052c90', p0);
};

/**
   * _0x3C4AE8506638C7E2
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x3C4AE8506638C7E2 = function (p0, p1) {
  return Citizen.invokeNative('0x3c4ae8506638c7e2', p0, p1);
};

/**
   * _0x3D9DA5C9EFD20D88
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x3D9DA5C9EFD20D88 = function (p0, p1) {
  return Citizen.invokeNative('0x3d9da5c9efd20d88', p0, p1);
};

/**
   * _0x3DAABE78A23694BC
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x3DAABE78A23694BC = function (p0, p1) {
  return Citizen.invokeNative('0x3daabe78a23694bc', p0, p1);
};

/**
   * _0x45EF176B532CA851
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x45EF176B532CA851 = function (p0, p1) {
  return Citizen.invokeNative('0x45ef176b532ca851', p0, p1);
};

/**
   * _0x497A18F8F88AA9D8
   *
  
   * @return {void}
   */
global.N_0x497A18F8F88AA9D8 = function () {
  return Citizen.invokeNative('0x497a18f8f88aa9d8');
};

/**
   * _0x4D1699543B1C023C
   * _SET_SPECIAL_ABILITY_*
   *
   * @param {number} player
   * @param {number} p1
   * @return {void}
   */
global.N_0x4D1699543B1C023C = function (player, p1) {
  return Citizen.invokeNative('0x4d1699543b1c023c', player, _fv(p1));
};

/**
   * _0x4DBC4873707E8FD6
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x4DBC4873707E8FD6 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x4dbc4873707e8fd6', p0, p1, p2, p3);
};

/**
   * _0x4EC8BE63B8A5D4EF
   *
   * @param {number} player
   * @param {number} p1
   * @return {void}
   */
global.N_0x4EC8BE63B8A5D4EF = function (player, p1) {
  return Citizen.invokeNative('0x4ec8be63b8a5d4ef', player, p1);
};

/**
   * _0x4F0D2256AAE94EDA
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x4F0D2256AAE94EDA = function (p0) {
  return Citizen.invokeNative('0x4f0d2256aae94eda', p0);
};

/**
   * _0x51139D8C17B16FBC
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x51139D8C17B16FBC = function (p0) {
  return Citizen.invokeNative('0x51139d8c17b16fbc', p0, _r);
};

/**
   * _0x57028FD99886F6F9
   * _IS_PLAYER_D* - _IS_PLAYER_F*
   *
  
   * @return {boolean}
   */
global.N_0x57028FD99886F6F9 = function () {
  return Citizen.invokeNative('0x57028fd99886f6f9', _r);
};

/**
   * _0x570A13A4CA2799BB
   * Used in script function INIT_DEADEYE_SLOWDOWN
   *
   * @param {number} player
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x570A13A4CA2799BB = function (player, p1) {
  return Citizen.invokeNative('0x570a13a4ca2799bb', player, p1);
};

/**
   * _0x57D9991DC1334151
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x57D9991DC1334151 = function (p0) {
  return Citizen.invokeNative('0x57d9991dc1334151', p0, _r);
};

/**
   * _0x585CE159DB46FADB
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x585CE159DB46FADB = function (p0, p1) {
  return Citizen.invokeNative('0x585ce159db46fadb', p0, p1);
};

/**
   * _0x5B7B97E99F84138B
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x5B7B97E99F84138B = function (p0) {
  return Citizen.invokeNative('0x5b7b97e99f84138b', p0, _r);
};

/**
   * _0x5C2E5E3CAEEB1F58
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x5C2E5E3CAEEB1F58 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x5c2e5e3caeeb1f58', p0, p1, p2);
};

/**
   * _0x621D1B289CAF5978
   * _IS_PLAYER_S* - _IS_PLAYER_T*
   *
   * @param {number} player
   * @return {boolean}
   */
global.N_0x621D1B289CAF5978 = function (player) {
  return Citizen.invokeNative('0x621d1b289caf5978', player, _r);
};

/**
   * _0x628E742FE1F79C4A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x628E742FE1F79C4A = function (p0, p1) {
  return Citizen.invokeNative('0x628e742fe1f79c4a', p0, p1);
};

/**
   * _0x65887EAC535A0B0C
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x65887EAC535A0B0C = function (p0) {
  return Citizen.invokeNative('0x65887eac535a0b0c', p0);
};

/**
   * _0x67659A8F248E0141
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x67659A8F248E0141 = function (p0, p1) {
  return Citizen.invokeNative('0x67659a8f248e0141', p0, p1);
};

/**
   * _0x6852288340B43239
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x6852288340B43239 = function (p0, p1) {
  return Citizen.invokeNative('0x6852288340b43239', p0, p1, _r);
};

/**
   * _0x694FFA4308060CD1
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x694FFA4308060CD1 = function (p0, p1) {
  return Citizen.invokeNative('0x694ffa4308060cd1', p0, p1);
};

/**
   * _0x6C54E69516CC56BD
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x6C54E69516CC56BD = function (p0) {
  return Citizen.invokeNative('0x6c54e69516cc56bd', p0, _r);
};

/**
   * _EAGLE_EYE_ADD_PARTICLE_EFFECT_TO_ENTITY
   * Add a yellow particle to the entity.
   * entity: entity to apply yellow particle
   * entity2: same entity as entit
   * p2: always 
   * p3: always 0
   *
   * @param {number} entity1
   * @param {number} entity2
   * @param {number} p2
   * @param {number} p3
   * @return {void}
   */
global.EagleEyeAddParticleEffectToEntity = function (entity1, entity2, p2, p3) {
  return Citizen.invokeNative('0x6ecfc621a168424c', entity1, entity2, p2, p3);
};

/**
   * _0x6EDB5D08CB03E763
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x6EDB5D08CB03E763 = function (p0, p1) {
  return Citizen.invokeNative('0x6edb5d08cb03e763', p0, p1);
};

/**
   * _HAS_PLAYER_DAMAGED_ANY_PED_RECENTLY
   * this native checks if the player has damaged or killed any ped human/animal recently within the duration passed, either by shooting or even using melee
   * duration is in miliseconds
   *
   * @param {number} player
   * @param {number} duration
   * @return {boolean}
   */
global.HasPlayerDamagedAnyPedRecently = function (player, duration) {
  return Citizen.invokeNative('0x72ad59f7b7fb6e24', player, duration, _r);
};

/**
   * _0x73EB2EF2E92D23BF
   *
  
   * @return {boolean}
   */
global.N_0x73EB2EF2E92D23BF = function () {
  return Citizen.invokeNative('0x73eb2ef2e92d23bf', _r);
};

/**
   * _0x747257807B8721CE
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x747257807B8721CE = function (p0, p1) {
  return Citizen.invokeNative('0x747257807b8721ce', p0, p1, _r);
};

/**
   * _0x76F7E1BCD623A429
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x76F7E1BCD623A429 = function (p0) {
  return Citizen.invokeNative('0x76f7e1bcd623a429', p0);
};

/**
   * _0x77B0B6D17A3AC9AA
   * nullsub, doesn't do anything
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x77B0B6D17A3AC9AA = function (p0, p1) {
  return Citizen.invokeNative('0x77b0b6d17a3ac9aa', p0, p1);
};

/**
   * _0x77E83C315A3B31CA
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x77E83C315A3B31CA = function (p0) {
  return Citizen.invokeNative('0x77e83c315a3b31ca', p0);
};

/**
   * _0x7AE93C45EC14A166
   * Only used in script function PROCESS_PED_INTERRUPT_DIALOGUE
   * _GET_PLAYER_*
   *
   * @param {number} player
   * @return {[boolean, Ped]}
   */
global.N_0x7AE93C45EC14A166 = function (player) {
  return Citizen.invokeNative('0x7ae93c45ec14a166', player, _i, _r);
};

/**
   * _0x818241B3EDA84191
   * _SET_PLAYER_DAMAGE_* - _SET_PLAYER_DEFENSE_*
   *
   * @param {number} player
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x818241B3EDA84191 = function (player, p1) {
  return Citizen.invokeNative('0x818241b3eda84191', player, p1);
};

/**
   * _0x83C989D5B5B5B466
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x83C989D5B5B5B466 = function (p0, p1) {
  return Citizen.invokeNative('0x83c989d5b5b5b466', p0, p1);
};

/**
   * _0x84481018E668E1B8
   *
   * @param {number} player
   * @param {number} ped
   * @param {any} p2
   * @return {void}
   */
global.N_0x84481018E668E1B8 = function (player, ped, p2) {
  return Citizen.invokeNative('0x84481018e668e1b8', player, ped, p2);
};

/**
   * _0x8591EE69CC3ED257
   * SET_PLAYER_S/T*
   *
   * @param {number} player
   * @param {boolean} toggle
   * @return {void}
   */
global.N_0x8591EE69CC3ED257 = function (player, toggle) {
  return Citizen.invokeNative('0x8591ee69cc3ed257', player, toggle);
};

/**
   * _0x8702D9150D9FBB3D
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x8702D9150D9FBB3D = function (p0, p1) {
  return Citizen.invokeNative('0x8702d9150d9fbb3d', p0, p1, _r);
};

/**
   * _0x8F44EBB3BA8F6D44
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x8F44EBB3BA8F6D44 = function (p0, p1) {
  return Citizen.invokeNative('0x8f44ebb3ba8f6d44', p0, p1);
};

/**
   * _0x9044835BE9D9DBFE
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x9044835BE9D9DBFE = function (p0, p1) {
  return Citizen.invokeNative('0x9044835be9d9dbfe', p0, p1);
};

/**
   * _0x9073EC5456651A90
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x9073EC5456651A90 = function (p0, p1) {
  return Citizen.invokeNative('0x9073ec5456651a90', p0, p1);
};

/**
   * _0x908D4B72854C8F62
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x908D4B72854C8F62 = function (p0) {
  return Citizen.invokeNative('0x908d4b72854c8f62', p0);
};

/**
   * _0x927861B2C08DBEA5
   * _GET_A* - _GET_C*
   *
   * @param {number} player
   * @return {boolean}
   */
global.N_0x927861B2C08DBEA5 = function (player) {
  return Citizen.invokeNative('0x927861b2c08dbea5', player, _r);
};

/**
   * _0x929DDD5538F3DF1F
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x929DDD5538F3DF1F = function (p0, p1) {
  return Citizen.invokeNative('0x929ddd5538f3df1f', p0, p1);
};

/**
   * _0x93624B36E8851B42
   *
   * @param {number} player
   * @return {void}
   */
global.N_0x93624B36E8851B42 = function (player) {
  return Citizen.invokeNative('0x93624b36e8851b42', player);
};

/**
   * _0x9422743A5BA50E10
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x9422743A5BA50E10 = function (p0) {
  return Citizen.invokeNative('0x9422743a5ba50e10', p0, _r);
};

/**
   * _0x9461A8FAB0378E5B
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x9461A8FAB0378E5B = function (p0, p1) {
  return Citizen.invokeNative('0x9461a8fab0378e5b', p0, p1);
};

/**
   * _SET_PLAYER_SIT_PROMPT_TEXT
   * Sets the sit prompt for a specific player using a predefined text entry. use game strings like PLAYER_SIT or use custom with
   * AddTextEntry("sit_custom", "Take a seat")
   * this native must be invoked
   * https://imgur.com/gallery/0x988c9045531b9fce-9bTHgkv
   *
   * @param {number} playerId
   * @param {string | number} label
   * @return {void}
   */
global.SetPlayerSitPromptText = function (playerId, label) {
  return Citizen.invokeNative('0x988c9045531b9fce', playerId, label);
};

/**
   * _0x9AFCF9FE1884BF62
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x9AFCF9FE1884BF62 = function (p0, p1) {
  return Citizen.invokeNative('0x9afcf9fe1884bf62', p0, p1);
};

/**
   * _0x9FC5A003FB76EDBD
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x9FC5A003FB76EDBD = function (p0, p1) {
  return Citizen.invokeNative('0x9fc5a003fb76edbd', p0, p1);
};

/**
   * _SET_PLAYER_HAT_ACCESS
   * Sets the player's ability to wear hats based on the specified flag. The flag value determines whether the player can wear all hats or only the ones they own.
   * If the flag is set to 15 and `allow` is true, the player can wear all available hats. However, if you want to restrict the player to wearing only their owned hats (flag 1), you **must first** disable flag 15 by setting it to false, and then set flag 1 to true.
   *
   * @param {number} player
   * @param {number} flag
   * @param {boolean} allow
   * @return {void}
   */
global.SetPlayerHatAccess = function (player, flag, allow) {
  return Citizen.invokeNative('0xa0c683284df027c7', player, flag, allow);
};

/**
   * _0xA28056CD1B04B250
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @return {void}
   */
global.N_0xA28056CD1B04B250 = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
  return Citizen.invokeNative('0xa28056cd1b04b250', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
};

/**
   * _0xA342495F93B7B838
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xA342495F93B7B838 = function (p0, p1) {
  return Citizen.invokeNative('0xa342495f93b7b838', p0, p1);
};

/**
   * _0xA54000D4BFD90BDE
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xA54000D4BFD90BDE = function (p0) {
  return Citizen.invokeNative('0xa54000d4bfd90bde', p0, _r);
};

/**
   * _EAGLE_EYE_ARE_ALL_TRAILS_HIDDEN
   * Retrieves whether all trails are currently hidden during Eagle Eye mode for the specified player.
   *
   * @param {number} player
   * @return {boolean}
   */
global.EagleEyeAreAllTrailsHidden = function (player) {
  return Citizen.invokeNative('0xa62bbaae67a05bb0', player, _r);
};

/**
   * _0xAAED694CE814817F
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xAAED694CE814817F = function (p0) {
  return Citizen.invokeNative('0xaaed694ce814817f', p0, _r);
};

/**
   * _SET_PLAYER_CAN_PICKUP_HAT
   * Enables or disables the Pick Up prompt for a hat on the ground for the specified player. When set to true, the player will see a prompt to pick up the hat if they are near it.
   *
   * @param {number} player
   * @param {boolean} canPickup
   * @return {void}
   */
global.SetPlayerCanPickupHat = function (player, canPickup) {
  return Citizen.invokeNative('0xaca45ddcef6071c4', player, canPickup);
};

/**
   * _0xB15CD2F9932C9AB5
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xB15CD2F9932C9AB5 = function (p0) {
  return Citizen.invokeNative('0xb15cd2f9932c9ab5', p0, _r);
};

/**
   * _0xB331D8A73F9D2BDF
   * _IS_PLAYER_I* - _IS_PLAYER_P*
   *
   * @param {number} player
   * @param {DataView} p1
   * @return {boolean}
   */
global.N_0xB331D8A73F9D2BDF = function (player, p1) {
  return Citizen.invokeNative('0xb331d8a73f9d2bdf', player, p1, _r);
};

/**
   * _0xBA5CA1FEB5DE0DF6
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.N_0xBA5CA1FEB5DE0DF6 = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xba5ca1feb5de0df6', p0, p1, p2, p3, p4, p5);
};

/**
   * _0xBB6EA5D59E926095
   * NPEW__ENUM__EMOTE_CATEGORY_INVALID = -1
   * NPEW__ENUM__EMOTE_CATEGORY_ACTIONS
   * NPEW__ENUM__EMOTE_CATEGORY_ANTAGONIZE
   * NPEW__ENUM__EMOTE_CATEGORY_REACTIONS
   * NPEW__ENUM__EMOTE_CATEGORY_GREET
   * NPEW__ENUM__NUM_EMOTE_CATEGORIES
   * NPEW__ENUM__NUM_DISPLAY_TEXTURES
   *
   * @param {number} category
   * @param {number} emote
   * @return {void}
   */
global.N_0xBB6EA5D59E926095 = function (category, emote) {
  return Citizen.invokeNative('0xbb6ea5d59e926095', category, _ch(emote));
};

/**
   * _SPECIAL_ABILITY_SET_ACTIVATE
   * Activates the special ability for the specified player.
   *
   * @param {number} player
   * @return {void}
   */
global.SpecialAbilitySetActivate = function (player) {
  return Citizen.invokeNative('0xbba140062b15a8ac', player);
};

/**
   * _EAGLE_EYE_SET_REGISTERED_ENTITY_GLOW
   * Enable/disable a color on the entity in eagle eye mode.
   *
   * @param {number} entity
   * @param {boolean} enable
   * @return {void}
   */
global.EagleEyeSetRegisteredEntityGlow = function (entity, enable) {
  return Citizen.invokeNative('0xbc02b3d151d3859f', entity, enable);
};

/**
   * _0xBD96185264DDAAEA
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xBD96185264DDAAEA = function (p0, p1) {
  return Citizen.invokeNative('0xbd96185264ddaaea', p0, p1);
};

/**
   * _0xBEA3A6E5F5F79A6F
   * _GET_PLAYER_I*
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xBEA3A6E5F5F79A6F = function (p0, p1) {
  return Citizen.invokeNative('0xbea3a6e5f5f79a6f', p0, p1, _r);
};

/**
   * _0xBED386157F65942C
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xBED386157F65942C = function (p0, p1) {
  return Citizen.invokeNative('0xbed386157f65942c', p0, p1);
};

/**
   * _0xBEFED69CE8317F91
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xBEFED69CE8317F91 = function (p0) {
  return Citizen.invokeNative('0xbefed69ce8317f91', p0, _r);
};

/**
   * _0xC177C827CEFC0AA4
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xC177C827CEFC0AA4 = function (p0, p1) {
  return Citizen.invokeNative('0xc177c827cefc0aa4', p0, p1);
};

/**
   * _0xC4873B053054C04B
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.N_0xC4873B053054C04B = function (p0, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0xc4873b053054c04b', p0, p1, p2, p3, p4, p5, p6, p7);
};

/**
   * _0xC58CE6824E604DEC
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xC58CE6824E604DEC = function (p0) {
  return Citizen.invokeNative('0xc58ce6824e604dec', p0);
};

/**
   * _DISABLE_PLAYER_INTERACTIVE_FOCUS_PRESET
   * Disables the previously set interactive focus mode preset for a given player. see `_SET_PLAYER_INTERACTIVE_FOCUS_PRESET - 0x3C1B1807C7A415D6`
   *
   * @param {number} player
   * @param {string | number} name
   * @return {void}
   */
global.DisablePlayerInteractiveFocusPreset = function (player, name) {
  return Citizen.invokeNative('0xc67a4910425f11f1', player, name);
};

/**
   * _0xC71D07C96946E263
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xC71D07C96946E263 = function (p0, p1) {
  return Citizen.invokeNative('0xc71d07c96946e263', p0, p1);
};

/**
   * _0xC74EB3F2EC169F6B
   * Hardcoded to return zero/false.
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xC74EB3F2EC169F6B = function (p0) {
  return Citizen.invokeNative('0xc74eb3f2ec169f6b', p0, _r);
};

/**
   * _0xC900A465364A85D6
   *
   * @param {number} player
   * @return {void}
   */
global.N_0xC900A465364A85D6 = function (player) {
  return Citizen.invokeNative('0xc900a465364a85d6', player);
};

/**
   * _0xC93A9A45430D484E
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xC93A9A45430D484E = function (p0) {
  return Citizen.invokeNative('0xc93a9a45430d484e', p0, _r);
};

/**
   * _0xCA59808E51FD67C4
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xCA59808E51FD67C4 = function (p0, p1) {
  return Citizen.invokeNative('0xca59808e51fd67c4', p0, p1);
};

/**
   * _0xCB0B9506BC91E441
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xCB0B9506BC91E441 = function (p0, p1) {
  return Citizen.invokeNative('0xcb0b9506bc91e441', p0, p1);
};

/**
   * _0xCB61A63AA53D7D22
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xCB61A63AA53D7D22 = function (p0, p1) {
  return Citizen.invokeNative('0xcb61a63aa53d7d22', p0, p1);
};

/**
   * _SET_PLAYER_COOPERATE_PROMPT_THIS_FRAME
   * Activates the Surrender prompt for the specified player in the current frame.
   *
   * @param {number} player
   * @param {number} targetPed
   * @param {number} promptOrder
   * @param {boolean} p3
   * @return {void}
   */
global.SetPlayerCooperatePromptThisFrame = function (player, targetPed, promptOrder, p3) {
  return Citizen.invokeNative('0xcbb54cc7ffffab86', player, targetPed, promptOrder, p3);
};

/**
   * _0xCD7CA3013FD12749
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xCD7CA3013FD12749 = function (p0, p1) {
  return Citizen.invokeNative('0xcd7ca3013fd12749', p0, p1);
};

/**
   * _0xCDDD4B74660E2335
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xCDDD4B74660E2335 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xcddd4b74660e2335', p0, p1, p2);
};

/**
   * _0xCEDC16930526F728
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xCEDC16930526F728 = function (p0) {
  return Citizen.invokeNative('0xcedc16930526f728', p0);
};

/**
   * _0xCFB2EED4FCB7BD77
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xCFB2EED4FCB7BD77 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xcfb2eed4fcb7bd77', p0, p1, p2);
};

/**
   * _SET_PLAYER_AIM_WEAPON
   * Sets the weapon that the specified player will aim with. The weapon must already be assigned to the PED. This also determines the weapon order, specifying which weapon the player will automatically switch to when the current weapon runs out of ammo.
   *
   * @param {number} player
   * @param {number} weapon
   * @param {number} attachSlotId
   * @return {void}
   */
global.SetPlayerAimWeapon = function (player, weapon, attachSlotId) {
  return Citizen.invokeNative('0xcffc3eccd7a5cceb', player, _ch(weapon), attachSlotId);
};

/**
   * _SET_PLAYER_PICKUP_PROMPT_VISIBLE
   * Shows or hides all Pick Up prompts for the specified player, including the prompt for picking up hats from the ground. When set to true, the player will see Pick Up prompts for all nearby items. If set to false, all Pick Up prompts will be hidden.
   *
   * @param {number} player
   * @param {boolean} enable
   * @return {void}
   */
global.SetPlayerPickupPromptVisible = function (player, enable) {
  return Citizen.invokeNative('0xd1a70c1e8d1031fe', player, enable);
};

/**
   * _0xD1F6B912785BFD35
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xD1F6B912785BFD35 = function (p0) {
  return Citizen.invokeNative('0xd1f6b912785bfd35', p0, _r);
};

/**
   * _0xD288E02E364972D2
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xD288E02E364972D2 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xd288e02e364972d2', p0, p1, p2);
};

/**
   * _ADD_AMBIENT_PLAYER_INTERACTIVE_FOCUS_PRESET_AT_COORDS
   * Adds an interactive focus mode preset between a player and a specific set of coordinates with a target entity.
   * To access all available presets, refer to the file located at:update_1.rpf.common.data.interactive_focus_mode_presets.meta
   * 
   *
   * @param {number} player
   * @param {string | number} preset
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} targetEntity
   * @param {string | number} name
   * @return {Vector3}
   */
global.AddAmbientPlayerInteractiveFocusPresetAtCoords = function (player, preset, x, y, z, targetEntity, name) {
  return Citizen.invokeNative('0xd48227263e3d06ae', player, _v, preset, _fv(x), _fv(y), _fv(z), targetEntity, name);
};

/**
   * _0xDA9D7BE231FE865F
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0xDA9D7BE231FE865F = function (p0, p1, p2) {
  return Citizen.invokeNative('0xda9d7be231fe865f', p0, p1, p2, _r);
};

/**
   * _0xDAB6A2FC56B7DE65
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xDAB6A2FC56B7DE65 = function (p0) {
  return Citizen.invokeNative('0xdab6a2fc56b7de65', p0, _r);
};

/**
   * _EAGLE_EYE_REMOVE_PARTICLE_EFFECT_FROM_ENTITY
   * Remove yellow particle from the entity when it was set using `0x6ECFC621A168424C` 
   * entity: entity to remove yellow particles
   * entity2: same entity as entity
   * p2: always 0
   *
   * @param {number} entity1
   * @param {number} entity2
   * @param {number} p2
   * @return {void}
   */
global.EagleEyeRemoveParticleEffectFromEntity = function (entity1, entity2, p2) {
  return Citizen.invokeNative('0xdc5e09d012d759c4', entity1, entity2, p2);
};

/**
   * _0xDD33A82352C4652F
   *
   * @param {number} player
   * @param {number} ped
   * @param {number} p2
   * @return {void}
   */
global.N_0xDD33A82352C4652F = function (player, ped, p2) {
  return Citizen.invokeNative('0xdd33a82352c4652f', player, ped, p2);
};

/**
   * _IS_SPECIAL_ABILITY_ENABLED
   * Checks if the player's Deadeye ability is enabled.
   *
   * @param {number} player
   * @return {boolean}
   */
global.IsSpecialAbilityEnabled = function (player) {
  return Citizen.invokeNative('0xde6c85975f9d4894', player, _r);
};

/**
   * _0xE1D356F5A66D0FFA
   *
   * @param {number} emote
   * @return {boolean}
   */
global.N_0xE1D356F5A66D0FFA = function (emote) {
  return Citizen.invokeNative('0xe1d356f5a66d0ffa', _ch(emote), _r);
};

/**
   * _0xE50A67C33514A390
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xE50A67C33514A390 = function (p0, p1) {
  return Citizen.invokeNative('0xe50a67c33514a390', p0, p1, _r);
};

/**
   * _EAGLE_EYE_CLEAR_REGISTERED_TRAILS
   * Clears all Eagle Eye trails that were registered for entities associated with the specified player.
   *
   * @param {number} player
   * @return {void}
   */
global.EagleEyeClearRegisteredTrails = function (player) {
  return Citizen.invokeNative('0xe5d3eb37abc1eb03', player);
};

/**
   * _IS_PLAYER_MOUNT_ON_ROAD
   * returns true if the player is on a road while riding a horse but at a certain speed, if you go off road then it returns false or if you go too slow like walking state it also returns false
   *
   * @param {number} player
   * @return {boolean}
   */
global.IsPlayerMountOnRoad = function (player) {
  return Citizen.invokeNative('0xe631eaf35828fa67', player, _r);
};

/**
   * _0xE7F8707269544B29
   * _IS_PLAYER_A* - _IS_PLAYER_BE*
   *
   * @param {number} player
   * @param {number} ped
   * @return {boolean}
   */
global.N_0xE7F8707269544B29 = function (player, ped) {
  return Citizen.invokeNative('0xe7f8707269544b29', player, ped, _r);
};

/**
   * _RESET_DEADEYE_AURA_EFFECT
   * Resets any aura effects applied to entities for a specific player in Deadeye mode, returning all aura-related visuals to their default state. This function is primarily used to remove any highlighting or aura effects set by `_SET_DEADEYE_ENTITY_AURA_WITH_FLAG - 0x2B12B6FC8B8772AB` and `_SET_DEADEYE_ENTITY_AURA_INTENSITY_WITH_FLAG - 0x131E294EF60160DF`
   *
   * @param {number} player
   * @return {void}
   */
global.ResetDeadeyeAuraEffect = function (player) {
  return Citizen.invokeNative('0xe910932f4b30be23', player);
};

/**
   * _GET_DEADEYE_ABILITY_DEPLETION_DELAY
   * Returns the depletion delay value for the Deadeye ability that was previously set using `SetDeadeyeAbilityDepletionDelay - 0x870634493CB4372C`
   *
   * @param {number} player
   * @return {number}
   */
global.GetDeadeyeAbilityDepletionDelay = function (player) {
  return Citizen.invokeNative('0xe92261bd28c0878f', player, _r, _rf);
};

/**
   * _0xE956C2340A76272E
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xE956C2340A76272E = function (p0) {
  return Citizen.invokeNative('0xe956c2340a76272e', p0, _r);
};

/**
   * _0xEACEBAAE0A33FB3F
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xEACEBAAE0A33FB3F = function (p0) {
  return Citizen.invokeNative('0xeacebaae0a33fb3f', p0);
};

/**
   * _0xEBB6E27AC2FF32DA
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0xEBB6E27AC2FF32DA = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xebb6e27ac2ff32da', p0, p1, p2, p3, p4);
};

/**
   * _0xEBFF94328FF7A18A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xEBFF94328FF7A18A = function (p0, p1) {
  return Citizen.invokeNative('0xebff94328ff7a18a', p0, p1);
};

/**
   * _0xF21C7A3F3FFBA629
   * _CLEAR_FACIAL_* - _CLEAR_PED_BLOOD*
   *
   * @param {number} player
   * @return {void}
   */
global.N_0xF21C7A3F3FFBA629 = function (player) {
  return Citizen.invokeNative('0xf21c7a3f3ffba629', player);
};

/**
   * _0xF4CB347D7B5EB0FD
   *
  
   * @return {any}
   */
global.N_0xF4CB347D7B5EB0FD = function () {
  return Citizen.invokeNative('0xf4cb347d7b5eb0fd', _r);
};

/**
   * _0xF993373285053D77
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xF993373285053D77 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xf993373285053d77', p0, p1, p2);
};

/**
   * _0xFA437FA0738C370C
   * Params: p1, p2, p3, p4 = 1.f, 0, 0, 0 in R* Scripts
   * _SPECIAL_ABILITY*
   *
   * @param {number} player
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @return {void}
   */
global.N_0xFA437FA0738C370C = function (player, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xfa437fa0738c370c', player, _fv(p1), p2, p3, p4);
};

/**
   * _0xFA7DAAE3959E6C7B
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xFA7DAAE3959E6C7B = function (p0, p1) {
  return Citizen.invokeNative('0xfa7daae3959e6c7b', p0, p1);
};

/**
   * _ADD_PLAYER_AS_FOLLOW_TARGET
   * Used in script function: NET_AUTO_FOLLOW_UPDATE_LEADER_VALUES
   * followMode:
   * HORSEFOLLOWMODE_AUTO = 0,
   * HORSEFOLLOWMODE_SIDE_ONLY,
   * HORSEFOLLOWMODE_BEHIND_ONLY,
   * HORSEFOLLOWMODE_BEHIND_AND_SIDE,
   * HORSEFOLLOWMODE_BEHIND_CLOSE
   * followPriority:
   * HORSEFOLLOWPRIORITY_STEER_ASSIST = 0,
   * HORSEFOLLOWPRIORITY_AMBIENT,
   * HORSEFOLLOWPRIORITY_NORMAL,
   * HORSEFOLLOWPRIORITY_HIGH
   *
   * @param {number} player
   * @param {number} ped
   * @param {number} p2
   * @param {number} p3
   * @param {number} followMode
   * @param {number} followPriority
   * @param {boolean} p6
   * @return {void}
   */
global.AddPlayerAsFollowTarget = function (player, ped, p2, p3, followMode, followPriority, p6) {
  return Citizen.invokeNative('0xac22aa6df4d1c1de', player, ped, _fv(p2), _fv(p3), followMode, followPriority, p6);
};

/**
   * _CLEAR_BOUNTY_TARGET
   *
   * @param {number} player
   * @return {void}
   */
global.ClearBountyTarget = function (player) {
  return Citizen.invokeNative('0x8f2a81c09da9124a', player);
};

/**
   * _EAGLE_EYE_DISABLE_TRACKING_TRAIL
   *
   * @param {number} entity
   * @param {string | number} trail
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.EagleEyeDisableTrackingTrail = function (entity, trail, p2, p3) {
  return Citizen.invokeNative('0x40ab73092c95b5f5', entity, trail, p2, p3);
};

/**
   * _EAGLE_EYE_SET_COLOR
   * false: default eagleeye color
   * true: green eagleeye color
   *
   * @param {number} player
   * @param {boolean} p1
   * @param {DataView} p2
   * @return {void}
   */
global.EagleEyeSetColor = function (player, p1, p2) {
  return Citizen.invokeNative('0x2c41d93f550d5e37', player, p1, p2);
};

/**
   * _EAGLE_EYE_SET_CUSTOM_DISTANCE
   *
   * @param {number} entity
   * @param {number} distance
   * @return {void}
   */
global.EagleEyeSetCustomDistance = function (entity, distance) {
  return Citizen.invokeNative('0x907b16b3834c69e2', entity, _fv(distance));
};

/**
   * _EAGLE_EYE_SET_DRAIN_RATE_MODIFIER
   *
   * @param {number} player
   * @param {number} modifier
   * @return {void}
   */
global.EagleEyeSetDrainRateModifier = function (player, modifier) {
  return Citizen.invokeNative('0xe0d6c2a146a5c993', player, _fv(modifier));
};

/**
   * _EAGLE_EYE_SET_FOCUS_ON_ASSOCIATED_CLUE_TRAIL
   *
   * @param {number} player
   * @param {number} linkedWaypointPed
   * @return {void}
   */
global.EagleEyeSetFocusOnAssociatedClueTrail = function (player, linkedWaypointPed) {
  return Citizen.invokeNative('0x2af423d6ecb2c485', player, linkedWaypointPed);
};

/**
   * _EAGLEEYE_SET_SPRINT_BEHAVIOR
   * Sets the behavior of sprinting while the Eagleeye feature is active, determining whether sprinting cancels the effect based on the specified parameter.
   *  old name was _EAGLE_EYE_SET_PLUS_FLAG_DISABLED this native can still be used as its declared.
   *
   * @param {number} player
   * @param {boolean} disabled
   * @return {void}
   */
global.EagleeyeSetSprintBehavior = function (player, disabled) {
  return Citizen.invokeNative('0xce285a4413b00b7f', player, disabled);
};

/**
   * _EAGLE_EYE_SET_TRACKING_UPGRADE
   *
   * @param {number} player
   * @param {number} p1
   * @return {void}
   */
global.EagleEyeSetTrackingUpgrade = function (player, p1) {
  return Citizen.invokeNative('0xdfc85c5199045026', player, _fv(p1));
};

/**
   * _EAGLE_EYE_SET_TRACKING_UPGRADE_2
   *
   * @param {number} player
   * @param {number} p1
   * @return {void}
   */
global.EagleEyeSetTrackingUpgrade_2 = function (player, p1) {
  return Citizen.invokeNative('0x6fa957d1b55941c1', player, _fv(p1));
};

/**
   * _ENABLE_CUSTOM_DEADEYE_ABILITY
   *
   * @param {number} player
   * @param {boolean} enable
   * @return {void}
   */
global.EnableCustomDeadeyeAbility = function (player, enable) {
  return Citizen.invokeNative('0x95ee1dee1dcd9070', player, enable);
};

/**
   * _ENABLE_EAGLEEYE
   * (Un)lock Eagle Eye functionality
   *
   * @param {number} player
   * @param {boolean} enable
   * @return {void}
   */
global.EnableEagleeye = function (player, enable) {
  return Citizen.invokeNative('0xa63fcad3a6fec6d2', player, enable);
};

/**
   * _FORCE_REST_SCENARIO
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.ForceRestScenario = function (toggle) {
  return Citizen.invokeNative('0xe5a3dd2ff84e1a4b', toggle);
};

/**
   * _FORMAT_PLAYER_NAME_STRING
   *
   * @param {string | number} string
   * @return {string | number}
   */
global.FormatPlayerNameString = function (string) {
  return Citizen.invokeNative('0x5b6193813e03e4e9', string, _r, _s);
};

/**
   * _GET_ACTIVE_HORSE_FOR_PLAYER
   *
   * @param {number} player
   * @return {number}
   */
global.GetActiveHorseForPlayer = function (player) {
  return Citizen.invokeNative('0x46fa0ae18f4c7fa9', player, _r, _ri);
};

/**
   * _GET_AI_PLAYER_DEFENSE_MODIFIER_AGAINST_AI
   *
   * @param {number} player
   * @return {number}
   */
global.GetAiPlayerDefenseModifierAgainstAi = function (player) {
  return Citizen.invokeNative('0x2e78d822208e740a', player, _r, _rf);
};

/**
   * _GET_CONSTRUCTED_DISCOVERED_CHARACTER_NAME
   * p0: mostly Ped Hashes
   *
   * @param {number} p0
   * @param {boolean} model
   * @param {boolean} outfit
   * @return {number}
   */
global.GetConstructedDiscoveredCharacterName = function (p0, model, outfit) {
  return Citizen.invokeNative('0x8e84119a23c16623', _ch(p0), model, outfit, _r, _ri);
};

/**
   * _GET_DEADEYE_ABILITY_LEVEL
   *
   * @param {number} player
   * @return {number}
   */
global.GetDeadeyeAbilityLevel = function (player) {
  return Citizen.invokeNative('0xcce7c695c164c35f', player, _r, _ri);
};

/**
   * _GET_HAS_PLAYER_DISCOVERED_CHARACTER_NAME_SP
   *
   * @param {number} player
   * @param {number} p1
   * @param {number} discoveryHash
   * @return {boolean}
   */
global.GetHasPlayerDiscoveredCharacterNameSp = function (player, p1, discoveryHash) {
  return Citizen.invokeNative('0x0772f87d7b07719a', player, p1, _ch(discoveryHash), _r);
};

/**
   * _GET_IS_DEADEYE_TAGGING_ENABLED
   *
   * @param {number} player
   * @return {boolean}
   */
global.GetIsDeadeyeTaggingEnabled = function (player) {
  return Citizen.invokeNative('0x32348719dced2969', player, _r);
};

/**
   * _GET_NUM_MARKED_DEADEYE_TARGETS
   *
   * @param {number} player
   * @return {number}
   */
global.GetNumMarkedDeadeyeTargets = function (player) {
  return Citizen.invokeNative('0xccd9b77f70d31c9d', player, _r, _ri);
};

/**
   * _GET_PLAYER_CACHED_DEAD_EYE_AMOUNT
   *
   * @param {number} player
   * @return {number}
   */
global.GetPlayerCachedDeadEyeAmount = function (player) {
  return Citizen.invokeNative('0xdf66a37936d5f3d9', player, _r, _rf);
};

/**
   * _GET_PLAYER_DEAD_EYE
   *
   * @param {number} player
   * @return {number}
   */
global.GetPlayerDeadEye = function (player) {
  return Citizen.invokeNative('0xa81d24ae0af99a5e', player, _r, _rf);
};

/**
   * _GET_PLAYER_DEAD_EYE_METER_LEVEL
   *
   * @param {number} player
   * @param {boolean} p1
   * @return {number}
   */
global.GetPlayerDeadEyeMeterLevel = function (player, p1) {
  return Citizen.invokeNative('0x3a6ae4eee30370fe', player, p1, _r, _rf);
};

/**
   * _GET_PLAYER_HEALTH
   *
   * @param {number} player
   * @return {number}
   */
global.GetPlayerHealth = function (player) {
  return Citizen.invokeNative('0x0317c947d062854e', player, _r, _rf);
};

/**
   * _GET_PLAYER_HEALTH_RECHARGE_MULTIPLIER
   *
   * @param {number} player
   * @return {number}
   */
global.GetPlayerHealthRechargeMultiplier = function (player) {
  return Citizen.invokeNative('0x22cd23bb0c45e0cd', player, _r, _rf);
};

/**
   * _GET_PLAYER_HUNTING_WAGON
   *
   * @param {number} player
   * @return {number}
   */
global.GetPlayerHuntingWagon = function (player) {
  return Citizen.invokeNative('0x5ca6bbd4a7d8145e', player, _r, _ri);
};

/**
   * _GET_PLAYER_MAX_DEAD_EYE
   *
   * @param {number} player
   * @param {any} p1
   * @return {number}
   */
global.GetPlayerMaxDeadEye = function (player, p1) {
  return Citizen.invokeNative('0x592f58bc4d2a2cf3', player, p1, _r, _rf);
};

/**
   * _GET_PLAYER_MOOD
   * See _SET_PLAYER_MOOD
   *
   * @param {number} player
   * @return {number}
   */
global.GetPlayerMood = function (player) {
  return Citizen.invokeNative('0x054473164c012699', player, _r, _ri);
};

/**
   * _GET_PLAYER_OWNER_OF_MOUNT
   *
   * @param {number} mount
   * @return {number}
   */
global.GetPlayerOwnerOfMount = function (mount) {
  return Citizen.invokeNative('0xad03b03737ce6810', mount, _r, _ri);
};

/**
   * _GET_PLAYER_OWNER_OF_VEHICLE
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetPlayerOwnerOfVehicle = function (vehicle) {
  return Citizen.invokeNative('0x7c803bdc8343228d', vehicle, _r, _ri);
};

/**
   * _GET_PLAYER_PED_2
   *
   * @param {number} player
   * @return {number}
   */
global.GetPlayerPed_2 = function (player) {
  return Citizen.invokeNative('0x5ebe38a20bc51c27', player, _r, _ri);
};

/**
   * _GET_PLAYER_REQUIRED_DEAD_EYE_AMOUNT
   * If player has less Dead Eye than required, Dead Eye cant be triggered.
   *
   * @param {number} player
   * @return {number}
   */
global.GetPlayerRequiredDeadEyeAmount = function (player) {
  return Citizen.invokeNative('0x811a748b1be231ba', player, _r, _rf);
};

/**
   * _GET_PLAYER_RESET_FLAG
   * playerResetFlag: See 0x9F9A829C6751F3C7
   *
   * @param {number} player
   * @param {number} playerResetFlag
   * @return {boolean}
   */
global.GetPlayerResetFlag = function (player, playerResetFlag) {
  return Citizen.invokeNative('0xfe691e89c08937b6', player, playerResetFlag, _r);
};

/**
   * _GET_PLAYER_SPECIAL_ABILITY_MULTIPLIER
   *
   * @param {number} player
   * @return {number}
   */
global.GetPlayerSpecialAbilityMultiplier = function (player) {
  return Citizen.invokeNative('0xab3773e7aa1e9dcc', player, _r, _rf);
};

/**
   * _GET_PLAYER_STAMINA
   *
   * @param {number} player
   * @return {number}
   */
global.GetPlayerStamina = function (player) {
  return Citizen.invokeNative('0x0ff421e467373fcf', player, _r, _rf);
};

/**
   * _GET_PLAYER_STAMINA_DEPLETION_MULTIPLIER
   *
   * @param {number} player
   * @return {number}
   */
global.GetPlayerStaminaDepletionMultiplier = function (player) {
  return Citizen.invokeNative('0x68a0389e0718ac8f', player, _r, _rf);
};

/**
   * _GET_PLAYER_STAMINA_RECHARGE_MULTIPLIER
   *
   * @param {number} player
   * @return {number}
   */
global.GetPlayerStaminaRechargeMultiplier = function (player) {
  return Citizen.invokeNative('0x617d3494ad58200f', player, _r, _rf);
};

/**
   * _GET_PLAYER_UI_PROMPT_FOR_PED_IS_ENABLED
   * Returns true if PromptType is enabled for ped (mount)
   * Params: See 0x0751D461F06E41CE
   *
   * @param {number} player
   * @param {number} ped
   * @param {number} promptType
   * @param {number} promptMode
   * @return {boolean}
   */
global.GetPlayerUiPromptForPedIsEnabled = function (player, ped, promptType, promptMode) {
  return Citizen.invokeNative('0xea8f168a76a0b9bc', player, ped, promptType, promptMode, _r);
};

/**
   * _GET_PLAYER_UI_PROMPT_IS_DISABLED
   * Returns false if PromptType is enabled
   * Params: See 0x0751D461F06E41CE
   *
   * @param {number} player
   * @param {number} promptType
   * @param {number} promptMode
   * @return {boolean}
   */
global.GetPlayerUiPromptIsDisabled = function (player, promptType, promptMode) {
  return Citizen.invokeNative('0x6614f9039bd31931', player, promptType, promptMode, _r);
};

/**
   * _GET_PLAYER_WEAPON_DAMAGE
   *
   * @param {number} player
   * @param {number} weaponHash
   * @return {number}
   */
global.GetPlayerWeaponDamage = function (player, weaponHash) {
  return Citizen.invokeNative('0xfe0304050261442c', player, _ch(weaponHash), _r, _rf);
};

/**
   * _GET_SADDLE_HORSE_FOR_PLAYER
   *
   * @param {number} player
   * @return {number}
   */
global.GetSaddleHorseForPlayer = function (player) {
  return Citizen.invokeNative('0xb48050d326e9a2f3', player, _r, _ri);
};

/**
   * _GET_TEMP_PLAYER_HORSE
   *
   * @param {number} player
   * @return {number}
   */
global.GetTempPlayerHorse = function (player) {
  return Citizen.invokeNative('0xd3f7445cea2e5035', player, _r, _ri);
};

/**
   * _GET_VEHICLE_OWNED_BY_PLAYER
   *
   * @param {number} player
   * @return {number}
   */
global.GetVehicleOwnedByPlayer = function (player) {
  return Citizen.invokeNative('0xb9050a97594c8832', player, _r, _ri);
};

/**
   * _GET_WANTED_LEVEL_MULTIPLIER
   * Returns -1.0f if no multiplier has been set
   *
  
   * @return {number}
   */
global.GetWantedLevelMultiplier = function () {
  return Citizen.invokeNative('0xa82964b9d8d6a983', _r, _rf);
};

/**
   * _IS_DEADEYE_ABILITY_LOCKED
   *
   * @param {number} player
   * @param {number} abilityType
   * @return {boolean}
   */
global.IsDeadeyeAbilityLocked = function (player, abilityType) {
  return Citizen.invokeNative('0x8a0643b0b4ca276b', player, abilityType, _r);
};

/**
   * _IS_EAGLE_EYE_REGISTERED_FOR_ENTITY
   *
   * @param {number} player
   * @param {number} entity
   * @return {boolean}
   */
global.IsEagleEyeRegisteredForEntity = function (player, entity) {
  return Citizen.invokeNative('0x0e6846476906c9dd', player, entity, _r);
};

/**
   * _IS_PLAYER_FOLLOWING_TARGET
   *
   * @param {number} player
   * @param {number} ped
   * @return {boolean}
   */
global.IsPlayerFollowingTarget = function (player, ped) {
  return Citizen.invokeNative('0xe24c64d9aded2ef5', player, ped, _r);
};

/**
   * _IS_PLAYER_FREE_FOCUSING
   * Checks if player is focused on any entity
   *
   * @param {number} player
   * @return {boolean}
   */
global.IsPlayerFreeFocusing = function (player) {
  return Citizen.invokeNative('0x1a51bfe60708e482', player, _r);
};

/**
   * _IS_PLAYER_IN_SCOPE
   *
   * @param {number} player
   * @return {boolean}
   */
global.IsPlayerInScope = function (player) {
  return Citizen.invokeNative('0x04d7f33640662fa2', player, _r);
};

/**
   * _IS_SECONDARY_SPECIAL_ABILITY_ACTIVE
   *
   * @param {number} player
   * @return {boolean}
   */
global.IsSecondarySpecialAbilityActive = function (player) {
  return Citizen.invokeNative('0x45ab66d02b601fa7', player, _r);
};

/**
   * _IS_SECONDARY_SPECIAL_ABILITY_ENABLED
   * Returns true if eagle eye is enabled for the player
   *
   * @param {number} player
   * @return {boolean}
   */
global.IsSecondarySpecialAbilityEnabled = function (player) {
  return Citizen.invokeNative('0xe022cc1b545f1d9f', player, _r);
};

/**
   * _IS_SPECIAL_ABILITY_ACTIVE
   *
   * @param {number} player
   * @return {boolean}
   */
global.IsSpecialAbilityActive = function (player) {
  return Citizen.invokeNative('0xb16223cb7da965f0', player, _r);
};

/**
   * _MODIFY_INFINITE_TRAIL_VISION
   * Toggle handles wether Deadeye and Eagleeye are infinite or not.
   *
   * @param {number} player
   * @param {boolean} toggle
   * @return {void}
   */
global.ModifyInfiniteTrailVision = function (player, toggle) {
  return Citizen.invokeNative('0x28a13bf6b05c3d83', player, toggle);
};

/**
   * _MODIFY_PLAYER_DISCOVERED_CHARACTER_NAME_MP_SET_UNDISCOVERED
   *
   * @param {number} discoveryHash
   * @return {void}
   */
global.ModifyPlayerDiscoveredCharacterNameMpSetUndiscovered = function (discoveryHash) {
  return Citizen.invokeNative('0xfb0e622b401884d3', _ch(discoveryHash));
};

/**
   * _MODIFY_PLAYER_UI_PROMPT
   * Params: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePromptType
   * promptType is mostly 34 (PP_TRACK_ANIMAL), promptMode = 0 (PP_MODE_BLOCK) in R* Scripts
   *
   * @param {number} player
   * @param {number} promptType
   * @param {number} promptMode
   * @param {boolean} disabled
   * @return {void}
   */
global.ModifyPlayerUiPrompt = function (player, promptType, promptMode, disabled) {
  return Citizen.invokeNative('0x0751d461f06e41ce', player, promptType, promptMode, disabled);
};

/**
   * _MODIFY_PLAYER_UI_PROMPT_FOR_PED
   * Params: See 0x0751D461F06E41CE
   *
   * @param {number} player
   * @param {number} ped
   * @param {number} promptType
   * @param {number} promptMode
   * @param {boolean} enabled
   * @return {void}
   */
global.ModifyPlayerUiPromptForPed = function (player, ped, promptType, promptMode, enabled) {
  return Citizen.invokeNative('0xa3db37edf9a74635', player, ped, promptType, promptMode, enabled);
};

/**
   * _NETWORK_HAS_PLAYER_VALID_PED
   * Returns true if the given player has a valid ped.
   *
   * @param {number} player
   * @return {boolean}
   */
global.NetworkHasPlayerValidPed = function (player) {
  return Citizen.invokeNative('0x0760d6f70ebcc05c', player, _r);
};

/**
   * _REGISTER_EAGLE_EYE_FOR_ENTITY
   * Used for setting up eagle eye for entity
   * Params: p2 = re-register or not?
   *
   * @param {number} player
   * @param {number} entity
   * @param {boolean} p2
   * @return {void}
   */
global.RegisterEagleEyeForEntity = function (player, entity, p2) {
  return Citizen.invokeNative('0x543dfe14be720027', player, entity, p2);
};

/**
   * _REGISTER_EAGLE_EYE_TRAILS_FOR_ENTITY
   *
   * @param {number} player
   * @param {number} entity
   * @param {any} p2
   * @return {void}
   */
global.RegisterEagleEyeTrailsForEntity = function (player, entity, p2) {
  return Citizen.invokeNative('0xac67098a1e54abb0', player, entity, p2);
};

/**
   * _REMOVE_PLAYER_AS_FOLLOW_TARGET
   *
   * @param {number} player
   * @param {number} ped
   * @return {void}
   */
global.RemovePlayerAsFollowTarget = function (player, ped) {
  return Citizen.invokeNative('0x0c6b89876262a99d', player, ped);
};

/**
   * _SECONDARY_SPECIAL_ABILITY_SET_ACTIVE
   * Activates EagleEye, called together with 0x28A13BF6B05C3D83
   *
   * @param {number} player
   * @return {void}
   */
global.SecondarySpecialAbilitySetActive = function (player) {
  return Citizen.invokeNative('0x1710bc33cfb83634', player);
};

/**
   * _SECONDARY_SPECIAL_ABILITY_SET_DISABLED
   * Deactivates EagleEye, called together with 0xC0B21F235C02139C
   *
   * @param {number} player
   * @param {boolean} disabled
   * @return {void}
   */
global.SecondarySpecialAbilitySetDisabled = function (player, disabled) {
  return Citizen.invokeNative('0x64ff4bf9af59e139', player, disabled);
};

/**
   * _SET_AI_PLAYER_DEFENSE_MODIFIER_AGAINST_AI
   * Sets Player's Defense against AI modifier
   *
   * @param {number} player
   * @param {number} modifier
   * @return {void}
   */
global.SetAiPlayerDefenseModifierAgainstAi = function (player, modifier) {
  return Citizen.invokeNative('0x914071ff93af2692', player, _fv(modifier));
};

/**
   * _SET_BOUNTY_TARGET
   *
   * @param {number} player
   * @param {number} target
   * @return {void}
   */
global.SetBountyTarget = function (player, target) {
  return Citizen.invokeNative('0x6adf821fbf21920e', player, target);
};

/**
   * _SET_BOW_DRAW_REDUCTION_TIME_IN_DEADEYE
   *
   * @param {number} player
   * @param {number} drawReductionTime
   * @return {void}
   */
global.SetBowDrawReductionTimeInDeadeye = function (player, drawReductionTime) {
  return Citizen.invokeNative('0xbe0c524970892d41', player, _fv(drawReductionTime));
};

/**
   * _SET_BOW_STAMINA_DRAIN_SPEED
   * Decreases Stamina bar drain speed by % when drawing a bow.
   *
   * @param {number} player
   * @param {number} staminaDrain
   * @return {void}
   */
global.SetBowStaminaDrainSpeed = function (player, staminaDrain) {
  return Citizen.invokeNative('0xfe7c9cf376d23342', player, _fv(staminaDrain));
};

/**
   * _SET_DAMAGE_CLOSE_DISTANCE_BONUS
   *
   * @param {number} player
   * @param {number} closeRangeLowerBound
   * @param {number} closeRangeUpperBound
   * @return {void}
   */
global.SetDamageCloseDistanceBonus = function (player, closeRangeLowerBound, closeRangeUpperBound) {
  return Citizen.invokeNative('0x7761a30432c91297', player, _fv(closeRangeLowerBound), _fv(closeRangeUpperBound));
};

/**
   * _SET_DAMAGE_CLOSE_DISTANCE_BONUS_TOTAL
   *
   * @param {number} player
   * @param {number} closeDamageBonus
   * @return {void}
   */
global.SetDamageCloseDistanceBonusTotal = function (player, closeDamageBonus) {
  return Citizen.invokeNative('0x5006c36652d6ec56', player, _fv(closeDamageBonus));
};

/**
   * _SET_DAMAGE_FAR_DISTANCE_BONUS
   *
   * @param {number} player
   * @param {number} farRangeLowerBound
   * @param {number} farRangeUpperBound
   * @return {void}
   */
global.SetDamageFarDistanceBonus = function (player, farRangeLowerBound, farRangeUpperBound) {
  return Citizen.invokeNative('0xed591cb17c8ba216', player, _fv(farRangeLowerBound), _fv(farRangeUpperBound));
};

/**
   * _SET_DAMAGE_FAR_DISTANCE_BONUS_TOTAL
   *
   * @param {number} player
   * @param {number} farDamageBonus
   * @return {void}
   */
global.SetDamageFarDistanceBonusTotal = function (player, farDamageBonus) {
  return Citizen.invokeNative('0x1f0e3a4434565f8f', player, _fv(farDamageBonus));
};

/**
   * _SET_DEADEYE_ABILITY_DEPLETION_DELAY
   * Only used in R* SP Script short_update
   *
   * @param {number} player
   * @param {number} delay
   * @return {void}
   */
global.SetDeadeyeAbilityDepletionDelay = function (player, delay) {
  return Citizen.invokeNative('0x870634493cb4372c', player, _fv(delay));
};

/**
   * _SET_DEADEYE_ABILITY_LEVEL
   * Max level is 5.
   *
   * @param {number} player
   * @param {number} level
   * @return {void}
   */
global.SetDeadeyeAbilityLevel = function (player, level) {
  return Citizen.invokeNative('0xf0fe8e790bfeb5bb', player, level);
};

/**
   * _SET_DEADEYE_ABILITY_LOCKED
   *
   * @param {number} player
   * @param {number} abilityType
   * @param {boolean} toggle
   * @return {void}
   */
global.SetDeadeyeAbilityLocked = function (player, abilityType, toggle) {
  return Citizen.invokeNative('0x2797b8d66dd0ebb8', player, abilityType, toggle);
};

/**
   * _SET_DEADEYE_TAGGING_CONFIG
   *
   * @param {number} player
   * @param {number} filter
   * @return {void}
   */
global.SetDeadeyeTaggingConfig = function (player, filter) {
  return Citizen.invokeNative('0x83fcd6921fc8fd05', player, filter);
};

/**
   * _SET_DEADEYE_TAGGING_ENABLED
   *
   * @param {number} player
   * @param {boolean} toggle
   * @return {void}
   */
global.SetDeadeyeTaggingEnabled = function (player, toggle) {
  return Citizen.invokeNative('0x6b5ddfb967e5073d', player, toggle);
};

/**
   * _SET_DISABLE_PLAYER_WANTED_LEVEL
   * Disables the players ability to be wanted by lawmen
   *
   * @param {number} player
   * @param {boolean} disable
   * @return {void}
   */
global.SetDisablePlayerWantedLevel = function (player, disable) {
  return Citizen.invokeNative('0x8674d138391ffb1b', player, disable);
};

/**
   * _SET_LOCAL_PLAYER_PERSONA_ABILITY_FLAG
   * see personaabilities.meta
   * enum ePersonaAbilityFlag
   * {
   *   PERSONA_CAN_AUTOESCAPE_FROM_LASSO,
   *   PERSONA_HAT_BLOCKS_FIRST_HEADSHOT,
   *   PERSONA_FULL_AUTO_FOR_ALL_WEAPONS,
   *   PERSONA_MIGHT_LIVE_AFTER_DEADLY_DAMAGE,
   *   PERSONA_IGNORE_AIM_BEFORE_FIRING_RESTRICTIONS,
   *   PERSONA_DEADEYE_INSTANT_RELOAD,
   *   PERSONA_USE_PHOSPHOROUS_ROUNDS,
   *   PERSONA_CONT_DEADEYE_ON_TAKING_COVER,
   *   PERSONA_CONT_DEADEYE_ON_RELOAD,
   *   PERSONA_CONT_DEADEYE_ON_SHOOTING,
   *   PERSONA_CONT_DEADEYE_ON_EXITING_AIM,
   *   PERSONA_DISABLE_PLAYER_CANCELLING_DEADEYE,
   *   PERSONA_CONT_DEADEYE_ON_RAGDOLL,
   *   PERSONA_USE_EXPLOSIVE_ROUNDS,
   *   PERSONA_EXIT_DEADEYE_ON_TAKING_DAMAGE,
   *   PERSONA_CARRY_TWO_MONEYBAGS,
   *   PERSONA_ABILITY_LONG_PICK_HERBS,
   *   PERSONA_ABILITY_UNBREAKABLE_LASSO,
   *   PERSONA_CONT_DEADEYE_ON_SPRINTING,
   *   PERSONA_CANT_DEAL_HEADSHOTS,
   *   PERSONA_HANGMAN,
   *   PERSONA_ALLOW_DEADEYE_WITH_MELEE_WEAPONS,
   *   PERSONA_ALLOW_DEADEYE_WHILE_UNARMED,
   *   PERSONA_DISABLE_DEADEYE_PERFECT_ACCURACY,
   *   PERSONA_CANT_DEAL_HEADSHOTS_TO_PLAYERS,
   *   PERSONA_CANT_DEAL_CRITICAL_DAMAGE,
   *   PERSONA_CANT_DEAL_CRITICAL_DAMAGE_TO_PLAYERS,
   *   PERSONA_ALLOW_EAGLEEYE_IN_COMBAT,
   *   PERSONA_CONT_EAGLEEYE_ON_SPRINT,
   *   PERSONA_SUPPRESS_LENGENDARY_EAGLEEYE_TRAIL_COLOR
   * };
   *
   * @param {number} flagId
   * @param {boolean} toggle
   * @return {void}
   */
global.SetLocalPlayerPersonaAbilityFlag = function (flagId, toggle) {
  return Citizen.invokeNative('0x7146cf430965927c', flagId, toggle);
};

/**
   * _SET_LOCKON_FOCUS_FIRE_VFX
   * Focus Fire VFX start for player: p1 = focusfire
   *
   * @param {number} player
   * @param {string | number} p1
   * @return {void}
   */
global.SetLockonFocusFireVfx = function (player, p1) {
  return Citizen.invokeNative('0x5f8e0303c229c84b', player, p1);
};

/**
   * _SET_MAX_WANTED_LEVEL_2
   *
   * @param {number} maxWantedLevel
   * @return {void}
   */
global.SetMaxWantedLevel_2 = function (maxWantedLevel) {
  return Citizen.invokeNative('0xea6de0cd15aecbe2', maxWantedLevel);
};

/**
   * _SET_MOUNT_PROMPT_DISABLED
   *
   * @param {boolean} disabled
   * @return {void}
   */
global.SetMountPromptDisabled = function (disabled) {
  return Citizen.invokeNative('0x5b9813ecf7633fe8', disabled);
};

/**
   * _SET_PED_ACTIVE_PLAYER_HORSE
   * Seems to work similar to 0xD2CB0FB0FDCB473D
   *
   * @param {number} player
   * @param {number} horse
   * @return {void}
   */
global.SetPedActivePlayerHorse = function (player, horse) {
  return Citizen.invokeNative('0x8fbf9edb378ccb8c', player, horse);
};

/**
   * _SET_PED_AS_SADDLE_HORSE_FOR_PLAYER
   *
   * @param {number} player
   * @param {number} mount
   * @return {void}
   */
global.SetPedAsSaddleHorseForPlayer = function (player, mount) {
  return Citizen.invokeNative('0xd2cb0fb0fdcb473d', player, mount);
};

/**
   * _SET_PLAYER_CAN_MERCY_KILL
   *
   * @param {number} player
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPlayerCanMercyKill = function (player, toggle) {
  return Citizen.invokeNative('0x39363dfd04e91496', player, toggle);
};

/**
   * _SET_PLAYER_DAMAGE_INFO_OVERRIDE
   * damageInfo: STANDARD_PED_DAMAGE, STANDARD_FEMALE_PED_DAMAGE, STANDARD_PLAYER_PED_DAMAGE_MP, STANDARD_FEMALE_PLAYER_PED_DAMAGE_MP
   *
   * @param {number} player
   * @param {string | number} damageInfo
   * @return {void}
   */
global.SetPlayerDamageInfoOverride = function (player, damageInfo) {
  return Citizen.invokeNative('0x78b3d19af6391a55', player, damageInfo);
};

/**
   * _SET_PLAYER_DEFENSE_MODIFIER
   * Sets stamina core drains peed using ranged damage scale and melee damage scale
   *
   * @param {number} player
   * @param {number} weaponDefenseMod
   * @param {number} meleeDefenseMod
   * @return {void}
   */
global.SetPlayerDefenseModifier = function (player, weaponDefenseMod, meleeDefenseMod) {
  return Citizen.invokeNative('0x497a6539bb0e8787', player, _fv(weaponDefenseMod), _fv(meleeDefenseMod));
};

/**
   * _SET_PLAYER_DEFENSE_TYPE_MODIFIER
   * bullet damage modifier: type = 4
   * explosive damage Defense mod: type = 7
   * fire damage Defense mod: type = 8, 15
   *
   * @param {number} player
   * @param {number} type
   * @param {number} defenseModifier
   * @return {void}
   */
global.SetPlayerDefenseTypeModifier = function (player, type, defenseModifier) {
  return Citizen.invokeNative('0x93f499cae53fcd05', player, type, _fv(defenseModifier));
};

/**
   * _SET_PLAYER_EXPLOSIVE_WEAPON_DAMAGE_MODIFIER
   *
   * @param {number} player
   * @param {number} modifier
   * @return {void}
   */
global.SetPlayerExplosiveWeaponDamageModifier = function (player, modifier) {
  return Citizen.invokeNative('0x2d3ace3de0a2b622', player, _fv(modifier));
};

/**
   * _SET_PLAYER_HAS_DISCOVERED_CHARACTER_NAME_MP
   *
   * @param {number} discoveryHash
   * @return {void}
   */
global.SetPlayerHasDiscoveredCharacterNameMp = function (discoveryHash) {
  return Citizen.invokeNative('0x7c32191d9fb2bdea', _ch(discoveryHash));
};

/**
   * _SET_PLAYER_HAS_DISCOVERED_CHARACTER_NAME_SP
   *
   * @param {number} player
   * @param {number} p1
   * @param {number} discoveryHash
   * @return {void}
   */
global.SetPlayerHasDiscoveredCharacterNameSp = function (player, p1, discoveryHash) {
  return Citizen.invokeNative('0x946d46cd6dfb9742', player, p1, _ch(discoveryHash));
};

/**
   * _SET_PLAYER_HEALTH_RECHARGE_TIME_MODIFIER
   * Setting player's Health recharge time to zero forces immediate health regen
   *
   * @param {number} player
   * @param {number} modifier
   * @return {void}
   */
global.SetPlayerHealthRechargeTimeModifier = function (player, modifier) {
  return Citizen.invokeNative('0x535ed4605f89ab6e', player, _fv(modifier));
};

/**
   * _SET_PLAYER_HUNTING_WAGON
   * Only applies to HUNTERCART01
   *
   * @param {number} player
   * @param {number} wagon
   * @return {void}
   */
global.SetPlayerHuntingWagon = function (player, wagon) {
  return Citizen.invokeNative('0x6a4404bdfa62ce2c', player, wagon);
};

/**
   * _SET_PLAYER_INTERACTION_NEGATIVE_RESPONSE
   *
   * @param {number} player
   * @param {string | number} speech
   * @return {void}
   */
global.SetPlayerInteractionNegativeResponse = function (player, speech) {
  return Citizen.invokeNative('0x98cd760de43b612e', player, speech);
};

/**
   * _SET_PLAYER_INTERACTION_POSITIVE_RESPONSE
   *
   * @param {number} player
   * @param {string | number} speech
   * @return {void}
   */
global.SetPlayerInteractionPositiveResponse = function (player, speech) {
  return Citizen.invokeNative('0xc6366a585659d15c', player, speech);
};

/**
   * _SET_PLAYER_IN_VEHICLE_TARGETING_MODE
   * Sets your targeting mode for when you're in a vehicle (perhaps a mount/horse).
   * see SET_PLAYER_TARGETING_MODE for eTargetingMode
   *
   * @param {number} targetMode
   * @return {void}
   */
global.SetPlayerInVehicleTargetingMode = function (targetMode) {
  return Citizen.invokeNative('0x19b4f71703902238', targetMode);
};

/**
   * _SET_PLAYER_LASSO_DAMAGE_PER_SECOND
   * _SET_PLAYER_A* - _SET_PLAYER_C*
   *
   * @param {number} player
   * @param {number} damage
   * @return {void}
   */
global.SetPlayerLassoDamagePerSecond = function (player, damage) {
  return Citizen.invokeNative('0x43f50a7cd2482156', player, _fv(damage));
};

/**
   * _SET_PLAYER_LOCAL_ACCURACY_FLOOR_MODIFIER
   *
   * @param {number} player
   * @param {number} accuracy
   * @return {void}
   */
global.SetPlayerLocalAccuracyFloorModifier = function (player, accuracy) {
  return Citizen.invokeNative('0x4ea69188fbce6a7d', player, _fv(accuracy));
};

/**
   * _SET_PLAYER_MANAGE_BUFF_SUPER_JUMP
   *
   * @param {number} player
   * @param {number} p1
   * @return {void}
   */
global.SetPlayerManageBuffSuperJump = function (player, p1) {
  return Citizen.invokeNative('0x292f0b6edc82e3a4', player, _fv(p1));
};

/**
   * _SET_PLAYER_MAX_AMMO_OVERRIDE_FOR_AMMO_TYPE
   *
   * @param {number} player
   * @param {number} ammoType
   * @param {number} amount
   * @return {void}
   */
global.SetPlayerMaxAmmoOverrideForAmmoType = function (player, ammoType, amount) {
  return Citizen.invokeNative('0xe133c1ec5300f740', player, _ch(ammoType), amount);
};

/**
   * _SET_PLAYER_MOOD
   * mood: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePedMood
   *
   * @param {number} player
   * @param {number} mood
   * @return {void}
   */
global.SetPlayerMood = function (player, mood) {
  return Citizen.invokeNative('0x39bed552db46ffa9', player, mood);
};

/**
   * _SET_PLAYER_MOUNT_STATE_ACTIVE
   * Name could potentially be inaccurate.
   * Used in Script Function HORSE_SETUP_PLAYER_HORSE_ATTRIBUTES (p1 = true)
   * _SET_PLAYER_L* - _SET_PLAYER_M*
   *
   * @param {number} player
   * @param {boolean} active
   * @return {void}
   */
global.SetPlayerMountStateActive = function (player, active) {
  return Citizen.invokeNative('0xdf93973251fb2ca5', player, active);
};

/**
   * _SET_PLAYER_OWNS_MOUNT
   * Seems to enable active horse equipment prompt when being near it and enables the control that opens the inventory as well
   *
   * @param {number} player
   * @param {number} mount
   * @return {void}
   */
global.SetPlayerOwnsMount = function (player, mount) {
  return Citizen.invokeNative('0xe6d4e435b56d5bd0', player, mount);
};

/**
   * _SET_PLAYER_OWNS_VEHICLE
   *
   * @param {number} player
   * @param {number} vehicle
   * @return {void}
   */
global.SetPlayerOwnsVehicle = function (player, vehicle) {
  return Citizen.invokeNative('0xd0e02aa618020d17', player, vehicle);
};

/**
   * _SET_PLAYER_REMOTE_ACCURACY_FLOOR_MODIFIER
   *
   * @param {number} player
   * @param {number} accuracy
   * @return {void}
   */
global.SetPlayerRemoteAccuracyFloorModifier = function (player, accuracy) {
  return Citizen.invokeNative('0xdee80fedfdd43c9b', player, _fv(accuracy));
};

/**
   * _SET_PLAYER_RESET_FLAG
   * https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePlayerResetFlags
   * https://github.com/femga/rdr3_discoveries/tree/master/AI/PLAYER_RESET_FLAGS
   *
   * @param {number} player
   * @param {number} playerResetFlag
   * @param {boolean} p2
   * @return {void}
   */
global.SetPlayerResetFlag = function (player, playerResetFlag, p2) {
  return Citizen.invokeNative('0x9f9a829c6751f3c7', player, playerResetFlag, p2);
};

/**
   * _SET_PLAYER_STAMINA_SPRINT_DEPLETION_MULTIPLIER
   *
   * @param {number} player
   * @param {number} multiplier
   * @return {void}
   */
global.SetPlayerStaminaSprintDepletionMultiplier = function (player, multiplier) {
  return Citizen.invokeNative('0xbbadfb5e5e5766fb', player, _fv(multiplier));
};

/**
   * _SET_PLAYER_DEAD_EYE_AURA_BY_HASH
   * Sets the aura color for entities that the player can target in Deadeye mode, based on a specific hash value. This Native was previously named `SetPlayerStatFlagHash`, but it has been re-evaluated and renamed to better reflect its function in controlling the Deadeye aura color for targeted entities
   * some colors
   * 0: Default aura
   * 1014693585
   * 1936842089
   * 1979474018
   *
   * @param {number} player
   * @param {number} auraColorHash
   * @return {void}
   */
global.SetPlayerDeadEyeAuraByHash = function (player, auraColorHash) {
  return Citizen.invokeNative('0x768e81ae285a4b67', player, _ch(auraColorHash));
};

/**
   * _SET_PLAYER_TOTAL_ACCURACY_MODIFIER
   *
   * @param {number} player
   * @param {number} accuracy
   * @return {void}
   */
global.SetPlayerTotalAccuracyModifier = function (player, accuracy) {
  return Citizen.invokeNative('0x967ff5bc0cfe6d26', player, _fv(accuracy));
};

/**
   * _SET_PLAYER_TRAMPLE_DAMAGE_MODIFIER
   *
   * @param {number} player
   * @param {number} modifier
   * @return {void}
   */
global.SetPlayerTrampleDamageModifier = function (player, modifier) {
  return Citizen.invokeNative('0xaf341032e97fb061', player, _fv(modifier));
};

/**
   * _SET_PLAYER_WEAPON_GROUP_AS_INSTANT_KILL
   *
   * @param {number} player
   * @param {number} weaponGroup
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPlayerWeaponGroupAsInstantKill = function (player, weaponGroup, toggle) {
  return Citizen.invokeNative('0x59f0aff3e0a1b019', player, _ch(weaponGroup), toggle);
};

/**
   * _SET_PLAYER_WEAPON_GROUP_DAMAGE_MODIFIER
   *
   * @param {number} player
   * @param {number} weaponGroup
   * @param {number} modifier
   * @return {void}
   */
global.SetPlayerWeaponGroupDamageModifier = function (player, weaponGroup, modifier) {
  return Citizen.invokeNative('0xfc79dcc94d0a5897', player, _ch(weaponGroup), _fv(modifier));
};

/**
   * _SET_RECEIVED_DAMAGE_TAKEN_ON_HORSEBACK_MODIFIER
   * Decreases the damage the player receives while on horseback
   * Previous name: _SET_RECEIVED_HORSEBACK_DAMAGE_DECREASE
   *
   * @param {number} player
   * @param {number} damageDecrease
   * @return {void}
   */
global.SetReceivedDamageTakenOnHorsebackModifier = function (player, damageDecrease) {
  return Citizen.invokeNative('0xb427911ea6dffef3', player, _fv(damageDecrease));
};

/**
   * _SET_SHOW_INFO_CARD
   *
   * @param {number} player
   * @param {boolean} showingInfoCard
   * @return {void}
   */
global.SetShowInfoCard = function (player, showingInfoCard) {
  return Citizen.invokeNative('0xdc68829bb3f37023', player, showingInfoCard);
};

/**
   * _SET_SPECIAL_ABILITY_ACTIVATION_COST
   *
   * @param {number} player
   * @param {number} activationCost
   * @param {number} p2
   * @return {void}
   */
global.SetSpecialAbilityActivationCost = function (player, activationCost, p2) {
  return Citizen.invokeNative('0xae4bcc79c587ebbf', player, _fv(activationCost), p2);
};

/**
   * _SET_SPECIAL_ABILITY_DISABLE_TIMER
   * Only used in R* SP Script short_update
   *
   * @param {number} player
   * @param {number} timer
   * @return {void}
   */
global.SetSpecialAbilityDisableTimer = function (player, timer) {
  return Citizen.invokeNative('0xc0b1c05b313693d1', player, _fv(timer));
};

/**
   * _SET_SPECIAL_ABILITY_DURATION_COST
   * durationCost: per second
   *
   * @param {number} player
   * @param {number} durationCost
   * @return {void}
   */
global.SetSpecialAbilityDurationCost = function (player, durationCost) {
  return Citizen.invokeNative('0xb783f75940b23014', player, _fv(durationCost));
};

/**
   * _SET_SPECIAL_ABILITY_MULTIPLIER
   *
   * @param {number} player
   * @param {number} multiplier
   * @return {void}
   */
global.SetSpecialAbilityMultiplier = function (player, multiplier) {
  return Citizen.invokeNative('0x5a498fca232f71e1', player, _fv(multiplier));
};

/**
   * _SET_SPECIAL_ABILITY_TYPE
   * SPECIAL_ABILITY_NONE = -1,
   * SPECIAL_ABILITY_CAR_SLOWDOWN,
   * SPECIAL_ABILITY_RAGE,
   * SPECIAL_ABILITY_BULLET_TIME,
   * SPECIAL_ABILITY_SNAPSHOT,
   * SPECIAL_ABILITY_INSULT,
   * SPECIAL_ABILITY_DEADEYE,
   * SPECIAL_ABILITY_REVIVE
   *
   * @param {number} player
   * @param {number} type
   * @return {void}
   */
global.SetSpecialAbilityType = function (player, type) {
  return Citizen.invokeNative('0x00ba333da05adc23', player, type);
};

/**
   * _SET_USED_ITEM_EFFECT
   *
   * @param {number} health
   * @param {number} stamina
   * @param {number} deadeye
   * @param {number} healthCore
   * @param {number} staminaCore
   * @param {number} deadeyeCore
   * @return {void}
   */
global.SetUsedItemEffect = function (health, stamina, deadeye, healthCore, staminaCore, deadeyeCore) {
  return Citizen.invokeNative('0x0e1db1f8f5b561dc', _fv(health), _fv(stamina), _fv(deadeye), healthCore, staminaCore, deadeyeCore);
};

/**
   * _SET_WEAPON_DEGRADATION_MODIFIER
   *
   * @param {number} player
   * @param {number} modifier
   * @return {void}
   */
global.SetWeaponDegradationModifier = function (player, modifier) {
  return Citizen.invokeNative('0x11a7ff918ef6bc66', player, _fv(modifier));
};

/**
   * _SPECIAL_ABILITY_DRAIN_BY_AMOUNT
   * Drains Deadeye by given amount.
   *
   * @param {number} player
   * @param {number} amount
   * @param {any} p2
   * @return {void}
   */
global.SpecialAbilityDrainByAmount = function (player, amount, p2) {
  return Citizen.invokeNative('0x200114e99552462b', player, _fv(amount), p2);
};

/**
   * _SPECIAL_ABILITY_GET_AMOUNT_CACHED
   * Returns Deadeye value from player
   *
   * @param {number} player
   * @return {number}
   */
global.SpecialAbilityGetAmountCached = function (player) {
  return Citizen.invokeNative('0x029884fb65821b07', player, _r, _rf);
};

/**
   * _SPECIAL_ABILITY_RESTORE_BY_AMOUNT
   * Restores Deadeye by given amount.
   * Params: p2, p3, p4 = 0, 0, 1 in R* Scripts
   *
   * @param {number} player
   * @param {number} amount
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @return {void}
   */
global.SpecialAbilityRestoreByAmount = function (player, amount, p2, p3, p4) {
  return Citizen.invokeNative('0x51345ae20f22c261', player, _fv(amount), p2, p3, p4);
};

/**
   * _SPECIAL_ABILITY_RESTORE_OUTER_RING
   * Only used in R* SP Script short_update
   * Restores Deadeye Outer Ring
   *
   * @param {number} player
   * @param {number} amount
   * @return {void}
   */
global.SpecialAbilityRestoreOuterRing = function (player, amount) {
  return Citizen.invokeNative('0x2498035289b5688f', player, _fv(amount));
};

/**
   * _SPECIAL_ABILITY_SET_DISABLED
   *
   * @param {number} player
   * @param {boolean} disabled
   * @return {void}
   */
global.SpecialAbilitySetDisabled = function (player, disabled) {
  return Citizen.invokeNative('0xae637bb8ef017875', player, disabled);
};

/**
   * _SPECIAL_ABILITY_SET_EAGLE_EYE_DISABLED
   *
   * @param {number} player
   * @return {void}
   */
global.SpecialAbilitySetEagleEyeDisabled = function (player) {
  return Citizen.invokeNative('0xc0b21f235c02139c', player);
};

/**
   * _SPECIAL_ABILITY_START_RESTORE
   * Params: p1 = -1 in R* Scripts
   *
   * @param {number} player
   * @param {number} p1
   * @param {boolean} p2
   * @return {void}
   */
global.SpecialAbilityStartRestore = function (player, p1, p2) {
  return Citizen.invokeNative('0x1d77b47afa584e90', player, p1, p2);
};

/**
   * _UNREGISTER_EAGLE_EYE_FOR_ENTITY
   *
   * @param {number} player
   * @param {number} entity
   * @return {void}
   */
global.UnregisterEagleEyeForEntity = function (player, entity) {
  return Citizen.invokeNative('0x9dae1380cc5c6451', player, entity);
};

/**
   * _UNREGISTER_EAGLE_EYE_TRAILS_FOR_ENTITY
   *
   * @param {number} player
   * @param {number} entity
   * @param {any} p2
   * @return {void}
   */
global.UnregisterEagleEyeTrailsForEntity = function (player, entity, p2) {
  return Citizen.invokeNative('0x9a957912ce2eabd1', player, entity, p2);
};

/**
   * CLEAR_SPAWNER_INFO_PRIORITY
   *
   * @param {number} p0
   * @param {number} p1
   * @return {void}
   */
global.ClearSpawnerInfoPriority = function (p0, p1) {
  return Citizen.invokeNative('0x217a54de2d200305', _ch(p0), _ch(p1));
};

/**
   * DISABLE_AMBIENT_ROAD_POPULATION
   *
   * @param {boolean} unk
   * @return {void}
   */
global.DisableAmbientRoadPopulation = function (unk) {
  return Citizen.invokeNative('0xc6dcc2a3a8825c85', unk);
};

/**
   * ENABLE_AMBIENT_ROAD_POPULATION
   *
  
   * @return {void}
   */
global.EnableAmbientRoadPopulation = function () {
  return Citizen.invokeNative('0xbc90bdf4e5228ea1');
};

/**
   * GET_NUM_MODELS_IN_POPULATION_SET
   *
   * @param {number} popSetHash
   * @return {number}
   */
global.GetNumModelsInPopulationSet = function (popSetHash) {
  return Citizen.invokeNative('0xa1e3171ed0e47564', _ch(popSetHash), _r, _ri);
};

/**
   * GET_PED_MODEL_NAME_IN_POPULATION_SET
   *
   * @param {number} popSetHash
   * @param {number} index
   * @return {number}
   */
global.GetPedModelNameInPopulationSet = function (popSetHash, index) {
  return Citizen.invokeNative('0x3eafa1c533b7139e', _ch(popSetHash), index, _r, _ri);
};

/**
   * GET_RANDOM_MODEL_FROM_POPULATION_SET
   *
   * @param {number} popSetHash
   * @param {number} flags
   * @param {number} p2
   * @param {boolean} p3
   * @param {boolean} p4
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {number}
   */
global.GetRandomModelFromPopulationSet = function (popSetHash, flags, p2, p3, p4, x, y, z) {
  return Citizen.invokeNative('0x6b12ed8c77e8567b', _ch(popSetHash), flags, _ch(p2), p3, p4, _fv(x), _fv(y), _fv(z), _r, _ri);
};

/**
   * SET_POPZONE_POPULATION_SET
   *
   * @param {number} popZone
   * @param {number} populationSetHash
   * @return {void}
   */
global.SetPopzonePopulationSet = function (popZone, populationSetHash) {
  return Citizen.invokeNative('0x3e6a49d9b519e85c', popZone, _ch(populationSetHash));
};

/**
   * SET_SPAWNER_INFO_PRIORITY
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} priority
   * @return {void}
   */
global.SetSpawnerInfoPriority = function (p0, p1, priority) {
  return Citizen.invokeNative('0x60cde717a6d47769', _ch(p0), _ch(p1), priority);
};

/**
   * _0x08892122769770D5
   *
   * @param {number} popZone
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x08892122769770D5 = function (popZone, p1) {
  return Citizen.invokeNative('0x08892122769770d5', popZone, p1);
};

/**
   * _0x0F1861101C9A9944
   *
   * @param {number} popZone
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x0F1861101C9A9944 = function (popZone, p1) {
  return Citizen.invokeNative('0x0f1861101c9a9944', popZone, p1);
};

/**
   * _0x2161278C6322F740
   *
   * @param {number} includeFlags
   * @param {number} excludeFlags
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} volume
   * @return {void}
   */
global.N_0x2161278C6322F740 = function (includeFlags, excludeFlags, p2, p3, p4, volume) {
  return Citizen.invokeNative('0x2161278c6322f740', includeFlags, excludeFlags, p2, _ch(p3), p4, volume);
};

/**
   * _0x247F86595D396344
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x247F86595D396344 = function (p0) {
  return Citizen.invokeNative('0x247f86595d396344', p0);
};

/**
   * _0x2660E7720EDC4BD0
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x2660E7720EDC4BD0 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x2660e7720edc4bd0', p0, p1, p2);
};

/**
   * _0x324AB2A68AD8AEE5
   *
  
   * @return {void}
   */
global.N_0x324AB2A68AD8AEE5 = function () {
  return Citizen.invokeNative('0x324ab2a68ad8aee5');
};

/**
   * _0x578E2FA64E847C60
   *
   * @param {number} popZone
   * @param {number} p1
   * @return {void}
   */
global.N_0x578E2FA64E847C60 = function (popZone, p1) {
  return Citizen.invokeNative('0x578e2fa64e847c60', popZone, p1);
};

/**
   * _0x638FCFC6042A9473
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x638FCFC6042A9473 = function (p0, p1) {
  return Citizen.invokeNative('0x638fcfc6042a9473', p0, p1);
};

/**
   * _0x7E6BC0B94F5928F0
   *
   * @param {number} popZone
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.N_0x7E6BC0B94F5928F0 = function (popZone, p1, p2) {
  return Citizen.invokeNative('0x7e6bc0b94f5928f0', popZone, p1, p2);
};

/**
   * _0x8EC7CD701F872F87
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.N_0x8EC7CD701F872F87 = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x8ec7cd701f872f87', p0, p1, p2, p3, p4, p5);
};

/**
   * _0xC4533E3E87125C9E
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xC4533E3E87125C9E = function (p0) {
  return Citizen.invokeNative('0xc4533e3e87125c9e', p0);
};

/**
   * _0xDBBF12EA7C1029B2
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xDBBF12EA7C1029B2 = function (p0, p1) {
  return Citizen.invokeNative('0xdbbf12ea7c1029b2', p0, p1);
};

/**
   * _0xEC116EDB683AD479
   * Only used for Special Event (XMAS).
   * _SET_P*
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0xEC116EDB683AD479 = function (p0) {
  return Citizen.invokeNative('0xec116edb683ad479', p0);
};

/**
   * _0xF45E46DEECF7DF6E
   *
   * @param {number} bitFlag
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0xF45E46DEECF7DF6E = function (bitFlag, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xf45e46deecf7df6e', bitFlag, p1, p2, p3, p4);
};

/**
   * _ADD_AMBIENT_AVOIDANCE_RESTRICTION
   * flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/PedFilterFlags
   *
   * @param {number} volume
   * @param {number} includeFlags
   * @param {number} excludeFlags
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @return {void}
   */
global.AddAmbientAvoidanceRestriction = function (volume, includeFlags, excludeFlags, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xb56d41a694e42e86', volume, includeFlags, excludeFlags, _ch(p3), _ch(p4), _ch(p5), p6);
};

/**
   * _ADD_AMBIENT_SPAWN_RESTRICTION
   * flags: see 0xB56D41A694E42E86
   *
   * @param {number} volume
   * @param {number} includeFlags
   * @param {number} excludeFlags
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @return {void}
   */
global.AddAmbientSpawnRestriction = function (volume, includeFlags, excludeFlags, p3, p4, p5, p6) {
  return Citizen.invokeNative('0x18262cafebb5fbe1', volume, includeFlags, excludeFlags, _ch(p3), _ch(p4), _ch(p5), p6);
};

/**
   * _CREATE_POPZONE_FROM_VOLUME
   *
   * @param {number} volume
   * @return {number}
   */
global.CreatePopzoneFromVolume = function (volume) {
  return Citizen.invokeNative('0x9ac1c64fe46b6d09', volume, _r, _ri);
};

/**
   * _DELETE_SCRIPT_POPZONE
   *
   * @param {number} popZone
   * @return {void}
   */
global.DeleteScriptPopzone = function (popZone) {
  return Citizen.invokeNative('0xa6e6a66fc4ca4224', popZone);
};

/**
   * _GET_RANDOM_FISH_TYPE_FOR_LOCATION
   * Returns model hash of the closest fish
   *
  
   * @return {number}
   */
global.GetRandomFishTypeForLocation = function () {
  return Citizen.invokeNative('0x595478b3bbc3076d', _r, _ri);
};

/**
   * _IS_POPZONE_VALID
   *
   * @param {number} popZone
   * @return {boolean}
   */
global.IsPopzoneValid = function (popZone) {
  return Citizen.invokeNative('0xa5bd585005efcad4', popZone, _r);
};

/**
   * _REMOVE_AMBIENT_AVOIDANCE_RESTRICTION
   * flags: see 0xB56D41A694E42E86
   *
   * @param {number} volume
   * @return {void}
   */
global.RemoveAmbientAvoidanceRestriction = function (volume) {
  return Citizen.invokeNative('0x74c2b3dc0b294102', volume);
};

/**
   * _REMOVE_AMBIENT_SPAWN_RESTRICTION
   *
   * @param {number} volume
   * @return {void}
   */
global.RemoveAmbientSpawnRestriction = function (volume) {
  return Citizen.invokeNative('0xa1cfb35069d23c23', volume);
};

/**
   * _SET_PED_SHOULD_IGNORE_AVOIDANCE_VOLUMES
   * Params: p1 = 1 & 2 in R* Scripts, 0 = Disable avoidance, 1 = Enabled avoidance, 2 = Enabled avoidance (?)
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.SetPedShouldIgnoreAvoidanceVolumes = function (ped, p1) {
  return Citizen.invokeNative('0xf74e134f40192884', ped, p1);
};

/**
   * POSSE_GET_POSSE_MEMBERSHIP_COUNT
   *
  
   * @return {number}
   */
global.PosseGetPosseMembershipCount = function () {
  return Citizen.invokeNative('0xc088ff658b2e51da', _r, _ri);
};

/**
   * _0xC06CFF658B2E51DA
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0xC06CFF658B2E51DA = function (p0, p1, p2) {
  return Citizen.invokeNative('0xc06cff658b2e51da', p0, p1, p2, _r);
};

/**
   * _0xC07CFF658B2E51DA
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xC07CFF658B2E51DA = function (p0, p1) {
  return Citizen.invokeNative('0xc07cff658b2e51da', p0, p1, _r);
};

/**
   * _0xC084FF658B2E52DA
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xC084FF658B2E52DA = function (p0) {
  return Citizen.invokeNative('0xc084ff658b2e52da', p0, _r);
};

/**
   * _0xC084FF658B2E53DA
   *
  
   * @return {any}
   */
global.N_0xC084FF658B2E53DA = function () {
  return Citizen.invokeNative('0xc084ff658b2e53da', _r);
};

/**
   * _0xC084FF658B2E54DA
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xC084FF658B2E54DA = function (p0) {
  return Citizen.invokeNative('0xc084ff658b2e54da', p0, _r);
};

/**
   * _0xC084FF658B2E55DA
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xC084FF658B2E55DA = function (p0, p1) {
  return Citizen.invokeNative('0xc084ff658b2e55da', p0, p1, _r);
};

/**
   * _0xC084FF658B2E61DA
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xC084FF658B2E61DA = function (p0) {
  return Citizen.invokeNative('0xc084ff658b2e61da', p0, _r);
};

/**
   * _0xC084FF658B2E71DA
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0xC084FF658B2E71DA = function (p0, p1, p2) {
  return Citizen.invokeNative('0xc084ff658b2e71da', p0, p1, p2, _r);
};

/**
   * _0xC084FF658B2E81DA
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0xC084FF658B2E81DA = function (p0, p1, p2) {
  return Citizen.invokeNative('0xc084ff658b2e81da', p0, p1, p2, _r);
};

/**
   * _0xC086FF658B2E51DA
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xC086FF658B2E51DA = function (p0) {
  return Citizen.invokeNative('0xc086ff658b2e51da', p0, _r);
};

/**
   * _0xC086FF658B2E51DB
   *
  
   * @return {any}
   */
global.N_0xC086FF658B2E51DB = function () {
  return Citizen.invokeNative('0xc086ff658b2e51db', _r);
};

/**
   * _0xC087FF658B2E51DA
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xC087FF658B2E51DA = function (p0, p1) {
  return Citizen.invokeNative('0xc087ff658b2e51da', p0, p1, _r);
};

/**
   * _0xC089FF658B2E51DA
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xC089FF658B2E51DA = function (p0, p1) {
  return Citizen.invokeNative('0xc089ff658b2e51da', p0, p1, _r);
};

/**
   * _0xC08AFF658B2E51DA
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xC08AFF658B2E51DA = function (p0) {
  return Citizen.invokeNative('0xc08aff658b2e51da', p0);
};

/**
   * _0xC08AFF658B2E51DB
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xC08AFF658B2E51DB = function (p0) {
  return Citizen.invokeNative('0xc08aff658b2e51db', p0);
};

/**
   * _0xC08BFF658B2E51DA
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xC08BFF658B2E51DA = function (p0) {
  return Citizen.invokeNative('0xc08bff658b2e51da', p0, _r);
};

/**
   * _0xC08CFF658B2E51DA
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xC08CFF658B2E51DA = function (p0, p1) {
  return Citizen.invokeNative('0xc08cff658b2e51da', p0, p1, _r);
};

/**
   * _0xC08DEF658B2E51DA
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xC08DEF658B2E51DA = function (p0) {
  return Citizen.invokeNative('0xc08def658b2e51da', p0, _r);
};

/**
   * _0xC08DFF658B2E51DA
   *
  
   * @return {any}
   */
global.N_0xC08DFF658B2E51DA = function () {
  return Citizen.invokeNative('0xc08dff658b2e51da', _r);
};

/**
   * _0xC08DFF658B2E51DB
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xC08DFF658B2E51DB = function (p0) {
  return Citizen.invokeNative('0xc08dff658b2e51db', p0, _r);
};

/**
   * _0xC08EFF658B2E51DB
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xC08EFF658B2E51DB = function (p0, p1) {
  return Citizen.invokeNative('0xc08eff658b2e51db', p0, p1, _r);
};

/**
   * _0xC08FFF658B2E51DA
   *
  
   * @return {any}
   */
global.N_0xC08FFF658B2E51DA = function () {
  return Citizen.invokeNative('0xc08fff658b2e51da', _r);
};

/**
   * _0xC08FFF658B2E51DB
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xC08FFF658B2E51DB = function (p0) {
  return Citizen.invokeNative('0xc08fff658b2e51db', p0, _r);
};

/**
   * _0xC09CFF658B2E51DA
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0xC09CFF658B2E51DA = function (p0, p1, p2) {
  return Citizen.invokeNative('0xc09cff658b2e51da', p0, p1, p2, _r);
};

/**
   * _0xC184FF658B2E55DA
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xC184FF658B2E55DA = function (p0, p1) {
  return Citizen.invokeNative('0xc184ff658b2e55da', p0, p1, _r);
};

/**
   * _0xC284FF658B2E55DA
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0xC284FF658B2E55DA = function (p0, p1, p2) {
  return Citizen.invokeNative('0xc284ff658b2e55da', p0, p1, p2, _r);
};

/**
   * _0xC394FF658B2E55DA
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {any}
   */
global.N_0xC394FF658B2E55DA = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xc394ff658b2e55da', p0, p1, p2, p3, _r);
};

/**
   * _0xC484FF658B2E55DA
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xC484FF658B2E55DA = function (p0) {
  return Citizen.invokeNative('0xc484ff658b2e55da', p0);
};

/**
   * _0xC584FF658B2E55DA
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xC584FF658B2E55DA = function (p0) {
  return Citizen.invokeNative('0xc584ff658b2e55da', p0);
};

/**
   * _0xC684FF658B2E55DA
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xC684FF658B2E55DA = function (p0) {
  return Citizen.invokeNative('0xc684ff658b2e55da', p0);
};

/**
   * CREATE_PROP_SET_INSTANCE_ATTACHED_TO_ENTITY
   *
   * @param {number} hash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} entity
   * @param {number} p5
   * @param {boolean} p6
   * @param {number} p7
   * @param {boolean} p8
   * @return {number}
   */
global.CreatePropSetInstanceAttachedToEntity = function (hash, x, y, z, entity, p5, p6, p7, p8) {
  return Citizen.invokeNative('0x9609dbdde18fad8c', _ch(hash), _fv(x), _fv(y), _fv(z), entity, _fv(p5), p6, p7, p8, _r, _ri);
};

/**
   * DOES_PROP_SET_EXIST
   *
   * @param {number} propSet
   * @return {boolean}
   */
global.DoesPropSetExist = function (propSet) {
  return Citizen.invokeNative('0x7dddcf815e650ff5', propSet, _r);
};

/**
   * IS_PROP_SET_FULLY_LOADED
   *
   * @param {number} propSet
   * @return {boolean}
   */
global.IsPropSetFullyLoaded = function (propSet) {
  return Citizen.invokeNative('0xf42db680a8b2a4d9', propSet, _r);
};

/**
   * _0x58E0B01D45CA7357
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x58E0B01D45CA7357 = function (p0) {
  return Citizen.invokeNative('0x58e0b01d45ca7357', p0);
};

/**
   * _MODIFY_PROPSET_COORDS_AND_HEADING
   * Relocates an existing prop set to specified coordinates and adjusts its heading (rotation) without affecting the prop set's internal layout or structure. The `propSet` parameter identifies the prop set to move. The parameters (`coordsX`, `coordsY`, `coordsZ`) set the new central position of the prop set, while `heading` specifies its rotation around the Z-axis (in degrees). When `onGroundProperly` is true, the prop set automatically aligns accurately with the terrain
   *
   * @param {number} propset
   * @param {number} posX
   * @param {number} posY
   * @param {number} posZ
   * @param {boolean} onGroundProperly
   * @param {number} heading
   * @return {void}
   */
global.ModifyPropsetCoordsAndHeading = function (propset, posX, posY, posZ, onGroundProperly, heading) {
  return Citizen.invokeNative('0xc4b67ef3fd65622d', propset, _fv(posX), _fv(posY), _fv(posZ), onGroundProperly, _fv(heading));
};

/**
   * _ADD_ADDITIONAL_PROP_SET_FOR_VEHICLE
   * https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_propsets.lua
   *
   * @param {number} vehicle
   * @param {number} propset
   * @return {void}
   */
global.AddAdditionalPropSetForVehicle = function (vehicle, propset) {
  return Citizen.invokeNative('0x75f90e4051cc084c', vehicle, _ch(propset));
};

/**
   * _ADD_LIGHT_PROP_SET_TO_VEHICLE
   * To remove propsets either parse a zero as hash or call 0xE31C0CB1C3186D40
   * 0xA6A9712955F53D9C returns lightPropset Hashes
   * https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_lantern_propsets.lua
   *
   * @param {number} vehicle
   * @param {number} lightPropset
   * @return {void}
   */
global.AddLightPropSetToVehicle = function (vehicle, lightPropset) {
  return Citizen.invokeNative('0xc0f0417a90402742', vehicle, _ch(lightPropset));
};

/**
   * _ADD_PROP_SET_FOR_VEHICLE
   * List of vehicle propsets (wagons & trains): https://pastebin.com/1CsnvGLu / https://pastebin.com/v7TtqTgE
   *
   * @param {number} vehicle
   * @param {number} propset
   * @return {void}
   */
global.AddPropSetForVehicle = function (vehicle, propset) {
  return Citizen.invokeNative('0xd80faf919a2e56ea', vehicle, _ch(propset));
};

/**
   * _CREATE_PROP_SET
   * propsetType: https://github.com/femga/rdr3_discoveries/blob/master/objects/propsets_list.lua
   * placementType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/PlacementType
   *
   * @param {number} propsetType
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} placementType
   * @param {number} heading
   * @param {number} zProbe
   * @param {boolean} p7
   * @param {boolean} useVegMod
   * @return {number}
   */
global.CreatePropSet = function (propsetType, x, y, z, placementType, heading, zProbe, p7, useVegMod) {
  return Citizen.invokeNative('0xe65c5cba95f0e510', _ch(propsetType), _fv(x), _fv(y), _fv(z), placementType, _fv(heading), _fv(zProbe), p7, useVegMod, _r, _ri);
};

/**
   * _CREATE_PROP_SET_2
   * Same as _CREATE_PROP_SET
   *
   * @param {number} propsetType
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} placementType
   * @param {number} heading
   * @param {number} zProbe
   * @param {boolean} p7
   * @param {boolean} useVegMod
   * @return {number}
   */
global.CreatePropSet_2 = function (propsetType, x, y, z, placementType, heading, zProbe, p7, useVegMod) {
  return Citizen.invokeNative('0x899c97a1cce7d483', _ch(propsetType), _fv(x), _fv(y), _fv(z), placementType, _fv(heading), _fv(zProbe), p7, useVegMod, _r, _ri);
};

/**
   * _CREATE_PROP_SET_INSTANCE_ATTACHED_TO_ENTITY_2
   * Same as CREATE_PROP_SET_INSTANCE_ATTACHED_TO_ENTITY
   *
   * @param {number} hash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} entity
   * @param {number} p5
   * @param {boolean} p6
   * @param {number} p7
   * @param {boolean} p8
   * @return {number}
   */
global.CreatePropSetInstanceAttachedToEntity_2 = function (hash, x, y, z, entity, p5, p6, p7, p8) {
  return Citizen.invokeNative('0xaca7fb30269096d4', _ch(hash), _fv(x), _fv(y), _fv(z), entity, _fv(p5), p6, p7, p8, _r, _ri);
};

/**
   * _DELETE_PROP_SET
   *
   * @param {number} propSet
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {void}
   */
global.DeletePropSet = function (propSet, p1, p2) {
  return Citizen.invokeNative('0x58ac173a55d9d7b4', propSet, p1, p2);
};

/**
   * _DOES_PROP_SET_OF_TYPE_EXIST_NEAR_COORDS
   *
   * @param {number} propsetHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {boolean}
   */
global.DoesPropSetOfTypeExistNearCoords = function (propsetHash, x, y, z) {
  return Citizen.invokeNative('0x72068021f498e6e3', _ch(propsetHash), _fv(x), _fv(y), _fv(z), _r);
};

/**
   * _DOES_VEHICLE_HAVE_ANY_LIGHT_PROP_SET
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.DoesVehicleHaveAnyLightPropSet = function (vehicle) {
  return Citizen.invokeNative('0xc9b4b3a36f81fd75', vehicle, _r);
};

/**
   * _DOES_VEHICLE_HAVE_ANY_PROP_SET
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.DoesVehicleHaveAnyPropSet = function (vehicle) {
  return Citizen.invokeNative('0x53784cea0159439b', vehicle, _r);
};

/**
   * _GET_ENTITIES_FROM_PROP_SET
   *
   * @param {number} propSet
   * @param {number} itemSet
   * @param {number} model
   * @param {boolean} p3
   * @param {boolean} p4
   * @return {number}
   */
global.GetEntitiesFromPropSet = function (propSet, itemSet, model, p3, p4) {
  return Citizen.invokeNative('0x738271b660fe0695', propSet, itemSet, _ch(model), p3, p4, _r, _ri);
};

/**
   * _GET_PROP_SET_AT_COORDS
   *
   * @param {number} propsetHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {number}
   */
global.GetPropSetAtCoords = function (propsetHash, x, y, z) {
  return Citizen.invokeNative('0xc061e50f8d299f95', _ch(propsetHash), _fv(x), _fv(y), _fv(z), _r, _ri);
};

/**
   * _GET_PROP_SET_MODEL
   *
   * @param {number} propSet
   * @return {number}
   */
global.GetPropSetModel = function (propSet) {
  return Citizen.invokeNative('0xa6a9712955f53d9c', propSet, _r, _ri);
};

/**
   * _GET_TRAIN_CARRIAGE_PROP_SET
   * Example before/after deleting a train carriage's propset: https://imgur.com/a/qRNrIrK
   *
   * @param {number} trainCarriage
   * @return {number}
   */
global.GetTrainCarriagePropSet = function (trainCarriage) {
  return Citizen.invokeNative('0xcfc0bd09bb1b73ff', trainCarriage, _r, _ri);
};

/**
   * _GET_VEHICLE_LIGHT_PROP_SET
   * Returns PropSet handle to be used with _GET_PROP_SET_MODEL
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetVehicleLightPropSet = function (vehicle) {
  return Citizen.invokeNative('0xa079300af757fb1a', vehicle, _r, _ri);
};

/**
   * _GET_VEHICLE_PROP_SET
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetVehiclePropSet = function (vehicle) {
  return Citizen.invokeNative('0xce2acd6f602803e5', vehicle, _r, _ri);
};

/**
   * _GET_VEHICLE_PROP_SET_HASH
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetVehiclePropSetHash = function (vehicle) {
  return Citizen.invokeNative('0x36f69e7a22655653', vehicle, _r, _ri);
};

/**
   * _HAS_PROP_SET_LOADED
   *
   * @param {number} hash
   * @return {boolean}
   */
global.HasPropSetLoaded = function (hash) {
  return Citizen.invokeNative('0x48a88fc684c55fdc', _ch(hash), _r);
};

/**
   * _HAS_PROP_SET_LOADED_2
   * Same as _HAS_PROP_SET_LOADED
   *
   * @param {number} hash
   * @return {boolean}
   */
global.HasPropSetLoaded_2 = function (hash) {
  return Citizen.invokeNative('0xd090abef4d6a7d96', _ch(hash), _r);
};

/**
   * _HAS_VEHICLE_TRAILER_PROP_SET_LOADED
   *
   * @param {number} vehicle
   * @param {number} wagonIndex
   * @return {boolean}
   */
global.HasVehicleTrailerPropSetLoaded = function (vehicle, wagonIndex) {
  return Citizen.invokeNative('0x8f3333f0a6900b3c', vehicle, wagonIndex, _r);
};

/**
   * _IS_PROP_SET_VISIBLE
   *
   * @param {number} propSet
   * @return {boolean}
   */
global.IsPropSetVisible = function (propSet) {
  return Citizen.invokeNative('0x0ce8aafe9e433a23', propSet, _r);
};

/**
   * _IS_VEHICLE_LIGHT_PROP_SET_LOADED
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.IsVehicleLightPropSetLoaded = function (vehicle) {
  return Citizen.invokeNative('0x0790473eee1977d3', vehicle, _r);
};

/**
   * _IS_VEHICLE_PROP_SET_LOADED
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.IsVehiclePropSetLoaded = function (vehicle) {
  return Citizen.invokeNative('0x155b2fbe72d7d1d0', vehicle, _r);
};

/**
   * _IS_VEHICLE_PROP_SET_LOADED_ADDITIONAL
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.IsVehiclePropSetLoadedAdditional = function (vehicle) {
  return Citizen.invokeNative('0x7264f9ca87a9830b', vehicle, _r);
};

/**
   * _RELEASE_PROP_SET
   *
   * @param {number} hash
   * @return {boolean}
   */
global.ReleasePropSet = function (hash) {
  return Citizen.invokeNative('0xb1964a83b345b4ab', _ch(hash), _r);
};

/**
   * _REMOVE_VEHICLE_LIGHT_PROP_SETS
   *
   * @param {number} vehicle
   * @return {void}
   */
global.RemoveVehicleLightPropSets = function (vehicle) {
  return Citizen.invokeNative('0xe31c0cb1c3186d40', vehicle);
};

/**
   * _REMOVE_VEHICLE_PROP_SETS
   *
   * @param {number} vehicle
   * @return {void}
   */
global.RemoveVehiclePropSets = function (vehicle) {
  return Citizen.invokeNative('0x3bcf32ff37ea9f1d', vehicle);
};

/**
   * _REQUEST_PROP_SET
   *
   * @param {number} hash
   * @return {boolean}
   */
global.RequestPropSet = function (hash) {
  return Citizen.invokeNative('0xf3de57a46d5585e9', _ch(hash), _r);
};

/**
   * _REQUEST_PROP_SET_2
   * Same as _REQUEST_PROP_SET
   *
   * @param {number} hash
   * @return {boolean}
   */
global.RequestPropSet_2 = function (hash) {
  return Citizen.invokeNative('0xe72f591958f3acab', _ch(hash), _r);
};

/**
   * _SET_PROP_SET_AS_NO_LONGER_NEEDED
   *
   * @param {number} propSet
   * @return {void}
   */
global.SetPropSetAsNoLongerNeeded = function (propSet) {
  return Citizen.invokeNative('0x909e3c7fae539fb1', propSet);
};

/**
   * _SET_PROP_SET_FLAG
   *
   * @param {number} propSet
   * @param {number} flag
   * @return {void}
   */
global.SetPropSetFlag = function (propSet, flag) {
  return Citizen.invokeNative('0xc1ab7eefd3e6ee49', propSet, flag);
};

/**
   * _SET_PROP_SET_VISIBLE
   *
   * @param {number} propSet
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPropSetVisible = function (propSet, toggle) {
  return Citizen.invokeNative('0x9d096a5bd02f953e', propSet, toggle);
};

/**
   * _EVENT_QUEUE_IS_EMPTY
   *
   * @param {number} hash
   * @return {boolean}
   */
global.EventQueueIsEmpty = function (hash) {
  return Citizen.invokeNative('0x402b5d7d269ff796', _ch(hash), _r);
};

/**
   * _EVENT_QUEUE_POP
   *
   * @param {number} hash
   * @return {void}
   */
global.EventQueuePop = function (hash) {
  return Citizen.invokeNative('0xd87df294b049211d', _ch(hash));
};

/**
   * REPLAY_PREVENT_RECORDING_THIS_FRAME
   * nullsub, doesn't do anything
   * 
   * Old name: _STOP_RECORDING_THIS_FRAME
   *
  
   * @return {void}
   */
global.ReplayPreventRecordingThisFrame = function () {
  return Citizen.invokeNative('0xa8c44c13419634f2');
};

/**
   * CLOSE_VIDEO_EDITOR
   * Hardcoded to return true.
   *
   * @param {any} p0
   * @return {boolean}
   */
global.CloseVideoEditor = function (p0) {
  return Citizen.invokeNative('0xceec64bd27a59312', p0, _r);
};

/**
   * IS_VIDEO_EDITOR_RUNNING
   * Hardcoded to return false.
   *
  
   * @return {boolean}
   */
global.IsVideoEditorRunning = function () {
  return Citizen.invokeNative('0x9eeb007317fa3b9c', _r);
};

/**
   * OPEN_VIDEO_EDITOR
   * Hardcoded to return true.
   *
  
   * @return {boolean}
   */
global.OpenVideoEditor = function () {
  return Citizen.invokeNative('0xb3f2829907403c13', _r);
};

/**
   * REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP
   * Hardcoded to return false.
   * 
   * Old name: _IS_INTERIOR_RENDERING_DISABLED
   *
  
   * @return {boolean}
   */
global.ReplaySystemHasRequestedAScriptCleanup = function () {
  return Citizen.invokeNative('0x0f838d47de58edb2', _r);
};

/**
   * SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM
   * nullsub, doesn't do anything
   *
  
   * @return {void}
   */
global.SetScriptsHaveCleanedUpForReplaySystem = function () {
  return Citizen.invokeNative('0x57c6525034e76eb0');
};

/**
   * SAVEGAME_IS_SAVE_PENDING
   *
  
   * @return {boolean}
   */
global.SavegameIsSavePending = function () {
  return Citizen.invokeNative('0x3cf46f55c6585590', _r);
};

/**
   * SAVEGAME_SAVE_MP
   * See SAVEGAME_SAVE_SP
   *
   * @param {number} savegameType
   * @return {boolean}
   */
global.SavegameSaveMp = function (savegameType) {
  return Citizen.invokeNative('0x1840f3b30ed0105f', _ch(savegameType), _r);
};

/**
   * SAVEGAME_SAVE_SP
   * enum eSavegameType : Hash
   * {
   *   SAVEGAMETYPE_AMBIENT = 0x3CA4E1F8,
   *   SAVEGAMETYPE_DEFAULT = 0xCB6ED080,
   *   SAVEGAMETYPE_DELETE_CHAR = 0xCD35F947,
   *   SAVEGAMETYPE_END_CREATE_NEWCHAR = 0x4C50A3CE,
   *   SAVEGAMETYPE_END_MATCH = 0xE470ED50,
   *   SAVEGAMETYPE_END_MISSION = 0x9A444E54,
   *   SAVEGAMETYPE_END_SESSION = 0x6D23956C,
   *   SAVEGAMETYPE_END_SHOPPING = 0xA311A6C4,
   *   SAVEGAMETYPE_RANKUP = 0xE25F8017,
   *   SAVEGAMETYPE_SCRIPT_MP_GLOBALS = 0xAFF30AD4,
   *   SAVEGAMETYPE_SP_AUTOSAVE = 0xF4AE69EC,
   *   SAVEGAMETYPE_SP_DEBUG = 0x6A8122FD,
   *   SAVEGAMETYPE_SP_PROPERTY = 0xAE0AB38E
   * };
   *
   * @param {number} savegameType
   * @return {boolean}
   */
global.SavegameSaveSp = function (savegameType) {
  return Citizen.invokeNative('0x62c9eb51656d68ce', _ch(savegameType), _r);
};

/**
   * _SAVEGAME_HAS_SAVE_FAILED
   *
  
   * @return {boolean}
   */
global.SavegameHasSaveFailed = function () {
  return Citizen.invokeNative('0x1431540bca1a1bd2', _r);
};

/**
   * _0x443174C20B8B9E7F
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x443174C20B8B9E7F = function (p0, p1, p2) {
  return Citizen.invokeNative('0x443174c20b8b9e7f', p0, p1, p2);
};

/**
   * _0x4FB5869E2B37FC00
   *
  
   * @return {void}
   */
global.N_0x4FB5869E2B37FC00 = function () {
  return Citizen.invokeNative('0x4fb5869e2b37fc00');
};

/**
   * _0x81F4E92BE3958364
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x81F4E92BE3958364 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x81f4e92be3958364', p0, p1, p2);
};

/**
   * _0x8E8FFB9E4AD051D2
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x8E8FFB9E4AD051D2 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x8e8ffb9e4ad051d2', p0, p1, p2, p3);
};

/**
   * _0x9BB83C4DD7BE0802
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0x9BB83C4DD7BE0802 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x9bb83c4dd7be0802', p0, p1, p2, p3, p4);
};

/**
   * _0xA7ECEBAFBAF997A5
   *
   * @param {number} savegameType
   * @return {any}
   */
global.N_0xA7ECEBAFBAF997A5 = function (savegameType) {
  return Citizen.invokeNative('0xa7ecebafbaf997a5', _ch(savegameType), _r);
};

/**
   * _0xA844FEB5C22C2C74
   *
  
   * @return {void}
   */
global.N_0xA844FEB5C22C2C74 = function () {
  return Citizen.invokeNative('0xa844feb5c22c2c74');
};

/**
   * _0xB00CE33465B5406D
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xB00CE33465B5406D = function (p0, p1) {
  return Citizen.invokeNative('0xb00ce33465b5406d', p0, p1, _r);
};

/**
   * _0xC0ABF784590798A9
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xC0ABF784590798A9 = function (p0) {
  return Citizen.invokeNative('0xc0abf784590798a9', p0);
};

/**
   * _0xE0B45E983BFC0768
   *
  
   * @return {void}
   */
global.N_0xE0B45E983BFC0768 = function () {
  return Citizen.invokeNative('0xe0b45e983bfc0768');
};

/**
   * _0xE8346E62FD7FB962
   *
  
   * @return {void}
   */
global.N_0xE8346E62FD7FB962 = function () {
  return Citizen.invokeNative('0xe8346e62fd7fb962');
};

/**
   * _0xED4B0C1057892B2E
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0xED4B0C1057892B2E = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xed4b0c1057892b2e', p0, p1, p2, p3);
};

/**
   * _SAVEGAME_GET_BOOL
   * Does the exact same as 0x529B9CCD0972AF4E
   *
   * @param {DataView} p0
   * @param {string | number} variableName
   * @return {void}
   */
global.SavegameGetBool = function (p0, variableName) {
  return Citizen.invokeNative('0xbb7f4273c186bc4b', p0, variableName);
};

/**
   * _SAVEGAME_GET_FLOAT
   *
   * @param {DataView} p0
   * @param {string | number} variableName
   * @return {void}
   */
global.SavegameGetFloat = function (p0, variableName) {
  return Citizen.invokeNative('0x35defecae36d4fae', p0, _ts(variableName));
};

/**
   * _SAVEGAME_GET_INT
   *
   * @param {DataView} p0
   * @param {string | number} variableName
   * @return {void}
   */
global.SavegameGetInt = function (p0, variableName) {
  return Citizen.invokeNative('0x529b9ccd0972af4e', p0, _ts(variableName));
};

/**
   * _SAVEGAME_GET_INT_2
   * Does the exact same as 0x529B9CCD0972AF4E
   * Commonly used with time/timestamps
   *
   * @param {DataView} p0
   * @param {string | number} variableName
   * @return {void}
   */
global.SavegameGetInt_2 = function (p0, variableName) {
  return Citizen.invokeNative('0x529b9ccd0972af4d', p0, _ts(variableName));
};

/**
   * _SAVEGAME_GET_INT_3
   * Does the exact same as 0x529B9CCD0972AF4E
   * Commonly used with enums and flags
   *
   * @param {DataView} p0
   * @param {string | number} variableName
   * @return {void}
   */
global.SavegameGetInt_3 = function (p0, variableName) {
  return Citizen.invokeNative('0xb25b5a375be5be26', p0, _ts(variableName));
};

/**
   * _SAVEGAME_GET_TEXT_LABEL_23
   *
   * @param {DataView} p0
   * @param {string | number} variableName
   * @return {void}
   */
global.SavegameGetTextLabel_23 = function (p0, variableName) {
  return Citizen.invokeNative('0x5a10d6506b2f2c63', p0, _ts(variableName));
};

/**
   * _SAVEGAME_GET_TEXT_LABEL_31
   *
   * @param {DataView} p0
   * @param {string | number} variableName
   * @return {void}
   */
global.SavegameGetTextLabel_31 = function (p0, variableName) {
  return Citizen.invokeNative('0x4845e7e7643a908c', p0, _ts(variableName));
};

/**
   * _SAVEGAME_GET_TEXT_LABEL_63
   *
   * @param {DataView} p0
   * @param {string | number} variableName
   * @return {void}
   */
global.SavegameGetTextLabel_63 = function (p0, variableName) {
  return Citizen.invokeNative('0x186608a2ac6f9e88', p0, _ts(variableName));
};

/**
   * AWARDS_GET_RESULT_ITEM
   *
   * @param {DataView} rpcGuid
   * @param {number} awardHash
   * @param {number} itemIndex
   * @param {DataView} outResultItem
   * @return {boolean}
   */
global.AwardsGetResultItem = function (rpcGuid, awardHash, itemIndex, outResultItem) {
  return Citizen.invokeNative('0xac8fab22a914ae34', rpcGuid, _ch(awardHash), itemIndex, outResultItem, _r);
};

/**
   * BAIL_TO_LANDING_PAGE
   *
   * @param {number} bailCode
   * @return {void}
   */
global.BailToLandingPage = function (bailCode) {
  return Citizen.invokeNative('0xbc2c927f5c264243', bailCode);
};

/**
   * BAIL_WITH_PASS_THROUGH_PARAMS
   *
   * @param {string | number} params
   * @return {void}
   */
global.BailWithPassThroughParams = function (params) {
  return Citizen.invokeNative('0xe98204d3c25ae14c', _ts(params));
};

/**
   * BG_DOES_LAUNCH_PARAM_EXIST
   *
   * @param {number} scriptIndex
   * @param {string | number} p1
   * @return {boolean}
   */
global.BgDoesLaunchParamExist = function (scriptIndex, p1) {
  return Citizen.invokeNative('0x4ae1dff337a86fde', scriptIndex, _ts(p1), _r);
};

/**
   * BG_END_CONTEXT
   * Deletes the given context from the background scripts context map.
   *
   * @param {string | number} contextName
   * @return {void}
   */
global.BgEndContext = function (contextName) {
  return Citizen.invokeNative('0x3abf7ba1c3e2c8cf', _ts(contextName));
};

/**
   * BG_END_CONTEXT_HASH
   * Hashed version of BG_END_CONTEXT
   *
   * @param {number} contextHash
   * @return {void}
   */
global.BgEndContextHash = function (contextHash) {
  return Citizen.invokeNative('0x6d1431744182cde8', _ch(contextHash));
};

/**
   * BG_GET_LAUNCH_PARAM_VALUE
   *
   * @param {number} scriptIndex
   * @param {string | number} p1
   * @return {number}
   */
global.BgGetLaunchParamValue = function (scriptIndex, p1) {
  return Citizen.invokeNative('0x55c40b7592bad213', scriptIndex, _ts(p1), _r, _ri);
};

/**
   * BG_GET_SCRIPT_ID_FROM_NAME_HASH
   *
   * @param {number} p0
   * @return {number}
   */
global.BgGetScriptIdFromNameHash = function (p0) {
  return Citizen.invokeNative('0x829cd22e043a2577', _ch(p0), _r, _ri);
};

/**
   * BG_IS_EXITFLAG_SET
   * Returns true if GtaThread+0x77C is equal to 1.
   * 
   * Old name: _BG_EXITED_BECAUSE_BACKGROUND_THREAD_STOPPED
   *
  
   * @return {boolean}
   */
global.BgIsExitflagSet = function () {
  return Citizen.invokeNative('0x2238ec3ec631ab1f', _r);
};

/**
   * BG_SET_EXITFLAG_RESPONSE
   * Sets bit 0 in GtaThread+0x784
   *
  
   * @return {void}
   */
global.BgSetExitflagResponse = function () {
  return Citizen.invokeNative('0x4858148e3b8a75d0');
};

/**
   * BG_START_CONTEXT
   * Inserts the given context into the background scripts context map.
   *
   * @param {string | number} contextName
   * @return {void}
   */
global.BgStartContext = function (contextName) {
  return Citizen.invokeNative('0x49ba5678ba040ca7', _ts(contextName));
};

/**
   * BG_START_CONTEXT_HASH
   * Hashed version of BG_START_CONTEXT
   *
   * @param {number} contextHash
   * @return {void}
   */
global.BgStartContextHash = function (contextHash) {
  return Citizen.invokeNative('0x2eb67d564dcc09d5', _ch(contextHash));
};

/**
   * COUNT_PARTICIPANT_BITS
   *
   * @param {DataView} value
   * @return {number}
   */
global.CountParticipantBits = function (value) {
  return Citizen.invokeNative('0x2f050a3ff8738245', value, _r, _ri);
};

/**
   * COUNT_PLAYER_BITS
   *
   * @param {DataView} value
   * @return {number}
   */
global.CountPlayerBits = function (value) {
  return Citizen.invokeNative('0x462c687bea254bd9', value, _r, _ri);
};

/**
   * DOES_SCRIPT_EXIST
   *
   * @param {string | number} scriptName
   * @return {boolean}
   */
global.DoesScriptExist = function (scriptName) {
  return Citizen.invokeNative('0x552b171e3f69e5ae', scriptName, _r);
};

/**
   * DOES_SCRIPT_WITH_NAME_HASH_EXIST
   *
   * @param {number} scriptHash
   * @return {boolean}
   */
global.DoesScriptWithNameHashExist = function (scriptHash) {
  return Citizen.invokeNative('0xa34e89749f628284', _ch(scriptHash), _r);
};

/**
   * DOES_THREAD_EXIST
   *
   * @param {number} threadId
   * @return {boolean}
   */
global.DoesThreadExist = function (threadId) {
  return Citizen.invokeNative('0xff975bc4435a0fa3', threadId, _r);
};

/**
   * GET_BLOCK_OF_PLAYER_BITS
   *
   * @param {DataView} value
   * @param {number} p1
   * @return {number}
   */
global.GetBlockOfPlayerBits = function (value, p1) {
  return Citizen.invokeNative('0xfa3b530a5cc693d5', value, p1, _r, _ri);
};

/**
   * GET_EVENT_AT_INDEX
   * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
   * 
   * Returns event name hash: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
   *
   * @param {number} eventGroup
   * @param {number} eventIndex
   * @return {number}
   */
global.GetEventAtIndex = function (eventGroup, eventIndex) {
  return Citizen.invokeNative('0xa85e614430eff816', eventGroup, eventIndex, _r, _ri);
};

/**
   * GET_EVENT_DATA
   * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
   * 
   * Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
   * 
   * https://github.com/femga/rdr3_discoveries/tree/master/AI/EVENTS
   *
   * @param {number} eventGroup
   * @param {number} eventIndex
   * @param {DataView} eventData
   * @param {number} eventDataSize
   * @return {boolean}
   */
global.GetEventData = function (eventGroup, eventIndex, eventData, eventDataSize) {
  return Citizen.invokeNative('0x57ec5fa4d4d6afca', eventGroup, eventIndex, eventData, eventDataSize, _r);
};

/**
   * GET_EVENT_EXISTS
   * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
   *
   * @param {number} eventGroup
   * @param {number} eventType
   * @return {boolean}
   */
global.GetEventExists = function (eventGroup, eventType) {
  return Citizen.invokeNative('0xc9f59c0a710ecd34', eventGroup, _ch(eventType), _r);
};

/**
   * GET_HASH_OF_THIS_SCRIPT_NAME
   *
  
   * @return {number}
   */
global.GetHashOfThisScriptName = function () {
  return Citizen.invokeNative('0xbc2c927f5c264960', _r, _ri);
};

/**
   * GET_ID_OF_THIS_THREAD
   *
  
   * @return {number}
   */
global.GetIdOfThisThread = function () {
  return Citizen.invokeNative('0x55525c346bef6960', _r, _ri);
};

/**
   * GET_NO_LOADING_SCREEN
   *
  
   * @return {boolean}
   */
global.GetNoLoadingScreen = function () {
  return Citizen.invokeNative('0x323daf00687e0f28', _r);
};

/**
   * GET_NUMBER_OF_EVENTS
   * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_ERRORS (CEventGroupScriptErrors)
   *
   * @param {number} eventGroup
   * @return {number}
   */
global.GetNumberOfEvents = function (eventGroup) {
  return Citizen.invokeNative('0x5ce8de5909565748', eventGroup, _r, _ri);
};

/**
   * GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH
   * Gets the number of instances of the specified script is currently running.
   * 
   * Actually returns numRefs - 1.
   * if (program)
   *   v3 = rage::scrProgram::GetNumRefs(program) - 1;
   * return v3;
   * 
   * Old name: _GET_NUMBER_OF_REFERENCES_OF_SCRIPT_WITH_NAME_HASH
   *
   * @param {number} scriptHash
   * @return {number}
   */
global.GetNumberOfThreadsRunningTheScriptWithThisHash = function (scriptHash) {
  return Citizen.invokeNative('0x8e34c953364a76dd', _ch(scriptHash), _r, _ri);
};

/**
   * GET_THREAD_EXISTENCE_DETAILS
   *
   * @param {number} threadId
   * @return {[boolean, boolean]}
   */
global.GetThreadExistenceDetails = function (threadId) {
  return Citizen.invokeNative('0xd92fa81b64920e85', threadId, /* actually bool */ _i, /* actually bool */ _i);
};

/**
   * HAS_SCRIPT_LOADED
   * Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.
   *
   * @param {string | number} scriptName
   * @return {boolean}
   */
global.HasScriptLoaded = function (scriptName) {
  return Citizen.invokeNative('0xe97bd36574f8b0a6', scriptName, _r);
};

/**
   * HAS_SCRIPT_WITH_NAME_HASH_LOADED
   *
   * @param {number} scriptHash
   * @return {boolean}
   */
global.HasScriptWithNameHashLoaded = function (scriptHash) {
  return Citizen.invokeNative('0xa5d8e0c2f3c7eebc', _ch(scriptHash), _r);
};

/**
   * HAVE_ALL_CHILD_SCRIPTS_TERMINATED
   * Waiting for child scripts to terminate / waiting for collapse of child scripts
   *
   * @param {number} p0
   * @return {boolean}
   */
global.HaveAllChildScriptsTerminated = function (p0) {
  return Citizen.invokeNative('0x380ffa15b72408fb', p0, _r);
};

/**
   * IS_LOADING_SCREEN_VISIBLE
   * Same as GET_IS_LOADING_SCREEN_ACTIVE
   *
  
   * @return {boolean}
   */
global.IsLoadingScreenVisible = function () {
  return Citizen.invokeNative('0xb54adbe65d528fcb', _r);
};

/**
   * IS_THREAD_ACTIVE
   *
   * @param {number} threadId
   * @param {boolean} ignoreKilledState
   * @return {boolean}
   */
global.IsThreadActive = function (threadId, ignoreKilledState) {
  return Citizen.invokeNative('0x46e9ae36d8fa6417', threadId, ignoreKilledState, _r);
};

/**
   * IS_THREAD_EXIT_REQUESTED
   *
  
   * @return {boolean}
   */
global.IsThreadExitRequested = function () {
  return Citizen.invokeNative('0x9e4ef615e307fbbe', _r);
};

/**
   * REQUEST_SCRIPT
   *
   * @param {string | number} scriptName
   * @return {void}
   */
global.RequestScript = function (scriptName) {
  return Citizen.invokeNative('0x46ed607ddd40d7fe', scriptName);
};

/**
   * REQUEST_SCRIPT_WITH_NAME_HASH
   *
   * @param {number} scriptHash
   * @return {void}
   */
global.RequestScriptWithNameHash = function (scriptHash) {
  return Citizen.invokeNative('0xf6b9ce3f8d5b9b74', _ch(scriptHash));
};

/**
   * SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID
   * If the function returns 0, the end of the iteration has been reached.
   *
  
   * @return {number}
   */
global.ScriptThreadIteratorGetNextThreadId = function () {
  return Citizen.invokeNative('0x3ce3fb167e837d7c', _r, _ri);
};

/**
   * SCRIPT_THREAD_ITERATOR_RESET
   * Starts a new iteration of the current threads.
   * Call this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)
   *
  
   * @return {void}
   */
global.ScriptThreadIteratorReset = function () {
  return Citizen.invokeNative('0x39382eb8dcd8684d');
};

/**
   * SET_BLOCK_OF_PLAYER_BITS
   *
   * @param {DataView} value
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.SetBlockOfPlayerBits = function (value, p1, p2) {
  return Citizen.invokeNative('0xc6dfb8c04c86d5a5', value, p1, p2);
};

/**
   * SET_EVENT_FLAG_FOR_DELETION
   *
   * @param {number} eventGroup
   * @param {number} eventIndex
   * @param {boolean} p2
   * @return {void}
   */
global.SetEventFlagForDeletion = function (eventGroup, eventIndex, p2) {
  return Citizen.invokeNative('0x4768d5252eaeb76f', eventGroup, eventIndex, p2);
};

/**
   * SET_NO_LOADING_SCREEN
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetNoLoadingScreen = function (toggle) {
  return Citizen.invokeNative('0x5cb83156aa038f95', toggle);
};

/**
   * SET_SCRIPT_AS_NO_LONGER_NEEDED
   *
   * @param {string | number} scriptName
   * @return {void}
   */
global.SetScriptAsNoLongerNeeded = function (scriptName) {
  return Citizen.invokeNative('0x0086d3067e1cfd1c', _ts(scriptName));
};

/**
   * SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED
   *
   * @param {number} scriptHash
   * @return {void}
   */
global.SetScriptWithNameHashAsNoLongerNeeded = function (scriptHash) {
  return Citizen.invokeNative('0x50723a1567c8361e', _ch(scriptHash));
};

/**
   * SHUTDOWN_LOADING_SCREEN
   *
  
   * @return {void}
   */
global.ShutdownLoadingScreen = function () {
  return Citizen.invokeNative('0xfc179d7e8886dadf');
};

/**
   * START_NEW_SCRIPT
   *
   * @param {string | number} scriptName
   * @param {number} stackSize
   * @return {number}
   */
global.StartNewScript = function (scriptName, stackSize) {
  return Citizen.invokeNative('0xe81651ad79516e48', _ts(scriptName), stackSize, _r, _ri);
};

/**
   * START_NEW_SCRIPT_WITH_ARGS
   * return : script thread id, 0 if failed
   * Pass pointer to struct of args in p1, size of struct goes into p2
   *
   * @param {string | number} scriptName
   * @param {DataView} args
   * @param {number} argCount
   * @param {number} stackSize
   * @return {number}
   */
global.StartNewScriptWithArgs = function (scriptName, args, argCount, stackSize) {
  return Citizen.invokeNative('0xb8ba7f44df1575e1', _ts(scriptName), args, argCount, stackSize, _r, _ri);
};

/**
   * START_NEW_SCRIPT_WITH_NAME_HASH
   *
   * @param {number} scriptHash
   * @param {number} stackSize
   * @return {number}
   */
global.StartNewScriptWithNameHash = function (scriptHash, stackSize) {
  return Citizen.invokeNative('0xeb1c67c3a5333a92', _ch(scriptHash), stackSize, _r, _ri);
};

/**
   * START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS
   *
   * @param {number} scriptHash
   * @param {DataView} args
   * @param {number} argCount
   * @param {number} stackSize
   * @return {number}
   */
global.StartNewScriptWithNameHashAndArgs = function (scriptHash, args, argCount, stackSize) {
  return Citizen.invokeNative('0xc4bb298bd441be78', _ch(scriptHash), args, argCount, stackSize, _r, _ri);
};

/**
   * STOP_DISPLAYING_MP_TRANSITION_LOADING_SCREENS
   *
   * @param {any} p0
   * @return {void}
   */
global.StopDisplayingMpTransitionLoadingScreens = function (p0) {
  return Citizen.invokeNative('0x778d4733e0f2f265', p0);
};

/**
   * TERMINATE_THIS_THREAD
   *
  
   * @return {void}
   */
global.TerminateThisThread = function () {
  return Citizen.invokeNative('0x5e8b6d17ff91cd59');
};

/**
   * TERMINATE_THREAD
   *
   * @param {number} threadId
   * @return {void}
   */
global.TerminateThread = function (threadId) {
  return Citizen.invokeNative('0x87ed52ae40ea1a52', threadId);
};

/**
   * TRIGGER_SCRIPT_EVENT
   * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
   * 
   * Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
   * 
   * playerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this event should be sent to. In order to send the event to specific players only, use (1 << playerIndex). Set all bits if it should be broadcast to all players.
   *
   * @param {number} eventGroup
   * @param {DataView} eventData
   * @param {number} eventDataSize
   * @param {number} scriptMetadataIndex
   * @return {number}
   */
global.TriggerScriptEvent = function (eventGroup, eventData, eventDataSize, scriptMetadataIndex) {
  return Citizen.invokeNative('0x5ae99c571d5bbe5d', eventGroup, eventData, eventDataSize, scriptMetadataIndex, _i);
};

/**
   * _0x0A79C81C418F5D38
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x0A79C81C418F5D38 = function (p0, p1) {
  return Citizen.invokeNative('0x0a79c81c418f5d38', p0, p1, _r);
};

/**
   * _0x11B0A0B282FA9B10
   * Used in Script Function DISABLE_REGISTERED_WORLD_BRAINS
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0x11B0A0B282FA9B10 = function (p0) {
  return Citizen.invokeNative('0x11b0a0b282fa9b10', p0);
};

/**
   * _0x1BDB5A07307F6929
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x1BDB5A07307F6929 = function (p0, p1) {
  return Citizen.invokeNative('0x1bdb5a07307f6929', p0, p1);
};

/**
   * _0x1C5EB3C27F7508CB
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x1C5EB3C27F7508CB = function (p0, p1) {
  return Citizen.invokeNative('0x1c5eb3c27f7508cb', p0, p1);
};

/**
   * _0x29FB4CE89472C3CB
   *
   * @param {any} p0
   * @param {any} p1
   * @param {number} p2
   * @param {number} p3
   * @param {string | number} p4
   * @param {string | number} p5
   * @param {string | number} p6
   * @param {number} p7
   * @return {void}
   */
global.N_0x29FB4CE89472C3CB = function (p0, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0x29fb4ce89472c3cb', p0, p1, _fv(p2), _fv(p3), _ts(p4), _ts(p5), _ts(p6), p7);
};

/**
   * _0x42A429CDFED6D99D
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x42A429CDFED6D99D = function (p0, p1, p2) {
  return Citizen.invokeNative('0x42a429cdfed6d99d', p0, p1, p2);
};

/**
   * _0x5827BE85A87B073D
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x5827BE85A87B073D = function (p0) {
  return Citizen.invokeNative('0x5827be85a87b073d', p0);
};

/**
   * _0x64F765D9A1F8F02C
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {DataView} p2
   * @return {void}
   */
global.N_0x64F765D9A1F8F02C = function (p0, p1, p2) {
  return Citizen.invokeNative('0x64f765d9a1f8f02c', p0, p1, p2);
};

/**
   * _0x6F700A4BF7C3331B
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0x6F700A4BF7C3331B = function (p0) {
  return Citizen.invokeNative('0x6f700a4bf7c3331b', p0);
};

/**
   * _0x76CBCD9EADC00955
   *
  
   * @return {void}
   */
global.N_0x76CBCD9EADC00955 = function () {
  return Citizen.invokeNative('0x76cbcd9eadc00955');
};

/**
   * _0xA88E1D7FA1E20080
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xA88E1D7FA1E20080 = function (p0) {
  return Citizen.invokeNative('0xa88e1d7fa1e20080', p0, _r);
};

/**
   * _0xE4ABE20DCE7C7CFE
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xE4ABE20DCE7C7CFE = function (p0, p1, p2) {
  return Citizen.invokeNative('0xe4abe20dce7c7cfe', p0, p1, p2);
};

/**
   * _0xE7282390542F570D
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xE7282390542F570D = function (p0) {
  return Citizen.invokeNative('0xe7282390542f570d', p0, _r);
};

/**
   * _0xF9E951A1E5517C06
   *
  
   * @return {void}
   */
global.N_0xF9E951A1E5517C06 = function () {
  return Citizen.invokeNative('0xf9e951a1e5517c06');
};

/**
   * _0xFFDDF802279BE128
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xFFDDF802279BE128 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xffddf802279be128', p0, p1, p2);
};

/**
   * _ACTIVATE_GOAL_CONTEXT
   * goalContext: see <availableContexts> in common/data/stats_and_challenges/goals_*.meta
   *
   * @param {number} goalContext
   * @return {void}
   */
global.ActivateGoalContext = function (goalContext) {
  return Citizen.invokeNative('0x7d654266025e921b', _ch(goalContext));
};

/**
   * _AWARDS_GET_UNLOCK_CLAIM_DATA
   *
   * @param {DataView} rpcGuid
   * @param {number} awardHash
   * @param {number} dataIndex
   * @param {DataView} outUnlockData
   * @return {boolean}
   */
global.AwardsGetUnlockClaimData = function (rpcGuid, awardHash, dataIndex, outUnlockData) {
  return Citizen.invokeNative('0xb9467e41dab1cf2c', rpcGuid, _ch(awardHash), dataIndex, outUnlockData, _r);
};

/**
   * _BG_RELOAD_ALL_BACKGROUND_SCRIPTS
   *
  
   * @return {void}
   */
global.BgReloadAllBackgroundScripts = function () {
  return Citizen.invokeNative('0xbe7d814cfa181b56');
};

/**
   * _CLEAR_ALL_PLAYER_BITS
   *
   * @param {DataView} value
   * @return {void}
   */
global.ClearAllPlayerBits = function (value) {
  return Citizen.invokeNative('0xde544b7ec0c187cc', value);
};

/**
   * _CLEAR_PLAYER_BIT_AT_INDEX
   *
   * @param {DataView} value
   * @param {number} bitIndex
   * @return {void}
   */
global.ClearPlayerBitAtIndex = function (value, bitIndex) {
  return Citizen.invokeNative('0xd426e2e3288469d6', value, bitIndex);
};

/**
   * _DEACTIVATE_GOAL_CONTEXT
   * goalContext: see _ACTIVATE_GOAL_CONTEXT
   *
   * @param {number} goalContext
   * @return {void}
   */
global.DeactivateGoalContext = function (goalContext) {
  return Citizen.invokeNative('0x50b72a754ee64a71', _ch(goalContext));
};

/**
   * _DISPLAY_LOADING_SCREENS
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {string | number} gamemodeName
   * @param {string | number} title
   * @param {string | number} subtitle
   * @return {void}
   */
global.DisplayLoadingScreens = function (p0, p1, p2, gamemodeName, title, subtitle) {
  return Citizen.invokeNative('0x1e5b70e53db661e5', _ch(p0), _ch(p1), _ch(p2), _ts(gamemodeName), _ts(title), _ts(subtitle));
};

/**
   * _DOES_COMPRESSED_GLOBAL_BLOCK_BUFFER_EXIST
   *
   * @param {number} index
   * @return {boolean}
   */
global.DoesCompressedGlobalBlockBufferExist = function (index) {
  return Citizen.invokeNative('0x66ee5b93c308f734', index, _r);
};

/**
   * _GET_GLOBAL_BLOCK_CAN_BE_ACCESSED
   *
   * @param {number} index
   * @return {boolean}
   */
global.GetGlobalBlockCanBeAccessed = function (index) {
  return Citizen.invokeNative('0x42a7eb5c814c2de0', index, _r);
};

/**
   * _GET_HASH_OF_THREAD
   *
   * @param {number} threadId
   * @return {number}
   */
global.GetHashOfThread = function (threadId) {
  return Citizen.invokeNative('0x724cb89d35b283d0', threadId, _r, _ri);
};

/**
   * _GET_THREAD_EXIT_REASON
   * enum eThreadExitReason
   * {
   *   THREAD_EXIT_REASON_NONE,
   *   THREAD_EXIT_REASON_BACKGROUND_THREAD_STOPPED,
   *   THREAD_EXIT_REASON_SESSION_MERGE,
   *   THREAD_EXIT_REASON_SCENARIO_OUT_OF_SCOPE,
   *   THREAD_EXIT_REASON_REQUESTED_BY_SCRIPT
   * };
   *
  
   * @return {number}
   */
global.GetThreadExitReason = function () {
  return Citizen.invokeNative('0x54ae4fdeefeab77e', _r, _ri);
};

/**
   * _IS_ANY_PLAYER_BIT_SET
   *
  
   * @return {[boolean, number]}
   */
global.IsAnyPlayerBitSet = function () {
  return Citizen.invokeNative('0x179a6f0ee2e79026', _i, _r);
};

/**
   * _IS_BACKGROUND_SCRIPT
   *
   * @param {number} threadId
   * @return {boolean}
   */
global.IsBackgroundScript = function (threadId) {
  return Citizen.invokeNative('0x20b7f69b40c6b755', threadId, _r);
};

/**
   * _IS_GOAL_CONTEXT_ACTIVE
   * goalContext: see _ACTIVATE_GOAL_CONTEXT
   *
   * @param {number} goalContext
   * @return {boolean}
   */
global.IsGoalContextActive = function (goalContext) {
  return Citizen.invokeNative('0x7409669c5ed50144', _ch(goalContext), _r);
};

/**
   * _IS_PLAYER_BIT_SET_AT_INDEX
   *
   * @param {DataView} value
   * @param {number} bitIndex
   * @return {boolean}
   */
global.IsPlayerBitSetAtIndex = function (value, bitIndex) {
  return Citizen.invokeNative('0x72b2e00c9bac6789', value, bitIndex, _r);
};

/**
   * _IS_THREAD_EXIT_REQUESTED_FOR_THREAD_WITH_THIS_ID
   *
   * @param {number} threadId
   * @return {boolean}
   */
global.IsThreadExitRequestedForThreadWithThisId = function (threadId) {
  return Citizen.invokeNative('0x30bed53646c86d11', threadId, _r);
};

/**
   * _LOOT_GET_LOOT_CLAIM_DATA
   *
   * @param {DataView} rpcGuid
   * @param {number} dataIndex
   * @param {DataView} outLootData
   * @return {boolean}
   */
global.LootGetLootClaimData = function (rpcGuid, dataIndex, outLootData) {
  return Citizen.invokeNative('0xf1e9045f5aa9e428', rpcGuid, dataIndex, outLootData, _r);
};

/**
   * _LOOT_GET_RESULT_ITEM
   *
   * @param {DataView} rpcGuid
   * @param {number} itemIndex
   * @param {DataView} outResultItem
   * @return {boolean}
   */
global.LootGetResultItem = function (rpcGuid, itemIndex, outResultItem) {
  return Citizen.invokeNative('0x4293b44a855f82cc', rpcGuid, itemIndex, outResultItem, _r);
};

/**
   * _NET_RPC_GUID_TO_STRING
   * Returns "INVALID_NET_RPC_GUID" if netRpcGuid is invalid.
   *
   * @param {DataView} netRpcGuid
   * @return {string | number}
   */
global.NetRpcGuidToString = function (netRpcGuid) {
  return Citizen.invokeNative('0xac9ff854bd4ba9b5', netRpcGuid, _r, _s);
};

/**
   * _REQUEST_THREAD_EXIT
   *
   * @param {number} threadId
   * @return {void}
   */
global.RequestThreadExit = function (threadId) {
  return Citizen.invokeNative('0x7de4643157ad646c', threadId);
};

/**
   * _REQUEST_THREAD_EXIT_FOR_ALL_THREADS_WITH_THIS_NAME
   *
   * @param {number} nameHash
   * @return {void}
   */
global.RequestThreadExitForAllThreadsWithThisName = function (nameHash) {
  return Citizen.invokeNative('0x7423f7835770f619', _ch(nameHash));
};

/**
   * _RESTORE_GLOBAL_BLOCK
   *
   * @param {number} index
   * @return {boolean}
   */
global.RestoreGlobalBlock = function (index) {
  return Citizen.invokeNative('0xdc3914a99b4a5fdf', index, _r);
};

/**
   * _SET_ALL_GLOBAL_BLOCKS_HAVE_BEEN_LOADED
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetAllGlobalBlocksHaveBeenLoaded = function (toggle) {
  return Citizen.invokeNative('0x11986b05885564d2', toggle);
};

/**
   * _SET_ALL_PLAYER_BITS
   *
   * @param {DataView} value
   * @return {void}
   */
global.SetAllPlayerBits = function (value) {
  return Citizen.invokeNative('0x20f4cb76689acdbc', value);
};

/**
   * _SET_GLOBAL_BLOCK_CAN_BE_ACCESSED
   *
   * @param {number} index
   * @param {boolean} toggle
   * @return {void}
   */
global.SetGlobalBlockCanBeAccessed = function (index, toggle) {
  return Citizen.invokeNative('0xe66f392bfce734af', index, toggle);
};

/**
   * _SET_PLAYER_BIT_AT_INDEX
   *
   * @param {DataView} value
   * @param {number} bitIndex
   * @return {void}
   */
global.SetPlayerBitAtIndex = function (value, bitIndex) {
  return Citizen.invokeNative('0x31010318ba9897ac', value, bitIndex);
};

/**
   * _STORE_GLOBAL_BLOCK
   *
   * @param {number} index
   * @return {boolean}
   */
global.StoreGlobalBlock = function (index) {
  return Citizen.invokeNative('0xb952a3ac41d58f2f', index, _r);
};

/**
   * _TRIGGER_SCRIPT_EVENT_2
   *
   * @param {DataView} eventData
   * @param {number} eventDataSize
   * @param {number} scriptMetadataIndex
   * @param {number} threadId
   * @return {void}
   */
global.TriggerScriptEvent_2 = function (eventData, eventDataSize, scriptMetadataIndex, threadId) {
  return Citizen.invokeNative('0x8b61c950a148ffa2', eventData, eventDataSize, scriptMetadataIndex, threadId);
};

/**
   * GET_SHAPE_TEST_RESULT
   * Returns the result of a shape test: 0 if the handle is invalid, 1 if the shape test is still pending, or 2 if the shape test has completed, and the handle should be invalidated.
   * 
   * When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
   * 
   * enum eShapeTestStatus
   * {
   *   SHAPETEST_STATUS_NONEXISTENT,
   *   SHAPETEST_STATUS_RESULTS_NOTREADY,
   *   SHAPETEST_STATUS_RESULTS_READY
   * };
   *
   * @param {number} shapeTestHandle
   * @param {number} entityHit
   * @return {[number, boolean, Vector3, Vector3]}
   */
global.GetShapeTestResult = function (shapeTestHandle, entityHit) {
  return Citizen.invokeNative('0xede8ac7c5108fb1d', shapeTestHandle, /* actually bool */ _i, _v, _v, _ii(entityHit), _r, _ri);
};

/**
   * START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE
   * Does the same as 0x7EE9F5D83DD4F90E, except blocking until the shape test completes.
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {number} flags
   * @param {number} entityToIgnore
   * @param {number} p8
   * @return {number}
   */
global.StartExpensiveSynchronousShapeTestLosProbe = function (x1, y1, z1, x2, y2, z2, flags, entityToIgnore, p8) {
  return Citizen.invokeNative('0x377906d8a31e5586', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), flags, entityToIgnore, p8, _r, _ri);
};

/**
   * START_SHAPE_TEST_BOX
   *
   * @param {number} posX
   * @param {number} posY
   * @param {number} posZ
   * @param {number} dimensionsX
   * @param {number} dimensionsY
   * @param {number} dimensionsZ
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} rotationOrder
   * @param {number} flags
   * @param {number} entityToIgnore
   * @param {number} options
   * @return {number}
   */
global.StartShapeTestBox = function (posX, posY, posZ, dimensionsX, dimensionsY, dimensionsZ, rotX, rotY, rotZ, rotationOrder, flags, entityToIgnore, options) {
  return Citizen.invokeNative('0xfe466162c4401d18', _fv(posX), _fv(posY), _fv(posZ), _fv(dimensionsX), _fv(dimensionsY), _fv(dimensionsZ), _fv(rotX), _fv(rotY), _fv(rotZ), rotationOrder, flags, entityToIgnore, options, _r, _ri);
};

/**
   * START_SHAPE_TEST_CAPSULE
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {number} radius
   * @param {number} flags
   * @param {number} entityToIgnore
   * @param {number} p9
   * @return {number}
   */
global.StartShapeTestCapsule = function (x1, y1, z1, x2, y2, z2, radius, flags, entityToIgnore, p9) {
  return Citizen.invokeNative('0x28579d1b8f8aac80', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(radius), flags, entityToIgnore, p9, _r, _ri);
};

/**
   * START_SHAPE_TEST_LOS_PROBE
   * Asynchronously starts a line-of-sight (raycast) world probe shape test.
   * 
   * Use the handle with 0x3D87450E15D98694 or 0x65287525D951F6BE until it returns 0 or 2.
   * 
   * p8 is a bit mask with bits 1, 2 and/or 4, relating to collider types; 4 should usually be used. flags used are mostly 83 and 3167 
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {number} flags
   * @param {number} entity
   * @param {number} p8
   * @return {number}
   */
global.StartShapeTestLosProbe = function (x1, y1, z1, x2, y2, z2, flags, entity, p8) {
  return Citizen.invokeNative('0x7ee9f5d83dd4f90e', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), flags, entity, p8, _r, _ri);
};

/**
   * START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE
   * Old name: _START_SHAPE_TEST_SURROUNDING_COORDS
   *
   * @param {number} flag
   * @param {number} entity
   * @param {number} flag2
   * @return {[ScrHandle, Vector3, Vector3]}
   */
global.StartShapeTestMouseCursorLosProbe = function (flag, entity, flag2) {
  return Citizen.invokeNative('0x9839013d8b6014f1', _v, _v, flag, entity, flag2, _r, _ri);
};

/**
   * START_SHAPE_TEST_SWEPT_SPHERE
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {number} radius
   * @param {number} flags
   * @param {number} entity
   * @param {any} p9
   * @return {number}
   */
global.StartShapeTestSweptSphere = function (x1, y1, z1, x2, y2, z2, radius, flags, entity, p9) {
  return Citizen.invokeNative('0xaa5b7c8309f73230', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(radius), flags, entity, p9, _r, _ri);
};

/**
   * _0x04AA59CA40571C2E
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x04AA59CA40571C2E = function (p0, p1) {
  return Citizen.invokeNative('0x04aa59ca40571c2e', p0, p1, _r);
};

/**
   * SC_COMMUNITY_EVENT_GET_DISPLAY_NAME
   *
   * @param {string | number} p0
   * @return {boolean}
   */
global.ScCommunityEventGetDisplayName = function (p0) {
  return Citizen.invokeNative('0x89d9bde7334b110f', p0, _r);
};

/**
   * SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID
   *
   * @param {number} p0
   * @param {string | number} p1
   * @return {boolean}
   */
global.ScCommunityEventGetDisplayNameById = function (p0, p1) {
  return Citizen.invokeNative('0x11ea52cad1b55910', p0, p1, _r);
};

/**
   * SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE
   *
   * @param {string | number} p0
   * @param {string | number} p1
   * @return {boolean}
   */
global.ScCommunityEventGetDisplayNameForType = function (p0, p1) {
  return Citizen.invokeNative('0x85ea0bec7b1f7622', p0, _ts(p1), _r);
};

/**
   * SC_COMMUNITY_EVENT_GET_EVENT_ID
   *
  
   * @return {number}
   */
global.ScCommunityEventGetEventId = function () {
  return Citizen.invokeNative('0xd635df6baa5a6017', _r, _ri);
};

/**
   * SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE
   *
   * @param {string | number} p0
   * @return {number}
   */
global.ScCommunityEventGetEventIdForType = function (p0) {
  return Citizen.invokeNative('0x03c03abbabbef752', _ts(p0), _r, _ri);
};

/**
   * SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT
   *
   * @param {string | number} p0
   * @return {[boolean, number]}
   */
global.ScCommunityEventGetExtraDataFloat = function (p0) {
  return Citizen.invokeNative('0x060bbad634c2b44b', _ts(p0), _f, _r);
};

/**
   * SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID
   *
   * @param {number} p0
   * @param {string | number} p1
   * @return {[boolean, number]}
   */
global.ScCommunityEventGetExtraDataFloatById = function (p0, p1) {
  return Citizen.invokeNative('0x91c9e2a0f9dd6dd4', p0, _ts(p1), _f, _r);
};

/**
   * SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE
   *
   * @param {string | number} p0
   * @param {string | number} p2
   * @return {[boolean, number]}
   */
global.ScCommunityEventGetExtraDataFloatForType = function (p0, p2) {
  return Citizen.invokeNative('0x1bdb56db258f052d', _ts(p0), _f, _ts(p2), _r);
};

/**
   * SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT
   *
   * @param {string | number} p0
   * @return {[boolean, number]}
   */
global.ScCommunityEventGetExtraDataInt = function (p0) {
  return Citizen.invokeNative('0xb4411d4d6b81438e', _ts(p0), _i, _r);
};

/**
   * SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID
   *
   * @param {number} p0
   * @param {string | number} p1
   * @return {[boolean, number]}
   */
global.ScCommunityEventGetExtraDataIntById = function (p0, p1) {
  return Citizen.invokeNative('0x7c981de05a7403a0', p0, _ts(p1), _i, _r);
};

/**
   * SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE
   *
   * @param {string | number} p0
   * @param {string | number} p2
   * @return {[boolean, number]}
   */
global.ScCommunityEventGetExtraDataIntForType = function (p0, p2) {
  return Citizen.invokeNative('0x3519cc3525319a96', _ts(p0), _i, _ts(p2), _r);
};

/**
   * SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING
   *
   * @param {string | number} p0
   * @param {string | number} p1
   * @return {boolean}
   */
global.ScCommunityEventGetExtraDataString = function (p0, p1) {
  return Citizen.invokeNative('0x9f6dcd0c939c71e9', _ts(p0), p1, _r);
};

/**
   * SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID
   *
   * @param {number} p0
   * @param {string | number} p1
   * @param {string | number} p2
   * @return {boolean}
   */
global.ScCommunityEventGetExtraDataStringById = function (p0, p1, p2) {
  return Citizen.invokeNative('0x049d2196d9d11184', p0, _ts(p1), p2, _r);
};

/**
   * SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE
   *
   * @param {string | number} p0
   * @param {string | number} p1
   * @param {string | number} p2
   * @return {boolean}
   */
global.ScCommunityEventGetExtraDataStringForType = function (p0, p1, p2) {
  return Citizen.invokeNative('0xc8fc3b2432e8229d', _ts(p0), p1, _ts(p2), _r);
};

/**
   * SC_COMMUNITY_EVENT_IS_ACTIVE
   *
  
   * @return {boolean}
   */
global.ScCommunityEventIsActive = function () {
  return Citizen.invokeNative('0xcbf743c984695cf3', _r);
};

/**
   * SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID
   *
   * @param {number} p0
   * @return {boolean}
   */
global.ScCommunityEventIsActiveById = function (p0) {
  return Citizen.invokeNative('0x62b384fefde06817', p0, _r);
};

/**
   * SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE
   *
   * @param {string | number} p0
   * @return {boolean}
   */
global.ScCommunityEventIsActiveForType = function (p0) {
  return Citizen.invokeNative('0x09937eb0cebc2f9f', _ts(p0), _r);
};

/**
   * SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX
   *
   * @param {number} msgIndex
   * @return {boolean}
   */
global.ScInboxGetMessageIsReadAtIndex = function (msgIndex) {
  return Citizen.invokeNative('0x74cf39e030a382c4', msgIndex, _r);
};

/**
   * SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX
   *
   * @param {number} msgIndex
   * @return {number}
   */
global.ScInboxGetMessageTypeAtIndex = function (msgIndex) {
  return Citizen.invokeNative('0xff92537c4ddc1241', msgIndex, _r, _ri);
};

/**
   * SC_INBOX_GET_TOTAL_NUM_MESSAGES
   *
  
   * @return {number}
   */
global.ScInboxGetTotalNumMessages = function () {
  return Citizen.invokeNative('0x8ef0f633280c0663', _r, _ri);
};

/**
   * SC_INBOX_MESSAGE_GET_DATA_INT
   *
   * @param {number} p0
   * @param {string | number} context
   * @return {[boolean, number]}
   */
global.ScInboxMessageGetDataInt = function (p0, context) {
  return Citizen.invokeNative('0x95bb39c4da99f348', p0, context, _i, _r);
};

/**
   * SC_INBOX_MESSAGE_GET_DATA_STRING
   *
   * @param {number} p0
   * @param {string | number} context
   * @param {string | number} out
   * @return {boolean}
   */
global.ScInboxMessageGetDataString = function (p0, context, out) {
  return Citizen.invokeNative('0x66f77fd58506ff6b', p0, context, out, _r);
};

/**
   * SC_INBOX_MESSAGE_GET_RAW_TYPE_AT_INDEX
   *
   * @param {number} p0
   * @return {string | number}
   */
global.ScInboxMessageGetRawTypeAtIndex = function (p0) {
  return Citizen.invokeNative('0x176d077685cd83e4', p0, _r, _s);
};

/**
   * SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX
   *
   * @param {number} msgIndex
   * @return {boolean}
   */
global.ScInboxSetMessageAsReadAtIndex = function (msgIndex) {
  return Citizen.invokeNative('0x63cac501fff66dc4', msgIndex, _r);
};

/**
   * SC_PRESENCE_ATTR_SET_FLOAT
   *
   * @param {number} attrHash
   * @param {number} value
   * @return {boolean}
   */
global.ScPresenceAttrSetFloat = function (attrHash, value) {
  return Citizen.invokeNative('0xa31dafcdc33775e9', _ch(attrHash), _fv(value), _r);
};

/**
   * SC_PRESENCE_ATTR_SET_FLOAT_EX
   *
   * @param {string | number} attrName
   * @param {number} value
   * @param {boolean} p2
   * @return {boolean}
   */
global.ScPresenceAttrSetFloatEx = function (attrName, value, p2) {
  return Citizen.invokeNative('0x00000000467f4caa', attrName, _fv(value), p2, _r);
};

/**
   * SC_PRESENCE_ATTR_SET_INT_EX
   *
   * @param {string | number} attrName
   * @param {number} value
   * @param {boolean} p2
   * @return {boolean}
   */
global.ScPresenceAttrSetIntEx = function (attrName, value, p2) {
  return Citizen.invokeNative('0x0000000085488c49', attrName, value, p2, _r);
};

/**
   * SC_PRESENCE_ATTR_SET_STRING_EX
   *
   * @param {string | number} attrName
   * @param {string | number} value
   * @param {boolean} p2
   * @return {boolean}
   */
global.ScPresenceAttrSetStringEx = function (attrName, value, p2) {
  return Citizen.invokeNative('0x00000000eb2d93b3', _ts(attrName), _ts(value), p2, _r);
};

/**
   * SC_PROFANITY_CHECK_STRING
   * Starts a task to check an entered string for profanity on the ROS/Social Club services.
   *
   * @param {string | number} string
   * @return {[boolean, number]}
   */
global.ScProfanityCheckString = function (string) {
  return Citizen.invokeNative('0x9c74ac9d87b3fff4', string, _i, _r);
};

/**
   * SC_PROFANITY_GET_CHECK_IS_PENDING
   *
   * @param {number} token
   * @return {boolean}
   */
global.ScProfanityGetCheckIsPending = function (token) {
  return Citizen.invokeNative('0x3a10bcd0c8aa0b82', token, _r);
};

/**
   * SC_PROFANITY_GET_CHECK_IS_VALID
   *
   * @param {number} token
   * @return {boolean}
   */
global.ScProfanityGetCheckIsValid = function (token) {
  return Citizen.invokeNative('0x08c8052af40c4247', token, _r);
};

/**
   * SC_PROFANITY_GET_STRING_PASSED
   *
   * @param {number} token
   * @return {boolean}
   */
global.ScProfanityGetStringPassed = function (token) {
  return Citizen.invokeNative('0xf302973bb8be70e6', token, _r);
};

/**
   * SC_PROFANITY_GET_STRING_STATUS
   *
   * @param {number} token
   * @return {number}
   */
global.ScProfanityGetStringStatus = function (token) {
  return Citizen.invokeNative('0x0cf3bfb99ebbe5b1', token, _r, _ri);
};

/**
   * SC_FEED_HUB_HAS_NEW_DATA
   *
  
   * @return {boolean}
   */
global.ScFeedHubHasNewData = function () {
  return Citizen.invokeNative('0x068332d20cb6f897', _r);
};

/**
   * _SC_FEED_SUBMIT_PRESET_MESSAGE
   *
   * @param {number} type
   * @param {number} subType
   * @return {number}
   */
global.ScFeedSubmitPresetMessage = function (type, subType) {
  return Citizen.invokeNative('0xefb64240f6b17817', type, subType, _r, _ri);
};

/**
   * _SPACTIONPROXY_GET_NEXT_PENDING_BUY_ACTION
   *
   * @param {DataView} data
   * @return {boolean}
   */
global.SpactionproxyGetNextPendingBuyAction = function (data) {
  return Citizen.invokeNative('0x1f471b79acc98bef', data, _r);
};

/**
   * _SPACTIONPROXY_GET_NEXT_PENDING_CRAFTING_ACTION
   *
   * @param {DataView} data
   * @return {boolean}
   */
global.SpactionproxyGetNextPendingCraftingAction = function (data) {
  return Citizen.invokeNative('0x1f471b79acc97bef', data, _r);
};

/**
   * _SPACTIONPROXY_MANAGER_IS_FAILED
   *
  
   * @return {boolean}
   */
global.SpactionproxyManagerIsFailed = function () {
  return Citizen.invokeNative('0x1f471b79acc91bec', _r);
};

/**
   * _SPACTIONPROXY_MANAGER_IS_READY
   *
  
   * @return {boolean}
   */
global.SpactionproxyManagerIsReady = function () {
  return Citizen.invokeNative('0x1f471b79acc91bed', _r);
};

/**
   * _SPACTIONPROXY_PROCESS_ACTION
   *
   * @param {any} p0
   * @param {boolean} p1
   * @return {boolean}
   */
global.SpactionproxyProcessAction = function (p0, p1) {
  return Citizen.invokeNative('0x1f471b79acc94bef', p0, p1, _r);
};

/**
   * _SPACTIONPROXY_START_MANAGER
   *
  
   * @return {boolean}
   */
global.SpactionproxyStartManager = function () {
  return Citizen.invokeNative('0x1f471b79acc91bee', _r);
};

/**
   * CHAL_ACHIEVEMENT_GET_PROGRESS_INT
   *
   * @param {number} p0
   * @param {number} p1
   * @return {number}
   */
global.ChalAchievementGetProgressInt = function (p0, p1) {
  return Citizen.invokeNative('0x808712e428f697b8', _ch(p0), _ch(p1), _r, _ri);
};

/**
   * CHAL_ACHIEVEMENT_IS_COMPLETE
   *
   * @param {number} p0
   * @param {number} p1
   * @return {boolean}
   */
global.ChalAchievementIsComplete = function (p0, p1) {
  return Citizen.invokeNative('0x77b97a827739d434', _ch(p0), _ch(p1), _r);
};

/**
   * CHAL_ADD_GOAL_PROGRESS_FLOAT
   *
   * @param {number} chalHash
   * @param {number} goalHash
   * @param {number} value
   * @return {void}
   */
global.ChalAddGoalProgressFloat = function (chalHash, goalHash, value) {
  return Citizen.invokeNative('0x86922d8c02fb7703', _ch(chalHash), _ch(goalHash), _fv(value));
};

/**
   * CHAL_ADD_GOAL_PROGRESS_FLOAT_BY_SCORE_ID
   *
   * @param {number} p0
   * @param {number} value
   * @return {void}
   */
global.ChalAddGoalProgressFloatByScoreId = function (p0, value) {
  return Citizen.invokeNative('0x86922d8c02fb7705', _ch(p0), _fv(value));
};

/**
   * CHAL_ADD_GOAL_PROGRESS_INT
   *
   * @param {number} chalHash
   * @param {number} goalHash
   * @param {number} value
   * @return {void}
   */
global.ChalAddGoalProgressInt = function (chalHash, goalHash, value) {
  return Citizen.invokeNative('0xddbd560745b1ee9a', _ch(chalHash), _ch(goalHash), value);
};

/**
   * CHAL_ADD_GOAL_PROGRESS_INT_BY_SCORE_ID
   *
   * @param {number} p0
   * @param {number} value
   * @return {void}
   */
global.ChalAddGoalProgressIntByScoreId = function (p0, value) {
  return Citizen.invokeNative('0xddbd560745b1ee9c', _ch(p0), value);
};

/**
   * CHAL_GET_MAX_RANKS
   *
   * @param {number} chalHash
   * @return {number}
   */
global.ChalGetMaxRanks = function (chalHash) {
  return Citizen.invokeNative('0x58cb53db63f84dea', _ch(chalHash), _r, _ri);
};

/**
   * CHAL_GET_NUM_RANKS_COMPLETED
   *
   * @param {number} chalHash
   * @return {number}
   */
global.ChalGetNumRanksCompleted = function (chalHash) {
  return Citizen.invokeNative('0x58cb53db63f84de9', _ch(chalHash), _r, _ri);
};

/**
   * CHAL_IS_GOAL_ACTIVE
   * https://github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS/challenge_goals.lua
   *
   * @param {number} chalHash
   * @param {number} goalHash
   * @return {boolean}
   */
global.ChalIsGoalActive = function (chalHash, goalHash) {
  return Citizen.invokeNative('0x04dac3929796eb87', _ch(chalHash), _ch(goalHash), _r);
};

/**
   * CHAL_MISSION_ADD_GOAL_PROGRESS_INT
   *
   * @param {number} missionHash
   * @param {number} goalHash
   * @param {number} value
   * @return {void}
   */
global.ChalMissionAddGoalProgressInt = function (missionHash, goalHash, value) {
  return Citizen.invokeNative('0x97e18e7c098626de', _ch(missionHash), _ch(goalHash), value);
};

/**
   * CHAL_MISSION_GET_NUM_GOALS
   *
   * @param {number} missionHash
   * @return {number}
   */
global.ChalMissionGetNumGoals = function (missionHash) {
  return Citizen.invokeNative('0x0b0576dd3a75e58d', _ch(missionHash), _r, _ri);
};

/**
   * CHAL_MISSION_GET_NUM_GOALS_COMPLETE
   *
   * @param {number} missionHash
   * @return {number}
   */
global.ChalMissionGetNumGoalsComplete = function (missionHash) {
  return Citizen.invokeNative('0xa785a52b59b7e7b2', _ch(missionHash), _r, _ri);
};

/**
   * CHAL_MISSION_IS_GOAL_COMPLETE
   *
   * @param {number} missionHash
   * @param {number} goalHash
   * @return {boolean}
   */
global.ChalMissionIsGoalComplete = function (missionHash, goalHash) {
  return Citizen.invokeNative('0xc0bb774787bbf301', _ch(missionHash), _ch(goalHash), _r);
};

/**
   * CHAL_NET_START_CHAL
   *
   * @param {number} chalHash
   * @return {void}
   */
global.ChalNetStartChal = function (chalHash) {
  return Citizen.invokeNative('0x4abf7e4db6279e8f', _ch(chalHash));
};

/**
   * CHAL_NET_START_GOAL
   *
   * @param {number} chalHash
   * @param {number} goalHash
   * @return {void}
   */
global.ChalNetStartGoal = function (chalHash, goalHash) {
  return Citizen.invokeNative('0xc3fcb47344dcb638', _ch(chalHash), _ch(goalHash));
};

/**
   * CHAL_NET_STOP_CHAL
   *
   * @param {number} chalHash
   * @return {void}
   */
global.ChalNetStopChal = function (chalHash) {
  return Citizen.invokeNative('0x43b0163154a50c86', _ch(chalHash));
};

/**
   * CHAL_NET_STOP_GOAL
   *
   * @param {number} chalHash
   * @param {number} goalHash
   * @return {void}
   */
global.ChalNetStopGoal = function (chalHash, goalHash) {
  return Citizen.invokeNative('0x00ce6a93324a590b', _ch(chalHash), _ch(goalHash));
};

/**
   * CHAL_SET_GOAL_DISABLED
   *
   * @param {number} chalHash
   * @param {number} goalHash
   * @param {boolean} disabled
   * @return {void}
   */
global.ChalSetGoalDisabled = function (chalHash, goalHash, disabled) {
  return Citizen.invokeNative('0xf63df9ee16393343', _ch(chalHash), _ch(goalHash), disabled);
};

/**
   * CHAL_SET_GOAL_PROGRESS_INT
   *
   * @param {number} chalHash
   * @param {number} goalHash
   * @param {number} value
   * @return {void}
   */
global.ChalSetGoalProgressInt = function (chalHash, goalHash, value) {
  return Citizen.invokeNative('0xddbd560745b1ee9b', _ch(chalHash), _ch(goalHash), value);
};

/**
   * STATSTRACKER_DEED_STARTED
   *
   * @param {number} p0
   * @param {any} p1
   * @return {void}
   */
global.StatstrackerDeedStarted = function (p0, p1) {
  return Citizen.invokeNative('0xb2a38826e5886e83', _ch(p0), p1);
};

/**
   * STATSTRACKER_IS_INITIALIZED
   *
   * @param {number} p0
   * @return {boolean}
   */
global.StatstrackerIsInitialized = function (p0) {
  return Citizen.invokeNative('0x01f4d242765c6b24', _ch(p0), _r);
};

/**
   * STAT_ADD_BOUNTY_TARGET
   *
   * @param {number} unlockHash
   * @param {number} ped
   * @return {void}
   */
global.StatAddBountyTarget = function (unlockHash, ped) {
  return Citizen.invokeNative('0x6b1044fdc2b09101', _ch(unlockHash), ped);
};

/**
   * STAT_BOUNTY_CAPTURED
   *
   * @param {number} entity
   * @return {void}
   */
global.StatBountyCaptured = function (entity) {
  return Citizen.invokeNative('0x262ef7cf49cf1eb9', entity);
};

/**
   * STAT_BOUNTY_ESCAPED
   *
   * @param {number} ped
   * @return {void}
   */
global.StatBountyEscaped = function (ped) {
  return Citizen.invokeNative('0xb22f05732f72f70c', ped);
};

/**
   * STAT_ID_GET_BOOL
   * statId: see STAT_ID_IS_VALID
   *
   * @param {DataView} statId
   * @return {[boolean, boolean]}
   */
global.StatIdGetBool = function (statId) {
  return Citizen.invokeNative('0x11b5e6d2ae73f48f', statId, /* actually bool */ _i, _r);
};

/**
   * STAT_ID_GET_DATE
   * statId: see STAT_ID_IS_VALID
   *
   * @param {DataView} statId
   * @param {DataView} date
   * @return {boolean}
   */
global.StatIdGetDate = function (statId, date) {
  return Citizen.invokeNative('0x8b0facefc36c824c', statId, date, _r);
};

/**
   * STAT_ID_GET_FLOAT
   * statId: see STAT_ID_IS_VALID
   *
   * @param {DataView} statId
   * @return {[boolean, number]}
   */
global.StatIdGetFloat = function (statId) {
  return Citizen.invokeNative('0xd7ae6c9c9c6ac54d', statId, _f, _r);
};

/**
   * STAT_ID_GET_INT
   * statId: see STAT_ID_IS_VALID
   *
   * @param {DataView} statId
   * @return {[boolean, number]}
   */
global.StatIdGetInt = function (statId) {
  return Citizen.invokeNative('0x767fbc2ac802ef3e', statId, _i, _r);
};

/**
   * STAT_ID_IS_VALID
   * struct StatId
   * {
   *   alignas(8) Hash BaseId;
   *   alignas(8) Hash PermutationId;
   * }
   *
   * @param {DataView} statId
   * @return {boolean}
   */
global.StatIdIsValid = function (statId) {
  return Citizen.invokeNative('0xc48fe1971c9743ff', statId, _r);
};

/**
   * STAT_ID_SET_BOOL
   * statId: see STAT_ID_IS_VALID
   *
   * @param {DataView} statId
   * @param {boolean} value
   * @param {boolean} p2
   * @return {boolean}
   */
global.StatIdSetBool = function (statId, value, p2) {
  return Citizen.invokeNative('0x3b5107353267d7a1', statId, value, p2, _r);
};

/**
   * STAT_ID_SET_DATE
   * statId: see STAT_ID_IS_VALID
   *
   * @param {DataView} statId
   * @param {DataView} date
   * @param {boolean} p2
   * @return {boolean}
   */
global.StatIdSetDate = function (statId, date, p2) {
  return Citizen.invokeNative('0x1fae9b2faa2dfe06', statId, date, p2, _r);
};

/**
   * STAT_ID_SET_FLOAT
   * statId: see STAT_ID_IS_VALID
   *
   * @param {DataView} statId
   * @param {number} value
   * @param {boolean} p2
   * @return {boolean}
   */
global.StatIdSetFloat = function (statId, value, p2) {
  return Citizen.invokeNative('0x481bdf6a10c5ef68', statId, _fv(value), p2, _r);
};

/**
   * STAT_ID_SET_GXT_LABEL
   * statId: see STAT_ID_IS_VALID
   *
   * @param {DataView} statId
   * @param {string | number} label
   * @param {boolean} p2
   * @return {boolean}
   */
global.StatIdSetGxtLabel = function (statId, label, p2) {
  return Citizen.invokeNative('0x05060a54834f2382', statId, _ts(label), p2, _r);
};

/**
   * STAT_ID_SET_INT
   * statId: see STAT_ID_IS_VALID
   *
   * @param {DataView} statId
   * @param {number} value
   * @param {boolean} p2
   * @return {boolean}
   */
global.StatIdSetInt = function (statId, value, p2) {
  return Citizen.invokeNative('0xa4ddf5df95e65eee', statId, value, p2, _r);
};

/**
   * STAT_ID_SET_TO_POSSE_ID
   * statId: see STAT_ID_IS_VALID
   *
   * @param {DataView} statId
   * @return {void}
   */
global.StatIdSetToPosseId = function (statId) {
  return Citizen.invokeNative('0x34b22de38477edb4', statId);
};

/**
   * STAT_PHOTOGRAPH_TAKEN
   *
   * @param {number} itemset
   * @return {void}
   */
global.StatPhotographTaken = function (itemset) {
  return Citizen.invokeNative('0x4d31051a4ca83787', itemset);
};

/**
   * STAT_REGISTER_LEGENDARY_ANIMAL_DEED
   *
   * @param {number} deedHash
   * @return {void}
   */
global.StatRegisterLegendaryAnimalDeed = function (deedHash) {
  return Citizen.invokeNative('0xcd0d69c65bb0e8b9', _ch(deedHash));
};

/**
   * WEEKLY_COLLECTIBLE_GET_ITEM_IN_SET
   *
   * @param {number} chalHash
   * @param {number} setIndex
   * @param {number} itemIndex
   * @return {[boolean, number, number]}
   */
global.WeeklyCollectibleGetItemInSet = function (chalHash, setIndex, itemIndex) {
  return Citizen.invokeNative('0xba61ba6205a3f5a8', _ch(chalHash), setIndex, itemIndex, _i, _i, _r);
};

/**
   * WEEKLY_COLLECTIBLE_GET_ITEM_SET_BUY_AWARD
   *
   * @param {number} chalHash
   * @param {number} index
   * @return {number}
   */
global.WeeklyCollectibleGetItemSetBuyAward = function (chalHash, index) {
  return Citizen.invokeNative('0x610783f646894d25', _ch(chalHash), index, _r, _ri);
};

/**
   * WEEKLY_COLLECTIBLE_GET_ITEM_SET_LABEL
   *
   * @param {number} chalHash
   * @param {number} index
   * @return {number}
   */
global.WeeklyCollectibleGetItemSetLabel = function (chalHash, index) {
  return Citizen.invokeNative('0xbffa88522ff0f730', _ch(chalHash), index, _r, _ri);
};

/**
   * WEEKLY_COLLECTIBLE_GET_NUM_ITEMS_IN_SET
   *
   * @param {number} chalHash
   * @param {number} index
   * @return {number}
   */
global.WeeklyCollectibleGetNumItemsInSet = function (chalHash, index) {
  return Citizen.invokeNative('0x7d675c9dddb365be', _ch(chalHash), index, _r, _ri);
};

/**
   * WEEKLY_COLLECTIBLE_GET_NUM_SETS
   *
   * @param {number} chalHash
   * @return {number}
   */
global.WeeklyCollectibleGetNumSets = function (chalHash) {
  return Citizen.invokeNative('0x8f5317729f791d10', _ch(chalHash), _r, _ri);
};

/**
   * _0x025E98E317652CDD
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x025E98E317652CDD = function (p0) {
  return Citizen.invokeNative('0x025e98e317652cdd', p0);
};

/**
   * _0x0FEE2561120F3333
   * statId: see STAT_ID_IS_VALID
   *
   * @param {DataView} statId
   * @return {void}
   */
global.N_0x0FEE2561120F3333 = function (statId) {
  return Citizen.invokeNative('0x0fee2561120f3333', statId);
};

/**
   * _0x218F7710A139D012
   *
  
   * @return {void}
   */
global.N_0x218F7710A139D012 = function () {
  return Citizen.invokeNative('0x218f7710a139d012');
};

/**
   * _0x302E71C1D9EE75B9
   * statId: see STAT_ID_IS_VALID
   *
   * @param {DataView} statId
   * @param {number} p1
   * @return {[boolean, number]}
   */
global.N_0x302E71C1D9EE75B9 = function (statId, p1) {
  return Citizen.invokeNative('0x302e71c1d9ee75b9', statId, _ch(p1), _i, _r);
};

/**
   * _0x378D3B1B11D9385B
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x378D3B1B11D9385B = function (p0) {
  return Citizen.invokeNative('0x378d3b1b11d9385b', p0);
};

/**
   * _0x3AEABAE3F3C7600C
   *
  
   * @return {boolean}
   */
global.N_0x3AEABAE3F3C7600C = function () {
  return Citizen.invokeNative('0x3aeabae3f3c7600c', _r);
};

/**
   * _0x3EB2791A1FBC8A42
   *
   * @param {number} statItem
   * @param {number} p1
   * @return {void}
   */
global.N_0x3EB2791A1FBC8A42 = function (statItem, p1) {
  return Citizen.invokeNative('0x3eb2791a1fbc8a42', _ch(statItem), p1);
};

/**
   * _0x3F6FD87D2030ADC6
   *
  
   * @return {string | number}
   */
global.N_0x3F6FD87D2030ADC6 = function () {
  return Citizen.invokeNative('0x3f6fd87d2030adc6', _r, _s);
};

/**
   * _0x4DAC398297981B87
   * Only used in R* SP Scripts
   *
   * @param {number} p0
   * @return {boolean}
   */
global.N_0x4DAC398297981B87 = function (p0) {
  return Citizen.invokeNative('0x4dac398297981b87', p0, _r);
};

/**
   * _0x4E463A3CDEFFFE96
   * Only used in R* Script net_char_creator
   *
  
   * @return {void}
   */
global.N_0x4E463A3CDEFFFE96 = function () {
  return Citizen.invokeNative('0x4e463a3cdefffe96');
};

/**
   * _0x4F2D5FA23DB992DE
   * Only used in R* Script net_char_creator
   *
  
   * @return {void}
   */
global.N_0x4F2D5FA23DB992DE = function () {
  return Citizen.invokeNative('0x4f2d5fa23db992de');
};

/**
   * _0x4FCBCC0584CD08E9
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x4FCBCC0584CD08E9 = function (p0) {
  return Citizen.invokeNative('0x4fcbcc0584cd08e9', _ch(p0));
};

/**
   * _0x6123E2832C34243D
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0x6123E2832C34243D = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x6123e2832c34243d', p0, p1, p2, p3, p4);
};

/**
   * _0x8312F09C56149A8A
   * Only used in R* SP Scripts
   *
   * @param {number} animalType
   * @return {void}
   */
global.N_0x8312F09C56149A8A = function (animalType) {
  return Citizen.invokeNative('0x8312f09c56149a8a', _ch(animalType));
};

/**
   * _0x8BA3D7B1E83EF803
   *
   * @param {number} p0
   * @return {number}
   */
global.N_0x8BA3D7B1E83EF803 = function (p0) {
  return Citizen.invokeNative('0x8ba3d7b1e83ef803', _ch(p0), _r, _ri);
};

/**
   * _0x8C889E4CBB4B2356
   *
   * @param {any} p0
   * @param {number} ped
   * @return {void}
   */
global.N_0x8C889E4CBB4B2356 = function (p0, ped) {
  return Citizen.invokeNative('0x8c889e4cbb4b2356', p0, ped);
};

/**
   * _0x91A4F58E01ED5E4C
   * statId: see STAT_ID_IS_VALID
   *
   * @param {DataView} statId
   * @param {number} value
   * @return {void}
   */
global.N_0x91A4F58E01ED5E4C = function (statId, value) {
  return Citizen.invokeNative('0x91a4f58e01ed5e4c', statId, value);
};

/**
   * _0x99230691875FC218
   *
   * @param {any} p0
   * @param {number} p1
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.N_0x99230691875FC218 = function (p0, p1, x, y, z) {
  return Citizen.invokeNative('0x99230691875fc218', p0, _ch(p1), _fv(x), _fv(y), _fv(z));
};

/**
   * _0x9D0F5D2E1951CD84
   *
  
   * @return {number}
   */
global.N_0x9D0F5D2E1951CD84 = function () {
  return Citizen.invokeNative('0x9d0f5d2e1951cd84', _r, _rf);
};

/**
   * _0xA2E2BEA4E83F6270
   *
   * @param {number} p0
   * @return {any}
   */
global.N_0xA2E2BEA4E83F6270 = function (p0) {
  return Citizen.invokeNative('0xa2e2bea4e83f6270', _ch(p0), _r);
};

/**
   * _0xA59590050F80FF2E
   * Only used in R* SP Scripts
   *
   * @param {any} p0
   * @param {boolean} p1
   * @param {boolean} p2
   * @param {boolean} p3
   * @return {void}
   */
global.N_0xA59590050F80FF2E = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xa59590050f80ff2e', p0, p1, p2, p3);
};

/**
   * _0xA596890CF55B5095
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xA596890CF55B5095 = function (ped, p1) {
  return Citizen.invokeNative('0xa596890cf55b5095', ped, p1);
};

/**
   * _0xB112B9262EC29C20
   *
   * @param {number} p0
   * @param {number} p1
   * @return {string | number}
   */
global.N_0xB112B9262EC29C20 = function (p0, p1) {
  return Citizen.invokeNative('0xb112b9262ec29c20', _ch(p0), p1, _r, _s);
};

/**
   * _0xB5E2EDA2135E0FA1
   *
   * @param {number} p0
   * @param {number} p1
   * @return {[boolean, number]}
   */
global.N_0xB5E2EDA2135E0FA1 = function (p0, p1) {
  return Citizen.invokeNative('0xb5e2eda2135e0fa1', _ch(p0), p1, _i, _r);
};

/**
   * _0xBE66B26B6529E943
   *
   * @param {number} unlockHash
   * @param {number} ped
   * @param {number} animalType
   * @return {void}
   */
global.N_0xBE66B26B6529E943 = function (unlockHash, ped, animalType) {
  return Citizen.invokeNative('0xbe66b26b6529e943', _ch(unlockHash), ped, _ch(animalType));
};

/**
   * _0xCA1F0B5103936891
   *
   * @param {number} p0
   * @return {boolean}
   */
global.N_0xCA1F0B5103936891 = function (p0) {
  return Citizen.invokeNative('0xca1f0b5103936891', _ch(p0), _r);
};

/**
   * _0xCA41E86545413B5B
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.N_0xCA41E86545413B5B = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xca41e86545413b5b', p0, p1, p2, p3, p4, p5, p6);
};

/**
   * _0xD64DBC8B0424135F
   *
   * @param {number} ped
   * @param {number} animalType
   * @return {void}
   */
global.N_0xD64DBC8B0424135F = function (ped, animalType) {
  return Citizen.invokeNative('0xd64dbc8b0424135f', ped, _ch(animalType));
};

/**
   * _0xDA26263C07CCE9C2
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0xDA26263C07CCE9C2 = function (p0) {
  return Citizen.invokeNative('0xda26263c07cce9c2', p0);
};

/**
   * _0xDDBD560745B1EE98
   *
   * @param {number} chalHash
   * @param {number} goalHash
   * @param {number} player
   * @return {number}
   */
global.N_0xDDBD560745B1EE98 = function (chalHash, goalHash, player) {
  return Citizen.invokeNative('0xddbd560745b1ee98', _ch(chalHash), _ch(goalHash), player, _r, _ri);
};

/**
   * _0xDF95DF488A645CE7
   *
  
   * @return {void}
   */
global.N_0xDF95DF488A645CE7 = function () {
  return Citizen.invokeNative('0xdf95df488a645ce7');
};

/**
   * _0xE141F6B40B1E3683
   * statId: see STAT_ID_IS_VALID
   * Only used in R* SP Scripts
   * _STAT_ID_SET_*
   *
   * @param {DataView} statId
   * @param {number} value
   * @return {void}
   */
global.N_0xE141F6B40B1E3683 = function (statId, value) {
  return Citizen.invokeNative('0xe141f6b40b1e3683', statId, _fv(value));
};

/**
   * _0xE5A680A5D8B1F687
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0xE5A680A5D8B1F687 = function (p0) {
  return Citizen.invokeNative('0xe5a680a5d8b1f687', p0);
};

/**
   * _0xF21A5D66874FCEDD
   *
   * @param {any} p0
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.N_0xF21A5D66874FCEDD = function (p0, p1, p2) {
  return Citizen.invokeNative('0xf21a5d66874fcedd', p0, _ch(p1), _ch(p2));
};

/**
   * _0xF2B5ABDE09958689
   *
   * @param {number} unlockHash
   * @param {number} ped1
   * @param {number} ped2
   * @return {void}
   */
global.N_0xF2B5ABDE09958689 = function (unlockHash, ped1, ped2) {
  return Citizen.invokeNative('0xf2b5abde09958689', _ch(unlockHash), ped1, ped2);
};

/**
   * _0xF8181B5EF156862C
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0xF8181B5EF156862C = function (ped) {
  return Citizen.invokeNative('0xf8181b5ef156862c', ped);
};

/**
   * _STATSTRACKER_DEED_STATUS
   *
   * @param {number} deedType
   * @param {number} deedHash
   * @param {number} missionStatus
   * @param {DataView} data
   * @return {void}
   */
global.StatstrackerDeedStatus = function (deedType, deedHash, missionStatus, data) {
  return Citizen.invokeNative('0xd5910ecf81a2278c', deedType, _ch(deedHash), missionStatus, data);
};

/**
   * _STAT_ADD_ANIMAL_SAMPLE_TARGET
   * Related to animal tagging
   *
   * @param {number} animalType
   * @return {void}
   */
global.StatAddAnimalSampleTarget = function (animalType) {
  return Citizen.invokeNative('0x90e9a5dadbabc918', _ch(animalType));
};

/**
   * _STAT_CALCULATE_COOLDOWN
   * Calculation: (value / 1000) / 60 % 60
   *
   * @param {number} value
   * @return {number}
   */
global.StatCalculateCooldown = function (value) {
  return Citizen.invokeNative('0x1e7384ab5d4f4581', value, _r, _ri);
};

/**
   * _STAT_CARRIED_SATCHEL_ITEM_FROM_PED
   *
   * @param {number} ped
   * @return {void}
   */
global.StatCarriedSatchelItemFromPed = function (ped) {
  return Citizen.invokeNative('0x831bf01c56149a8a', ped);
};

/**
   * _STAT_DONATE_INCREMENT_ITEM
   *
   * @param {number} item
   * @param {number} slot
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.StatDonateIncrementItem = function (item, slot, p2, p3) {
  return Citizen.invokeNative('0x7c2abf6e556b21fc', item, slot, p2, p3);
};

/**
   * _STAT_ID_DECREMENT_INT
   * statId: see STAT_ID_IS_VALID
   *
   * @param {DataView} statId
   * @param {number} value
   * @return {void}
   */
global.StatIdDecrementInt = function (statId, value) {
  return Citizen.invokeNative('0xbd861ae8a5181ed7', statId, value);
};

/**
   * _STAT_ID_INCREMENT_FLOAT
   * statId: see STAT_ID_IS_VALID
   *
   * @param {DataView} statId
   * @param {number} value
   * @return {void}
   */
global.StatIdIncrementFloat = function (statId, value) {
  return Citizen.invokeNative('0x4a47e38ea3d60939', statId, _fv(value));
};

/**
   * _STAT_ID_INCREMENT_INT
   * statId: see STAT_ID_IS_VALID
   *
   * @param {DataView} statId
   * @param {number} value
   * @return {void}
   */
global.StatIdIncrementInt = function (statId, value) {
  return Citizen.invokeNative('0x6a0184e904cdf25e', statId, value);
};

/**
   * _STAT_ITEM_FISH_CAUGHT
   *
   * @param {number} fish
   * @param {number} weight
   * @param {number} category
   * @param {number} subcategory
   * @return {void}
   */
global.StatItemFishCaught = function (fish, weight, category, subcategory) {
  return Citizen.invokeNative('0xda26263c87cce9c1', fish, _fv(weight), _ch(category), _ch(subcategory));
};

/**
   * _STAT_PHEROMONE_COOLDOWN_LEGENDARY_ANIMAL
   * statId: see STAT_ID_IS_VALID
   *
   * @param {number} entity
   * @param {DataView} statId
   * @return {boolean}
   */
global.StatPheromoneCooldownLegendaryAnimal = function (entity, statId) {
  return Citizen.invokeNative('0x5420d398a42917fc', entity, statId, _r);
};

/**
   * BEGIN_SRL
   *
  
   * @return {void}
   */
global.BeginSrl = function () {
  return Citizen.invokeNative('0x0360710033be60d9');
};

/**
   * CLEAR_FOCUS
   *
  
   * @return {void}
   */
global.ClearFocus = function () {
  return Citizen.invokeNative('0x86ccaf7ce493efbe');
};

/**
   * CLEAR_HD_AREA
   *
  
   * @return {void}
   */
global.ClearHdArea = function () {
  return Citizen.invokeNative('0xd83b22434e52728d');
};

/**
   * DOES_ANIM_DICT_EXIST
   *
   * @param {string | number} animDict
   * @return {boolean}
   */
global.DoesAnimDictExist = function (animDict) {
  return Citizen.invokeNative('0x537f44cb0d7f150d', animDict, _r);
};

/**
   * END_SRL
   *
  
   * @return {void}
   */
global.EndSrl = function () {
  return Citizen.invokeNative('0x1ce71fb33ca079fe');
};

/**
   * GET_NUMBER_OF_STREAMING_REQUESTS
   *
  
   * @return {number}
   */
global.GetNumberOfStreamingRequests = function () {
  return Citizen.invokeNative('0x30cccc4d88e654ca', _r, _ri);
};

/**
   * GET_POPULATION_BUDGET_MULTIPLIER
   *
  
   * @return {number}
   */
global.GetPopulationBudgetMultiplier = function () {
  return Citizen.invokeNative('0x8a3945405b31048f', _r, _rf);
};

/**
   * HAS_ANIM_DICT_LOADED
   *
   * @param {string | number} animDict
   * @return {boolean}
   */
global.HasAnimDictLoaded = function (animDict) {
  return Citizen.invokeNative('0x27ff6fe8009b40ca', animDict, _r);
};

/**
   * HAS_CLIP_SET_LOADED
   * Alias for HAS_ANIM_SET_LOADED.
   *
   * @param {string | number} clipSet
   * @return {boolean}
   */
global.HasClipSetLoaded = function (clipSet) {
  return Citizen.invokeNative('0x1f23d6b6da1cc3b2', clipSet, _r);
};

/**
   * HAS_COLLISION_FOR_MODEL_LOADED
   *
   * @param {number} model
   * @return {boolean}
   */
global.HasCollisionForModelLoaded = function (model) {
  return Citizen.invokeNative('0x210a79c9ec89778f', _ch(model), _r);
};

/**
   * HAS_MODEL_LOADED
   * Checks if the specified model has loaded into memory.
   *
   * @param {number} model
   * @return {boolean}
   */
global.HasModelLoaded = function (model) {
  return Citizen.invokeNative('0x1283b8b89dd5d1b6', _ch(model), _r);
};

/**
   * HAS_MOVE_NETWORK_DEF_LOADED
   *
   * @param {string | number} name
   * @return {boolean}
   */
global.HasMoveNetworkDefLoaded = function (name) {
  return Citizen.invokeNative('0x2c04d89a0fb4e244', name, _r);
};

/**
   * HAS_NAMED_PTFX_ASSET_LOADED
   *
   * @param {number} fxNameHash
   * @return {boolean}
   */
global.HasNamedPtfxAssetLoaded = function (fxNameHash) {
  return Citizen.invokeNative('0x65bb72f29138f5d6', _ch(fxNameHash), _r);
};

/**
   * HAS_PTFX_ASSET_LOADED
   *
  
   * @return {boolean}
   */
global.HasPtfxAssetLoaded = function () {
  return Citizen.invokeNative('0x13a3f30a9ed0bc31', _r);
};

/**
   * IPL_GROUP_SWAP_CANCEL
   *
  
   * @return {void}
   */
global.IplGroupSwapCancel = function () {
  return Citizen.invokeNative('0x31108bb5715d035f');
};

/**
   * IPL_GROUP_SWAP_FINISH
   *
  
   * @return {void}
   */
global.IplGroupSwapFinish = function () {
  return Citizen.invokeNative('0x040ee319efd1d3b5');
};

/**
   * IPL_GROUP_SWAP_IS_ACTIVE
   *
  
   * @return {boolean}
   */
global.IplGroupSwapIsActive = function () {
  return Citizen.invokeNative('0xfc464598f6ee97b0', _r);
};

/**
   * IPL_GROUP_SWAP_IS_READY
   *
  
   * @return {boolean}
   */
global.IplGroupSwapIsReady = function () {
  return Citizen.invokeNative('0xc2c05defe85a0b64', _r);
};

/**
   * IPL_GROUP_SWAP_START
   *
   * @param {string | number} iplName1
   * @param {string | number} iplName2
   * @return {void}
   */
global.IplGroupSwapStart = function (iplName1, iplName2) {
  return Citizen.invokeNative('0x20d504994fdc4412', iplName1, iplName2);
};

/**
   * IS_ENTITY_FOCUS
   *
   * @param {number} entity
   * @return {boolean}
   */
global.IsEntityFocus = function (entity) {
  return Citizen.invokeNative('0xf87de697e9a06ec6', entity, _r);
};

/**
   * IS_IPL_ACTIVE_BY_HASH
   * Old name: _IS_IMAP_ACTIVE_2
   *
   * @param {number} iplHash
   * @return {boolean}
   */
global.IsIplActiveByHash = function (iplHash) {
  return Citizen.invokeNative('0x93ac1b91cb6d9913', _ch(iplHash), _r);
};

/**
   * IS_IPL_ACTIVE_HASH
   * Old name: _IS_IMAP_ACTIVE
   *
   * @param {number} iplHash
   * @return {boolean}
   */
global.IsIplActiveHash = function (iplHash) {
  return Citizen.invokeNative('0xd779b9b910bd3b7c', _ch(iplHash), _r);
};

/**
   * IS_LOAD_SCENE_ACTIVE
   *
  
   * @return {boolean}
   */
global.IsLoadSceneActive = function () {
  return Citizen.invokeNative('0xcf45df50c7775f2a', _r);
};

/**
   * IS_LOAD_SCENE_LOADED
   *
  
   * @return {boolean}
   */
global.IsLoadSceneLoaded = function () {
  return Citizen.invokeNative('0x0909f71b5c070797', _r);
};

/**
   * IS_MODEL_A_PED
   *
   * @param {number} model
   * @return {boolean}
   */
global.IsModelAPed = function (model) {
  return Citizen.invokeNative('0xc3f09de9d6d17dda', _ch(model), _r);
};

/**
   * IS_MODEL_A_VEHICLE
   * Returns whether the specified model represents a vehicle.
   *
   * @param {number} model
   * @return {boolean}
   */
global.IsModelAVehicle = function (model) {
  return Citizen.invokeNative('0x354f62672de7db0a', _ch(model), _r);
};

/**
   * IS_MODEL_IN_CDIMAGE
   * Returns whether the specified model exists in the game.
   *
   * @param {number} model
   * @return {boolean}
   */
global.IsModelInCdimage = function (model) {
  return Citizen.invokeNative('0xd6f3b6d7716cff8e', _ch(model), _r);
};

/**
   * IS_MODEL_VALID
   * Returns whether the specified model is valid
   *
   * @param {number} model
   * @return {boolean}
   */
global.IsModelValid = function (model) {
  return Citizen.invokeNative('0x392c8d8e07b70efc', _ch(model), _r);
};

/**
   * IS_PLAYER_SWITCH_IN_PROGRESS
   *
  
   * @return {boolean}
   */
global.IsPlayerSwitchInProgress = function () {
  return Citizen.invokeNative('0xed20cb1f5297791d', _r);
};

/**
   * IS_RENDERED_SCENE_LOADED
   *
  
   * @return {boolean}
   */
global.IsRenderedSceneLoaded = function () {
  return Citizen.invokeNative('0x45bf3a6239a576b7', _r);
};

/**
   * IS_SRL_LOADED
   *
  
   * @return {boolean}
   */
global.IsSrlLoaded = function () {
  return Citizen.invokeNative('0x5c2c88512cf6dafb', _r);
};

/**
   * LOAD_SCENE_START
   *
   * @param {number} posX
   * @param {number} posY
   * @param {number} posZ
   * @param {number} offsetX
   * @param {number} offsetY
   * @param {number} offsetZ
   * @param {number} radius
   * @param {number} controlFlags
   * @return {boolean}
   */
global.LoadSceneStart = function (posX, posY, posZ, offsetX, offsetY, offsetZ, radius, controlFlags) {
  return Citizen.invokeNative('0x387ad749e3b69b70', _fv(posX), _fv(posY), _fv(posZ), _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(radius), controlFlags, _r);
};

/**
   * LOAD_SCENE_START_SPHERE
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} controlFlags
   * @return {boolean}
   */
global.LoadSceneStartSphere = function (x, y, z, radius, controlFlags) {
  return Citizen.invokeNative('0x513f8aa5bf2f17cf', _fv(x), _fv(y), _fv(z), _fv(radius), controlFlags, _r);
};

/**
   * LOAD_SCENE_STOP
   *
  
   * @return {void}
   */
global.LoadSceneStop = function () {
  return Citizen.invokeNative('0x5a8b01199c3e79c3');
};

/**
   * PREFETCH_SRL
   *
   * @param {string | number} srl
   * @return {void}
   */
global.PrefetchSrl = function (srl) {
  return Citizen.invokeNative('0x354837e5a5baa5af', srl);
};

/**
   * REMOVE_ANIM_DICT
   *
   * @param {string | number} animDict
   * @return {void}
   */
global.RemoveAnimDict = function (animDict) {
  return Citizen.invokeNative('0x4763145053a33d46', animDict);
};

/**
   * REMOVE_CLIP_SET
   * Alias for REMOVE_ANIM_SET.
   *
   * @param {string | number} clipSet
   * @return {void}
   */
global.RemoveClipSet = function (clipSet) {
  return Citizen.invokeNative('0x817fa1b1ee7cd6f0', clipSet);
};

/**
   * REMOVE_IPL_BY_HASH
   * Old name: _REMOVE_IMAP_2
   *
   * @param {number} iplHash
   * @return {void}
   */
global.RemoveIplByHash = function (iplHash) {
  return Citizen.invokeNative('0x431e3ab760629b34', _ch(iplHash));
};

/**
   * REMOVE_IPL_HASH
   * Old name: _REMOVE_IMAP
   *
   * @param {number} iplHash
   * @return {void}
   */
global.RemoveIplHash = function (iplHash) {
  return Citizen.invokeNative('0x5a3e5cf7b4014b96', _ch(iplHash));
};

/**
   * REMOVE_MOVE_NETWORK_DEF
   *
   * @param {string | number} name
   * @return {void}
   */
global.RemoveMoveNetworkDef = function (name) {
  return Citizen.invokeNative('0x57a197ad83f66bbf', name);
};

/**
   * REMOVE_NAMED_PTFX_ASSET
   *
   * @param {number} fxNameHash
   * @return {void}
   */
global.RemoveNamedPtfxAsset = function (fxNameHash) {
  return Citizen.invokeNative('0xf20866829e1c81a2', _ch(fxNameHash));
};

/**
   * REMOVE_PTFX_ASSET
   *
  
   * @return {void}
   */
global.RemovePtfxAsset = function () {
  return Citizen.invokeNative('0x042f9049ea419e86');
};

/**
   * REQUEST_ADDITIONAL_COLLISION_AT_COORD
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.RequestAdditionalCollisionAtCoord = function (x, y, z) {
  return Citizen.invokeNative('0x83a8d71650d1894f', _fv(x), _fv(y), _fv(z));
};

/**
   * REQUEST_ANIM_DICT
   *
   * @param {string | number} animDict
   * @return {void}
   */
global.RequestAnimDict = function (animDict) {
  return Citizen.invokeNative('0xa862a2ad321f94b4', animDict);
};

/**
   * REQUEST_CLIP_SET
   *
   * @param {string | number} clipSet
   * @return {void}
   */
global.RequestClipSet = function (clipSet) {
  return Citizen.invokeNative('0xef7611b57a820126', clipSet);
};

/**
   * REQUEST_COLLISION_AT_COORD
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.RequestCollisionAtCoord = function (x, y, z) {
  return Citizen.invokeNative('0x0a3720f162a033c9', _fv(x), _fv(y), _fv(z));
};

/**
   * REQUEST_COLLISION_FOR_MODEL
   *
   * @param {number} model
   * @return {void}
   */
global.RequestCollisionForModel = function (model) {
  return Citizen.invokeNative('0xf1767be37f661551', _ch(model));
};

/**
   * REQUEST_IPL_BY_HASH
   * Old name: _REQUEST_IMAP_2
   *
   * @param {number} iplHash
   * @return {void}
   */
global.RequestIplByHash = function (iplHash) {
  return Citizen.invokeNative('0x9e211a378f95c97c', _ch(iplHash));
};

/**
   * REQUEST_IPL_HASH
   * Old name: _REQUEST_IMAP
   *
   * @param {number} iplHash
   * @return {void}
   */
global.RequestIplHash = function (iplHash) {
  return Citizen.invokeNative('0x59767c5a7a9ae6da', _ch(iplHash));
};

/**
   * REQUEST_MODEL
   * Request a model to be loaded into memory.
   *
   * @param {number} model
   * @param {boolean} p1
   * @return {void}
   */
global.RequestModel = function (model, p1) {
  return Citizen.invokeNative('0xfa28fe3a6246fc30', _ch(model), p1);
};

/**
   * REQUEST_MOVE_NETWORK_DEF
   *
   * @param {string | number} name
   * @return {void}
   */
global.RequestMoveNetworkDef = function (name) {
  return Citizen.invokeNative('0x2b6529c54d29037a', name);
};

/**
   * REQUEST_NAMED_PTFX_ASSET
   *
   * @param {number} fxNameHash
   * @return {void}
   */
global.RequestNamedPtfxAsset = function (fxNameHash) {
  return Citizen.invokeNative('0xf2b2353bbc0d4e8f', _ch(fxNameHash));
};

/**
   * REQUEST_PTFX_ASSET
   *
  
   * @return {void}
   */
global.RequestPtfxAsset = function () {
  return Citizen.invokeNative('0x001ff43843028e0c');
};

/**
   * SET_ALL_MAPDATA_CULLED
   * nullsub, doesn't do anything
   *
   * @param {any} p0
   * @return {void}
   */
global.SetAllMapdataCulled = function (p0) {
  return Citizen.invokeNative('0x19abcc581d28e6f9', p0);
};

/**
   * SET_FOCUS_ENTITY
   * It seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.
   *
   * @param {number} entity
   * @return {void}
   */
global.SetFocusEntity = function (entity) {
  return Citizen.invokeNative('0x955aedd58f4bd309', entity);
};

/**
   * SET_FOCUS_POS_AND_VEL
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} offsetX
   * @param {number} offsetY
   * @param {number} offsetZ
   * @return {void}
   */
global.SetFocusPosAndVel = function (x, y, z, offsetX, offsetY, offsetZ) {
  return Citizen.invokeNative('0x25f6ef88664540e2', _fv(x), _fv(y), _fv(z), _fv(offsetX), _fv(offsetY), _fv(offsetZ));
};

/**
   * SET_GAME_PAUSES_FOR_STREAMING
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetGamePausesForStreaming = function (toggle) {
  return Citizen.invokeNative('0xb3bc8250f4fe8b63', toggle);
};

/**
   * SET_HD_AREA
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @return {void}
   */
global.SetHdArea = function (x, y, z, radius) {
  return Citizen.invokeNative('0xb88b905afa35cb4d', _fv(x), _fv(y), _fv(z), _fv(radius));
};

/**
   * SET_MAPDATACULLBOX_ENABLED
   *
   * @param {string | number} name
   * @param {boolean} toggle
   * @return {void}
   */
global.SetMapdatacullboxEnabled = function (name, toggle) {
  return Citizen.invokeNative('0x3cacc83f6fed837c', name, toggle);
};

/**
   * SET_MODEL_AS_NO_LONGER_NEEDED
   * Marks the model as no longer needed.
   *
   * @param {number} model
   * @return {void}
   */
global.SetModelAsNoLongerNeeded = function (model) {
  return Citizen.invokeNative('0x4ad96ef928bd4f9a', _ch(model));
};

/**
   * SET_POPULATION_BUDGET_MULTIPLIER
   *
   * @param {number} fBudgetMultiplier
   * @return {void}
   */
global.SetPopulationBudgetMultiplier = function (fBudgetMultiplier) {
  return Citizen.invokeNative('0x2f9ac754fe179d58', _fv(fBudgetMultiplier));
};

/**
   * SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME
   *
  
   * @return {void}
   */
global.SetSceneStreamingTracksCamPosThisFrame = function () {
  return Citizen.invokeNative('0xa03a6812529ad9c8');
};

/**
   * SET_SRL_LONG_JUMP_MODE
   *
   * @param {boolean} p0
   * @return {void}
   */
global.SetSrlLongJumpMode = function (p0) {
  return Citizen.invokeNative('0x7c907e8a725e5fd2', p0);
};

/**
   * SET_SRL_READAHEAD_TIMES
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @return {void}
   */
global.SetSrlReadaheadTimes = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xd346248c1dce0d76', p0, p1, p2, p3);
};

/**
   * SET_SRL_TIME
   *
   * @param {number} p0
   * @return {void}
   */
global.SetSrlTime = function (p0) {
  return Citizen.invokeNative('0x18231aef458bcff2', _fv(p0));
};

/**
   * _0x032A14D082A9B269
   * _SET_E* or _SET_F*
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x032A14D082A9B269 = function (p0) {
  return Citizen.invokeNative('0x032a14d082a9b269', _ch(p0));
};

/**
   * _0x03DDBF2D73799F9E
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x03DDBF2D73799F9E = function (p0) {
  return Citizen.invokeNative('0x03ddbf2d73799f9e', p0);
};

/**
   * _0x05DD384F39DE1C8C
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x05DD384F39DE1C8C = function (p0, p1) {
  return Citizen.invokeNative('0x05dd384f39de1c8c', p0, p1, _r);
};

/**
   * _0x071769BCB24379E5
   *
  
   * @return {any}
   */
global.N_0x071769BCB24379E5 = function () {
  return Citizen.invokeNative('0x071769bcb24379e5', _r);
};

/**
   * _0x07559B29950301FF
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x07559B29950301FF = function (p0, p1) {
  return Citizen.invokeNative('0x07559b29950301ff', p0, p1);
};

/**
   * _0x09FBF15D73EFC900
   *
  
   * @return {void}
   */
global.N_0x09FBF15D73EFC900 = function () {
  return Citizen.invokeNative('0x09fbf15d73efc900');
};

/**
   * _0x198B85CC3C7A4593
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x198B85CC3C7A4593 = function (p0, p1) {
  return Citizen.invokeNative('0x198b85cc3c7a4593', p0, p1, _r);
};

/**
   * _0x27AF48C62B281341
   *
  
   * @return {any}
   */
global.N_0x27AF48C62B281341 = function () {
  return Citizen.invokeNative('0x27af48c62b281341', _r);
};

/**
   * _0x2A6D1DAAB9EBB262
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x2A6D1DAAB9EBB262 = function (p0) {
  return Citizen.invokeNative('0x2a6d1daab9ebb262', p0, _r);
};

/**
   * _0x2E24C27B112B5B12
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x2E24C27B112B5B12 = function (p0) {
  return Citizen.invokeNative('0x2e24c27b112b5b12', p0);
};

/**
   * _0x2F4D53023F826FF0
   *
  
   * @return {any}
   */
global.N_0x2F4D53023F826FF0 = function () {
  return Citizen.invokeNative('0x2f4d53023f826ff0', _r);
};

/**
   * _0x5288B7F0690F7C1F
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x5288B7F0690F7C1F = function (p0) {
  return Citizen.invokeNative('0x5288b7f0690f7c1f', p0, _r);
};

/**
   * _0x53764309C4618087
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x53764309C4618087 = function (p0) {
  return Citizen.invokeNative('0x53764309c4618087', p0, _r);
};

/**
   * _0x5D5E2102B174B8D2
   *
  
   * @return {any}
   */
global.N_0x5D5E2102B174B8D2 = function () {
  return Citizen.invokeNative('0x5d5e2102b174b8d2', _r);
};

/**
   * _0x62D5F0588915B277
   *
  
   * @return {void}
   */
global.N_0x62D5F0588915B277 = function () {
  return Citizen.invokeNative('0x62d5f0588915b277');
};

/**
   * _0x66BC28E50E85270E
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x66BC28E50E85270E = function (p0) {
  return Citizen.invokeNative('0x66bc28e50e85270e', p0, _r);
};

/**
   * _0x6A6E79FBE8678C98
   *
  
   * @return {void}
   */
global.N_0x6A6E79FBE8678C98 = function () {
  return Citizen.invokeNative('0x6a6e79fbe8678c98');
};

/**
   * _0x7B8C2B846C05E5AD
   *
  
   * @return {any}
   */
global.N_0x7B8C2B846C05E5AD = function () {
  return Citizen.invokeNative('0x7b8c2b846c05e5ad', _r);
};

/**
   * _0x80B3E0597366ADF1
   *
  
   * @return {void}
   */
global.N_0x80B3E0597366ADF1 = function () {
  return Citizen.invokeNative('0x80b3e0597366adf1');
};

/**
   * _0x85B8F04555AB49B8
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x85B8F04555AB49B8 = function (p0) {
  return Citizen.invokeNative('0x85b8f04555ab49b8', p0, _r);
};

/**
   * _0x8D56BDA343D9519F
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x8D56BDA343D9519F = function (p0) {
  return Citizen.invokeNative('0x8d56bda343d9519f', p0, _r);
};

/**
   * _0x99F92061EFE908BA
   *
  
   * @return {any}
   */
global.N_0x99F92061EFE908BA = function () {
  return Citizen.invokeNative('0x99f92061efe908ba', _r);
};

/**
   * _0x9F348DE670423460
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x9F348DE670423460 = function (p0) {
  return Citizen.invokeNative('0x9f348de670423460', p0);
};

/**
   * _0xA0AE7653E8181725
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xA0AE7653E8181725 = function (p0) {
  return Citizen.invokeNative('0xa0ae7653e8181725', p0, _r);
};

/**
   * _0xAE00387E53B1E9FC
   *
  
   * @return {void}
   */
global.N_0xAE00387E53B1E9FC = function () {
  return Citizen.invokeNative('0xae00387e53b1e9fc');
};

/**
   * _0xAFA87A7D41EE346A
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xAFA87A7D41EE346A = function (p0) {
  return Citizen.invokeNative('0xafa87a7d41ee346a', p0);
};

/**
   * _0xB223249B7798EEED
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {any}
   */
global.N_0xB223249B7798EEED = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xb223249b7798eeed', p0, p1, p2, p3, _r);
};

/**
   * _0xB9B9E47EDB9D63DB
   * Sorts some unknown data.
   * 
   * Likely SORT_*
   *
  
   * @return {void}
   */
global.N_0xB9B9E47EDB9D63DB = function () {
  return Citizen.invokeNative('0xb9b9e47edb9d63db');
};

/**
   * _0xBE8DAA9D8D01DA6A
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xBE8DAA9D8D01DA6A = function (p0, p1, p2) {
  return Citizen.invokeNative('0xbe8daa9d8d01da6a', p0, p1, p2);
};

/**
   * _0xCC61D8D6C19D9F14
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xCC61D8D6C19D9F14 = function (p0) {
  return Citizen.invokeNative('0xcc61d8d6c19d9f14', p0);
};

/**
   * _0xD6E39DC5D46DF4AB
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xD6E39DC5D46DF4AB = function (p0) {
  return Citizen.invokeNative('0xd6e39dc5d46df4ab', p0, _r);
};

/**
   * _0xD840C130D7AACFA5
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xD840C130D7AACFA5 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xd840c130d7aacfa5', p0, p1, p2);
};

/**
   * _0xD9F2FF4AF394D926
   *
  
   * @return {void}
   */
global.N_0xD9F2FF4AF394D926 = function () {
  return Citizen.invokeNative('0xd9f2ff4af394d926');
};

/**
   * _0xDA7FDEFF4DE86839
   *
  
   * @return {any}
   */
global.N_0xDA7FDEFF4DE86839 = function () {
  return Citizen.invokeNative('0xda7fdeff4de86839', _r);
};

/**
   * _0xDABFE48BA0D457AA
   *
  
   * @return {any}
   */
global.N_0xDABFE48BA0D457AA = function () {
  return Citizen.invokeNative('0xdabfe48ba0d457aa', _r);
};

/**
   * _0xDEEE1F265B7ECEF5
   *
  
   * @return {void}
   */
global.N_0xDEEE1F265B7ECEF5 = function () {
  return Citizen.invokeNative('0xdeee1f265b7ecef5');
};

/**
   * _0xE5B76E5B56CD77DD
   *
  
   * @return {any}
   */
global.N_0xE5B76E5B56CD77DD = function () {
  return Citizen.invokeNative('0xe5b76e5b56cd77dd', _r);
};

/**
   * _0xEF1A8A484118735E
   *
  
   * @return {void}
   */
global.N_0xEF1A8A484118735E = function () {
  return Citizen.invokeNative('0xef1a8a484118735e');
};

/**
   * _0xF01D21DF39554115
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xF01D21DF39554115 = function (p0) {
  return Citizen.invokeNative('0xf01d21df39554115', p0);
};

/**
   * _0xF11D7CB962FCD747
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xF11D7CB962FCD747 = function (p0) {
  return Citizen.invokeNative('0xf11d7cb962fcd747', p0);
};

/**
   * _GET_IPL_BOUNDING_SPHERE
   * Outputs IPL position and radius (previously wrongly named heading)
   * https://github.com/femga/rdr3_discoveries/blob/master/imaps/imaps_with_coords_and_heading.lua
   *
   * @param {number} iplHash
   * @return {[boolean, Vector3, number]}
   */
global.GetIplBoundingSphere = function (iplHash) {
  return Citizen.invokeNative('0x9c77964b0e07b633', _ch(iplHash), _v, _f, _r);
};

/**
   * _HAS_COLLISION_LOADED_AT_COORD
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {boolean}
   */
global.HasCollisionLoadedAtCoord = function (x, y, z) {
  return Citizen.invokeNative('0xda8b2eaf29e872e2', _fv(x), _fv(y), _fv(z), _r);
};

/**
   * _HAS_SCENARIO_TYPE_LOADED
   *
   * @param {number} scenarioType
   * @param {boolean} p1
   * @return {boolean}
   */
global.HasScenarioTypeLoaded = function (scenarioType, p1) {
  return Citizen.invokeNative('0x9427c94d2e4094a4', _ch(scenarioType), p1, _r);
};

/**
   * _IS_MODEL_AN_OBJECT
   *
   * @param {number} model
   * @return {boolean}
   */
global.IsModelAnObject = function (model) {
  return Citizen.invokeNative('0x274ee1b90cfa669e', _ch(model), _r);
};

/**
   * _IS_POSITION_INSIDE_IPL_STREAMING_EXTENTS
   * Returns true if IPL is streamed in (?)
   *
   * @param {number} iplHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {boolean}
   */
global.IsPositionInsideIplStreamingExtents = function (iplHash, x, y, z) {
  return Citizen.invokeNative('0x73b40d97d7baad77', _ch(iplHash), _fv(x), _fv(y), _fv(z), _r);
};

/**
   * _REMOVE_SCENARIO_ASSET
   *
   * @param {number} scenarioType
   * @return {any}
   */
global.RemoveScenarioAsset = function (scenarioType) {
  return Citizen.invokeNative('0x4eddd9e9ca5af985', _ch(scenarioType), _r);
};

/**
   * _REQUEST_CLIP_SET_BY_HASH
   *
   * @param {number} clipSetHash
   * @return {void}
   */
global.RequestClipSetByHash = function (clipSetHash) {
  return Citizen.invokeNative('0xac37644a538f7524', _ch(clipSetHash));
};

/**
   * _REQUEST_METADATA_AT_COORD
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.RequestMetadataAtCoord = function (x, y, z) {
  return Citizen.invokeNative('0xa8432a14d4dc2101', _fv(x), _fv(y), _fv(z));
};

/**
   * _REQUEST_SCENARIO_TYPE
   * p1 seems to be some kind of flag? p2 can be 0 or entity model accepts hash joaat("a_c_bear_01") or with GetEntityModel(entity) p3 can be 0 or pass the conditional anim or using _GET_ACTIVE_DYNAMIC_SCENARIO
   *
   * @param {number} scenarioType
   * @param {number} p1
   * @param {number} entityModel
   * @param {number} conditionalAnim
   * @return {number}
   */
global.RequestScenarioType = function (scenarioType, p1, entityModel, conditionalAnim) {
  return Citizen.invokeNative('0x19a6be7d9c6884d3', _ch(scenarioType), p1, _ch(entityModel), _ch(conditionalAnim), _r, _ri);
};

/**
   * _SET_GUARMA_WORLDHORIZON_ACTIVE
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetGuarmaWorldhorizonActive = function (toggle) {
  return Citizen.invokeNative('0x74e2261d2a66849a', toggle);
};

/**
   * ADD_COVER_BLOCKING_AREA
   *
   * @param {number} playerX
   * @param {number} playerY
   * @param {number} playerZ
   * @param {number} radiusX
   * @param {number} radiusY
   * @param {number} radiusZ
   * @param {boolean} p6
   * @param {boolean} p7
   * @param {boolean} p8
   * @param {boolean} p9
   * @return {void}
   */
global.AddCoverBlockingArea = function (playerX, playerY, playerZ, radiusX, radiusY, radiusZ, p6, p7, p8, p9) {
  return Citizen.invokeNative('0x45c597097dd7cb81', _fv(playerX), _fv(playerY), _fv(playerZ), _fv(radiusX), _fv(radiusY), _fv(radiusZ), p6, p7, p8, p9);
};

/**
   * ADD_COVER_POINT
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {boolean} p7
   * @return {number}
   */
global.AddCoverPoint = function (p0, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0xd5c12a75c7b9497f', _fv(p0), _fv(p1), _fv(p2), _fv(p3), p4, p5, p6, p7, _r, _ri);
};

/**
   * ADD_FLEE_TARGET_PED
   * Params: p2 is always -1.f in R* Scripts
   *
   * @param {number} ped
   * @param {number} targetPed
   * @param {number} p2
   * @return {void}
   */
global.AddFleeTargetPed = function (ped, targetPed, p2) {
  return Citizen.invokeNative('0x3923ec958249657d', ped, targetPed, _fv(p2));
};

/**
   * ADD_PATROL_ROUTE_LINK
   *
   * @param {number} node1
   * @param {number} node2
   * @return {void}
   */
global.AddPatrolRouteLink = function (node1, node2) {
  return Citizen.invokeNative('0x23083260dec3a551', node1, node2);
};

/**
   * ADD_PATROL_ROUTE_NODE
   *
   * @param {number} nodeId
   * @param {string | number} scenarioName
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} lookPosX
   * @param {number} lookPosY
   * @param {number} lookPosZ
   * @param {number} duration
   * @param {boolean} p9
   * @return {void}
   */
global.AddPatrolRouteNode = function (nodeId, scenarioName, x, y, z, lookPosX, lookPosY, lookPosZ, duration, p9) {
  return Citizen.invokeNative('0x8edf950167586b7c', nodeId, scenarioName, _fv(x), _fv(y), _fv(z), _fv(lookPosX), _fv(lookPosY), _fv(lookPosZ), duration, p9);
};

/**
   * ARE_COMPOSITE_LOOTABLE_ENTITY_DEF_ASSETS_LOADED
   * Returns true when requested asset is loaded
   *
   * @param {number} asset
   * @return {boolean}
   */
global.AreCompositeLootableEntityDefAssetsLoaded = function (asset) {
  return Citizen.invokeNative('0x5e5d96be25e9df68', _ch(asset), _r);
};

/**
   * ASSISTED_MOVEMENT_IS_ROUTE_LOADED
   *
   * @param {string | number} route
   * @return {boolean}
   */
global.AssistedMovementIsRouteLoaded = function (route) {
  return Citizen.invokeNative('0x60f9a4393a21f741', route, _r);
};

/**
   * ASSISTED_MOVEMENT_REMOVE_ROUTE
   *
   * @param {string | number} route
   * @return {void}
   */
global.AssistedMovementRemoveRoute = function (route) {
  return Citizen.invokeNative('0x3548536485dd792b', route);
};

/**
   * ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES
   *
   * @param {string | number} route
   * @param {number} props
   * @return {void}
   */
global.AssistedMovementSetRouteProperties = function (route, props) {
  return Citizen.invokeNative('0xd5002d78b7162e1b', route, props);
};

/**
   * CAN_START_ITEM_INTERACTION
   *
   * @param {number} ped
   * @param {number} itemHash
   * @param {number} interactionAnimHash
   * @param {number} p3
   * @return {boolean}
   */
global.CanStartItemInteraction = function (ped, itemHash, interactionAnimHash, p3) {
  return Citizen.invokeNative('0x2d19bc4df626cbe7', ped, _ch(itemHash), _ch(interactionAnimHash), p3, _r);
};

/**
   * CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK
   *
   * @param {number} ped
   * @return {void}
   */
global.ClearDrivebyTaskUnderneathDrivingTask = function (ped) {
  return Citizen.invokeNative('0xc35b5cdb2824cf69', ped);
};

/**
   * CLEAR_PED_SECONDARY_TASK
   *
   * @param {number} ped
   * @return {void}
   */
global.ClearPedSecondaryTask = function (ped) {
  return Citizen.invokeNative('0x176cecf6f920d707', ped);
};

/**
   * CLEAR_PED_TASKS
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {void}
   */
global.ClearPedTasks = function (ped, p1, p2) {
  return Citizen.invokeNative('0xe1ef3c1216aff2cd', ped, p1, p2);
};

/**
   * CLEAR_PED_TASKS_IMMEDIATELY
   * Immediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.
   * 
   * resetCrouch TRUE = ped will stand up if crouching, FALSE = ped will remain crouching if crouched
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {boolean} resetCrouch
   * @return {void}
   */
global.ClearPedTasksImmediately = function (ped, p1, resetCrouch) {
  return Citizen.invokeNative('0xaaa34f8a7cb32098', ped, p1, resetCrouch);
};

/**
   * CLEAR_SEQUENCE_TASK
   *
  
   * @return {number}
   */
global.ClearSequenceTask = function () {
  return Citizen.invokeNative('0x3841422e9c488d8c', _i);
};

/**
   * CLOSE_PATROL_ROUTE
   *
  
   * @return {void}
   */
global.ClosePatrolRoute = function () {
  return Citizen.invokeNative('0xb043eca801b8cbc1');
};

/**
   * CLOSE_SEQUENCE_TASK
   *
   * @param {number} taskSequenceId
   * @return {void}
   */
global.CloseSequenceTask = function (taskSequenceId) {
  return Citizen.invokeNative('0x39e72bc99e6360cb', taskSequenceId);
};

/**
   * CREATE_PATROL_ROUTE
   *
  
   * @return {void}
   */
global.CreatePatrolRoute = function () {
  return Citizen.invokeNative('0xaf8a443ccc8018dc');
};

/**
   * CREATE_SCENARIO_POINT_HASH
   * Returns scenario
   *
   * @param {number} scenarioHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} heading
   * @param {any} p5
   * @param {any} p6
   * @param {boolean} p7
   * @return {number}
   */
global.CreateScenarioPointHash = function (scenarioHash, x, y, z, heading, p5, p6, p7) {
  return Citizen.invokeNative('0x94b745ce41db58a1', _ch(scenarioHash), _fv(x), _fv(y), _fv(z), _fv(heading), p5, p6, p7, _r, _ri);
};

/**
   * CREATE_SCENARIO_POINT_HASH_ATTACHED_TO_ENTITY
   * Returns scenario
   *
   * @param {number} entity
   * @param {number} scenarioHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} heading
   * @param {any} p6
   * @param {any} p7
   * @param {boolean} p8
   * @return {number}
   */
global.CreateScenarioPointHashAttachedToEntity = function (entity, scenarioHash, x, y, z, heading, p6, p7, p8) {
  return Citizen.invokeNative('0x794ab1379a74064d', entity, _ch(scenarioHash), _fv(x), _fv(y), _fv(z), _fv(heading), p6, p7, p8, _r, _ri);
};

/**
   * DELETE_PATROL_ROUTE
   *
   * @param {string | number} patrolRoute
   * @return {void}
   */
global.DeletePatrolRoute = function (patrolRoute) {
  return Citizen.invokeNative('0x7767dd9d65e91319', patrolRoute);
};

/**
   * DOES_SCENARIO_EXIST_IN_AREA
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {boolean} p4
   * @param {any} p5
   * @param {boolean} p6
   * @return {boolean}
   */
global.DoesScenarioExistInArea = function (x, y, z, radius, p4, p5, p6) {
  return Citizen.invokeNative('0x5a59271ffadd33c1', _fv(x), _fv(y), _fv(z), _fv(radius), p4, p5, p6, _r);
};

/**
   * DOES_SCENARIO_GROUP_EXIST
   *
   * @param {string | number} scenarioGroup
   * @return {boolean}
   */
global.DoesScenarioGroupExist = function (scenarioGroup) {
  return Citizen.invokeNative('0xf9034c136c9e00d3', scenarioGroup, _r);
};

/**
   * DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA_HASH
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} typeHash
   * @param {number} radius
   * @param {boolean} p5
   * @return {boolean}
   */
global.DoesScenarioOfTypeExistInAreaHash = function (x, y, z, typeHash, radius, p5) {
  return Citizen.invokeNative('0x6eead6af637da752', _fv(x), _fv(y), _fv(z), _ch(typeHash), _fv(radius), p5, _r);
};

/**
   * DOES_SCENARIO_POINT_EXIST
   *
   * @param {number} scenario
   * @return {boolean}
   */
global.DoesScenarioPointExist = function (scenario) {
  return Citizen.invokeNative('0x841475ac96e794d1', scenario, _r);
};

/**
   * DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS
   * Checks if there is a cover point at position
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {boolean}
   */
global.DoesScriptedCoverPointExistAtCoords = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xa98b8e3c088e5a31', p0, p1, p2, p3, _r);
};

/**
   * END_DUEL
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {number} p2
   * @return {void}
   */
global.EndDuel = function (ped, p1, p2) {
  return Citizen.invokeNative('0xeed08a3a98b847e2', ped, p1, _fv(p2));
};

/**
   * FIND_SCENARIO_OF_TYPE_HASH
   *
   * @param {number} xPos
   * @param {number} yPos
   * @param {number} zPos
   * @param {number} scenarioType
   * @param {number} distance
   * @param {any} p5
   * @param {boolean} p6
   * @return {number}
   */
global.FindScenarioOfTypeHash = function (xPos, yPos, zPos, scenarioType, distance, p5, p6) {
  return Citizen.invokeNative('0xf533d68ff970d190', _fv(xPos), _fv(yPos), _fv(zPos), _ch(scenarioType), _fv(distance), p5, p6, _r, _ri);
};

/**
   * FORCE_SCENARIO_GROUP_PRIORITY
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.ForceScenarioGroupPriority = function (p0, p1) {
  return Citizen.invokeNative('0x444c910a5058e568', p0, p1);
};

/**
   * GET_ACTIVE_VEHICLE_MISSION_TYPE
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetActiveVehicleMissionType = function (vehicle) {
  return Citizen.invokeNative('0x534aeba6e5ed4cab', vehicle, _r, _ri);
};

/**
   * GET_IS_CARRIABLE_ENTITY
   *
   * @param {number} entity
   * @return {boolean}
   */
global.GetIsCarriableEntity = function (entity) {
  return Citizen.invokeNative('0x0ccfe72b43c9cf96', entity, _r);
};

/**
   * GET_IS_PED_AIMING_IN_THE_AIR
   *
   * @param {number} ped
   * @return {boolean}
   */
global.GetIsPedAimingInTheAir = function (ped) {
  return Citizen.invokeNative('0x8785e6e40c7a8819', ped, _r);
};

/**
   * GET_IS_TASK_ACTIVE
   *
   * @param {number} ped
   * @param {number} taskIndex
   * @return {boolean}
   */
global.GetIsTaskActive = function (ped, taskIndex) {
  return Citizen.invokeNative('0xb0760331c7aa4155', ped, taskIndex, _r);
};

/**
   * GET_IS_WAYPOINT_RECORDING_LOADED
   *
   * @param {string | number} waypointRecording
   * @return {boolean}
   */
global.GetIsWaypointRecordingLoaded = function (waypointRecording) {
  return Citizen.invokeNative('0xcb4e8be8a0063c5d', waypointRecording, _r);
};

/**
   * GET_ITEM_INTERACTION_ITEM_ID
   *
   * @param {number} ped
   * @return {number}
   */
global.GetItemInteractionItemId = function (ped) {
  return Citizen.invokeNative('0x804425c4bbd00883', ped, _r, _ri);
};

/**
   * GET_ITEM_INTERACTION_PROMPT_PROGRESS
   *
   * @param {number} ped
   * @param {number} inputContext
   * @return {number}
   */
global.GetItemInteractionPromptProgress = function (ped, inputContext) {
  return Citizen.invokeNative('0xbc864a70ad55e0c1', ped, _ch(inputContext), _r, _rf);
};

/**
   * GET_ITEM_INTERACTION_STATE
   *
   * @param {number} ped
   * @return {number}
   */
global.GetItemInteractionState = function (ped) {
  return Citizen.invokeNative('0x6aa3dca2c6f5eb6d', ped, _r, _ri);
};

/**
   * GET_PED_DESIRED_MOVE_BLEND_RATIO
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedDesiredMoveBlendRatio = function (ped) {
  return Citizen.invokeNative('0x8517d4a6ca8513ed', ped, _r, _rf);
};

/**
   * GET_PED_WAYPOINT_DISTANCE
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedWaypointDistance = function (ped) {
  return Citizen.invokeNative('0xe6a877c64caf1bc5', ped, _r, _rf);
};

/**
   * GET_PED_WAYPOINT_OVERRIDE_SPEED
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedWaypointOverrideSpeed = function (ped) {
  return Citizen.invokeNative('0xd39a2f3e7fcaff08', ped, _r, _rf);
};

/**
   * GET_PED_WAYPOINT_PROGRESS
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedWaypointProgress = function (ped) {
  return Citizen.invokeNative('0x2720aaa75001e094', ped, _r, _ri);
};

/**
   * GET_PROP_FOR_SCENARIO_POINT
   * Old name: _GET_SCENARIO_POINT_ENTITY
   *
   * @param {number} scenarioPoint
   * @param {string | number} name
   * @return {number}
   */
global.GetPropForScenarioPoint = function (scenarioPoint, name) {
  return Citizen.invokeNative('0x295514f198efd0ca', scenarioPoint, name, _r, _ri);
};

/**
   * GET_RANSACK_SCENARIO_POINT_PED_IS_USING
   *
   * @param {number} ped
   * @return {any}
   */
global.GetRansackScenarioPointPedIsUsing = function (ped) {
  return Citizen.invokeNative('0xd04241bbf6d03a5e', ped, _r);
};

/**
   * GET_SCENARIO_POINTS_IN_AREA
   * Note: scenariosInRadius is an array, and its size and values should be aligned to 8 bytes.
   *
   * @param {number} posX
   * @param {number} posY
   * @param {number} posZ
   * @param {number} radius
   * @param {any} scenariosInRadius
   * @param {number} size
   * @return {number}
   */
global.GetScenarioPointsInArea = function (posX, posY, posZ, radius, scenariosInRadius, size) {
  return Citizen.invokeNative('0x345ec3b7ebde1cb5', _fv(posX), _fv(posY), _fv(posZ), _fv(radius), scenariosInRadius, size, _r, _ri);
};

/**
   * GET_SCRIPTED_COVER_POINT_COORDS
   *
   * @param {number} coverpoint
   * @return {Vector3}
   */
global.GetScriptedCoverPointCoords = function (coverpoint) {
  return Citizen.invokeNative('0x594a1028fc2a3e85', coverpoint, _r, _rv);
};

/**
   * GET_SCRIPT_TASK_STATUS
   * Gets the status of a script-assigned task, and returns an int between 0-8
   * taskHash: https://alloc8or.re/rdr3/doc/enums/eScriptTaskHash.txt 
   * 
   * WAITING_TO_START_TASK = 0,
   * PERFORMING_TASK
   * DORMANT_TASK
   * VACANT_STAGE
   * GROUP_TASK_STAGE
   * ATTRACTOR_SCRIPT_TASK_STAGE
   * SECONDARY_TASK_STAGE
   * TASK_NOT_FOUND
   * FINISHED_TASK
   *
   * @param {number} ped
   * @param {number} taskHash
   * @param {boolean} p2
   * @return {number}
   */
global.GetScriptTaskStatus = function (ped, taskHash, p2) {
  return Citizen.invokeNative('0x77f1beb8863288d5', ped, _ch(taskHash), p2, _r, _ri);
};

/**
   * GET_SEQUENCE_PROGRESS
   * returned values:
   * 0 to 7 = task that's currently in progress, 0 meaning the first one.
   * -1 no task sequence in progress.
   *
   * @param {number} ped
   * @return {number}
   */
global.GetSequenceProgress = function (ped) {
  return Citizen.invokeNative('0x00a9010cfe1e3533', ped, _r, _ri);
};

/**
   * GET_TASK_MOVE_NETWORK_EVENT
   *
   * @param {number} ped
   * @param {string | number} eventName
   * @return {boolean}
   */
global.GetTaskMoveNetworkEvent = function (ped, eventName) {
  return Citizen.invokeNative('0xb4f47213df45a64c', ped, eventName, _r);
};

/**
   * GET_TASK_MOVE_NETWORK_STATE
   *
   * @param {number} ped
   * @return {string | number}
   */
global.GetTaskMoveNetworkState = function (ped) {
  return Citizen.invokeNative('0x717e4d1f2048376d', ped, _r, _s);
};

/**
   * GET_VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED
   *
   * @param {any} p0
   * @return {any}
   */
global.GetVehicleWaypointPlaybackOverrideSpeed = function (p0) {
  return Citizen.invokeNative('0x3dc971eb22f73447', p0, _r);
};

/**
   * GET_VEHICLE_WAYPOINT_PROGRESS
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetVehicleWaypointProgress = function (vehicle) {
  return Citizen.invokeNative('0x9824cff8fc66e159', vehicle, _r, _ri);
};

/**
   * GET_VEHICLE_WAYPOINT_TARGET_POINT
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetVehicleWaypointTargetPoint = function (vehicle) {
  return Citizen.invokeNative('0x416b62ac8b9e5bbd', vehicle, _r, _ri);
};

/**
   * GET_WAYPOINT_DISTANCE_ALONG_ROUTE
   *
   * @param {string | number} waypointRecording
   * @param {number} p1
   * @return {number}
   */
global.GetWaypointDistanceAlongRoute = function (waypointRecording, p1) {
  return Citizen.invokeNative('0xa5b769058763e497', waypointRecording, p1, _r, _rf);
};

/**
   * IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsDrivebyTaskUnderneathDrivingTask = function (ped) {
  return Citizen.invokeNative('0x8785e6e40c7a8818', ped, _r);
};

/**
   * IS_EMOTE_TASK_RUNNING
   *
   * @param {number} ped
   * @param {any} p1
   * @return {boolean}
   */
global.IsEmoteTaskRunning = function (ped, p1) {
  return Citizen.invokeNative('0xcf9b71c0af824036', ped, p1, _r);
};

/**
   * IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsMountedWeaponTaskUnderneathDrivingTask = function (ped) {
  return Citizen.invokeNative('0xa320ef046186fa3b', ped, _r);
};

/**
   * IS_MOVE_BLEND_RATIO_RUNNING
   *
   * @param {number} moveBlendRatio
   * @return {boolean}
   */
global.IsMoveBlendRatioRunning = function (moveBlendRatio) {
  return Citizen.invokeNative('0xd4d8636c0199a939', _fv(moveBlendRatio), _r);
};

/**
   * IS_MOVE_BLEND_RATIO_SPRINTING
   *
   * @param {number} moveBlendRatio
   * @return {boolean}
   */
global.IsMoveBlendRatioSprinting = function (moveBlendRatio) {
  return Citizen.invokeNative('0x24a2ad74fa9814e2', _fv(moveBlendRatio), _r);
};

/**
   * IS_MOVE_BLEND_RATIO_STILL
   *
   * @param {number} moveBlendRatio
   * @return {boolean}
   */
global.IsMoveBlendRatioStill = function (moveBlendRatio) {
  return Citizen.invokeNative('0x349ce7b56dafd95c', _fv(moveBlendRatio), _r);
};

/**
   * IS_MOVE_BLEND_RATIO_WALKING
   *
   * @param {number} moveBlendRatio
   * @return {boolean}
   */
global.IsMoveBlendRatioWalking = function (moveBlendRatio) {
  return Citizen.invokeNative('0xf133bbbe91e1691f', _fv(moveBlendRatio), _r);
};

/**
   * IS_PED_ACTIVE_IN_SCENARIO
   *
   * @param {number} ped
   * @param {number} scenario
   * @return {boolean}
   */
global.IsPedActiveInScenario = function (ped, scenario) {
  return Citizen.invokeNative('0xaa135f9482c82cc3', ped, scenario, _r);
};

/**
   * IS_PED_BEING_ARRESTED
   * This function is hard-coded to always return false.
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedBeingArrested = function (ped) {
  return Citizen.invokeNative('0x90a09f3a45fed688', ped, _r);
};

/**
   * IS_PED_CUFFED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedCuffed = function (ped) {
  return Citizen.invokeNative('0x74e559b3bc910685', ped, _r);
};

/**
   * IS_PED_EXITING_SCENARIO
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {boolean}
   */
global.IsPedExitingScenario = function (ped, p1) {
  return Citizen.invokeNative('0x0c3cb2e600c8977d', ped, p1, _r);
};

/**
   * IS_PED_GETTING_UP
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedGettingUp = function (ped) {
  return Citizen.invokeNative('0x2a74e1d5f2f00eec', ped, _r);
};

/**
   * IS_PED_IN_HIT_REACT
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedInHitReact = function (ped) {
  return Citizen.invokeNative('0xf330a5c062b29bed', ped, _r);
};

/**
   * IS_PED_IN_WRITHE
   * This native checks if a ped is on the ground, in pain from a (gunshot) wound.
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedInWrithe = function (ped) {
  return Citizen.invokeNative('0xdeb6d52126e7d640', ped, _r);
};

/**
   * IS_PED_RUNNING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedRunning = function (ped) {
  return Citizen.invokeNative('0xc5286ffc176f28a2', ped, _r);
};

/**
   * IS_PED_RUNNING_INSPECTION_TASK
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedRunningInspectionTask = function (ped) {
  return Citizen.invokeNative('0x038b1f1674f0e242', ped, _r);
};

/**
   * IS_PED_RUNNING_TASK_ITEM_INTERACTION
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedRunningTaskItemInteraction = function (ped) {
  return Citizen.invokeNative('0xec7e480ff8bd0bed', ped, _r);
};

/**
   * IS_PED_SCENARIO_REACT_LOOKING
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {boolean}
   */
global.IsPedScenarioReactLooking = function (ped, p1) {
  return Citizen.invokeNative('0x916b8e075abc8b4e', ped, p1, _r);
};

/**
   * IS_PED_SPRINTING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedSprinting = function (ped) {
  return Citizen.invokeNative('0x57e457cd2c0fc168', ped, _r);
};

/**
   * IS_PED_STILL
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedStill = function (ped) {
  return Citizen.invokeNative('0xac29253eef8f0180', ped, _r);
};

/**
   * IS_PED_WALKING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedWalking = function (ped) {
  return Citizen.invokeNative('0xde4c184b2b9b071a', ped, _r);
};

/**
   * IS_SCENARIO_GROUP_ENABLED
   *
   * @param {string | number} scenarioGroup
   * @return {boolean}
   */
global.IsScenarioGroupEnabled = function (scenarioGroup) {
  return Citizen.invokeNative('0x367a09ded4e05b99', scenarioGroup, _r);
};

/**
   * IS_SCENARIO_OCCUPIED
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {boolean} p4
   * @return {boolean}
   */
global.IsScenarioOccupied = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x788756d73ac2e07c', _fv(p0), _fv(p1), _fv(p2), _fv(p3), p4, _r);
};

/**
   * IS_SCENARIO_TYPE_ENABLED
   *
   * @param {string | number} scenarioType
   * @return {boolean}
   */
global.IsScenarioTypeEnabled = function (scenarioType) {
  return Citizen.invokeNative('0x3a815db3ea088722', scenarioType, _r);
};

/**
   * IS_TASK_MOVE_NETWORK_ACTIVE
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsTaskMoveNetworkActive = function (ped) {
  return Citizen.invokeNative('0x921ce12c489c4c41', ped, _r);
};

/**
   * IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsTaskMoveNetworkReadyForTransition = function (ped) {
  return Citizen.invokeNative('0x30ed88d5e0c56a37', ped, _r);
};

/**
   * IS_TEAM_CARRIABLE_ENTITY
   *
   * @param {any} p0
   * @param {any} p1
   * @return {boolean}
   */
global.IsTeamCarriableEntity = function (p0, p1) {
  return Citizen.invokeNative('0x559a6f8c5133b4ee', p0, p1, _r);
};

/**
   * IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED
   *
   * @param {number} ped
   * @param {string | number} waypointRecording
   * @return {boolean}
   */
global.IsWaypointPlaybackGoingOnForPed = function (ped, waypointRecording) {
  return Citizen.invokeNative('0xe03b3f2d3dc59b64', ped, waypointRecording, _r);
};

/**
   * IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE
   *
   * @param {any} p0
   * @param {any} p1
   * @return {boolean}
   */
global.IsWaypointPlaybackGoingOnForVehicle = function (p0, p1) {
  return Citizen.invokeNative('0xf5134943ea29868c', p0, p1, _r);
};

/**
   * MAKE_OBJECT_NOT_CARRIABLE
   *
   * @param {number} object
   * @return {void}
   */
global.MakeObjectNotCarriable = function (object) {
  return Citizen.invokeNative('0x67bfced22909834d', object);
};

/**
   * OPEN_PATROL_ROUTE
   * Note: patrolRoute must be prefixed with 'miss_' for it to be valid
   *
   * @param {string | number} patrolRoute
   * @return {void}
   */
global.OpenPatrolRoute = function (patrolRoute) {
  return Citizen.invokeNative('0xa36bfb5ee89f3d82', patrolRoute);
};

/**
   * OPEN_SEQUENCE_TASK
   *
  
   * @return {number}
   */
global.OpenSequenceTask = function () {
  return Citizen.invokeNative('0xe8854a4326b9e12b', _i);
};

/**
   * PED_HAS_USE_SCENARIO_TASK
   *
   * @param {number} ped
   * @return {boolean}
   */
global.PedHasUseScenarioTask = function (ped) {
  return Citizen.invokeNative('0x295e3ccec879ccd7', ped, _r);
};

/**
   * PLAY_ANIM_ON_RUNNING_SCENARIO
   *
   * @param {number} ped
   * @param {string | number} animDict
   * @param {string | number} animName
   * @return {void}
   */
global.PlayAnimOnRunningScenario = function (ped, animDict, animName) {
  return Citizen.invokeNative('0x748040460f8df5dc', ped, animDict, animName);
};

/**
   * PLAY_ENTITY_SCRIPTED_ANIM
   *
   * @param {number} entity
   * @param {any} args
   * @return {void}
   */
global.PlayEntityScriptedAnim = function (entity, args) {
  return Citizen.invokeNative('0x77a1eec547e7fcf1', entity, args);
};

/**
   * REACT_LOOK_AT
   * lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
   * 
   * exitAnimation: LOOK_RETURN_GENERIC = 1,
   * LOOK_RETURN_DISMISSIVE = 2,
   * LOOK_RETURN_RELIEVED = 3
   *
   * @param {number} ped
   * @param {number} targetPed
   * @param {number} lookIntensity
   * @param {number} exitAnimation
   * @param {number} duration
   * @param {number} p5
   * @param {number} targetPed2
   * @param {any} p7
   * @param {any} p8
   * @return {void}
   */
global.ReactLookAt = function (ped, targetPed, lookIntensity, exitAnimation, duration, p5, targetPed2, p7, p8) {
  return Citizen.invokeNative('0xe7fa07624574b79a', ped, targetPed, lookIntensity, exitAnimation, _fv(duration), p5, targetPed2, p7, p8);
};

/**
   * REACT_LOOK_AT_END
   *
   * @param {number} ped
   * @param {number} exitAnimation
   * @param {boolean} p2
   * @return {void}
   */
global.ReactLookAtEnd = function (ped, exitAnimation, p2) {
  return Citizen.invokeNative('0x541e5b41dca45828', ped, exitAnimation, p2);
};

/**
   * REMOVE_ALL_COVER_BLOCKING_AREAS
   *
  
   * @return {void}
   */
global.RemoveAllCoverBlockingAreas = function () {
  return Citizen.invokeNative('0xdb6708c0b46f56d8');
};

/**
   * REMOVE_COVER_POINT
   *
   * @param {number} coverpoint
   * @return {void}
   */
global.RemoveCoverPoint = function (coverpoint) {
  return Citizen.invokeNative('0xae287c923d891715', coverpoint);
};

/**
   * REMOVE_WAYPOINT_RECORDING
   *
   * @param {string | number} waypointRecording
   * @return {void}
   */
global.RemoveWaypointRecording = function (waypointRecording) {
  return Citizen.invokeNative('0xff1b8b4aa1c25dc8', waypointRecording);
};

/**
   * REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION
   *
   * @param {number} ped
   * @param {string | number} name
   * @return {void}
   */
global.RequestTaskMoveNetworkStateTransition = function (ped, name) {
  return Citizen.invokeNative('0xd01015c7316ae176', ped, name);
};

/**
   * REQUEST_WAYPOINT_RECORDING
   *
   * @param {string | number} waypointRecording
   * @return {void}
   */
global.RequestWaypointRecording = function (waypointRecording) {
  return Citizen.invokeNative('0x9eefb62eb27b5792', waypointRecording);
};

/**
   * RESET_SCENARIO_GROUPS_ENABLED
   *
  
   * @return {void}
   */
global.ResetScenarioGroupsEnabled = function () {
  return Citizen.invokeNative('0xdd902d0349afad3a');
};

/**
   * RESET_SCENARIO_TYPES_ENABLED
   *
  
   * @return {void}
   */
global.ResetScenarioTypesEnabled = function () {
  return Citizen.invokeNative('0x0d40ee2a7f2b2d6d');
};

/**
   * SET_ANIM_FILTER
   *
   * @param {number} entity
   * @param {string | number} filterName
   * @param {number} priority
   * @param {boolean} secondary
   * @return {void}
   */
global.SetAnimFilter = function (entity, filterName, priority, secondary) {
  return Citizen.invokeNative('0x87b66d77d545db66', entity, filterName, priority, secondary);
};

/**
   * SET_ANIM_RATE
   *
   * @param {any} p0
   * @param {number} p1
   * @param {any} p2
   * @param {boolean} p3
   * @return {void}
   */
global.SetAnimRate = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x032d49c5e359c847', p0, _fv(p1), p2, p3);
};

/**
   * SET_DRIVEBY_TASK_TARGET
   *
   * @param {number} shootingPed
   * @param {number} targetPed
   * @param {number} targetVehicle
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.SetDrivebyTaskTarget = function (shootingPed, targetPed, targetVehicle, x, y, z) {
  return Citizen.invokeNative('0xe5b302114d8162ee', shootingPed, targetPed, targetVehicle, _fv(x), _fv(y), _fv(z));
};

/**
   * SET_DRIVE_TASK_CRUISE_SPEED
   *
   * @param {number} driver
   * @param {number} cruiseSpeed
   * @return {void}
   */
global.SetDriveTaskCruiseSpeed = function (driver, cruiseSpeed) {
  return Citizen.invokeNative('0x5c9b84bd7d31d908', driver, _fv(cruiseSpeed));
};

/**
   * SET_DRIVE_TASK_MAX_CRUISE_SPEED
   * Not implemented.
   *
   * @param {number} ped
   * @param {number} maxCruiseSpeed
   * @return {void}
   */
global.SetDriveTaskMaxCruiseSpeed = function (ped, maxCruiseSpeed) {
  return Citizen.invokeNative('0x404a5aa9b9f0b746', ped, _fv(maxCruiseSpeed));
};

/**
   * SET_ENABLE_SPEED_RESTRAIN_FOR_WAYPOINT_RECORDING_LEADER
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.SetEnableSpeedRestrainForWaypointRecordingLeader = function (p0, p1) {
  return Citizen.invokeNative('0x295f03dc97beebc1', p0, p1);
};

/**
   * SET_ENHANCED_BREAK_FREE
   * clipset: CLIPSET@MECH_HOGTIE@HUMAN@BREAKOUT_MG@GROUND, CLIPSET@MECH_HOGTIE@HUMAN@BREAKOUT_MG@SHOULDER, CLIPSET@MECH_HOGTIE@HUMAN@BREAKOUT_MG@MOUNT
   * clipset can also be 0
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {string | number} clipset
   * @return {boolean}
   */
global.SetEnhancedBreakFree = function (ped, p1, clipset) {
  return Citizen.invokeNative('0x1bf9d36a5eaffbae', ped, p1, clipset, _r);
};

/**
   * SET_HIGH_FALL_TASK
   * Makes the ped ragdoll like when falling from a great height
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @return {void}
   */
global.SetHighFallTask = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0x8c825bdc7741d37c', ped, p1, p2, p3);
};

/**
   * SET_PED_DESIRED_MOVE_BLEND_RATIO
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.SetPedDesiredMoveBlendRatio = function (ped, p1) {
  return Citizen.invokeNative('0x1e982ac8716912c5', ped, _fv(p1));
};

/**
   * SET_PED_PATH_AVOID_FIRE
   *
   * @param {number} ped
   * @param {boolean} avoidFire
   * @return {void}
   */
global.SetPedPathAvoidFire = function (ped, avoidFire) {
  return Citizen.invokeNative('0x4455517b28441e60', ped, avoidFire);
};

/**
   * SET_PED_PATH_CAN_DROP_FROM_HEIGHT
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedPathCanDropFromHeight = function (ped, toggle) {
  return Citizen.invokeNative('0xe361c5c71c431a4f', ped, toggle);
};

/**
   * SET_PED_PATH_CAN_USE_CLIMBOVERS
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedPathCanUseClimbovers = function (ped, toggle) {
  return Citizen.invokeNative('0x8e06a6fe76c9eff4', ped, toggle);
};

/**
   * SET_PED_PATH_CAN_USE_LADDERS
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedPathCanUseLadders = function (ped, toggle) {
  return Citizen.invokeNative('0x77a5b103c87f476e', ped, toggle);
};

/**
   * SET_PED_PATH_CLIMB_COST_MODIFIER
   *
   * @param {number} ped
   * @param {number} modifier
   * @return {void}
   */
global.SetPedPathClimbCostModifier = function (ped, modifier) {
  return Citizen.invokeNative('0x88e32db8c1a4aa4b', ped, _fv(modifier));
};

/**
   * SET_PED_PATH_DEEP_SNOW_COST_MODIFIER
   *
   * @param {number} ped
   * @param {number} modifier
   * @return {void}
   */
global.SetPedPathDeepSnowCostModifier = function (ped, modifier) {
  return Citizen.invokeNative('0xe8c296b75eacc357', ped, _fv(modifier));
};

/**
   * SET_PED_PATH_FOLIAGE_COST_MODIFIER
   *
   * @param {number} ped
   * @param {number} modifier
   * @return {void}
   */
global.SetPedPathFoliageCostModifier = function (ped, modifier) {
  return Citizen.invokeNative('0x3ad8eff9703be657', ped, _fv(modifier));
};

/**
   * SET_PED_PATH_MAY_ENTER_WATER
   *
   * @param {number} ped
   * @param {boolean} mayEnterWater
   * @return {void}
   */
global.SetPedPathMayEnterWater = function (ped, mayEnterWater) {
  return Citizen.invokeNative('0xf35425a4204367ec', ped, mayEnterWater);
};

/**
   * SET_PED_PATH_PREFER_TO_AVOID_WATER
   *
   * @param {number} ped
   * @param {boolean} avoidWater
   * @param {number} p2
   * @return {void}
   */
global.SetPedPathPreferToAvoidWater = function (ped, avoidWater, p2) {
  return Citizen.invokeNative('0x38fe1ec73743793c', ped, avoidWater, _fv(p2));
};

/**
   * SET_PED_WAYPOINT_ROUTE_OFFSET
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @return {any}
   */
global.SetPedWaypointRouteOffset = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0xed98e10b0afce4b4', ped, _fv(p1), _fv(p2), _fv(p3), _r);
};

/**
   * SET_SCENARIO_GROUP_ENABLED
   *
   * @param {string | number} scenarioGroup
   * @param {boolean} toggle
   * @return {void}
   */
global.SetScenarioGroupEnabled = function (scenarioGroup, toggle) {
  return Citizen.invokeNative('0x02c8e5b49848664e', scenarioGroup, toggle);
};

/**
   * SET_SCENARIO_TYPE_ENABLED
   *
   * @param {string | number} scenarioType
   * @param {boolean} toggle
   * @return {void}
   */
global.SetScenarioTypeEnabled = function (scenarioType, toggle) {
  return Citizen.invokeNative('0xeb47ec4e34fb7ee1', scenarioType, toggle);
};

/**
   * SET_SEQUENCE_TO_REPEAT
   * repeatMode: 0 = REPEAT_NOT; 1 = REPEAT_FOREVER
   *
   * @param {number} taskSequenceId
   * @param {number} repeatMode
   * @return {void}
   */
global.SetSequenceToRepeat = function (taskSequenceId, repeatMode) {
  return Citizen.invokeNative('0x58c70cf3a41e4ae7', taskSequenceId, repeatMode);
};

/**
   * SET_TASK_MOVE_NETWORK_SIGNAL_BOOL
   *
   * @param {number} ped
   * @param {string | number} signalName
   * @param {boolean} value
   * @return {void}
   */
global.SetTaskMoveNetworkSignalBool = function (ped, signalName, value) {
  return Citizen.invokeNative('0xb0a6cfd2c69c1088', ped, signalName, value);
};

/**
   * SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT
   *
   * @param {number} ped
   * @param {string | number} signalName
   * @param {number} value
   * @return {void}
   */
global.SetTaskMoveNetworkSignalFloat = function (ped, signalName, value) {
  return Citizen.invokeNative('0xd5bb4025ae449a4e', ped, signalName, _fv(value));
};

/**
   * SET_TEAM_CARRIABLE_ENTITY
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.SetTeamCarriableEntity = function (p0, p1, p2) {
  return Citizen.invokeNative('0x545bf19f86e80f11', p0, p1, p2);
};

/**
   * SET_UP_SPEED_RESTRAIN_INFORMATION_FOR_PLAYER_FOLLOWER
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @return {void}
   */
global.SetUpSpeedRestrainInformationForPlayerFollower = function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
  return Citizen.invokeNative('0xb5c51dd544f14f58', p0, p1, p2, p3, p4, p5, p6, p7, p8);
};

/**
   * START_TASK_ITEM_INTERACTION
   * Params: p3 = 0, 1; p5 = 0.0f, -1.0f
   * https://github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_ITEM_INTERACTION
   *
   * @param {number} ped
   * @param {number} itemHash
   * @param {number} interactionAnimHash
   * @param {number} p3
   * @param {number} flag
   * @param {number} p5
   * @return {void}
   */
global.StartTaskItemInteraction = function (ped, itemHash, interactionAnimHash, p3, flag, p5) {
  return Citizen.invokeNative('0xae72e7df013aaa61', ped, _ch(itemHash), _ch(interactionAnimHash), p3, flag, _fv(p5));
};

/**
   * STOP_ANIM_PLAYBACK
   *
   * @param {number} ped
   * @param {number} p1
   * @param {boolean} p2
   * @return {void}
   */
global.StopAnimPlayback = function (ped, p1, p2) {
  return Citizen.invokeNative('0xee08c992d238c5d1', ped, p1, p2);
};

/**
   * STOP_ANIM_TASK
   *
   * @param {number} ped
   * @param {string | number} animDictionary
   * @param {string | number} animationName
   * @param {number} p3
   * @return {void}
   */
global.StopAnimTask = function (ped, animDictionary, animationName, p3) {
  return Citizen.invokeNative('0x97ff36a1d40ea00a', ped, animDictionary, animationName, _fv(p3));
};

/**
   * TASK_ACHIEVE_HEADING
   * Makes the specified ped achieve the specified heading.
   * 
   * pedHandle: The handle of the ped to assign the task to.
   * heading: The desired heading.
   * timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is canceled, and the ped will stay at the heading it managed to reach in the time.
   *
   * @param {number} ped
   * @param {number} heading
   * @param {number} timeout
   * @return {void}
   */
global.TaskAchieveHeading = function (ped, heading, timeout) {
  return Citizen.invokeNative('0x93b93a37987f1f3d', ped, _fv(heading), timeout);
};

/**
   * TASK_AIM_AT_COORD
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.TaskAimAtCoord = function (ped, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0x4af1d73861212f52', ped, p1, p2, p3, p4, p5, p6);
};

/**
   * TASK_AIM_AT_ENTITY
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.TaskAimAtEntity = function (ped, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xcf7569bd0fb480a0', ped, p1, p2, p3, p4);
};

/**
   * TASK_AIM_GUN_AT_COORD
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} time
   * @param {boolean} p5
   * @param {boolean} p6
   * @return {void}
   */
global.TaskAimGunAtCoord = function (ped, x, y, z, time, p5, p6) {
  return Citizen.invokeNative('0x6671f3eec681bda1', ped, _fv(x), _fv(y), _fv(z), time, p5, p6);
};

/**
   * TASK_AIM_GUN_AT_ENTITY
   * duration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
   *
   * @param {number} ped
   * @param {number} targetEntity
   * @param {number} duration
   * @param {boolean} p3
   * @param {number} p4
   * @return {void}
   */
global.TaskAimGunAtEntity = function (ped, targetEntity, duration, p3, p4) {
  return Citizen.invokeNative('0x9b53bb6e8943af53', ped, targetEntity, duration, p3, p4);
};

/**
   * TASK_AMBIENT_ANIMAL_HUNT
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.TaskAmbientAnimalHunt = function (ped, p1, p2) {
  return Citizen.invokeNative('0x4b39d8f9d0fe7749', ped, p1, p2);
};

/**
   * TASK_AMBIENT_ANIMAL_STALK
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.TaskAmbientAnimalStalk = function (ped, p1, p2) {
  return Citizen.invokeNative('0x37c13863aba1b4a3', ped, p1, p2);
};

/**
   * TASK_ANIMAL_ALERTED
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.TaskAnimalAlerted = function (ped, p1, p2) {
  return Citizen.invokeNative('0x979d93372fc8c565', ped, p1, p2);
};

/**
   * TASK_ANIMAL_FLEE
   *
   * @param {number} ped
   * @param {number} targetPed
   * @param {any} p2
   * @return {void}
   */
global.TaskAnimalFlee = function (ped, targetPed, p2) {
  return Citizen.invokeNative('0xa899b61c66f09134', ped, targetPed, p2);
};

/**
   * TASK_ANIMAL_INTERACTION
   * https://github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_ANIMAL_INTERACTION
   *
   * @param {number} ped
   * @param {number} targetPed
   * @param {number} interactionType
   * @param {number} interactionModel
   * @param {boolean} skipIdleAnimationClip
   * @return {void}
   */
global.TaskAnimalInteraction = function (ped, targetPed, interactionType, interactionModel, skipIdleAnimationClip) {
  return Citizen.invokeNative('0xcd181a959cfdd7f4', ped, targetPed, _ch(interactionType), _ch(interactionModel), skipIdleAnimationClip);
};

/**
   * TASK_ANIMAL_UNALERTED
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.TaskAnimalUnalerted = function (ped, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x21fdf9a25cfe1ce5', ped, p1, p2, p3, p4);
};

/**
   * TASK_ANIMAL_WRITHE
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.TaskAnimalWrithe = function (ped, p1, p2) {
  return Citizen.invokeNative('0x8c038a39c4a4b6d6', ped, p1, p2);
};

/**
   * TASK_ARREST_PED
   *
   * @param {number} ped
   * @param {number} target
   * @return {void}
   */
global.TaskArrestPed = function (ped, target) {
  return Citizen.invokeNative('0xf3b9a78a178572b1', ped, target);
};

/**
   * TASK_BARK
   *
   * @param {number} ped
   * @param {number} barkAtTarget
   * @param {number} mood
   * @return {void}
   */
global.TaskBark = function (ped, barkAtTarget, mood) {
  return Citizen.invokeNative('0x83bfc1f836b2f3f2', ped, barkAtTarget, _ch(mood));
};

/**
   * TASK_BOAT_MISSION
   *
   * @param {number} pedDriver
   * @param {number} boat
   * @param {any} p2
   * @param {any} p3
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {any} p7
   * @param {number} maxSpeed
   * @param {number} drivingStyle
   * @param {number} p10
   * @param {any} p11
   * @return {void}
   */
global.TaskBoatMission = function (pedDriver, boat, p2, p3, x, y, z, p7, maxSpeed, drivingStyle, p10, p11) {
  return Citizen.invokeNative('0x15c86013127ce63f', pedDriver, boat, p2, p3, _fv(x), _fv(y), _fv(z), p7, _fv(maxSpeed), drivingStyle, _fv(p10), p11);
};

/**
   * TASK_BREAK_VEHICLE_DOOR_LOCK
   *
   * @param {number} ped
   * @param {number} vehicle
   * @return {void}
   */
global.TaskBreakVehicleDoorLock = function (ped, vehicle) {
  return Citizen.invokeNative('0xbb28d1bc9ea8a6a5', ped, vehicle);
};

/**
   * TASK_CARRIABLE
   * carriableSlot:
   *  7 > Back of a horse
   *  6 > Right side of a horse
   *  5 > Left side of a horse
   * flags:
   *  512: enables the prompt being the name of the item when using a generic item
   *
   * @param {number} entity
   * @param {number} carryConfig
   * @param {number} carrier
   * @param {number} carriableSlot
   * @param {number} flags
   * @return {void}
   */
global.TaskCarriable = function (entity, carryConfig, carrier, carriableSlot, flags) {
  return Citizen.invokeNative('0xf0b4f759f35cc7f5', entity, _ch(carryConfig), carrier, carriableSlot, flags);
};

/**
   * TASK_CLEAR_DEFENSIVE_AREA
   *
   * @param {number} ped
   * @return {void}
   */
global.TaskClearDefensiveArea = function (ped) {
  return Citizen.invokeNative('0x95a6c46a31d1917d', ped);
};

/**
   * TASK_CLEAR_LOOK_AT
   *
   * @param {number} ped
   * @return {void}
   */
global.TaskClearLookAt = function (ped) {
  return Citizen.invokeNative('0x0f804f1db19b9689', ped);
};

/**
   * TASK_CLIMB
   * Climbs or vaults the nearest thing.
   *
   * @param {number} ped
   * @param {boolean} unused
   * @return {void}
   */
global.TaskClimb = function (ped, unused) {
  return Citizen.invokeNative('0x89d9fcc2435112f1', ped, unused);
};

/**
   * TASK_CLIMB_LADDER
   *
   * @param {number} ped
   * @param {number} p1
   * @param {boolean} p2
   * @param {boolean} p3
   * @return {void}
   */
global.TaskClimbLadder = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0xb6c987f9285a3814', ped, _fv(p1), p2, p3);
};

/**
   * TASK_COMBAT_ANIMAL_CHARGE_PED
   *
   * @param {number} ped
   * @param {number} targetPed
   * @param {boolean} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.TaskCombatAnimalChargePed = function (ped, targetPed, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xee3aa414cf99f368', ped, targetPed, p2, p3, p4, p5, p6);
};

/**
   * TASK_COMBAT_ANIMAL_WARN
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.TaskCombatAnimalWarn = function (ped, p1, p2) {
  return Citizen.invokeNative('0xf960f3d57b660e96', ped, p1, p2);
};

/**
   * TASK_COMBAT_HATED_TARGETS
   *
   * @param {number} ped
   * @param {number} radius
   * @return {void}
   */
global.TaskCombatHatedTargets = function (ped, radius) {
  return Citizen.invokeNative('0x8182b561a29bd597', ped, _fv(radius));
};

/**
   * TASK_COMBAT_HATED_TARGETS_AROUND_PED
   * Despite its name, it only attacks ONE hated target. The one closest hated target.
   *
   * @param {number} ped
   * @param {number} radius
   * @param {number} flags
   * @param {any} p3
   * @return {void}
   */
global.TaskCombatHatedTargetsAroundPed = function (ped, radius, flags, p3) {
  return Citizen.invokeNative('0x7bf835bb9e2698c8', ped, _fv(radius), flags, p3);
};

/**
   * TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED
   *
   * @param {number} ped
   * @param {number} radius
   * @param {number} time
   * @param {number} flags
   * @return {void}
   */
global.TaskCombatHatedTargetsAroundPedTimed = function (ped, radius, time, flags) {
  return Citizen.invokeNative('0x2bba30b854534a0c', ped, _fv(radius), time, flags);
};

/**
   * TASK_COMBAT_HATED_TARGETS_IN_AREA
   * Despite its name, it only attacks ONE hated target. The one closest to the specified position.
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} flags
   * @param {any} p6
   * @return {void}
   */
global.TaskCombatHatedTargetsInArea = function (ped, x, y, z, radius, flags, p6) {
  return Citizen.invokeNative('0x4cf5f55dac3280a0', ped, _fv(x), _fv(y), _fv(z), _fv(radius), flags, p6);
};

/**
   * TASK_COMBAT_HATED_TARGETS_NO_LOS_TEST
   *
   * @param {number} ped
   * @param {number} radius
   * @return {void}
   */
global.TaskCombatHatedTargetsNoLosTest = function (ped, radius) {
  return Citizen.invokeNative('0xb5bc69d9c4060bc3', ped, _fv(radius));
};

/**
   * TASK_COMBAT_PED
   *
   * @param {number} ped
   * @param {number} targetPed
   * @param {number} p2
   * @param {number} p3
   * @return {void}
   */
global.TaskCombatPed = function (ped, targetPed, p2, p3) {
  return Citizen.invokeNative('0xf166e48407bac484', ped, targetPed, p2, p3);
};

/**
   * TASK_COMBAT_PED_TIMED
   *
   * @param {number} ped
   * @param {number} targetPed
   * @param {number} p2
   * @param {any} p3
   * @return {void}
   */
global.TaskCombatPedTimed = function (ped, targetPed, p2, p3) {
  return Citizen.invokeNative('0x944f30dcb7096bde', ped, targetPed, p2, p3);
};

/**
   * TASK_COMPANION_AMBIENT
   *
   * @param {number} ped
   * @param {any} p1
   * @return {void}
   */
global.TaskCompanionAmbient = function (ped, p1) {
  return Citizen.invokeNative('0xe017cf6e2527fe4f', ped, p1);
};

/**
   * TASK_CONFRONT
   *
   * @param {number} ped
   * @param {number} targetPed
   * @param {number} p2
   * @return {boolean}
   */
global.TaskConfront = function (ped, targetPed, p2) {
  return Citizen.invokeNative('0x3a2a2071df5cc569', ped, targetPed, p2, _r);
};

/**
   * TASK_COWER
   *
   * @param {number} ped
   * @param {number} duration
   * @param {number} pedToCowerFrom
   * @param {string | number} p3
   * @return {void}
   */
global.TaskCower = function (ped, duration, pedToCowerFrom, p3) {
  return Citizen.invokeNative('0x3eb1fe9e8e908e15', ped, duration, pedToCowerFrom, p3);
};

/**
   * TASK_DISEMBARK_NEAREST_TRAIN_CARRIAGE
   * flags: See TASK_ENTER_VEHICLE
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} flags
   * @return {void}
   */
global.TaskDisembarkNearestTrainCarriage = function (ped, p1, flags) {
  return Citizen.invokeNative('0x0a11f3bdec03ed5f', ped, _fv(p1), flags);
};

/**
   * TASK_DISMOUNT_ANIMAL
   * Dismounts the ped from the animal it's mounted on. taskFlag affects what side the rider gets off. p2-p5 are almost always 0.
   * flags: See TASK_ENTER_VEHICLE
   *
   * @param {number} rider
   * @param {number} taskFlag
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {number} targetPed
   * @return {void}
   */
global.TaskDismountAnimal = function (rider, taskFlag, p2, p3, p4, targetPed) {
  return Citizen.invokeNative('0x48e92d3dde23c23a', rider, taskFlag, p2, p3, p4, targetPed);
};

/**
   * TASK_DRIVE_BY
   *
   * @param {number} driverPed
   * @param {number} targetPed
   * @param {number} targetVehicle
   * @param {number} targetX
   * @param {number} targetY
   * @param {number} targetZ
   * @param {number} distanceToShoot
   * @param {number} pedAccuracy
   * @param {boolean} p8
   * @param {number} firingPattern
   * @return {void}
   */
global.TaskDriveBy = function (driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, p8, firingPattern) {
  return Citizen.invokeNative('0x2f8af0e82773a171', driverPed, targetPed, targetVehicle, _fv(targetX), _fv(targetY), _fv(targetZ), _fv(distanceToShoot), pedAccuracy, p8, _ch(firingPattern));
};

/**
   * TASK_DUCK
   *
   * @param {number} ped
   * @param {number} time
   * @return {void}
   */
global.TaskDuck = function (ped, time) {
  return Citizen.invokeNative('0xa14b5fbf986bac23', ped, time);
};

/**
   * TASK_DUEL
   * Params: p4 either 0.2f, 0.25f, 0.31f, 0.4f
   *
   * @param {number} ped
   * @param {any} p1
   * @param {number} p2
   * @param {number} entity
   * @param {number} p4
   * @param {number} p5
   * @param {number} vPosOpponentX
   * @param {number} vPosOpponentY
   * @param {number} vPosOpponentZ
   * @param {number} fOpponentHead
   * @param {number} p10
   * @return {void}
   */
global.TaskDuel = function (ped, p1, p2, entity, p4, p5, vPosOpponentX, vPosOpponentY, vPosOpponentZ, fOpponentHead, p10) {
  return Citizen.invokeNative('0x5d5b0d5bc3626e5a', ped, p1, _fv(p2), entity, _fv(p4), p5, _fv(vPosOpponentX), _fv(vPosOpponentY), _fv(vPosOpponentZ), _fv(fOpponentHead), p10);
};

/**
   * TASK_DUMP_CARRIABLE_FROM_PARENT
   *
   * @param {number} ped
   * @param {number} ped2
   * @param {number} entity
   * @return {void}
   */
global.TaskDumpCarriableFromParent = function (ped, ped2, entity) {
  return Citizen.invokeNative('0x17ca98707b15926a', ped, ped2, entity);
};

/**
   * TASK_EAT
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.TaskEat = function (ped, p1, p2) {
  return Citizen.invokeNative('0xbd7949bd07299672', ped, p1, p2);
};

/**
   * TASK_ENTER_ANIM_SCENE
   * flags:
   * MOVE_WHILST_WAITING_FOR_PATH = (1 << 0),
   * DO_NOT_STAND_STILL_AT_END_OF_PATH = (1 << 1),
   * SKIP_NAVIGATION = (1 << 2),
   * TEASF_AUTO_START_ANIM_SCENE = (1 << 3),
   * FORCE_STAND_STILL_AT_END_OF_PATH = (1 << 6),
   * ENTER_ANIM_SCENE_DONT_FOLLOW_NAVMESH = (1 << 7)
   *
   * @param {number} ped
   * @param {number} animScene
   * @param {string | number} entityName
   * @param {string | number} playbackListName
   * @param {number} enterSpeed
   * @param {boolean} bAutoStart
   * @param {number} flag
   * @param {number} p7
   * @param {number} p8
   * @return {void}
   */
global.TaskEnterAnimScene = function (ped, animScene, entityName, playbackListName, enterSpeed, bAutoStart, flag, p7, p8) {
  return Citizen.invokeNative('0xc2329b0206426644', ped, animScene, entityName, playbackListName, _fv(enterSpeed), bAutoStart, flag, p7, _fv(p8));
};

/**
   * TASK_ENTER_VEHICLE
   * flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEnterExitVehicleFlags
   *
   * @param {number} ped
   * @param {number} vehicle
   * @param {number} timeout
   * @param {number} seat
   * @param {number} speed
   * @param {number} flag
   * @param {any} p6
   * @return {void}
   */
global.TaskEnterVehicle = function (ped, vehicle, timeout, seat, speed, flag, p6) {
  return Citizen.invokeNative('0xc20e50aa46d09ca8', ped, vehicle, timeout, seat, _fv(speed), flag, p6);
};

/**
   * TASK_EVASIVE_ANIM
   * Params: p2 is returned by BUILTIN::SHIFT_LEFT
   *
   * @param {number} ped1
   * @param {number} ped2
   * @param {number} p2
   * @return {void}
   */
global.TaskEvasiveAnim = function (ped1, ped2, p2) {
  return Citizen.invokeNative('0x5f22926e1bce9b08', ped1, ped2, p2);
};

/**
   * TASK_EVERYONE_LEAVE_VEHICLE_IN_ORDER
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.TaskEveryoneLeaveVehicleInOrder = function (vehicle, p1) {
  return Citizen.invokeNative('0x6f1c49f275bd25b3', vehicle, p1);
};

/**
   * TASK_EXTEND_ROUTE
   * Adds a new point to the current point route. Call TASK_FLUSH_ROUTE before the first call to this. Call TASK_FOLLOW_POINT_ROUTE to make the Ped go the route.
   * 
   * A maximum of 8 points can be added.
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.TaskExtendRoute = function (x, y, z) {
  return Citizen.invokeNative('0x1e7889778264843a', _fv(x), _fv(y), _fv(z));
};

/**
   * TASK_FLEE_COORD
   * Params: p5 = some flag?, p6 = -1.0f, p8 = 0 in R* Scripts
   * fleeStyle: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eFleeStyle
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} fleeStyle
   * @param {number} p5
   * @param {number} p6
   * @param {number} duration
   * @param {number} p8
   * @return {void}
   */
global.TaskFleeCoord = function (ped, x, y, z, fleeStyle, p5, p6, duration, p8) {
  return Citizen.invokeNative('0x58428248bf4b64e4', ped, _fv(x), _fv(y), _fv(z), fleeStyle, p5, _fv(p6), duration, p8);
};

/**
   * TASK_FLEE_COORD_VIA
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @param {any} p11
   * @return {void}
   */
global.TaskFleeCoordVia = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
  return Citizen.invokeNative('0x390e0b697d25eaf5', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
};

/**
   * TASK_FLEE_PED
   * Params: p4 = -1.0f, p5 = -1, p6 = 0 in R* Scripts
   * fleeStyle: see TASK_FLEE_COORD
   *
   * @param {number} ped
   * @param {number} fleeFromTarget
   * @param {number} fleeStyle
   * @param {number} flag
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @return {void}
   */
global.TaskFleePed = function (ped, fleeFromTarget, fleeStyle, flag, p4, p5, p6) {
  return Citizen.invokeNative('0xfd45175a6dfd7ce9', ped, fleeFromTarget, fleeStyle, flag, _fv(p4), p5, p6);
};

/**
   * TASK_FLEE_PED_VIA
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @return {void}
   */
global.TaskFleePedVia = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
  return Citizen.invokeNative('0x5802e0f910e4cf1d', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
};

/**
   * TASK_FLUSH_ROUTE
   * Clears the current point route. Call this before TASK_EXTEND_ROUTE and TASK_FOLLOW_POINT_ROUTE.
   *
  
   * @return {void}
   */
global.TaskFlushRoute = function () {
  return Citizen.invokeNative('0x841142a1376e9006');
};

/**
   * TASK_FLYING_CIRCLE
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.TaskFlyingCircle = function (ped, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0x72997893bfb8eccc', ped, p1, p2, p3, p4, p5, p6);
};

/**
   * TASK_FLY_AWAY
   *
   * @param {number} ped
   * @param {number} fleeFromTarget
   * @return {void}
   */
global.TaskFlyAway = function (ped, fleeFromTarget) {
  return Citizen.invokeNative('0xe86a537b5a3c297c', ped, fleeFromTarget);
};

/**
   * TASK_FLY_TO_COORD
   *
   * @param {number} ped
   * @param {number} travelMbr
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {boolean} p5
   * @param {boolean} p6
   * @return {void}
   */
global.TaskFlyToCoord = function (ped, travelMbr, x, y, z, p5, p6) {
  return Citizen.invokeNative('0xd6cfc2d59da72042', ped, _fv(travelMbr), _fv(x), _fv(y), _fv(z), p5, p6);
};

/**
   * TASK_FOLLOW_AND_CONVERSE_WITH_PED
   *
   * @param {number} ped
   * @param {number} targetPed
   * @param {any} p2
   * @param {any} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {any} p7
   * @param {any} p8
   * @param {number} p9
   * @param {number} p10
   * @return {void}
   */
global.TaskFollowAndConverseWithPed = function (ped, targetPed, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
  return Citizen.invokeNative('0x489ffccce7392b55', ped, targetPed, p2, p3, _fv(p4), _fv(p5), p6, p7, p8, _fv(p9), _fv(p10));
};

/**
   * TASK_FOLLOW_ENTITY_ALONG_WAYPOINT_RECORDING_AT_OFFSET
   *
   * @param {number} ped0
   * @param {number} ped1
   * @param {string | number} waypointRecording
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @param {boolean} p8
   * @return {void}
   */
global.TaskFollowEntityAlongWaypointRecordingAtOffset = function (ped0, ped1, waypointRecording, p3, p4, p5, p6, p7, p8) {
  return Citizen.invokeNative('0x4d2b787bae9ab760', ped0, ped1, waypointRecording, _fv(p3), _fv(p4), p5, p6, p7, p8);
};

/**
   * TASK_FOLLOW_ENTITY_WHILE_AIMING_AT_ENTITY
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.TaskFollowEntityWhileAimingAtEntity = function (ped, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0x2d532eaa142cf83f', ped, p1, p2, p3, p4, p5, p6, p7);
};

/**
   * TASK_FOLLOW_NAV_MESH_TO_COORD
   * If no timeout, set timeout to -1.
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} speedMultiplier
   * @param {number} timeout
   * @param {number} stoppingRange
   * @param {number} flags
   * @param {number} heading
   * @return {void}
   */
global.TaskFollowNavMeshToCoord = function (ped, x, y, z, speedMultiplier, timeout, stoppingRange, flags, heading) {
  return Citizen.invokeNative('0x15d3a79d4e44b913', ped, _fv(x), _fv(y), _fv(z), _fv(speedMultiplier), timeout, _fv(stoppingRange), flags, _fv(heading));
};

/**
   * TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} speedMultiplier
   * @param {number} timeout
   * @param {number} stoppingRange
   * @param {number} flags
   * @param {number} p8
   * @param {number} p9
   * @param {number} p10
   * @param {number} entity
   * @param {number} unk
   * @return {void}
   */
global.TaskFollowNavMeshToCoordAdvanced = function (ped, x, y, z, speedMultiplier, timeout, stoppingRange, flags, p8, p9, p10, entity, unk) {
  return Citizen.invokeNative('0x17f58b88d085dbac', ped, _fv(x), _fv(y), _fv(z), _fv(speedMultiplier), timeout, _fv(stoppingRange), flags, _fv(p8), _fv(p9), _fv(p10), entity, _fv(unk));
};

/**
   * TASK_FOLLOW_PAVEMENT_TO_COORD
   *
   * @param {number} ped
   * @param {any} args
   * @return {void}
   */
global.TaskFollowPavementToCoord = function (ped, args) {
  return Citizen.invokeNative('0x1b1475414e70dd8e', ped, args);
};

/**
   * TASK_FOLLOW_POINT_ROUTE
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.TaskFollowPointRoute = function (ped, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x0e14c5550dc3cd1d', ped, p1, p2, p3, p4, p5);
};

/**
   * TASK_FOLLOW_TO_OFFSET_OF_COORD
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @param {any} p11
   * @param {any} p12
   * @param {any} p13
   * @param {any} p14
   * @return {void}
   */
global.TaskFollowToOffsetOfCoord = function (ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
  return Citizen.invokeNative('0x2e3676282c18a692', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
};

/**
   * TASK_FOLLOW_TO_OFFSET_OF_ENTITY
   *
   * @param {number} ped
   * @param {number} entity
   * @param {number} offsetX
   * @param {number} offsetY
   * @param {number} offsetZ
   * @param {number} movementSpeed
   * @param {number} timeout
   * @param {number} stoppingRange
   * @param {boolean} persistFollowing
   * @param {boolean} p9
   * @param {boolean} walkOnly
   * @param {boolean} p11
   * @param {boolean} p12
   * @param {boolean} p13
   * @return {void}
   */
global.TaskFollowToOffsetOfEntity = function (ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing, p9, walkOnly, p11, p12, p13) {
  return Citizen.invokeNative('0x304ae42e357b8c7e', ped, entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(movementSpeed), timeout, _fv(stoppingRange), persistFollowing, p9, walkOnly, p11, p12, p13);
};

/**
   * TASK_FOLLOW_WAYPOINT_RECORDING
   *
   * @param {number} ped
   * @param {string | number} waypointRecording
   * @param {number} p2
   * @param {number} flag
   * @param {number} p4
   * @param {boolean} p5
   * @param {any} p6
   * @param {number} p7
   * @return {void}
   */
global.TaskFollowWaypointRecording = function (ped, waypointRecording, p2, flag, p4, p5, p6, p7) {
  return Citizen.invokeNative('0x0759591819534f7b', ped, waypointRecording, p2, flag, p4, p5, p6, p7);
};

/**
   * TASK_FOLLOW_WAYPOINT_RECORDING_ADVANCED
   *
   * @param {number} ped
   * @param {any} p1
   * @return {void}
   */
global.TaskFollowWaypointRecordingAdvanced = function (ped, p1) {
  return Citizen.invokeNative('0x0cfc13ebc19bca52', ped, p1);
};

/**
   * TASK_FOLLOW_WAYPOINT_RECORDING_AT_OFFSET
   *
   * @param {number} ped
   * @param {string | number} waypointRecording
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {boolean} p6
   * @return {void}
   */
global.TaskFollowWaypointRecordingAtOffset = function (ped, waypointRecording, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xbe9b0520bd7c445b', ped, waypointRecording, _fv(p2), p3, p4, p5, p6);
};

/**
   * TASK_FORCE_MOTION_STATE
   * motionStateHash: see FORCE_PED_MOTION_STATE
   *
   * @param {number} ped
   * @param {number} motionStateHash
   * @param {boolean} p2
   * @return {void}
   */
global.TaskForceMotionState = function (ped, motionStateHash, p2) {
  return Citizen.invokeNative('0x4f056e1affef17ab', ped, _ch(motionStateHash), p2);
};

/**
   * TASK_GOTO_ENTITY_AIMING
   * ped = Ped you want to perform this task.
   * target = the Entity they should aim at.
   * distanceToStopAt = distance from the target, where the ped should stop to aim.
   * StartAimingDist = distance where the ped should start to aim.
   *
   * @param {number} ped
   * @param {number} target
   * @param {number} distanceToStopAt
   * @param {number} startAimingDist
   * @return {void}
   */
global.TaskGotoEntityAiming = function (ped, target, distanceToStopAt, startAimingDist) {
  return Citizen.invokeNative('0xa9da48fab8a76c12', ped, target, _fv(distanceToStopAt), _fv(startAimingDist));
};

/**
   * TASK_GOTO_ENTITY_OFFSET
   *
   * @param {number} ped
   * @param {number} entity
   * @param {any} p2
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} duration
   * @return {void}
   */
global.TaskGotoEntityOffset = function (ped, entity, p2, x, y, z, duration) {
  return Citizen.invokeNative('0xe39b4ff4fdebde27', ped, entity, p2, _fv(x), _fv(y), _fv(z), duration);
};

/**
   * TASK_GOTO_ENTITY_OFFSET_XY
   *
   * @param {number} ped
   * @param {number} entity
   * @param {number} duration
   * @param {number} targetRadius
   * @param {number} xOffset
   * @param {number} yOffset
   * @param {number} moveBlendRatio
   * @param {number} offsetFlags
   * @return {void}
   */
global.TaskGotoEntityOffsetXy = function (ped, entity, duration, targetRadius, xOffset, yOffset, moveBlendRatio, offsetFlags) {
  return Citizen.invokeNative('0x338e7ef52b6095a9', ped, entity, duration, _fv(targetRadius), _fv(xOffset), _fv(yOffset), _fv(moveBlendRatio), offsetFlags);
};

/**
   * TASK_GOTO_ENTITY_OFFSET_XYZ
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @return {void}
   */
global.TaskGotoEntityOffsetXyz = function (ped, p1, p2, p3, p4, p5, p6, p7, p8) {
  return Citizen.invokeNative('0xfa6da9d151769392', ped, p1, p2, p3, p4, p5, p6, p7, p8);
};

/**
   * TASK_GOTO_ENTITY_OFFSET_XYZ_AIMING
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @return {void}
   */
global.TaskGotoEntityOffsetXyzAiming = function (ped, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
  return Citizen.invokeNative('0x41b0832ca96b5351', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9);
};

/**
   * TASK_GOTO_ENTITY_OFFSET_XY_AIMING
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @return {void}
   */
global.TaskGotoEntityOffsetXyAiming = function (ped, p1, p2, p3, p4, p5, p6, p7, p8) {
  return Citizen.invokeNative('0x901bd69984400f62', ped, p1, p2, p3, p4, p5, p6, p7, p8);
};

/**
   * TASK_GO_STRAIGHT_TO_COORD
   * Tells the ped to go to a coord, without using the navemesh. if timeBeforeTeleport is -1 the ped will never warp, p8 is always 0 or 1 still unknown
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} moveBlendRatio
   * @param {number} timeBeforeTeleport
   * @param {number} finalHeading
   * @param {number} targetRadius
   * @param {number} p8
   * @return {void}
   */
global.TaskGoStraightToCoord = function (ped, x, y, z, moveBlendRatio, timeBeforeTeleport, finalHeading, targetRadius, p8) {
  return Citizen.invokeNative('0xd76b57b44f1e6f8b', ped, _fv(x), _fv(y), _fv(z), _fv(moveBlendRatio), timeBeforeTeleport, _fv(finalHeading), _fv(targetRadius), p8);
};

/**
   * TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY
   * Tells the ped to go to an offset coord from an entity, without using the navmesh. if timeBeforeTeleport is -1 the ped will never warp, p7 is 1 or 0 still unknown param 
   *
   * @param {number} ped
   * @param {number} entity
   * @param {number} xOffset
   * @param {number} yoffset
   * @param {number} zOffset
   * @param {number} moveBlendRatio
   * @param {number} timeBeforeTeleport
   * @param {number} p7
   * @return {void}
   */
global.TaskGoStraightToCoordRelativeToEntity = function (ped, entity, xOffset, yoffset, zOffset, moveBlendRatio, timeBeforeTeleport, p7) {
  return Citizen.invokeNative('0x61e360b7e040d12e', ped, entity, _fv(xOffset), _fv(yoffset), _fv(zOffset), moveBlendRatio, timeBeforeTeleport, p7);
};

/**
   * TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD
   *
   * @param {number} ped
   * @param {number} goToLocationX
   * @param {number} goToLocationY
   * @param {number} goToLocationZ
   * @param {number} focusLocationX
   * @param {number} focusLocationY
   * @param {number} focusLocationZ
   * @param {number} speed
   * @param {boolean} shootAtEnemies
   * @param {number} distanceToStopAt
   * @param {number} noRoadsDistance
   * @param {boolean} unkTrue
   * @param {number} unkFlag
   * @param {number} aimingFlag
   * @param {number} firingPattern
   * @return {void}
   */
global.TaskGoToCoordAndAimAtHatedEntitiesNearCoord = function (ped, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, unkTrue, unkFlag, aimingFlag, firingPattern) {
  return Citizen.invokeNative('0xa55547801eb331fc', ped, _fv(goToLocationX), _fv(goToLocationY), _fv(goToLocationZ), _fv(focusLocationX), _fv(focusLocationY), _fv(focusLocationZ), _fv(speed), shootAtEnemies, _fv(distanceToStopAt), _fv(noRoadsDistance), unkTrue, unkFlag, aimingFlag, _ch(firingPattern));
};

/**
   * TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD_USING_COMBAT_STYLE
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @param {any} p11
   * @param {any} p12
   * @param {any} p13
   * @param {any} p14
   * @return {void}
   */
global.TaskGoToCoordAndAimAtHatedEntitiesNearCoordUsingCombatStyle = function (ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
  return Citizen.invokeNative('0x87bd711fc31ea273', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
};

/**
   * TASK_GO_TO_COORD_ANY_MEANS
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} speed
   * @param {number} entity
   * @param {boolean} p6
   * @param {number} walkingStyle
   * @param {number} p8
   * @return {void}
   */
global.TaskGoToCoordAnyMeans = function (ped, x, y, z, speed, entity, p6, walkingStyle, p8) {
  return Citizen.invokeNative('0x5bc448cb78fa3e88', ped, _fv(x), _fv(y), _fv(z), _fv(speed), entity, p6, walkingStyle, _fv(p8));
};

/**
   * TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} speed
   * @param {any} p5
   * @param {boolean} p6
   * @param {number} walkingStyle
   * @param {number} p8
   * @param {any} p9
   * @param {any} p10
   * @param {any} p11
   * @param {any} p12
   * @return {void}
   */
global.TaskGoToCoordAnyMeansExtraParams = function (ped, x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12) {
  return Citizen.invokeNative('0x1dd45f9ecfdb1bc9', ped, _fv(x), _fv(y), _fv(z), _fv(speed), p5, p6, walkingStyle, _fv(p8), p9, p10, p11, p12);
};

/**
   * TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED
   * This native allows to control the cruise speed of where you want the ped to go
   * 3rd param might be the entity ped is in? like boat or wagon, 12th param might be the cruiseSpeed of the entity ped is in?
   * EXAMPLE: TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(PlayerPedId(), vector3(x, y, z), 3.0, entity, 1, 0, -1082130432, 0, 101004800, 520, 3.0, 1082130432, 0)
   *
   * @param {number} ped
   * @param {number} cruiseSpeed
   * @param {number} entity
   * @param {number} p4
   * @param {number} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @param {any} p11
   * @param {number} cruiseSpeed_2
   * @param {any} p13
   * @param {any} p14
   * @return {Vector3}
   */
global.TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed = function (ped, cruiseSpeed, entity, p4, p5, p6, p7, p8, p9, p10, p11, cruiseSpeed_2, p13, p14) {
  return Citizen.invokeNative('0xb8ecd61f531a7b02', ped, _v, _fv(cruiseSpeed), entity, p4, p5, p6, p7, p8, p9, p10, p11, _fv(cruiseSpeed_2), p13, p14);
};

/**
   * TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @param {any} p11
   * @param {any} p12
   * @param {any} p13
   * @param {any} p14
   * @param {any} p15
   * @return {void}
   */
global.TaskGoToCoordWhileAimingAtCoord = function (ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15) {
  return Citizen.invokeNative('0x11315ab3385b8ac0', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15);
};

/**
   * TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD_USING_COMBAT_STYLE
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @param {any} p11
   * @param {any} p12
   * @param {any} p13
   * @param {any} p14
   * @param {any} p15
   * @return {void}
   */
global.TaskGoToCoordWhileAimingAtCoordUsingCombatStyle = function (ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15) {
  return Citizen.invokeNative('0x639c0425a0b4e77e', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15);
};

/**
   * TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY
   *
   * @param {number} ped1
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} ped2
   * @param {number} p5
   * @param {any} p6
   * @param {number} p7
   * @param {number} p8
   * @param {any} p9
   * @param {any} p10
   * @param {any} p11
   * @param {number} firingPattern
   * @param {number} p13
   * @param {any} p14
   * @return {void}
   */
global.TaskGoToCoordWhileAimingAtEntity = function (ped1, x, y, z, ped2, p5, p6, p7, p8, p9, p10, p11, firingPattern, p13, p14) {
  return Citizen.invokeNative('0xb2a16444ead9ae47', ped1, _fv(x), _fv(y), _fv(z), ped2, _fv(p5), p6, _fv(p7), _fv(p8), p9, p10, p11, _ch(firingPattern), p13, p14);
};

/**
   * TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY_USING_COMBAT_STYLE
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @param {any} p11
   * @param {any} p12
   * @param {any} p13
   * @param {any} p14
   * @return {void}
   */
global.TaskGoToCoordWhileAimingAtEntityUsingCombatStyle = function (ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
  return Citizen.invokeNative('0x78426d0982d083c9', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
};

/**
   * TASK_GO_TO_ENTITY
   *
   * @param {number} ped
   * @param {number} target
   * @param {number} duration
   * @param {number} distance
   * @param {number} speed
   * @param {number} p5
   * @param {number} p6
   * @return {void}
   */
global.TaskGoToEntity = function (ped, target, duration, distance, speed, p5, p6) {
  return Citizen.invokeNative('0x6a071245eb0d1882', ped, target, duration, _fv(distance), _fv(speed), _fv(p5), p6);
};

/**
   * TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY
   * shootatEntity:
   * If true, peds will shoot at Entity till it is dead.
   * If false, peds will just walk till they reach the entity and will cease shooting.
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @return {void}
   */
global.TaskGoToEntityWhileAimingAtEntity = function (ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
  return Citizen.invokeNative('0x97465886d35210e9', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
};

/**
   * TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY_USING_COMBAT_STYLE
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @return {void}
   */
global.TaskGoToEntityWhileAimingAtEntityUsingCombatStyle = function (ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
  return Citizen.invokeNative('0xcef0117c233026ad', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
};

/**
   * TASK_GO_TO_WHISTLE
   * enum eWhistleType
   * {
   *   WHISTLE_MAIN,
   *   WHISTLE_SECONDARY,
   *   WHISTLE_DOUBLE,
   *   WHISTLE_URGENT,
   *   WHISTLE_LONG
   * };
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} whistleType
   * @return {void}
   */
global.TaskGoToWhistle = function (ped, p1, whistleType) {
  return Citizen.invokeNative('0xbad6545608ceca6e', ped, p1, whistleType);
};

/**
   * TASK_GRAPPLE
   * grappleStyle: AR_GRAPPLE_MOUNT_STANDING_FROM_FRONT, AR_GRAPPLE_MOUNT_STANDING_FROM_RIGHT, AR_GRAPPLE_MOUNT_STANDING_FROM_BACK, AR_GRAPPLE_MOUNT_STANDING_FROM_LEFT, AR_GRAPPLE_MOUNT_FROM_FRONT, AR_WOLF_EXECUTION_ENTER_FROM_BACK, AR_GRAPPLE_DRAG_FRONT_ON_ASS, AR_GRAPPLE_FRONT_FROM_LEFT_FAR, AR_BEAR_CHALLENGE_FRONT, AR_GRAPPLE_FRONT_FROM_FRONT, AR_GRAPPLE_MOUNT_FACEUP_FROM_FRONT
   *
   * @param {number} ped
   * @param {number} targetPed
   * @param {number} grappleStyle
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @return {boolean}
   */
global.TaskGrapple = function (ped, targetPed, grappleStyle, p3, p4, p5, p6) {
  return Citizen.invokeNative('0x779a2ffacefaea7b', ped, targetPed, _ch(grappleStyle), p3, _fv(p4), p5, p6, _r);
};

/**
   * TASK_GUARD
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.TaskGuard = function (ped, p1, p2) {
  return Citizen.invokeNative('0xb9fb242eaccaf30f', ped, p1, p2);
};

/**
   * TASK_GUARD_ASSIGNED_DEFENSIVE_AREA
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {any} p6
   * @return {void}
   */
global.TaskGuardAssignedDefensiveArea = function (ped, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xd2a207eebdf9889b', ped, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6);
};

/**
   * TASK_GUARD_CURRENT_POSITION
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @param {boolean} p3
   * @return {void}
   */
global.TaskGuardCurrentPosition = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0x4a58a47a72e3fcb4', ped, _fv(p1), _fv(p2), p3);
};

/**
   * TASK_HANDS_UP
   * flags: 0 = HANDS_UP_NOTHING; 1 = HANDS_UP_STRAIGHT_TO_LOOP
   *
   * @param {number} ped
   * @param {number} duration
   * @param {number} facingPed
   * @param {number} timeToFacePed
   * @param {number} flags
   * @return {void}
   */
global.TaskHandsUp = function (ped, duration, facingPed, timeToFacePed, flags) {
  return Citizen.invokeNative('0xf2eab31979a7f910', ped, duration, facingPed, timeToFacePed, flags);
};

/**
   * TASK_HITCH_ANIMAL
   *
   * @param {number} ped
   * @param {number} scenarioPoint
   * @param {number} flag
   * @return {void}
   */
global.TaskHitchAnimal = function (ped, scenarioPoint, flag) {
  return Citizen.invokeNative('0x9030ad4b6207bfe8', ped, scenarioPoint, flag);
};

/**
   * TASK_HOGTIEABLE
   *
   * @param {number} ped
   * @return {void}
   */
global.TaskHogtieable = function (ped) {
  return Citizen.invokeNative('0x6afd8fe0d723328f', ped);
};

/**
   * TASK_HOGTIE_TARGET_PED
   *
   * @param {number} ped
   * @param {number} targetPed
   * @return {void}
   */
global.TaskHogtieTargetPed = function (ped, targetPed) {
  return Citizen.invokeNative('0x27829afd3e03ac1a', ped, targetPed);
};

/**
   * TASK_HORSE_ACTION
   * https://github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_HORSE_ACTION
   * Params: p2, p3 are set to 0 in R* Scripts
   *
   * @param {number} ped
   * @param {number} action
   * @param {number} targetPed
   * @param {any} p3
   * @return {void}
   */
global.TaskHorseAction = function (ped, action, targetPed, p3) {
  return Citizen.invokeNative('0xa09cfd29100f06c3', ped, action, targetPed, p3);
};

/**
   * TASK_INVESTIGATE
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.TaskInvestigate = function (ped, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x5c8514540d27fbfb', ped, p1, p2, p3, p4, p5);
};

/**
   * TASK_JUMP
   *
   * @param {number} ped
   * @param {boolean} unused
   * @return {void}
   */
global.TaskJump = function (ped, unused) {
  return Citizen.invokeNative('0x0ae4086104e067b1', ped, unused);
};

/**
   * TASK_KNOCKED_OUT
   *
   * @param {number} ped
   * @param {number} p1
   * @param {boolean} permanently
   * @return {void}
   */
global.TaskKnockedOut = function (ped, p1, permanently) {
  return Citizen.invokeNative('0xf90427f00a495a28', ped, _fv(p1), permanently);
};

/**
   * TASK_KNOCKED_OUT_AND_HOGTIED
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.TaskKnockedOutAndHogtied = function (ped, p1, p2) {
  return Citizen.invokeNative('0x42ac6401abb8c7e5', ped, _fv(p1), p2);
};

/**
   * TASK_LASSO_PED
   *
   * @param {number} ped
   * @param {number} targetPed
   * @return {void}
   */
global.TaskLassoPed = function (ped, targetPed) {
  return Citizen.invokeNative('0xc716eb2bd16370a3', ped, targetPed);
};

/**
   * TASK_LEAD_AND_CONVERSE
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @return {void}
   */
global.TaskLeadAndConverse = function (ped, p1, p2, p3, p4, p5, p6, p7, p8) {
  return Citizen.invokeNative('0xaa19711d33c6708c', ped, p1, p2, p3, p4, p5, p6, p7, p8);
};

/**
   * TASK_LEAD_HORSE
   *
   * @param {number} ped
   * @param {number} horse
   * @return {void}
   */
global.TaskLeadHorse = function (ped, horse) {
  return Citizen.invokeNative('0x9a7a4a54596fe09d', ped, horse);
};

/**
   * TASK_LEAVE_ANY_VEHICLE
   * flags: See TASK_ENTER_VEHICLE
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} taskFlag
   * @return {void}
   */
global.TaskLeaveAnyVehicle = function (ped, p1, taskFlag) {
  return Citizen.invokeNative('0x504d54df3f6f2247', ped, p1, taskFlag);
};

/**
   * TASK_LEAVE_VEHICLE
   * flags: See TASK_ENTER_VEHICLE
   *
   * @param {number} ped
   * @param {number} vehicle
   * @param {number} flags
   * @param {number} unkPed
   * @return {void}
   */
global.TaskLeaveVehicle = function (ped, vehicle, flags, unkPed) {
  return Citizen.invokeNative('0xd3dbce61a490be02', ped, vehicle, flags, unkPed);
};

/**
   * TASK_LOOK_AT_COORD
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} duration
   * @param {number} flags
   * @param {number} p6
   * @param {boolean} p7
   * @return {void}
   */
global.TaskLookAtCoord = function (ped, x, y, z, duration, flags, p6, p7) {
  return Citizen.invokeNative('0x6fa46612594f7973', ped, _fv(x), _fv(y), _fv(z), duration, flags, p6, p7);
};

/**
   * TASK_LOOK_AT_ENTITY
   * param3: duration in ms, use -1 to look forever
   * param4: using 2048 is fine
   * param5: using 3 is fine
   *
   * @param {number} ped
   * @param {number} lookAtTarget
   * @param {number} duration
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @return {void}
   */
global.TaskLookAtEntity = function (ped, lookAtTarget, duration, p3, p4, p5) {
  return Citizen.invokeNative('0x69f4be8c8cc4796c', ped, lookAtTarget, duration, p3, p4, p5);
};

/**
   * TASK_LOOT_ENTITY
   *
   * @param {number} ped
   * @param {number} entity
   * @return {void}
   */
global.TaskLootEntity = function (ped, entity) {
  return Citizen.invokeNative('0x48fae038401a2888', ped, entity);
};

/**
   * TASK_LOOT_NEAREST_ENTITY
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p4
   * @param {number} p5
   * @return {void}
   */
global.TaskLootNearestEntity = function (ped, x, y, z, p4, p5) {
  return Citizen.invokeNative('0xcf1501cbc4059412', ped, _fv(x), _fv(y), _fv(z), p4, _fv(p5));
};

/**
   * TASK_MELEE
   * Params: p2: AR_TAKEDOWN_FRONT, AR_EXECUTION_FRONT, 0 in R* Scripts
   *
   * @param {number} ped
   * @param {number} targetPed
   * @param {number} p2
   * @param {any} p3
   * @param {any} p4
   * @param {number} p5
   * @param {any} p6
   * @param {number} p7
   * @return {boolean}
   */
global.TaskMelee = function (ped, targetPed, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0x482c99d0b38d1b0a', ped, targetPed, _ch(p2), p3, p4, _fv(p5), p6, _fv(p7), _r);
};

/**
   * TASK_MOUNT_ANIMAL
   * timer: in ms, if it reaches 0 it will auto warp the ped on the horse
   * mountStyle: See TASK_ENTER_VEHICLE
   * Flags will still apply to mountStyle
   *
   * @param {number} ped
   * @param {number} mount
   * @param {number} timer
   * @param {number} seatIndex
   * @param {number} pedSpeed
   * @param {number} mountStyle
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.TaskMountAnimal = function (ped, mount, timer, seatIndex, pedSpeed, mountStyle, p6, p7) {
  return Citizen.invokeNative('0x92db0739813c5186', ped, mount, timer, seatIndex, _fv(pedSpeed), mountStyle, p6, p7);
};

/**
   * TASK_MOVE_BE_IN_FORMATION
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.TaskMoveBeInFormation = function (ped, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0x4aa5aa97c65e4a2f', ped, p1, p2, p3, p4, p5, p6);
};

/**
   * TASK_MOVE_FOLLOW_ROAD_USING_NAVMESH
   * Params: moveBlendRatio commonly 1.25f, p5 is always 0 in R* Scripts
   *
   * @param {number} ped
   * @param {number} moveBlendRatio
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {any} p5
   * @return {void}
   */
global.TaskMoveFollowRoadUsingNavmesh = function (ped, moveBlendRatio, x, y, z, p5) {
  return Citizen.invokeNative('0x79482c12482a860d', ped, _fv(moveBlendRatio), _fv(x), _fv(y), _fv(z), p5);
};

/**
   * TASK_MOVE_IN_TRAFFIC
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.TaskMoveInTraffic = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0x8aa1593aec087a29', ped, p1, p2, p3);
};

/**
   * TASK_MOVE_IN_TRAFFIC_AWAY_FROM_ENTITY
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.TaskMoveInTrafficAwayFromEntity = function (ped, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x13ded0bc45600fe1', ped, p1, p2, p3, p4);
};

/**
   * TASK_MOVE_IN_TRAFFIC_TO_DESTINATION
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.TaskMoveInTrafficToDestination = function (ped, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0xdca3a13f7a45338b', ped, p1, p2, p3, p4, p5, p6, p7);
};

/**
   * TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS
   *
   * @param {number} ped
   * @param {string | number} moveNetworkDefName
   * @param {any} taskData
   * @param {number} xPos
   * @param {number} yPos
   * @param {number} zPos
   * @param {number} xRot
   * @param {number} yRot
   * @param {number} zRot
   * @param {number} p9
   * @param {number} p10
   * @param {number} p11
   * @param {number} p12
   * @param {number} flag
   * @param {number} p14
   * @return {void}
   */
global.TaskMoveNetworkAdvancedByNameWithInitParams = function (ped, moveNetworkDefName, taskData, xPos, yPos, zPos, xRot, yRot, zRot, p9, p10, p11, p12, flag, p14) {
  return Citizen.invokeNative('0x7b6a04f98bbafb2c', ped, moveNetworkDefName, taskData, _fv(xPos), _fv(yPos), _fv(zPos), _fv(xRot), _fv(yRot), _fv(zRot), p9, _fv(p10), p11, p12, flag, p14);
};

/**
   * TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS_ATTACHED
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @param {any} p11
   * @param {any} p12
   * @param {any} p13
   * @param {any} p14
   * @param {any} p15
   * @param {any} p16
   * @param {any} p17
   * @return {void}
   */
global.TaskMoveNetworkAdvancedByNameWithInitParamsAttached = function (ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17) {
  return Citizen.invokeNative('0xf92171093bcabed4', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17);
};

/**
   * TASK_MOVE_NETWORK_BY_NAME
   *
   * @param {number} ped
   * @param {string | number} task
   * @param {number} multiplier
   * @param {boolean} p3
   * @param {string | number} animDict
   * @param {number} flags
   * @return {void}
   */
global.TaskMoveNetworkByName = function (ped, task, multiplier, p3, animDict, flags) {
  return Citizen.invokeNative('0x2d537ba194896636', ped, task, _fv(multiplier), p3, animDict, flags);
};

/**
   * TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS
   *
   * @param {number} ped
   * @param {string | number} moveNetworkDefName
   * @param {DataView} taskData
   * @param {number} p3
   * @param {boolean} p4
   * @param {string | number} animDict
   * @param {number} flags
   * @return {void}
   */
global.TaskMoveNetworkByNameWithInitParams = function (ped, moveNetworkDefName, taskData, p3, p4, animDict, flags) {
  return Citizen.invokeNative('0x139805c2a67c4795', ped, moveNetworkDefName, taskData, _fv(p3), p4, animDict, flags);
};

/**
   * TASK_PATROL
   *
   * @param {number} ped
   * @param {string | number} patrolRoute
   * @param {any} p2
   * @param {boolean} p3
   * @param {boolean} p4
   * @return {void}
   */
global.TaskPatrol = function (ped, patrolRoute, p2, p3, p4) {
  return Citizen.invokeNative('0xbda5df49d080fe4e', ped, patrolRoute, p2, p3, p4);
};

/**
   * TASK_PAUSE
   * This tasks the ped to do nothing for the specified amount of milliseconds.
   * This is useful if you want to add a delay between tasks when using a sequence task.
   *
   * @param {number} ped
   * @param {number} ms
   * @return {void}
   */
global.TaskPause = function (ped, ms) {
  return Citizen.invokeNative('0xe73a266db0ca9042', ped, ms);
};

/**
   * TASK_PED_SLIDE_TO_COORD
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} heading
   * @param {number} p5
   * @return {void}
   */
global.TaskPedSlideToCoord = function (ped, x, y, z, heading, p5) {
  return Citizen.invokeNative('0xd04fe6765d990a06', ped, _fv(x), _fv(y), _fv(z), _fv(heading), _fv(p5));
};

/**
   * TASK_PERFORM_SEQUENCE
   *
   * @param {number} ped
   * @param {number} taskSequenceId
   * @return {void}
   */
global.TaskPerformSequence = function (ped, taskSequenceId) {
  return Citizen.invokeNative('0x5aba3986d90d8a3b', ped, taskSequenceId);
};

/**
   * TASK_PERFORM_SEQUENCE_FROM_PROGRESS
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.TaskPerformSequenceFromProgress = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0x89221b16730234f0', ped, p1, p2, p3);
};

/**
   * TASK_PERSISTENT_CHARACTER
   *
   * @param {number} ped
   * @return {void}
   */
global.TaskPersistentCharacter = function (ped) {
  return Citizen.invokeNative('0x4391700cbd89c3d8', ped);
};

/**
   * TASK_PICKUP_CARRIABLE_ENTITY
   *
   * @param {number} ped
   * @param {number} entity
   * @return {void}
   */
global.TaskPickupCarriableEntity = function (ped, entity) {
  return Citizen.invokeNative('0x502ec17b1bed4bfa', ped, entity);
};

/**
   * TASK_PICK_UP_WEAPON
   *
   * @param {number} ped
   * @param {any} p1
   * @return {void}
   */
global.TaskPickUpWeapon = function (ped, p1) {
  return Citizen.invokeNative('0x55b0ecfd98596624', ped, p1);
};

/**
   * TASK_PLACE_CARRIED_ENTITY_AT_COORD
   *
   * @param {number} ped
   * @param {number} entity
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p5
   * @param {number} flags
   * @return {void}
   */
global.TaskPlaceCarriedEntityAtCoord = function (ped, entity, x, y, z, p5, flags) {
  return Citizen.invokeNative('0xc7f0b43dcdc57e3d', ped, entity, _fv(x), _fv(y), _fv(z), _fv(p5), flags);
};

/**
   * TASK_PLACE_CARRIED_ENTITY_ON_MOUNT
   *
   * @param {number} ped
   * @param {number} entity
   * @param {number} mount
   * @param {number} p3
   * @return {void}
   */
global.TaskPlaceCarriedEntityOnMount = function (ped, entity, mount, p3) {
  return Citizen.invokeNative('0x6d3d87c57b3d52c7', ped, entity, mount, _fv(p3));
};

/**
   * TASK_PLANT_BOMB
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} heading
   * @return {void}
   */
global.TaskPlantBomb = function (ped, x, y, z, heading) {
  return Citizen.invokeNative('0x965fec691d55e9bf', ped, _fv(x), _fv(y), _fv(z), _fv(heading));
};

/**
   * TASK_PLAY_ANIM
   * https://github.com/femga/rdr3_discoveries/tree/master/animations
   * flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eScriptedAnimFlags
   * ikFlags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eIkControlFlags 
   *
   * @param {number} ped
   * @param {string | number} animDict
   * @param {string | number} animName
   * @param {number} speed
   * @param {number} speedMultiplier
   * @param {number} duration
   * @param {number} flags
   * @param {number} playbackRate
   * @param {boolean} p8
   * @param {number} ikFlags
   * @param {boolean} p10
   * @param {string | number} taskFilter
   * @param {boolean} p12
   * @return {void}
   */
global.TaskPlayAnim = function (ped, animDict, animName, speed, speedMultiplier, duration, flags, playbackRate, p8, ikFlags, p10, taskFilter, p12) {
  return Citizen.invokeNative('0xea47fe3719165b94', ped, animDict, animName, _fv(speed), _fv(speedMultiplier), duration, flags, _fv(playbackRate), p8, ikFlags, p10, taskFilter, p12);
};

/**
   * TASK_PLAY_ANIM_ADVANCED
   * flags: see TASK_PLAY_ANIM
   * ikFlags: see TASK_PLAY_ANIM
   *
   * @param {number} ped
   * @param {string | number} animDict
   * @param {string | number} animName
   * @param {number} posX
   * @param {number} posY
   * @param {number} posZ
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} speed
   * @param {number} speedMultiplier
   * @param {number} duration
   * @param {number} flags
   * @param {number} p13
   * @param {number} p14
   * @param {number} p15
   * @param {number} p16
   * @return {void}
   */
global.TaskPlayAnimAdvanced = function (ped, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, speed, speedMultiplier, duration, flags, p13, p14, p15, p16) {
  return Citizen.invokeNative('0x83cdb10ea29b370b', ped, animDict, animName, _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(speed), _fv(speedMultiplier), duration, flags, _fv(p13), p14, p15, p16);
};

/**
   * TASK_PLAY_EMOTE_WITH_HASH
   * https://github.com/femga/rdr3_discoveries/blob/master/animations/kit_emotes_list.lua
   * emote: https://alloc8or.re/rdr3/doc/enums/eEmote.txt
   * 
   * enum eEmoteType
   * {
   *   EMOTE_TYPE_INVALID = -1,
   *   EMOTE_TYPE_REACT,
   *   EMOTE_TYPE_ACTION,
   *   EMOTE_TYPE_TAUNT,
   *   EMOTE_TYPE_GREET,
   *   EMOTE_TYPE_TWIRL_GUN,
   *   EMOTE_TYPE_DANCE_FLOOR
   * };
   * 
   * enum eEmotePlaybackMode
   * {
   *   EMOTE_PM_INVALID = -1,
   *   EMOTE_PM_UPPERBODY,
   *   EMOTE_PM_UPPERBODY_LOOP,
   *   EMOTE_PM_FULLBODY,
   * };
   *
   * @param {number} ped
   * @param {number} emoteType
   * @param {number} playbackMode
   * @param {number} emote
   * @param {boolean} isSecondaryTask
   * @param {boolean} canBreakOut
   * @param {boolean} disableEarlyOutAnimTag
   * @param {boolean} ignoreInvalidMainTask
   * @param {boolean} destroyProps
   * @return {void}
   */
global.TaskPlayEmoteWithHash = function (ped, emoteType, playbackMode, emote, isSecondaryTask, canBreakOut, disableEarlyOutAnimTag, ignoreInvalidMainTask, destroyProps) {
  return Citizen.invokeNative('0xb31a277c1ac7b7ff', ped, emoteType, playbackMode, _ch(emote), isSecondaryTask, canBreakOut, disableEarlyOutAnimTag, ignoreInvalidMainTask, destroyProps);
};

/**
   * TASK_PLAY_UPPER_ANIM_FACING_ENTITY
   *
   * @param {number} ped
   * @param {string | number} animDict
   * @param {string | number} animName
   * @param {number} entity
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @param {number} p8
   * @param {boolean} p9
   * @param {boolean} p10
   * @param {number} p11
   * @param {string | number} p12
   * @param {number} p13
   * @param {number} p14
   * @return {void}
   */
global.TaskPlayUpperAnimFacingEntity = function (ped, animDict, animName, entity, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
  return Citizen.invokeNative('0xad67214236ab1cfe', ped, animDict, animName, entity, p4, _fv(p5), _fv(p6), p7, _fv(p8), p9, p10, _fv(p11), p12, p13, _fv(p14));
};

/**
   * TASK_POLICE
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {boolean}
   */
global.TaskPolice = function (ped, p1) {
  return Citizen.invokeNative('0x87be56724650408e', ped, p1, _r);
};

/**
   * TASK_PUT_PED_DIRECTLY_INTO_COVER
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} timeout
   * @param {boolean} p5
   * @param {number} p6
   * @param {any} p7
   * @param {any} p8
   * @param {number} coverpoint
   * @param {boolean} p10
   * @param {boolean} p11
   * @param {any} p12
   * @return {void}
   */
global.TaskPutPedDirectlyIntoCover = function (ped, x, y, z, timeout, p5, p6, p7, p8, coverpoint, p10, p11, p12) {
  return Citizen.invokeNative('0x4172393e6be1fece', ped, _fv(x), _fv(y), _fv(z), timeout, p5, _fv(p6), p7, p8, coverpoint, p10, p11, p12);
};

/**
   * TASK_PUT_PED_DIRECTLY_INTO_GRAPPLE
   * grappleStyle: AR_GRAPPLE_STRUGGLE, AR_ALLIGATOR_LEG_GRAB_CHALLENGE_FAIL, AR_GRAPPLE_BACK_FROM_BACK, AR_GRAPPLE_BACK_DEFEND, AR_GRAPPLE_FRONT_FROM_FRONT
   *
   * @param {number} ped
   * @param {number} grappleTarget
   * @param {number} grappleStyle
   * @param {number} p3
   * @param {number} p4
   * @param {boolean} p5
   * @param {number} p6
   * @return {void}
   */
global.TaskPutPedDirectlyIntoGrapple = function (ped, grappleTarget, grappleStyle, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xa05f3f20889d7a5b', ped, grappleTarget, _ch(grappleStyle), _fv(p3), _fv(p4), p5, p6);
};

/**
   * TASK_PUT_PED_DIRECTLY_INTO_MELEE
   * meleeStyles: AR_GRAPPLE_BACK_FROM_BACK, AR_GRAPPLE_MOUNT_FACEDOWN_FROM_FRONT, AR_ALLIGATOR_LEAPKILL, AR_ALLIGATOR_WAIST_AUTOKILL_FRONT
   *
   * @param {number} ped
   * @param {number} meleeTarget
   * @param {number} meleeStyle
   * @param {number} p3
   * @param {number} animBlendRatio
   * @param {boolean} p5
   * @param {number} p6
   * @return {void}
   */
global.TaskPutPedDirectlyIntoMelee = function (ped, meleeTarget, meleeStyle, p3, animBlendRatio, p5, p6) {
  return Citizen.invokeNative('0x1c6cd14a876ffe39', ped, meleeTarget, _ch(meleeStyle), _fv(p3), _fv(animBlendRatio), p5, p6);
};

/**
   * TASK_REACT
   * Makes a ped react to an entity.
   * Params: reactingTo Entity can be 0, p8 is always 4
   *
   * @param {number} ped
   * @param {number} reactingTo
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {string | number} reactionName
   * @param {number} p6
   * @param {number} p7
   * @param {number} p8
   * @return {void}
   */
global.TaskReact = function (ped, reactingTo, x, y, z, reactionName, p6, p7, p8) {
  return Citizen.invokeNative('0xc4c32c31920e1b70', ped, reactingTo, _fv(x), _fv(y), _fv(z), reactionName, _fv(p6), _fv(p7), p8);
};

/**
   * TASK_RELOAD_WEAPON
   *
   * @param {number} ped
   * @param {boolean} unused
   * @return {void}
   */
global.TaskReloadWeapon = function (ped, unused) {
  return Citizen.invokeNative('0x62d2916f56b9cd2d', ped, unused);
};

/**
   * TASK_REVIVE_TARGET
   *
   * @param {number} ped
   * @param {number} reviver
   * @param {number} tool
   * @return {void}
   */
global.TaskReviveTarget = function (ped, reviver, tool) {
  return Citizen.invokeNative('0x356088527d9ebaad', ped, reviver, _ch(tool));
};

/**
   * TASK_RIDE_TRAIN
   *
   * @param {number} ped
   * @param {number} train
   * @param {number} scenarioPoint
   * @param {number} scenarioHash
   * @return {void}
   */
global.TaskRideTrain = function (ped, train, scenarioPoint, scenarioHash) {
  return Citizen.invokeNative('0x37fb1c870e2ec2c6', ped, train, scenarioPoint, _ch(scenarioHash));
};

/**
   * TASK_ROB_PED
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.TaskRobPed = function (ped, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x7bb967f85d8ccbdb', ped, p1, p2, p3, p4);
};

/**
   * TASK_SCRIPTED_ANIMATION
   *
   * @param {number} ped
   * @param {DataView} args
   * @return {void}
   */
global.TaskScriptedAnimation = function (ped, args) {
  return Citizen.invokeNative('0x126ef75f1e17abe5', ped, args);
};

/**
   * TASK_SEEK_CLEAR_LOS_TO_ENTITY
   *
   * @param {number} ped
   * @param {number} entity
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @return {void}
   */
global.TaskSeekClearLosToEntity = function (ped, entity, p2, p3, p4) {
  return Citizen.invokeNative('0x8d7f2a63688c20a4', ped, entity, _fv(p2), _fv(p3), _fv(p4));
};

/**
   * TASK_SEEK_COVER_FROM_PED
   *
   * @param {number} ped
   * @param {number} fromPed
   * @param {number} duration
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.TaskSeekCoverFromPed = function (ped, fromPed, duration, p3, p4, p5) {
  return Citizen.invokeNative('0x84d32b3bec531324', ped, fromPed, duration, p3, p4, p5);
};

/**
   * TASK_SEEK_COVER_FROM_POS
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} duration
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.TaskSeekCoverFromPos = function (ped, x, y, z, duration, p5, p6, p7) {
  return Citizen.invokeNative('0x75ac2b60386d89f2', ped, _fv(x), _fv(y), _fv(z), duration, p5, p6, p7);
};

/**
   * TASK_SEEK_COVER_TO_COORDS
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @return {void}
   */
global.TaskSeekCoverToCoords = function (ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
  return Citizen.invokeNative('0x39246a6958ef072c', ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
};

/**
   * TASK_SEEK_COVER_TO_COVER_POINT
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @return {void}
   */
global.TaskSeekCoverToCoverPoint = function (ped, p1, p2, p3, p4, p5, p6, p7, p8) {
  return Citizen.invokeNative('0xd43d95c7a869447f', ped, p1, p2, p3, p4, p5, p6, p7, p8);
};

/**
   * TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.TaskSetBlockingOfNonTemporaryEvents = function (ped, toggle) {
  return Citizen.invokeNative('0x90d2156198831d69', ped, toggle);
};

/**
   * TASK_SET_CROUCH_MOVEMENT
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {any} p2
   * @param {boolean} p3
   * @return {void}
   */
global.TaskSetCrouchMovement = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0x17293c633c8ac019', ped, p1, p2, p3);
};

/**
   * TASK_SET_SPHERE_DEFENSIVE_AREA
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @return {void}
   */
global.TaskSetSphereDefensiveArea = function (ped, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x933c06518b52a9a4', ped, _fv(p1), _fv(p2), _fv(p3), _fv(p4));
};

/**
   * TASK_SET_STEALTH_MOVEMENT
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {any} p2
   * @param {boolean} p3
   * @return {void}
   */
global.TaskSetStealthMovement = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0x4c3fa937b44a90fa', ped, p1, p2, p3);
};

/**
   * TASK_SHOCKING_EVENT_REACT
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.TaskShockingEventReact = function (ped, p1, p2) {
  return Citizen.invokeNative('0x452419cbd838065b', ped, p1, p2);
};

/**
   * TASK_SHOOT_AT_COORD
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} duration
   * @param {number} firingPattern
   * @param {any} p6
   * @return {void}
   */
global.TaskShootAtCoord = function (ped, x, y, z, duration, firingPattern, p6) {
  return Citizen.invokeNative('0x46a6cc01e0826106', ped, _fv(x), _fv(y), _fv(z), duration, _ch(firingPattern), p6);
};

/**
   * TASK_SHOOT_AT_ENTITY
   *
   * @param {number} entity
   * @param {number} targetEntity
   * @param {number} duration
   * @param {number} firingPattern
   * @param {boolean} affectCockedState
   * @return {void}
   */
global.TaskShootAtEntity = function (entity, targetEntity, duration, firingPattern, affectCockedState) {
  return Citizen.invokeNative('0x08da95e8298ae772', entity, targetEntity, duration, _ch(firingPattern), affectCockedState);
};

/**
   * TASK_SHOOT_WITH_WEAPON
   *
   * @param {number} ped
   * @param {DataView} args
   * @return {void}
   */
global.TaskShootWithWeapon = function (ped, args) {
  return Citizen.invokeNative('0x08aa95e8298ae772', ped, args);
};

/**
   * TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT
   * Makes the specified ped shuffle to the next vehicle seat.
   * The ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.
   *
   * @param {number} ped
   * @param {number} vehicle
   * @return {void}
   */
global.TaskShuffleToNextVehicleSeat = function (ped, vehicle) {
  return Citizen.invokeNative('0x7aa80209bda643eb', ped, vehicle);
};

/**
   * TASK_SMART_FLEE_COORD
   * Makes the specified ped flee the specified distance from the specified position.
   * fleeType: see TASK_FLEE_COORD
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} distance
   * @param {number} time
   * @param {number} fleeType
   * @param {number} fleeSpeed
   * @return {void}
   */
global.TaskSmartFleeCoord = function (ped, x, y, z, distance, time, fleeType, fleeSpeed) {
  return Citizen.invokeNative('0x94587f17e9c365d5', ped, _fv(x), _fv(y), _fv(z), _fv(distance), time, fleeType, _fv(fleeSpeed));
};

/**
   * TASK_SMART_FLEE_PED
   * Makes a ped run away from another ped (fleeFromTarget)
   * 
   * fleeDistance = ped will flee this distance
   * fleeTime = ped will flee for this amount of time, set to "-1" to flee forever
   * fleeType = see TASK_FLEE_COORD, can be 0, R* Scripts: fm_mission/race_controller: 66048; fme_escaped_convicts: 2260992, 2523136, 2359296; la_alligator/fox: 2097152; net_fetch: 17301536; net_stable_mount: 540928
   * fleeSpeed = mostly 3f, rarely 1f in R* Scripts
   *
   * @param {number} ped
   * @param {number} fleeFromTarget
   * @param {number} fleeDistance
   * @param {number} fleeTime
   * @param {number} fleeType
   * @param {number} fleeSpeed
   * @param {number} targetPed
   * @return {void}
   */
global.TaskSmartFleePed = function (ped, fleeFromTarget, fleeDistance, fleeTime, fleeType, fleeSpeed, targetPed) {
  return Citizen.invokeNative('0x22b0d0e37ccb840d', ped, fleeFromTarget, _fv(fleeDistance), fleeTime, fleeType, _fv(fleeSpeed), targetPed);
};

/**
   * TASK_STAND_GUARD
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} heading
   * @param {string | number} scenarioName
   * @return {void}
   */
global.TaskStandGuard = function (ped, x, y, z, heading, scenarioName) {
  return Citizen.invokeNative('0xae032f8bba959e90', ped, _fv(x), _fv(y), _fv(z), _fv(heading), scenarioName);
};

/**
   * TASK_STAND_STILL
   * Makes the specified ped stand still for (time) milliseconds.
   *
   * @param {number} ped
   * @param {number} time
   * @return {void}
   */
global.TaskStandStill = function (ped, time) {
  return Citizen.invokeNative('0x919be13eed931959', ped, time);
};

/**
   * TASK_START_SCENARIO_AT_POSITION
   *
   * @param {number} ped
   * @param {number} scenarioHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} heading
   * @param {number} duration
   * @param {boolean} sittingScenario
   * @param {boolean} teleport
   * @param {string | number} p9
   * @param {number} p10
   * @param {boolean} p11
   * @return {void}
   */
global.TaskStartScenarioAtPosition = function (ped, scenarioHash, x, y, z, heading, duration, sittingScenario, teleport, p9, p10, p11) {
  return Citizen.invokeNative('0x4d1f61fc34af3cd1', ped, _ch(scenarioHash), _fv(x), _fv(y), _fv(z), _fv(heading), duration, sittingScenario, teleport, p9, _fv(p10), p11);
};

/**
   * TASK_START_SCENARIO_IN_PLACE_HASH
   * https://github.com/femga/rdr3_discoveries/blob/master/animations/scenarios
   * Params: duration in milliseconds
   * 
   * conditionalHash (optionally):
   * 0 = play random conditional anim.
   * Every conditional anim has requirements to play it.
   * If requirements are not met, ped plays random allowed conditional anim or can be stuck.
   * For example, this scenario type has possible conditional anim WORLD_HUMAN_LEAN_BACK_WALL_SMOKING_MALE_D, but it can not be played by player, because condition is set to NOT be CAIConditionIsPlayer (check file amb_rest.meta and amb_rest_CA.meta with OPENIV to clarify requirements).
   *
   * @param {number} ped
   * @param {number} scenarioHash
   * @param {number} duration
   * @param {boolean} playEnterAnim
   * @param {number} conditionalHash
   * @param {number} heading
   * @param {boolean} p6
   * @return {void}
   */
global.TaskStartScenarioInPlaceHash = function (ped, scenarioHash, duration, playEnterAnim, conditionalHash, heading, p6) {
  return Citizen.invokeNative('0x524b54361229154f', ped, _ch(scenarioHash), duration, playEnterAnim, _ch(conditionalHash), _fv(heading), p6);
};

/**
   * TASK_STAY_IN_COVER
   * Makes the ped run to take cover
   *
   * @param {number} ped
   * @return {void}
   */
global.TaskStayInCover = function (ped) {
  return Citizen.invokeNative('0xe5da8615a6180789', ped);
};

/**
   * TASK_STOP_LEADING_HORSE
   *
   * @param {number} ped
   * @return {void}
   */
global.TaskStopLeadingHorse = function (ped) {
  return Citizen.invokeNative('0xed27560703f37258', ped);
};

/**
   * TASK_SWAP_FISHING_BAIT
   * Baits: see 0x9B0C7FA063E67629
   *
   * @param {number} ped
   * @param {string | number} bait
   * @param {boolean} withoutBuoy
   * @return {void}
   */
global.TaskSwapFishingBait = function (ped, bait, withoutBuoy) {
  return Citizen.invokeNative('0x2c28ac30a72722da', ped, bait, withoutBuoy);
};

/**
   * TASK_SWAP_WEAPON
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.TaskSwapWeapon = function (ped, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xa21c51255b205245', ped, p1, p2, p3, p4);
};

/**
   * TASK_THROW_PROJECTILE
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.TaskThrowProjectile = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0x7285951dbf6b5a51', ped, p1, p2, p3);
};

/**
   * TASK_TURN_PED_TO_FACE_COORD
   * duration in milliseconds
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} duration
   * @return {void}
   */
global.TaskTurnPedToFaceCoord = function (ped, x, y, z, duration) {
  return Citizen.invokeNative('0x1dda930a0ac38571', ped, _fv(x), _fv(y), _fv(z), duration);
};

/**
   * TASK_TURN_PED_TO_FACE_ENTITY
   * duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
   *
   * @param {number} ped
   * @param {number} targetEntity
   * @param {number} duration
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @return {void}
   */
global.TaskTurnPedToFaceEntity = function (ped, targetEntity, duration, p3, p4, p5) {
  return Citizen.invokeNative('0x5ad23d40115353ac', ped, targetEntity, duration, _fv(p3), _fv(p4), _fv(p5));
};

/**
   * TASK_TURN_TO_FACE_CLOSEST_PED
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @return {void}
   */
global.TaskTurnToFaceClosestPed = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0x84179419dbdd36f2', ped, _fv(p1), _fv(p2), p3);
};

/**
   * TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} distance
   * @param {boolean} p5
   * @param {boolean} p6
   * @param {boolean} p7
   * @param {boolean} p8
   * @return {void}
   */
global.TaskUseNearestScenarioChainToCoord = function (ped, x, y, z, distance, p5, p6, p7, p8) {
  return Citizen.invokeNative('0x9fda1b3d7e7028b3', ped, _fv(x), _fv(y), _fv(z), _fv(distance), p5, p6, p7, p8);
};

/**
   * TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} distance
   * @param {boolean} p5
   * @param {boolean} p6
   * @param {boolean} p7
   * @param {boolean} p8
   * @return {void}
   */
global.TaskUseNearestScenarioChainToCoordWarp = function (ped, x, y, z, distance, p5, p6, p7, p8) {
  return Citizen.invokeNative('0x97a28e63f0ba5631', ped, _fv(x), _fv(y), _fv(z), _fv(distance), p5, p6, p7, p8);
};

/**
   * TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} distance
   * @param {number} duration
   * @param {boolean} p6
   * @param {boolean} p7
   * @param {boolean} p8
   * @param {boolean} p9
   * @return {void}
   */
global.TaskUseNearestScenarioToCoordWarp = function (ped, x, y, z, distance, duration, p6, p7, p8, p9) {
  return Citizen.invokeNative('0x58e2e0f23f6b76c3', ped, _fv(x), _fv(y), _fv(z), _fv(distance), duration, p6, p7, p8, p9);
};

/**
   * TASK_USE_NEAREST_TRAIN_SCENARIO_TO_COORD_WARP
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} distance
   * @return {void}
   */
global.TaskUseNearestTrainScenarioToCoordWarp = function (ped, x, y, z, distance) {
  return Citizen.invokeNative('0x3774b03456dd6106', ped, _fv(x), _fv(y), _fv(z), _fv(distance));
};

/**
   * TASK_USE_RANDOM_SCENARIO_IN_GROUP
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.TaskUseRandomScenarioInGroup = function (ped, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x14747f4a5971de4e', ped, p1, p2, p3, p4);
};

/**
   * TASK_USE_SCENARIO_POINT
   *
   * @param {number} ped
   * @param {number} scenario
   * @param {string | number} conditionalAnim
   * @param {number} p3
   * @param {boolean} p4
   * @param {boolean} p5
   * @param {number} p6
   * @param {boolean} p7
   * @param {number} p8
   * @param {boolean} p9
   * @return {void}
   */
global.TaskUseScenarioPoint = function (ped, scenario, conditionalAnim, p3, p4, p5, p6, p7, p8, p9) {
  return Citizen.invokeNative('0xccdae6324b6a821c', ped, scenario, _ts(conditionalAnim), p3, p4, p5, _ch(p6), p7, _fv(p8), p9);
};

/**
   * TASK_VEHICLE_AIM_AT_COORD
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.TaskVehicleAimAtCoord = function (ped, x, y, z) {
  return Citizen.invokeNative('0x447c1e9ef844bc0f', ped, _fv(x), _fv(y), _fv(z));
};

/**
   * TASK_VEHICLE_AIM_AT_PED
   *
   * @param {number} ped
   * @param {number} target
   * @return {void}
   */
global.TaskVehicleAimAtPed = function (ped, target) {
  return Citizen.invokeNative('0xe41885592b08b097', ped, target);
};

/**
   * TASK_VEHICLE_DRIVE_STRAIGHT_TO_POINT
   * Old name: _TASK_VEHICLE_DRIVE_TO_POINT
   * flag: 524419 and 0 in shop_horse_shop R* Script
   *
   * @param {number} driver
   * @param {number} vehicle
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p5
   * @param {number} p6
   * @param {number} flag
   * @return {void}
   */
global.TaskVehicleDriveStraightToPoint = function (driver, vehicle, x, y, z, p5, p6, flag) {
  return Citizen.invokeNative('0x089ff2fb965f0a29', driver, vehicle, _fv(x), _fv(y), _fv(z), _fv(p5), _fv(p6), flag);
};

/**
   * TASK_VEHICLE_DRIVE_TO_COORD
   * stopRange: how close vehicle will get to destination before stopping, default 4.0
   * straightLineDist: distance at which AI switches to heading for target directly instead of following nodes, default -1
   *
   * @param {number} ped
   * @param {number} vehicle
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} speed
   * @param {any} style
   * @param {number} vehicleModel
   * @param {number} drivingMode
   * @param {number} stopRange
   * @param {number} straightLineDist
   * @return {void}
   */
global.TaskVehicleDriveToCoord = function (ped, vehicle, x, y, z, speed, style, vehicleModel, drivingMode, stopRange, straightLineDist) {
  return Citizen.invokeNative('0xe2a2aa2f659d77a7', ped, vehicle, _fv(x), _fv(y), _fv(z), _fv(speed), style, _ch(vehicleModel), drivingMode, _fv(stopRange), _fv(straightLineDist));
};

/**
   * TASK_VEHICLE_DRIVE_TO_DESTINATION
   * flags: 67108864, 2097152, 524564, 524675 (eDrivingFlags)
   * p7 = 6 or 3
   * p8 = x coordinate
   * p9 - 8.f
   * p10 = false
   *
   * @param {number} driver
   * @param {number} vehicle
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} speed
   * @param {number} drivingFlags
   * @param {number} p7
   * @param {number} stoppingRange1
   * @param {number} stoppingRange2
   * @param {boolean} p10
   * @return {void}
   */
global.TaskVehicleDriveToDestination = function (driver, vehicle, x, y, z, speed, drivingFlags, p7, stoppingRange1, stoppingRange2, p10) {
  return Citizen.invokeNative('0x7f241a0d14354583', driver, vehicle, _fv(x), _fv(y), _fv(z), _fv(speed), drivingFlags, p7, _fv(stoppingRange1), _fv(stoppingRange2), p10);
};

/**
   * TASK_VEHICLE_DRIVE_WANDER
   *
   * @param {number} ped
   * @param {number} vehicle
   * @param {number} speed
   * @param {number} drivingStyle
   * @return {void}
   */
global.TaskVehicleDriveWander = function (ped, vehicle, speed, drivingStyle) {
  return Citizen.invokeNative('0x480142959d337d00', ped, vehicle, _fv(speed), drivingStyle);
};

/**
   * TASK_VEHICLE_ESCORT
   *
   * @param {number} ped
   * @param {number} vehicle
   * @param {number} targetVehicle
   * @param {number} mode
   * @param {number} speed
   * @param {number} drivingStyle
   * @param {number} minDistance
   * @param {number} p7
   * @param {number} noRoadsDistance
   * @return {void}
   */
global.TaskVehicleEscort = function (ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance) {
  return Citizen.invokeNative('0x0fa6e4b75f302400', ped, vehicle, targetVehicle, mode, _fv(speed), drivingStyle, _fv(minDistance), p7, _fv(noRoadsDistance));
};

/**
   * TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING
   *
   * @param {number} ped
   * @param {number} vehicle
   * @param {string | number} waypointRecording
   * @param {number} drivingMode
   * @param {any} p4
   * @param {number} eWaypoint
   * @param {number} flag
   * @param {number} p7
   * @param {boolean} p8
   * @param {number} stoppingDist
   * @param {any} p10
   * @return {void}
   */
global.TaskVehicleFollowWaypointRecording = function (ped, vehicle, waypointRecording, drivingMode, p4, eWaypoint, flag, p7, p8, stoppingDist, p10) {
  return Citizen.invokeNative('0x3123faa6db1cf7ed', ped, vehicle, waypointRecording, drivingMode, p4, eWaypoint, flag, _fv(p7), p8, _fv(stoppingDist), p10);
};

/**
   * TASK_VEHICLE_GOTO_NAVMESH
   *
   * @param {number} ped
   * @param {number} vehicle
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} speed
   * @param {number} behaviorFlag
   * @param {number} stoppingRange
   * @return {void}
   */
global.TaskVehicleGotoNavmesh = function (ped, vehicle, x, y, z, speed, behaviorFlag, stoppingRange) {
  return Citizen.invokeNative('0x195aeeb13cefe2ee', ped, vehicle, _fv(x), _fv(y), _fv(z), _fv(speed), behaviorFlag, _fv(stoppingRange));
};

/**
   * TASK_VEHICLE_MISSION
   *
   * @param {number} driver
   * @param {number} vehicle
   * @param {number} vehicleTarget
   * @param {number} missionType
   * @param {number} p4
   * @param {any} p5
   * @param {number} p6
   * @param {number} p7
   * @param {boolean} driveAgainstTraffic
   * @return {void}
   */
global.TaskVehicleMission = function (driver, vehicle, vehicleTarget, missionType, p4, p5, p6, p7, driveAgainstTraffic) {
  return Citizen.invokeNative('0x659427e0ef36bcde', driver, vehicle, vehicleTarget, missionType, _fv(p4), p5, _fv(p6), _fv(p7), driveAgainstTraffic);
};

/**
   * TASK_VEHICLE_MISSION_PED_TARGET
   * See TASK_VEHICLE_MISSION
   *
   * @param {number} ped
   * @param {number} vehicle
   * @param {number} pedTarget
   * @param {number} mode
   * @param {number} maxSpeed
   * @param {number} drivingStyle
   * @param {number} minDistance
   * @param {number} p7
   * @param {boolean} driveAgainstTraffic
   * @return {void}
   */
global.TaskVehicleMissionPedTarget = function (ped, vehicle, pedTarget, mode, maxSpeed, drivingStyle, minDistance, p7, driveAgainstTraffic) {
  return Citizen.invokeNative('0x9454528df15d657a', ped, vehicle, pedTarget, mode, _fv(maxSpeed), drivingStyle, _fv(minDistance), _fv(p7), driveAgainstTraffic);
};

/**
   * TASK_VEHICLE_SHOOT_AT_COORD
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p4
   * @return {void}
   */
global.TaskVehicleShootAtCoord = function (ped, x, y, z, p4) {
  return Citizen.invokeNative('0x5190796ed39c9b6d', ped, _fv(x), _fv(y), _fv(z), _fv(p4));
};

/**
   * TASK_VEHICLE_SHOOT_AT_PED
   *
   * @param {number} ped
   * @param {number} target
   * @param {number} p2
   * @return {void}
   */
global.TaskVehicleShootAtPed = function (ped, target, p2) {
  return Citizen.invokeNative('0x10ab107b887214d8', ped, target, _fv(p2));
};

/**
   * TASK_VEHICLE_TEMP_ACTION
   * Documentation from GTA V, might be the same in RDR:
   * 
   * '1 - brake
   * '3 - brake + reverse
   * '4 - turn left 90 + braking
   * '5 - turn right 90 + braking
   * '6 - brake strong (handbrake?) until time ends
   * '7 - turn left + accelerate
   * '7 - turn right + accelerate
   * '9 - weak acceleration
   * '10 - turn left + restore wheel pos to center in the end
   * '11 - turn right + restore wheel pos to center in the end
   * '13 - turn left + go reverse
   * '14 - turn left + go reverse
   * '16 - crash the game after like 2 seconds :)
   * '17 - keep actual state, game crashed after few tries
   * '18 - game crash
   * '19 - strong brake + turn left/right
   * '20 - weak brake + turn left then turn right
   * '21 - weak brake + turn right then turn left
   * '22 - brake + reverse
   * '23 - accelerate fast
   * '24 - brake
   * '25 - brake turning left then when almost stopping it turns left more
   * '26 - brake turning right then when almost stopping it turns right more
   * '27 - brake until car stop or until time ends
   * '28 - brake + strong reverse acceleration
   * '30 - performs a burnout (brake until stop + brake and accelerate)
   * '31 - accelerate + handbrake
   * '32 - accelerate very strong
   * 
   * Seems to be this:
   * Works on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), "time" will work, otherwise the task will be performed forever until tasked with something else
   *
   * @param {number} driver
   * @param {number} vehicle
   * @param {number} action
   * @param {number} time
   * @return {void}
   */
global.TaskVehicleTempAction = function (driver, vehicle, action, time) {
  return Citizen.invokeNative('0xc429dceeb339e129', driver, vehicle, action, time);
};

/**
   * TASK_WALK_AWAY
   *
   * @param {number} ped
   * @param {number} entity
   * @return {void}
   */
global.TaskWalkAway = function (ped, entity) {
  return Citizen.invokeNative('0x04acfac71e6858f9', ped, entity);
};

/**
   * TASK_WANDER_AND_CONVERSE_WITH_PED
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.TaskWanderAndConverseWithPed = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0x8ac76d1408731732', ped, p1, p2, p3);
};

/**
   * TASK_WANDER_IN_AREA
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @return {void}
   */
global.TaskWanderInArea = function (ped, x, y, z, radius, p5, p6, p7) {
  return Citizen.invokeNative('0xe054346ca3a0f315', ped, _fv(x), _fv(y), _fv(z), _fv(radius), _fv(p5), _fv(p6), p7);
};

/**
   * TASK_WANDER_IN_VOLUME
   *
   * @param {number} ped
   * @param {number} volume
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @return {void}
   */
global.TaskWanderInVolume = function (ped, volume, p2, p3, p4) {
  return Citizen.invokeNative('0x9fda168777b28424', ped, volume, _fv(p2), _fv(p3), p4);
};

/**
   * TASK_WANDER_STANDARD
   * Makes ped walk around the area the params p1 p2 seems to not affect anything but p2 is either 0 or 1 and p1 is mostly 1.0 or ped heading
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.TaskWanderStandard = function (ped, p1, p2) {
  return Citizen.invokeNative('0xbb9ce077274f6a1b', ped, _fv(p1), p2);
};

/**
   * TASK_WANDER_SWIM
   *
   * @param {number} ped
   * @param {any} p1
   * @return {void}
   */
global.TaskWanderSwim = function (ped, p1) {
  return Citizen.invokeNative('0x527ea3db8bc7f03b', ped, p1);
};

/**
   * TASK_WARP_PED_INTO_VEHICLE
   *
   * @param {number} ped
   * @param {number} vehicle
   * @param {number} seat
   * @return {void}
   */
global.TaskWarpPedIntoVehicle = function (ped, vehicle, seat) {
  return Citizen.invokeNative('0x9a7d091411c5f684', ped, vehicle, seat);
};

/**
   * TASK_WEAPON
   *
   * @param {number} ped
   * @return {void}
   */
global.TaskWeapon = function (ped) {
  return Citizen.invokeNative('0x7157b82d60e4bc46', ped);
};

/**
   * TASK_WHISTLE_ANIM
   * https://github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS/aud_ped_whistle_types.lua
   * p2: UNSPECIFIED
   *
   * @param {number} ped
   * @param {number} audPedWhistleType
   * @param {number} p2
   * @return {void}
   */
global.TaskWhistleAnim = function (ped, audPedWhistleType, p2) {
  return Citizen.invokeNative('0xd6401a1b2f63bed6', ped, _ch(audPedWhistleType), _ch(p2));
};

/**
   * UNCUFF_PED
   *
   * @param {number} ped
   * @return {void}
   */
global.UncuffPed = function (ped) {
  return Citizen.invokeNative('0x67406f2c8f87fc4f', ped);
};

/**
   * UNHOGTIE_PED
   * getupSetHash: see nm_blend_out_sets.meta
   *
   * @param {number} ped
   * @param {number} flags
   * @param {number} getupSetHash
   * @param {string | number} p3
   * @param {string | number} p4
   * @param {number} p5
   * @return {void}
   */
global.UnhogtiePed = function (ped, flags, getupSetHash, p3, p4, p5) {
  return Citizen.invokeNative('0x79559bad83ccd038', ped, flags, _ch(getupSetHash), p3, p4, _fv(p5));
};

/**
   * UPDATE_TASK_HANDS_UP_DURATION
   *
   * @param {number} ped
   * @param {number} duration
   * @return {void}
   */
global.UpdateTaskHandsUpDuration = function (ped, duration) {
  return Citizen.invokeNative('0xa98fcafd7893c834', ped, duration);
};

/**
   * USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE
   *
   * @param {string | number} waypointRecording
   * @param {boolean} p1
   * @param {number} p2
   * @param {number} p3
   * @param {boolean} p4
   * @return {void}
   */
global.UseWaypointRecordingAsAssistedMovementRoute = function (waypointRecording, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x5a353b8e6b1095b5', waypointRecording, p1, _fv(p2), _fv(p3), p4);
};

/**
   * VEHICLE_WAYPOINT_PLAYBACK_GET_IS_PAUSED
   *
   * @param {any} p0
   * @return {any}
   */
global.VehicleWaypointPlaybackGetIsPaused = function (p0) {
  return Citizen.invokeNative('0x4d6d30ab18b0b089', p0, _r);
};

/**
   * VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED
   *
   * @param {number} vehicle
   * @param {number} speed
   * @return {void}
   */
global.VehicleWaypointPlaybackOverrideSpeed = function (vehicle, speed) {
  return Citizen.invokeNative('0x121f0593e0a431d7', vehicle, _fv(speed));
};

/**
   * VEHICLE_WAYPOINT_PLAYBACK_PAUSE
   *
   * @param {number} vehicle
   * @return {void}
   */
global.VehicleWaypointPlaybackPause = function (vehicle) {
  return Citizen.invokeNative('0x8a4e6ac373666bc5', vehicle);
};

/**
   * VEHICLE_WAYPOINT_PLAYBACK_RESUME
   *
   * @param {number} vehicle
   * @return {void}
   */
global.VehicleWaypointPlaybackResume = function (vehicle) {
  return Citizen.invokeNative('0xdc04fcaa7839d492', vehicle);
};

/**
   * VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED
   *
   * @param {number} vehicle
   * @return {void}
   */
global.VehicleWaypointPlaybackUseDefaultSpeed = function (vehicle) {
  return Citizen.invokeNative('0x5ceb25a7d2848963', vehicle);
};

/**
   * WAYPOINT_PLAYBACK_GET_IS_AIMING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.WaypointPlaybackGetIsAiming = function (ped) {
  return Citizen.invokeNative('0xd73a5d1f0325c71c', ped, _r);
};

/**
   * WAYPOINT_PLAYBACK_GET_IS_PAUSED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.WaypointPlaybackGetIsPaused = function (ped) {
  return Citizen.invokeNative('0x701375a7d43f01cb', ped, _r);
};

/**
   * WAYPOINT_PLAYBACK_GET_IS_SHOOTING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.WaypointPlaybackGetIsShooting = function (ped) {
  return Citizen.invokeNative('0xa5b94df8af058f46', ped, _r);
};

/**
   * WAYPOINT_PLAYBACK_OVERRIDE_SPEED
   *
   * @param {number} ped
   * @param {number} speed
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.WaypointPlaybackOverrideSpeed = function (ped, speed, p2, p3, p4) {
  return Citizen.invokeNative('0x7d7d2b47fa788e85', ped, _fv(speed), p2, p3, p4);
};

/**
   * WAYPOINT_PLAYBACK_PAUSE
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.WaypointPlaybackPause = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0x0f342546aa06fed5', ped, p1, p2, p3);
};

/**
   * WAYPOINT_PLAYBACK_RESUME
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {number} p2
   * @param {number} p3
   * @return {void}
   */
global.WaypointPlaybackResume = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0x244f70c84c547d2d', ped, p1, p2, p3);
};

/**
   * WAYPOINT_PLAYBACK_START_AIMING_AT_COORD
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.WaypointPlaybackStartAimingAtCoord = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x8968400d900ed8b3', p0, p1, p2, p3, p4, p5);
};

/**
   * WAYPOINT_PLAYBACK_START_AIMING_AT_ENTITY
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.WaypointPlaybackStartAimingAtEntity = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x4f158205e0c74385', p0, p1, p2, p3);
};

/**
   * WAYPOINT_PLAYBACK_START_AIMING_AT_PED
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.WaypointPlaybackStartAimingAtPed = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x20e330937c399d29', p0, p1, p2, p3);
};

/**
   * WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.WaypointPlaybackStartShootingAtCoord = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0x057a25cfcc9db671', p0, p1, p2, p3, p4, p5, p6);
};

/**
   * WAYPOINT_PLAYBACK_START_SHOOTING_AT_ENTITY
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.WaypointPlaybackStartShootingAtEntity = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x4af458f71c1196d2', p0, p1, p2, p3, p4);
};

/**
   * WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.WaypointPlaybackStartShootingAtPed = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xe70ba7b90f8390dc', p0, p1, p2, p3, p4);
};

/**
   * WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING
   *
   * @param {any} p0
   * @return {void}
   */
global.WaypointPlaybackStopAimingOrShooting = function (p0) {
  return Citizen.invokeNative('0x47efa040ebb8e2ea', p0);
};

/**
   * WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED
   *
   * @param {number} ped
   * @return {void}
   */
global.WaypointPlaybackUseDefaultSpeed = function (ped) {
  return Citizen.invokeNative('0x6599d834b12d0800', ped);
};

/**
   * WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT
   *
   * @param {string | number} waypointRecording
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} point
   * @return {boolean}
   */
global.WaypointRecordingGetClosestWaypoint = function (waypointRecording, x, y, z, point) {
  return Citizen.invokeNative('0xb629a298081f876f', waypointRecording, _fv(x), _fv(y), _fv(z), point, _r);
};

/**
   * WAYPOINT_RECORDING_GET_COORD
   *
   * @param {string | number} waypointRecording
   * @param {number} point
   * @return {[boolean, Vector3]}
   */
global.WaypointRecordingGetCoord = function (waypointRecording, point) {
  return Citizen.invokeNative('0x2fb897405c90b361', waypointRecording, point, _v, _r);
};

/**
   * WAYPOINT_RECORDING_GET_NUM_POINTS
   *
   * @param {string | number} waypointRecording
   * @param {number} points
   * @return {boolean}
   */
global.WaypointRecordingGetNumPoints = function (waypointRecording, points) {
  return Citizen.invokeNative('0x5343532c01a07234', waypointRecording, points, _r);
};

/**
   * WAYPOINT_RECORDING_GET_SPEED_AT_POINT
   *
   * @param {string | number} waypointRecording
   * @param {number} point
   * @return {number}
   */
global.WaypointRecordingGetSpeedAtPoint = function (waypointRecording, point) {
  return Citizen.invokeNative('0x005622aebc33aca9', waypointRecording, point, _r, _rf);
};

/**
   * _0x0000A8ACDC2E1B6A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x0000A8ACDC2E1B6A = function (p0, p1) {
  return Citizen.invokeNative('0x0000a8acdc2e1b6a', p0, p1);
};

/**
   * _0x00FFE0F85253C572
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x00FFE0F85253C572 = function (p0) {
  return Citizen.invokeNative('0x00ffe0f85253c572', p0, _r);
};

/**
   * _0x01AF8A3729231A43
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x01AF8A3729231A43 = function (p0) {
  return Citizen.invokeNative('0x01af8a3729231a43', p0, _r);
};

/**
   * _0x0365000D8BF86531
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x0365000D8BF86531 = function (p0) {
  return Citizen.invokeNative('0x0365000d8bf86531', p0, _r);
};

/**
   * _0x03D741CB4052E26C
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x03D741CB4052E26C = function (p0) {
  return Citizen.invokeNative('0x03d741cb4052e26c', p0, _r);
};

/**
   * _SET_PED_PATH_MAY_USE_SLIDING_SURFACES
   *
   * @param {number} ped
   * @param {boolean} useSlidingSurfaces
   * @return {void}
   */
global.SetPedPathMayUseSlidingSurfaces = function (ped, useSlidingSurfaces) {
  return Citizen.invokeNative('0x06ecf3925bc2abae', ped, useSlidingSurfaces);
};

/**
   * _0x098036CAB8373D36
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x098036CAB8373D36 = function (p0) {
  return Citizen.invokeNative('0x098036cab8373d36', p0);
};

/**
   * _0x098CAA6DBE7D8D82
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x098CAA6DBE7D8D82 = function (p0, p1) {
  return Citizen.invokeNative('0x098caa6dbe7d8d82', p0, p1);
};

/**
   * _0x0A98A362C5A19A43
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x0A98A362C5A19A43 = function (p0) {
  return Citizen.invokeNative('0x0a98a362c5a19a43', p0, _r);
};

/**
   * _0x0D322AEF8878B8FE
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x0D322AEF8878B8FE = function (p0, p1) {
  return Citizen.invokeNative('0x0d322aef8878b8fe', p0, p1);
};

/**
   * _0x0E184495B27BB57D
   *
  
   * @return {void}
   */
global.N_0x0E184495B27BB57D = function () {
  return Citizen.invokeNative('0x0e184495b27bb57d');
};

/**
   * _0x0F4F6C4CE471259D
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x0F4F6C4CE471259D = function (p0, p1) {
  return Citizen.invokeNative('0x0f4f6c4ce471259d', p0, p1);
};

/**
   * _0x0FE797DD9F70DFA6
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x0FE797DD9F70DFA6 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x0fe797dd9f70dfa6', p0, p1, p2, p3);
};

/**
   * _0x10ADFDF07B7DFFBA
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0x10ADFDF07B7DFFBA = function (p0, p1, p2) {
  return Citizen.invokeNative('0x10adfdf07b7dffba', p0, p1, p2, _r);
};

/**
   * _0x10C44F633E2D6D9E
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x10C44F633E2D6D9E = function (p0) {
  return Citizen.invokeNative('0x10c44f633e2d6d9e', p0);
};

/**
   * _0x11C7CE1AE38911B5
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x11C7CE1AE38911B5 = function (p0) {
  return Citizen.invokeNative('0x11c7ce1ae38911b5', p0, _r);
};

/**
   * _SET_PED_PATH_PREFER_TO_AVOID_FOLIAGE
   *
   * @param {number} ped
   * @param {boolean} preferAvoidFoliage
   * @param {number} p2
   * @return {void}
   */
global.SetPedPathPreferToAvoidFoliage = function (ped, preferAvoidFoliage, p2) {
  return Citizen.invokeNative('0x12990818c1d35886', ped, preferAvoidFoliage, _fv(p2));
};

/**
   * _0x141BC64C8D7C5529
   *
   * @param {number} vehicle
   * @return {void}
   */
global.N_0x141BC64C8D7C5529 = function (vehicle) {
  return Citizen.invokeNative('0x141bc64c8d7c5529', vehicle);
};

/**
   * _0x152664AA3188B193
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {any}
   */
global.N_0x152664AA3188B193 = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x152664aa3188b193', p0, p1, p2, p3, p4, p5, _r);
};

/**
   * _0x1632EB9386CDBE64
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x1632EB9386CDBE64 = function (p0, p1) {
  return Citizen.invokeNative('0x1632eb9386cdbe64', p0, p1);
};

/**
   * _0x19BC99C678FBA139
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x19BC99C678FBA139 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x19bc99c678fba139', p0, p1, p2);
};

/**
   * _0x1A7D63CB1B0BB223
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x1A7D63CB1B0BB223 = function (p0) {
  return Citizen.invokeNative('0x1a7d63cb1b0bb223', p0);
};

/**
   * _0x1AC5A8AB50CFAA33
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x1AC5A8AB50CFAA33 = function (p0) {
  return Citizen.invokeNative('0x1ac5a8ab50cfaa33', p0, _r);
};

/**
   * _IS_SCENARIO_IN_USE
   * Checks whether a specified scenario is currently being used (actively played) by any entity (player or ped). Returns true if the scenario is already occupied, otherwise false.
   *
   * @param {number} scenarioHash
   * @return {boolean}
   */
global.IsScenarioInUse = function (scenarioHash) {
  return Citizen.invokeNative('0x1acbc313966c21f3', _ch(scenarioHash), _r);
};

/**
   * _0x1D125814EBC517EB
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x1D125814EBC517EB = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x1d125814ebc517eb', p0, p1, p2, p3);
};

/**
   * _0x1ECF56C040FD839C
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x1ECF56C040FD839C = function (p0, p1) {
  return Citizen.invokeNative('0x1ecf56c040fd839c', p0, p1);
};

/**
   * _0x1F298C7BD30D1240
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x1F298C7BD30D1240 = function (ped) {
  return Citizen.invokeNative('0x1f298c7bd30d1240', ped);
};

/**
   * _0x1F7A9A9C38C13A56
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x1F7A9A9C38C13A56 = function (p0) {
  return Citizen.invokeNative('0x1f7a9a9c38c13a56', p0, _r);
};

/**
   * _0x2064B33F6E6B92D4
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x2064B33F6E6B92D4 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x2064b33f6e6b92d4', p0, p1, p2, p3);
};

/**
   * _SET_PED_PATH_PREFER_HORSE_WALKABLE
   *
   * @param {number} ped
   * @param {boolean} preferHorseWalkable
   * @param {number} p2
   * @return {void}
   */
global.SetPedPathPreferHorseWalkable = function (ped, preferHorseWalkable, p2) {
  return Citizen.invokeNative('0x216343750545a486', ped, preferHorseWalkable, _fv(p2));
};

/**
   * _0x22CD2C33ED4467A1
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x22CD2C33ED4467A1 = function (p0) {
  return Citizen.invokeNative('0x22cd2c33ed4467a1', p0, _r);
};

/**
   * _0x22CDBF317C40A122
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x22CDBF317C40A122 = function (ped) {
  return Citizen.invokeNative('0x22cdbf317c40a122', ped);
};

/**
   * _0x23767D80C7EED7C6
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x23767D80C7EED7C6 = function (p0, p1) {
  return Citizen.invokeNative('0x23767d80c7eed7c6', p0, p1);
};

/**
   * _0x2416EC2F31F75266
   *
   * @param {number} entity
   * @param {number} targetEntity
   * @param {number} duration
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0x2416EC2F31F75266 = function (entity, targetEntity, duration, p3, p4) {
  return Citizen.invokeNative('0x2416ec2f31f75266', entity, targetEntity, duration, p3, p4);
};

/**
   * _0x244430C13BA5258E
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {any}
   */
global.N_0x244430C13BA5258E = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x244430c13ba5258e', p0, p1, p2, p3, _r);
};

/**
   * _0x28EF780BDEA8A639
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x28EF780BDEA8A639 = function (ped, p1) {
  return Citizen.invokeNative('0x28ef780bdea8a639', ped, p1);
};

/**
   * _0x2948235DB2058E99
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x2948235DB2058E99 = function (p0, p1) {
  return Citizen.invokeNative('0x2948235db2058e99', p0, p1);
};

/**
   * _0x2A10538D0A005E81
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x2A10538D0A005E81 = function (p0, p1) {
  return Citizen.invokeNative('0x2a10538d0a005e81', p0, p1);
};

/**
   * _0x2B8AF29A78024BD3
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x2B8AF29A78024BD3 = function (p0) {
  return Citizen.invokeNative('0x2b8af29a78024bd3', p0);
};

/**
   * _0x2C497BDEF897C6DF
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x2C497BDEF897C6DF = function (p0) {
  return Citizen.invokeNative('0x2c497bdef897c6df', p0, _r);
};

/**
   * _0x2D657B10F211C572
   *
   * @param {number} ped
   * @param {number} p1
   * @return {any}
   */
global.N_0x2D657B10F211C572 = function (ped, p1) {
  return Citizen.invokeNative('0x2d657b10f211c572', ped, _fv(p1), _r);
};

/**
   * _0x2E1D6D87346BB7D2
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x2E1D6D87346BB7D2 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x2e1d6d87346bb7d2', p0, p1, p2, p3);
};

/**
   * _0x2EB977293923C723
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x2EB977293923C723 = function (p0, p1) {
  return Citizen.invokeNative('0x2eb977293923c723', p0, p1);
};

/**
   * _0x30146C25686B7836
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x30146C25686B7836 = function (p0, p1) {
  return Citizen.invokeNative('0x30146c25686b7836', p0, p1, _r);
};

/**
   * _0x30B391915538EBE2
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x30B391915538EBE2 = function (p0) {
  return Citizen.invokeNative('0x30b391915538ebe2', p0);
};

/**
   * _0x31BB338F64D5C861
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x31BB338F64D5C861 = function (ped, p1) {
  return Citizen.invokeNative('0x31bb338f64d5c861', ped, p1);
};

/**
   * _0x351F74ED6177EBE7
   *
  
   * @return {any}
   */
global.N_0x351F74ED6177EBE7 = function () {
  return Citizen.invokeNative('0x351f74ed6177ebe7', _r);
};

/**
   * _0x358A1A751B335A11
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x358A1A751B335A11 = function (p0) {
  return Citizen.invokeNative('0x358a1a751b335a11', p0);
};

/**
   * _0x370F57C47F68EBCA
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x370F57C47F68EBCA = function (p0) {
  return Citizen.invokeNative('0x370f57c47f68ebca', p0, _r);
};

/**
   * _0x3ACC128510142B9D
   *
   * @param {string | number} waypointRecording
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {number}
   */
global.N_0x3ACC128510142B9D = function (waypointRecording, x, y, z) {
  return Citizen.invokeNative('0x3acc128510142b9d', _ts(waypointRecording), _fv(x), _fv(y), _fv(z), _r, _rf);
};

/**
   * _0x3BBEECC5B8F35318
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x3BBEECC5B8F35318 = function (p0, p1) {
  return Citizen.invokeNative('0x3bbeecc5b8f35318', p0, p1);
};

/**
   * _0x3F8387DB1B9F31B7
   * Used for HORSE_REVIVE
   *
   * @param {DataView} scriptStruct
   * @param {boolean} p1
   * @return {boolean}
   */
global.N_0x3F8387DB1B9F31B7 = function (scriptStruct, p1) {
  return Citizen.invokeNative('0x3f8387db1b9f31b7', scriptStruct, p1, _r);
};

/**
   * _0x3FEB770D8ED9047A
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x3FEB770D8ED9047A = function (p0) {
  return Citizen.invokeNative('0x3feb770d8ed9047a', p0, _r);
};

/**
   * _0x3FFCD7BBA074CC80
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @return {void}
   */
global.N_0x3FFCD7BBA074CC80 = function (ped, p1, p2, p3, p4, p5, p6, p7, p8) {
  return Citizen.invokeNative('0x3ffcd7bba074cc80', ped, p1, p2, p3, p4, p5, p6, p7, p8);
};

/**
   * _0x41323F4E0C4AE94B
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.N_0x41323F4E0C4AE94B = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0x41323f4e0c4ae94b', p0, p1, p2, p3, p4, p5, p6);
};

/**
   * _0x4161648394262FDF
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x4161648394262FDF = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x4161648394262fdf', p0, p1, p2, p3);
};

/**
   * _0x41D1331AFAD5A091
   * _SET_PED_*
   *
   * @param {number} ped
   * @param {number} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x41D1331AFAD5A091 = function (ped, p1, p2) {
  return Citizen.invokeNative('0x41d1331afad5a091', ped, p1, p2);
};

/**
   * _SET_PED_PATH_NEVER_USE_INTERIORS
   *
   * @param {number} ped
   * @param {boolean} neverUseInteriors
   * @return {void}
   */
global.SetPedPathNeverUseInteriors = function (ped, neverUseInteriors) {
  return Citizen.invokeNative('0x42cfd8fd8cc8dc69', ped, neverUseInteriors);
};

/**
   * _0x450080DDEDB91258
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x450080DDEDB91258 = function (p0, p1) {
  return Citizen.invokeNative('0x450080ddedb91258', p0, p1);
};

/**
   * _0x4A7D73989F52EB37
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x4A7D73989F52EB37 = function (p0, p1) {
  return Citizen.invokeNative('0x4a7d73989f52eb37', p0, p1);
};

/**
   * _0x4BA972D0E5AD8122
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x4BA972D0E5AD8122 = function (p0, p1) {
  return Citizen.invokeNative('0x4ba972d0e5ad8122', p0, p1);
};

/**
   * _0x4E806A395D43A458
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x4E806A395D43A458 = function (p0) {
  return Citizen.invokeNative('0x4e806a395d43a458', p0);
};

/**
   * _0x4F57397388E1DFF8
   *
  
   * @return {void}
   */
global.N_0x4F57397388E1DFF8 = function () {
  return Citizen.invokeNative('0x4f57397388e1dff8');
};

/**
   * _0x508F5053E3F6F0C4
   * Only used in R* SP Scripts
   * Params: p4 = 1.0f - 30.0f
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p4
   * @return {boolean}
   */
global.N_0x508F5053E3F6F0C4 = function (ped, x, y, z, p4) {
  return Citizen.invokeNative('0x508f5053e3f6f0c4', ped, _fv(x), _fv(y), _fv(z), _fv(p4), _r);
};

/**
   * _0x50AA09A0DA64E73C
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.N_0x50AA09A0DA64E73C = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0x50aa09a0da64e73c', p0, p1, p2, p3, p4, p5, p6);
};

/**
   * _0x517D01BF27B682D1
   *
   * @param {number} ped
   * @param {number} entity
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @return {void}
   */
global.N_0x517D01BF27B682D1 = function (ped, entity, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0x517d01bf27b682d1', ped, entity, _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6);
};

/**
   * _0x5217B7B6DB78E1F3
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0x5217B7B6DB78E1F3 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x5217b7b6db78e1f3', p0, p1, p2, p3, p4);
};

/**
   * _0x583AE9AF9CEE0958
   *
   * @param {number} vehicle
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {boolean}
   */
global.N_0x583AE9AF9CEE0958 = function (vehicle, x, y, z) {
  return Citizen.invokeNative('0x583ae9af9cee0958', vehicle, _fv(x), _fv(y), _fv(z), _r);
};

/**
   * _0x5952DFA38FA529FE
   *
  
   * @return {any}
   */
global.N_0x5952DFA38FA529FE = function () {
  return Citizen.invokeNative('0x5952dfa38fa529fe', _r);
};

/**
   * _GET_COVERPOINT_FROM_ENTITY_WITH_OFFSET
   * Returns the entity coverpoint with offset.
   *
   * @param {number} entity
   * @param {number} xOffset
   * @param {number} yOffset
   * @param {number} zOffset
   * @param {number} heading
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @param {number} p8
   * @return {number}
   */
global.GetCoverpointFromEntityWithOffset = function (entity, xOffset, yOffset, zOffset, heading, p5, p6, p7, p8) {
  return Citizen.invokeNative('0x59872ea4cbd11c56', entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(heading), p5, p6, p7, p8, _r, _ri);
};

/**
   * _0x59AE5CA4FFB4E378
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x59AE5CA4FFB4E378 = function (p0, p1) {
  return Citizen.invokeNative('0x59ae5ca4ffb4e378', p0, p1, _r);
};

/**
   * _0x59AEA4DC640814B9
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x59AEA4DC640814B9 = function (p0, p1) {
  return Citizen.invokeNative('0x59aea4dc640814b9', p0, p1);
};

/**
   * _0x5B68D0007D9C92EB
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x5B68D0007D9C92EB = function (p0, p1) {
  return Citizen.invokeNative('0x5b68d0007d9c92eb', p0, p1);
};

/**
   * _0x5D9B0BAAF04CF65B
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x5D9B0BAAF04CF65B = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x5d9b0baaf04cf65b', p0, p1, p2, p3);
};

/**
   * _0x5EA655F01D93667A
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x5EA655F01D93667A = function (p0) {
  return Citizen.invokeNative('0x5ea655f01d93667a', p0, _r);
};

/**
   * _0x615DC4A82E90BB48
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x615DC4A82E90BB48 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x615dc4a82e90bb48', p0, p1, p2);
};

/**
   * _0x640A602946A8C972
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x640A602946A8C972 = function (p0) {
  return Citizen.invokeNative('0x640a602946a8c972', p0, _r);
};

/**
   * _0x643FD1556F621772
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0x643FD1556F621772 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x643fd1556f621772', p0, p1, p2, _r);
};

/**
   * _0x651F0530083C0E5A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x651F0530083C0E5A = function (p0, p1) {
  return Citizen.invokeNative('0x651f0530083c0e5a', p0, p1);
};

/**
   * _0x65D281985F2BDFC2
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x65D281985F2BDFC2 = function (p0, p1) {
  return Citizen.invokeNative('0x65d281985f2bdfc2', p0, p1);
};

/**
   * _0x673A8779D229BA5A
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.N_0x673A8779D229BA5A = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x673a8779d229ba5a', p0, p1, p2, p3, p4, p5);
};

/**
   * _0x678D3226CF70B9C8
   * Only used in R* SP Script beat_washed_ashore
   * Returns Object prop for TASK::_TASK_ITEM_INTERACTION_2
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {number}
   */
global.N_0x678D3226CF70B9C8 = function (ped, p1) {
  return Citizen.invokeNative('0x678d3226cf70b9c8', ped, p1, _r, _ri);
};

/**
   * _0x6A1AF481407BF6E9
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x6A1AF481407BF6E9 = function (p0) {
  return Citizen.invokeNative('0x6a1af481407bf6e9', p0);
};

/**
   * _0x6AFD84AEAA3EA538
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x6AFD84AEAA3EA538 = function (p0) {
  return Citizen.invokeNative('0x6afd84aeaa3ea538', p0, _r);
};

/**
   * _0x6AFDA2264925BD11
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x6AFDA2264925BD11 = function (p0) {
  return Citizen.invokeNative('0x6afda2264925bd11', p0);
};

/**
   * _0x6BA606AB3A83BC4D
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x6BA606AB3A83BC4D = function (p0) {
  return Citizen.invokeNative('0x6ba606ab3a83bc4d', p0, _r);
};

/**
   * _0x6C269F673C47031E
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x6C269F673C47031E = function (p0) {
  return Citizen.invokeNative('0x6c269f673c47031e', p0, _r);
};

/**
   * _IS_ENTITY_REVIVABLE
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsEntityRevivable = function (ped) {
  return Citizen.invokeNative('0x6c50b9dccca70023', ped, _r);
};

/**
   * _0x6DAC799857EF3F11
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x6DAC799857EF3F11 = function (p0, p1) {
  return Citizen.invokeNative('0x6dac799857ef3f11', p0, p1, _r);
};

/**
   * _0x722D6A49200174FE
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0x722D6A49200174FE = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x722d6a49200174fe', p0, p1, p2, p3, p4);
};

/**
   * _0x748D5E0D2A1A4C61
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x748D5E0D2A1A4C61 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x748d5e0d2a1a4c61', p0, p1, p2);
};

/**
   * _0x74F0209674864CBD
   *
  
   * @return {any}
   */
global.N_0x74F0209674864CBD = function () {
  return Citizen.invokeNative('0x74f0209674864cbd', _r);
};

/**
   * _0x756C7B4C43DF0422
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x756C7B4C43DF0422 = function (p0) {
  return Citizen.invokeNative('0x756c7b4c43df0422', p0, _r);
};

/**
   * _0x764DB5A48390FBAD
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x764DB5A48390FBAD = function (p0, p1) {
  return Citizen.invokeNative('0x764db5a48390fbad', p0, p1);
};

/**
   * _0x76610D12A838EBDE
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x76610D12A838EBDE = function (p0) {
  return Citizen.invokeNative('0x76610d12a838ebde', p0, _r);
};

/**
   * _0x78D8C1D4EB80C588
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x78D8C1D4EB80C588 = function (p0) {
  return Citizen.invokeNative('0x78d8c1d4eb80c588', p0, _r);
};

/**
   * _0x79197F7D2BB5E73A
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {any}
   */
global.N_0x79197F7D2BB5E73A = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x79197f7d2bb5e73a', p0, p1, p2, p3, p4, p5, _r);
};

/**
   * _SET_PED_PATH_AVOID_TRAFFIC
   *
   * @param {number} ped
   * @param {boolean} avoidTraffic
   * @return {void}
   */
global.SetPedPathAvoidTraffic = function (ped, avoidTraffic) {
  return Citizen.invokeNative('0x7c015d8bcec72cf4', ped, avoidTraffic);
};

/**
   * _0x7CB99FADDE73CD1B
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x7CB99FADDE73CD1B = function (p0) {
  return Citizen.invokeNative('0x7cb99fadde73cd1b', p0, _r);
};

/**
   * _0x7FB78B2199C10E92
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x7FB78B2199C10E92 = function (p0) {
  return Citizen.invokeNative('0x7fb78b2199c10e92', p0);
};

/**
   * _0x801BD27403F3CBA0
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x801BD27403F3CBA0 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x801bd27403f3cba0', p0, p1, p2, p3);
};

/**
   * _0x816A3ACD265E2297
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x816A3ACD265E2297 = function (p0, p1) {
  return Citizen.invokeNative('0x816a3acd265e2297', p0, p1);
};

/**
   * _0x827A58CED9D4D5B4
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x827A58CED9D4D5B4 = function (p0, p1) {
  return Citizen.invokeNative('0x827a58ced9d4d5b4', p0, p1);
};

/**
   * _0x82ED59F095056550
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x82ED59F095056550 = function (p0, p1) {
  return Citizen.invokeNative('0x82ed59f095056550', p0, p1);
};

/**
   * _0x849791EBBDBA0362
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x849791EBBDBA0362 = function (p0) {
  return Citizen.invokeNative('0x849791ebbdba0362', p0, _r);
};

/**
   * _0x865732725536EE39
   *
   * @param {any} p0
   * @return {Vector3}
   */
global.N_0x865732725536EE39 = function (p0) {
  return Citizen.invokeNative('0x865732725536ee39', p0, _r, _rv);
};

/**
   * _0x8798CF6815B8FE0F
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x8798CF6815B8FE0F = function (p0, p1) {
  return Citizen.invokeNative('0x8798cf6815b8fe0f', p0, p1);
};

/**
   * _0x885D19AC2B6FBFF4
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x885D19AC2B6FBFF4 = function (p0, p1) {
  return Citizen.invokeNative('0x885d19ac2b6fbff4', p0, p1);
};

/**
   * _0x88FD60D846D9CD63
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0x88FD60D846D9CD63 = function (ped) {
  return Citizen.invokeNative('0x88fd60d846d9cd63', ped);
};

/**
   * _0x8B1FDF63C3193EDA
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x8B1FDF63C3193EDA = function (ped, p1) {
  return Citizen.invokeNative('0x8b1fdf63c3193eda', ped, _fv(p1));
};

/**
   * _SET_PED_PATH_PREFER_TO_AVOID_MUD
   *
   * @param {number} ped
   * @param {boolean} preferAvoidMud
   * @param {number} p2
   * @return {void}
   */
global.SetPedPathPreferToAvoidMud = function (ped, preferAvoidMud, p2) {
  return Citizen.invokeNative('0x8bb283a7888ad1ad', ped, preferAvoidMud, _fv(p2));
};

/**
   * _0x8E1DDE26D270CC5E
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x8E1DDE26D270CC5E = function (p0, p1) {
  return Citizen.invokeNative('0x8e1dde26d270cc5e', p0, p1);
};

/**
   * _0x8F8C84363810691A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x8F8C84363810691A = function (p0, p1) {
  return Citizen.invokeNative('0x8f8c84363810691a', p0, p1);
};

/**
   * _0x9050DF2C53801208
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x9050DF2C53801208 = function (ped, p1) {
  return Citizen.invokeNative('0x9050df2c53801208', ped, _fv(p1));
};

/**
   * _0x90703A8F75EE4ABD
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x90703A8F75EE4ABD = function (p0, p1) {
  return Citizen.invokeNative('0x90703a8f75ee4abd', p0, p1, _r);
};

/**
   * _0x908BB14BCE85C80E
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x908BB14BCE85C80E = function (p0) {
  return Citizen.invokeNative('0x908bb14bce85c80e', p0, _r);
};

/**
   * _0x91CB5E431F579BA1
   *
   * @param {any} p0
   * @return {Vector3}
   */
global.N_0x91CB5E431F579BA1 = function (p0) {
  return Citizen.invokeNative('0x91cb5e431f579ba1', p0, _r, _rv);
};

/**
   * _0x920684BE432875B1
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x920684BE432875B1 = function (p0) {
  return Citizen.invokeNative('0x920684be432875b1', p0, _r);
};

/**
   * _0x9420FB11B8D77948
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x9420FB11B8D77948 = function (p0) {
  return Citizen.invokeNative('0x9420fb11b8d77948', p0, _r);
};

/**
   * _0x954451EA2D2120FB
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x954451EA2D2120FB = function (p0, p1) {
  return Citizen.invokeNative('0x954451ea2d2120fb', p0, p1);
};

/**
   * _0x9585FF23C4B8EDE0
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x9585FF23C4B8EDE0 = function (p0, p1) {
  return Citizen.invokeNative('0x9585ff23c4b8ede0', p0, p1);
};

/**
   * _0x9667CCE29BFA0780
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x9667CCE29BFA0780 = function (p0) {
  return Citizen.invokeNative('0x9667cce29bfa0780', p0);
};

/**
   * _0x974DA3408DEC4E79
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x974DA3408DEC4E79 = function (p0) {
  return Citizen.invokeNative('0x974da3408dec4e79', p0, _r);
};

/**
   * _0x9ADDBB9242179D56
   *
   * @param {number} object
   * @param {number} ped
   * @return {void}
   */
global.N_0x9ADDBB9242179D56 = function (object, ped) {
  return Citizen.invokeNative('0x9addbb9242179d56', object, ped);
};

/**
   * _0x9B6A58FDB0024F12
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x9B6A58FDB0024F12 = function (p0, p1) {
  return Citizen.invokeNative('0x9b6a58fdb0024f12', p0, p1);
};

/**
   * _0x9C8F42A5D1859DC1
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x9C8F42A5D1859DC1 = function (p0) {
  return Citizen.invokeNative('0x9c8f42a5d1859dc1', p0);
};

/**
   * _0x9EBD34958AB6F824
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x9EBD34958AB6F824 = function (p0) {
  return Citizen.invokeNative('0x9ebd34958ab6f824', p0);
};

/**
   * _0x9FF5F9B24E870748
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x9FF5F9B24E870748 = function (p0) {
  return Citizen.invokeNative('0x9ff5f9b24e870748', p0, _r);
};

/**
   * _0xA052608A12559BBB
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xA052608A12559BBB = function (p0, p1) {
  return Citizen.invokeNative('0xa052608a12559bbb', p0, p1);
};

/**
   * _0xA21AA2F0C2180125
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xA21AA2F0C2180125 = function (p0, p1) {
  return Citizen.invokeNative('0xa21aa2f0c2180125', p0, p1);
};

/**
   * _0xA263ADBBC8056214
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xA263ADBBC8056214 = function (p0, p1) {
  return Citizen.invokeNative('0xa263adbbc8056214', p0, p1);
};

/**
   * _0xA42DC7919159CCCF
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xA42DC7919159CCCF = function (p0) {
  return Citizen.invokeNative('0xa42dc7919159cccf', p0);
};

/**
   * _0xA6A76D666A281F2D
   *
   * @param {any} p0
   * @param {number} item
   * @return {void}
   */
global.N_0xA6A76D666A281F2D = function (p0, item) {
  return Citizen.invokeNative('0xa6a76d666a281f2d', p0, _ch(item));
};

/**
   * _0xA7479FB665361EDB
   * _SET_SCENARIO_*
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xA7479FB665361EDB = function (p0, p1) {
  return Citizen.invokeNative('0xa7479fb665361edb', p0, p1);
};

/**
   * _0xA9E7672F8C6C6F74
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xA9E7672F8C6C6F74 = function (p0) {
  return Citizen.invokeNative('0xa9e7672f8c6c6f74', p0, _r);
};

/**
   * _0xAC5045AB7F1A34FD
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xAC5045AB7F1A34FD = function (p0) {
  return Citizen.invokeNative('0xac5045ab7f1a34fd', p0, _r);
};

/**
   * _0xADC45010BC17AF0E
   * _SET_SCENARIO_POINT_*
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xADC45010BC17AF0E = function (p0, p1) {
  return Citizen.invokeNative('0xadc45010bc17af0e', p0, p1);
};

/**
   * _0xAF2EF28CE3084505
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0xAF2EF28CE3084505 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xaf2ef28ce3084505', p0, p1, p2, p3);
};

/**
   * _0xB2D15D3551FE4FAE
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xB2D15D3551FE4FAE = function (p0) {
  return Citizen.invokeNative('0xb2d15d3551fe4fae', p0);
};

/**
   * _0xB2F47A1AFDFCC595
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xB2F47A1AFDFCC595 = function (p0, p1) {
  return Citizen.invokeNative('0xb2f47a1afdfcc595', p0, p1);
};

/**
   * _SET_ITEM_INTERACTION_STATE
   * All Interaction states
   * https://github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_ITEM_INTERACTION#-4-item_interaction_state_name--item_interaction_propid--1
   *
   * @param {number} ped
   * @param {number} itemInteractionState
   * @param {number} p2
   * @return {void}
   */
global.SetItemInteractionState = function (ped, itemInteractionState, p2) {
  return Citizen.invokeNative('0xb35370d5353995cb', ped, _ch(itemInteractionState), _fv(p2));
};

/**
   * _0xB520DBDA7FCF573F
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0xB520DBDA7FCF573F = function (ped) {
  return Citizen.invokeNative('0xb520dbda7fcf573f', ped, _r);
};

/**
   * _0xB79817DB31FF72B9
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xB79817DB31FF72B9 = function (p0, p1) {
  return Citizen.invokeNative('0xb79817db31ff72b9', p0, p1);
};

/**
   * _0xB8E213D02F37947D
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.N_0xB8E213D02F37947D = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xb8e213d02f37947d', p0, p1, p2, p3, p4, p5, p6);
};

/**
   * _0xB8E3486D107F4194
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xB8E3486D107F4194 = function (p0, p1) {
  return Citizen.invokeNative('0xb8e3486d107f4194', p0, p1);
};

/**
   * _HAS_CARRIABLE_CONFIG_HASH_LOADED
   * list of carriable configs  https://gist.github.com/WesternGamer/95a1f8daf02520cad2bf96af6d957e70
   *
   * @param {number} hash
   * @return {boolean}
   */
global.HasCarriableConfigHashLoaded = function (hash) {
  return Citizen.invokeNative('0xb8f52a3f84a7cc59', _ch(hash), _r);
};

/**
   * _0xBAAB791AA72C2821
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xBAAB791AA72C2821 = function (p0, p1) {
  return Citizen.invokeNative('0xbaab791aa72c2821', p0, p1);
};

/**
   * _0xBC3F847AE2C3DC65
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xBC3F847AE2C3DC65 = function (p0, p1) {
  return Citizen.invokeNative('0xbc3f847ae2c3dc65', p0, p1);
};

/**
   * _0xBD1C3C0F271C39D3
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xBD1C3C0F271C39D3 = function (p0, p1) {
  return Citizen.invokeNative('0xbd1c3c0f271c39d3', p0, p1);
};

/**
   * _0xBD70108D01875299
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xBD70108D01875299 = function (p0) {
  return Citizen.invokeNative('0xbd70108d01875299', p0, _r);
};

/**
   * _0xBEDBE39B5FD98FD6
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0xBEDBE39B5FD98FD6 = function (ped) {
  return Citizen.invokeNative('0xbedbe39b5fd98fd6', ped, _r);
};

/**
   * _0xBEEFBB608D2AA68A
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xBEEFBB608D2AA68A = function (p0) {
  return Citizen.invokeNative('0xbeefbb608d2aa68a', p0);
};

/**
   * _SET_PED_PATH_PREFER_STAY_IN_WATER
   *
   * @param {number} ped
   * @param {boolean} preferStayInWater
   * @param {number} p2
   * @return {void}
   */
global.SetPedPathPreferStayInWater = function (ped, preferStayInWater, p2) {
  return Citizen.invokeNative('0xc6170856e54557b2', ped, preferStayInWater, _fv(p2));
};

/**
   * _0xCE4E669400E5F8AA
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0xCE4E669400E5F8AA = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xce4e669400e5f8aa', p0, p1, p2, p3);
};

/**
   * _0xD0ABC4EA3B5E21A0
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xD0ABC4EA3B5E21A0 = function (p0, p1) {
  return Citizen.invokeNative('0xd0abc4ea3b5e21a0', p0, p1, _r);
};

/**
   * _0xD508FA229F1C4900
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {any}
   */
global.N_0xD508FA229F1C4900 = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xd508fa229f1c4900', p0, p1, p2, p3, p4, p5, _r);
};

/**
   * _0xD999E379265A4501
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xD999E379265A4501 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xd999e379265a4501', p0, p1, p2);
};

/**
   * _0xDE0C8B145EA466FF
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.N_0xDE0C8B145EA466FF = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xde0c8b145ea466ff', p0, p1, p2, p3, p4, p5);
};

/**
   * _0xDF56A2B50C04DEA4
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xDF56A2B50C04DEA4 = function (p0, p1) {
  return Citizen.invokeNative('0xdf56a2b50c04dea4', p0, p1, _r);
};

/**
   * _0xDF94844D474F31E5
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0xDF94844D474F31E5 = function (ped) {
  return Citizen.invokeNative('0xdf94844d474f31e5', ped);
};

/**
   * _0xE01C8DC8EDD28D31
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xE01C8DC8EDD28D31 = function (p0, p1) {
  return Citizen.invokeNative('0xe01c8dc8edd28d31', p0, p1);
};

/**
   * _0xE01F55B2896F6B37
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xE01F55B2896F6B37 = function (p0, p1) {
  return Citizen.invokeNative('0xe01f55b2896f6b37', p0, p1);
};

/**
   * _0xE05A5D39BE6E93AF
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xE05A5D39BE6E93AF = function (p0) {
  return Citizen.invokeNative('0xe05a5d39be6e93af', p0);
};

/**
   * _0xE116F6F2DA2D777E
   *
   * @param {any} p0
   * @return {Vector3}
   */
global.N_0xE116F6F2DA2D777E = function (p0) {
  return Citizen.invokeNative('0xe116f6f2da2d777e', p0, _r, _rv);
};

/**
   * _0xE1C105E6BBA48270
   *
  
   * @return {any}
   */
global.N_0xE1C105E6BBA48270 = function () {
  return Citizen.invokeNative('0xe1c105e6bba48270', _r);
};

/**
   * _0xE2CF104ADD49D4BF
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xE2CF104ADD49D4BF = function (p0) {
  return Citizen.invokeNative('0xe2cf104add49d4bf', p0);
};

/**
   * _0xE55478C5EDF70AC2
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xE55478C5EDF70AC2 = function (p0) {
  return Citizen.invokeNative('0xe55478c5edf70ac2', p0, _r);
};

/**
   * _0xE5831AA1E2FD147C
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xE5831AA1E2FD147C = function (p0) {
  return Citizen.invokeNative('0xe5831aa1e2fd147c', p0);
};

/**
   * _0xE62754D09354F6CF
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xE62754D09354F6CF = function (p0) {
  return Citizen.invokeNative('0xe62754d09354f6cf', p0, _r);
};

/**
   * _0xE69FDA40AAC3EFC0
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xE69FDA40AAC3EFC0 = function (p0, p1) {
  return Citizen.invokeNative('0xe69fda40aac3efc0', p0, p1);
};

/**
   * _0xE6A151364C600B24
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xE6A151364C600B24 = function (p0) {
  return Citizen.invokeNative('0xe6a151364c600b24', p0, _r);
};

/**
   * _0xE7BBC4E56B989449
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0xE7BBC4E56B989449 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xe7bbc4e56b989449', p0, p1, p2, _r);
};

/**
   * _0xE9225354FB7437A7
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xE9225354FB7437A7 = function (p0, p1) {
  return Citizen.invokeNative('0xe9225354fb7437a7', p0, p1);
};

/**
   * _0xE9A6400D1A0E7A55
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xE9A6400D1A0E7A55 = function (p0) {
  return Citizen.invokeNative('0xe9a6400d1a0e7a55', p0, _r);
};

/**
   * _0xEAF87DA2BE78A15B
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xEAF87DA2BE78A15B = function (p0, p1) {
  return Citizen.invokeNative('0xeaf87da2be78a15b', p0, p1);
};

/**
   * _0xEB67D4E056C85A81
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xEB67D4E056C85A81 = function (p0) {
  return Citizen.invokeNative('0xeb67d4e056c85a81', p0, _r);
};

/**
   * _0xEBA2081E0A5F4D17
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xEBA2081E0A5F4D17 = function (p0) {
  return Citizen.invokeNative('0xeba2081e0a5f4d17', p0);
};

/**
   * _0xEC516FE805D2CB2D
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xEC516FE805D2CB2D = function (p0) {
  return Citizen.invokeNative('0xec516fe805d2cb2d', p0);
};

/**
   * _0xEFD875C2791EBEFD
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {any}
   */
global.N_0xEFD875C2791EBEFD = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xefd875c2791ebefd', p0, p1, p2, p3, _r);
};

/**
   * _0xF3C3503276F4A034
   *
   * @param {number} entity
   * @param {any} p1
   * @return {void}
   */
global.N_0xF3C3503276F4A034 = function (entity, p1) {
  return Citizen.invokeNative('0xf3c3503276f4a034', entity, p1);
};

/**
   * _0xF40A109B4B79A848
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xF40A109B4B79A848 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xf40a109b4b79a848', p0, p1, p2);
};

/**
   * _0xF718931A82EEB898
   *
  
   * @return {void}
   */
global.N_0xF718931A82EEB898 = function () {
  return Citizen.invokeNative('0xf718931a82eeb898');
};

/**
   * _0xF948F4356F010F11
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xF948F4356F010F11 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xf948f4356f010f11', p0, p1, p2);
};

/**
   * _0xF97F462779B31786
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xF97F462779B31786 = function (p0) {
  return Citizen.invokeNative('0xf97f462779b31786', p0, _r);
};

/**
   * _0xFA30E2254461ADEB
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xFA30E2254461ADEB = function (p0, p1) {
  return Citizen.invokeNative('0xfa30e2254461adeb', p0, p1);
};

/**
   * _0xFC7F71CF49F70B6B
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xFC7F71CF49F70B6B = function (p0) {
  return Citizen.invokeNative('0xfc7f71cf49f70b6b', p0);
};

/**
   * _0xFDECCA06E8B81346
   *
   * @param {number} ped
   * @return {any}
   */
global.N_0xFDECCA06E8B81346 = function (ped) {
  return Citizen.invokeNative('0xfdecca06e8b81346', ped, _r);
};

/**
   * _0xFE5D28B9B7837CC1
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {any}
   */
global.N_0xFE5D28B9B7837CC1 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xfe5d28b9b7837cc1', p0, p1, p2, p3, _r);
};

/**
   * _LOAD_CARRIABLE_CONFIG_HASH
   * https://gist.github.com/WesternGamer/95a1f8daf02520cad2bf96af6d957e70 carriable config list 
   *
   * @param {number} hash
   * @return {void}
   */
global.LoadCarriableConfigHash = function (hash) {
  return Citizen.invokeNative('0xff745b0346e19e2c', _ch(hash));
};

/**
   * _0xFF8AFCA532B500D4
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xFF8AFCA532B500D4 = function (p0, p1) {
  return Citizen.invokeNative('0xff8afca532b500d4', p0, p1);
};

/**
   * _0xFFB520A3E16F7B7B
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0xFFB520A3E16F7B7B = function (ped, p1) {
  return Citizen.invokeNative('0xffb520a3e16f7b7b', ped, _fv(p1));
};

/**
   * _ADD_COVER_BLOCKING_VOLUME
   *
   * @param {number} volume
   * @param {boolean} p1
   * @param {boolean} p2
   * @param {boolean} p3
   * @param {boolean} p4
   * @return {void}
   */
global.AddCoverBlockingVolume = function (volume, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xeb2ed1dc3aec0654', volume, p1, p2, p3, p4);
};

/**
   * _ADD_FLEE_TARGET_COORDS
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p4
   * @return {void}
   */
global.AddFleeTargetCoords = function (ped, x, y, z, p4) {
  return Citizen.invokeNative('0xe8f1a5b4ced3725a', ped, _fv(x), _fv(y), _fv(z), _fv(p4));
};

/**
   * _ASSOCIATE_PROP_WITH_SCENARIO
   *
   * @param {number} scenario
   * @param {number} entity
   * @param {string | number} propName
   * @param {boolean} p3
   * @return {boolean}
   */
global.AssociatePropWithScenario = function (scenario, entity, propName, p3) {
  return Citizen.invokeNative('0x8360c47380b6f351', scenario, entity, propName, p3, _r);
};

/**
   * _CREATE_HERB_COMPOSITES
   * groundSetting: 0: spawn on ground, 2 (1?): do not spawn on ground
   * p7: -1 in R* Scripts
   * Returns compositeId
   *
   * @param {number} asset
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} heading
   * @param {number} groundSetting
   * @param {any} p6
   * @param {number} p7
   * @return {number}
   */
global.CreateHerbComposites = function (asset, x, y, z, heading, groundSetting, p6, p7) {
  return Citizen.invokeNative('0x5b4bbe80ad5972dc', _ch(asset), _fv(x), _fv(y), _fv(z), _fv(heading), groundSetting, p6, p7, _r, _ri);
};

/**
   * _CREATE_WAYPOINT_PATH
   *
   * @param {string | number} pathName
   * @param {any} p1
   * @param {number} nodes
   * @param {number} p3
   * @return {boolean}
   */
global.CreateWaypointPath = function (pathName, p1, nodes, p3) {
  return Citizen.invokeNative('0x5c885e0978b6ad60', pathName, p1, nodes, p3, _r);
};

/**
   * _CUFF_PED
   *
   * @param {number} ped
   * @return {void}
   */
global.CuffPed = function (ped) {
  return Citizen.invokeNative('0x7981037a96e7d174', ped);
};

/**
   * _DELETE_PATCH_OBJECTS_FROM_HERB_COMPOSITES
   * Params: p1 is always false except in script nb_egg_protector
   *
   * @param {number} compositeId
   * @param {boolean} p1
   * @return {void}
   */
global.DeletePatchObjectsFromHerbComposites = function (compositeId, p1) {
  return Citizen.invokeNative('0x5758b1ee0c3fd4ac', compositeId, p1);
};

/**
   * _DELETE_SCENARIO_POINT
   *
   * @param {number} scenario
   * @return {void}
   */
global.DeleteScenarioPoint = function (scenario) {
  return Citizen.invokeNative('0x81948dfe4f5a0283', scenario);
};

/**
   * _DETACH_CARRIABLE_PED
   *
   * @param {number} ped
   * @return {void}
   */
global.DetachCarriablePed = function (ped) {
  return Citizen.invokeNative('0x36d188aecb26094b', ped);
};

/**
   * _DISASSOCIATE_PROP_FROM_SCENARIO
   *
   * @param {number} scenario
   * @param {string | number} propName
   * @return {boolean}
   */
global.DisassociatePropFromScenario = function (scenario, propName) {
  return Citizen.invokeNative('0x6ef4e31b4d5d2da0', scenario, propName, _r);
};

/**
   * _DOES_SCENARIO_GROUP_EXIST_HASH
   *
   * @param {number} scenarioGroup
   * @return {boolean}
   */
global.DoesScenarioGroupExistHash = function (scenarioGroup) {
  return Citizen.invokeNative('0x76e98b52369a289c', _ch(scenarioGroup), _r);
};

/**
   * _DOES_SCENARIO_POINT_HAVE_PROPS
   *
   * @param {number} scenario
   * @return {boolean}
   */
global.DoesScenarioPointHaveProps = function (scenario) {
  return Citizen.invokeNative('0xea31f199a73801d3', scenario, _r);
};

/**
   * _FIND_MODEL_FOR_ITEM
   *
   * @param {number} item
   * @return {number}
   */
global.FindModelForItem = function (item) {
  return Citizen.invokeNative('0xe47dd64b9f02677d', _ch(item), _r, _ri);
};

/**
   * _GET_HERB_COMPOSITE_NUM_ENTITIES
   * Flowers, Stalks or whatever the composite has
   *
   * @param {number} compositeId
   * @param {DataView} outEntities
   * @return {number}
   */
global.GetHerbCompositeNumEntities = function (compositeId, outEntities) {
  return Citizen.invokeNative('0x96c6ed22fb742c3e', compositeId, outEntities, _r, _ri);
};

/**
   * _GET_HOGTIE_ESCAPE_TIMER
   *
   * @param {number} ped
   * @return {number}
   */
global.GetHogtieEscapeTimer = function (ped) {
  return Citizen.invokeNative('0x4687e69d258bbe41', ped, _r, _rf);
};

/**
   * _GET_ITEM_INTERACTION_ENTITY_FROM_PED
   * item hashes: PRIMARYITEM, P_MUGCOFFEE01X_PH_R_HAND, P_BOTTLEBEER01X_PH_R_HAND
   * http://prntscr.com/1qtp3bz
   * https://github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_ITEM_INTERACTION
   *
   * @param {number} ped
   * @param {number} item
   * @return {number}
   */
global.GetItemInteractionEntityFromPed = function (ped, item) {
  return Citizen.invokeNative('0x05a0100ea714db68', ped, _ch(item), _r, _ri);
};

/**
   * _GET_LED_HORSE_FROM_PED
   *
   * @param {number} ped
   * @return {number}
   */
global.GetLedHorseFromPed = function (ped) {
  return Citizen.invokeNative('0xed1f514af4732258', ped, _r, _ri);
};

/**
   * _GET_PED_IS_IGNORING_DEAD_BODIES
   *
   * @param {number} ped
   * @return {boolean}
   */
global.GetPedIsIgnoringDeadBodies = function (ped) {
  return Citizen.invokeNative('0x1948bbe561a2375a', ped, _r);
};

/**
   * _GET_PED_USING_SCENARIO_POINT
   *
   * @param {number} scenario
   * @return {number}
   */
global.GetPedUsingScenarioPoint = function (scenario) {
  return Citizen.invokeNative('0x5ba659955369b0e2', scenario, _r, _ri);
};

/**
   * _GET_SCENARIO_CONTAINER_OPENING_STATE
   * Returns m_eContainerState
   *
   * @param {number} entity
   * @return {boolean}
   */
global.GetScenarioContainerOpeningState = function (entity) {
  return Citizen.invokeNative('0xb219612b5568e9ec', entity, _r);
};

/**
   * _GET_SCENARIO_POINT_COORDS
   * Params: p1 is always true in R* Scripts
   *
   * @param {number} scenario
   * @param {boolean} p1
   * @return {Vector3}
   */
global.GetScenarioPointCoords = function (scenario, p1) {
  return Citizen.invokeNative('0xa8452dd321607029', scenario, p1, _r, _rv);
};

/**
   * _GET_SCENARIO_POINT_ENTITY
   * Note: The current name for this native is the old name of 0x295514F198EFD0CA
   * Old name for this native: _GET_ENTITY_SCENARIO_POINT_IS_ATTACHED_TO
   *
   * @param {number} scenario
   * @return {number}
   */
global.GetScenarioPointEntity = function (scenario) {
  return Citizen.invokeNative('0x7467165ee97d3c68', scenario, _r, _ri);
};

/**
   * _GET_SCENARIO_POINT_HEADING
   * Params: p1 is always true in R* Scripts
   *
   * @param {number} scenario
   * @param {boolean} p1
   * @return {number}
   */
global.GetScenarioPointHeading = function (scenario, p1) {
  return Citizen.invokeNative('0xb93ea7184baa85c3', scenario, p1, _r, _rf);
};

/**
   * _GET_SCENARIO_POINT_PED_IS_USING
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {number}
   */
global.GetScenarioPointPedIsUsing = function (ped, p1) {
  return Citizen.invokeNative('0xdf7993356f52359a', ped, p1, _r, _ri);
};

/**
   * _GET_SCENARIO_POINT_RADIUS
   *
   * @param {number} scenario
   * @return {number}
   */
global.GetScenarioPointRadius = function (scenario) {
  return Citizen.invokeNative('0x6718f40313a2b5a6', scenario, _r, _rf);
};

/**
   * _GET_SCENARIO_POINT_TYPE
   *
   * @param {number} scenario
   * @return {number}
   */
global.GetScenarioPointType = function (scenario) {
  return Citizen.invokeNative('0xa92450b5ae687aaf', scenario, _r, _ri);
};

/**
   * _GET_SCENARIO_POINT_TYPE_PED_IS_USING
   *
   * @param {number} ped
   * @return {number}
   */
global.GetScenarioPointTypePedIsUsing = function (ped) {
  return Citizen.invokeNative('0x2d0571bb55879da2', ped, _r, _ri);
};

/**
   * _GET_SCRIPT_TASK_ACTION_TIME
   *
   * @param {number} ped
   * @param {number} task
   * @return {number}
   */
global.GetScriptTaskActionTime = function (ped, task) {
  return Citizen.invokeNative('0xa710dc5d25f8b942', ped, _ch(task), _r, _rf);
};

/**
   * _GET_TASK_FISHING
   * Fishing Research: https://pastebin.com/NmK5ZLVs
   * Only used in R* Scripts fishing_core and av_fishing_river
   *
   * @param {number} ped
   * @param {DataView} p1
   * @return {boolean}
   */
global.GetTaskFishing = function (ped, p1) {
  return Citizen.invokeNative('0xf3735acd11acd500', ped, p1, _r);
};

/**
   * _GET_TASK_MOVE_NETWORK_ID
   * Returns hash of the underlying move network def, see move_networks.xml
   * https://alloc8or.re/rdr3/doc/misc/move_networks.txt
   *
   * @param {number} ped
   * @return {number}
   */
global.GetTaskMoveNetworkId = function (ped) {
  return Citizen.invokeNative('0xcacc2f9d994504b7', ped, _r, _ri);
};

/**
   * _GET_TASK_MOVE_NETWORK_PHASE_FLOAT
   *
   * @param {number} ped
   * @param {string | number} phaseName
   * @return {number}
   */
global.GetTaskMoveNetworkPhaseFloat = function (ped, phaseName) {
  return Citizen.invokeNative('0x844ceee428ea35b0', ped, phaseName, _r, _rf);
};

/**
   * _IS_HAT_BEING_PICKED_UP
   * Returns true while a hat is being picked up
   * _IS_A* - _IS_D*
   *
   * @param {number} hatObject
   * @return {boolean}
   */
global.IsHatBeingPickedUp = function (hatObject) {
  return Citizen.invokeNative('0x11cd066f54da0133', hatObject, _r);
};

/**
   * _IS_HAT_BEING_PICKED_UP_2
   * Returns true while a hat is being picked up. Similar to 0x11CD066F54DA0133
   * _IS_A* - _IS_D*
   *
   * @param {number} hatObject
   * @return {boolean}
   */
global.IsHatBeingPickedUp_2 = function (hatObject) {
  return Citizen.invokeNative('0x4eccc2815ca79ae2', hatObject, _r);
};

/**
   * _IS_PED_ARRESTING_ANY_PED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedArrestingAnyPed = function (ped) {
  return Citizen.invokeNative('0xa9cc7856d52dbd25', ped, _r);
};

/**
   * _IS_PED_DUELLING
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedDuelling = function (ped) {
  return Citizen.invokeNative('0xc8b29d18022ea2b7', ped, _r);
};

/**
   * _IS_PED_LEADING_HORSE
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedLeadingHorse = function (ped) {
  return Citizen.invokeNative('0xefc4303ddc6e60d3', ped, _r);
};

/**
   * _IS_SCENARIO_GROUP_ENABLED_HASH
   *
   * @param {number} scenarioGroup
   * @return {boolean}
   */
global.IsScenarioGroupEnabledHash = function (scenarioGroup) {
  return Citizen.invokeNative('0xdcc374913de6aaa6', _ch(scenarioGroup), _r);
};

/**
   * _IS_SCENARIO_POINT_ACTIVE
   *
   * @param {number} scenario
   * @return {boolean}
   */
global.IsScenarioPointActive = function (scenario) {
  return Citizen.invokeNative('0x0cc36d4156006509', scenario, _r);
};

/**
   * _IS_SCENARIO_POINT_FLAG_SET
   *
   * @param {number} scenario
   * @param {number} flag
   * @return {boolean}
   */
global.IsScenarioPointFlagSet = function (scenario, flag) {
  return Citizen.invokeNative('0x8569c38d2fb80650', scenario, flag, _r);
};

/**
   * _MAKE_OBJECT_CARRIABLE
   *
   * @param {number} object
   * @return {void}
   */
global.MakeObjectCarriable = function (object) {
  return Citizen.invokeNative('0x78b4567e18b54480', object);
};

/**
   * _PED_FISHINGROD_HOOK_ENTITY
   *
   * @param {number} ped
   * @param {number} entity
   * @return {void}
   */
global.PedFishingrodHookEntity = function (ped, entity) {
  return Citizen.invokeNative('0x1a52076d26e09004', ped, entity);
};

/**
   * _PED_FISHINGROD_HOOK_OBJECT
   * Used with 'P_BODYPARTARMFLOAT02X' model in fishing_core.c
   *
   * @param {number} ped
   * @param {number} object
   * @return {void}
   */
global.PedFishingrodHookObject = function (ped, object) {
  return Citizen.invokeNative('0xce71c2f9baa3f975', ped, object);
};

/**
   * _PED_IS_IN_SCENARIO_BASE
   *
   * @param {number} ped
   * @return {boolean}
   */
global.PedIsInScenarioBase = function (ped) {
  return Citizen.invokeNative('0x02ebbb3989b7e695', ped, _r);
};

/**
   * _REQUEST_HERB_COMPOSITE_ASSET
   * https://github.com/femga/rdr3_discoveries/tree/master/objects/composites
   *
   * @param {number} asset
   * @return {boolean}
   */
global.RequestHerbCompositeAsset = function (asset) {
  return Citizen.invokeNative('0x73f0d0327bfa0812', _ch(asset), _r);
};

/**
   * _RESET_SCENARIO_FOR_ENTITY
   *
   * @param {number} scenario
   * @param {number} entity
   * @return {void}
   */
global.ResetScenarioForEntity = function (scenario, entity) {
  return Citizen.invokeNative('0x2e20878fd208a68e', scenario, entity);
};

/**
   * _RESET_SCENARIO_SCRIPT
   *
   * @param {number} scenario
   * @return {void}
   */
global.ResetScenarioScript = function (scenario) {
  return Citizen.invokeNative('0x5a40040bb5ae3ea2', scenario);
};

/**
   * _SET_FISHING_BAIT
   * Baits: p_fishHook02x, p_baitBread01x, p_baitCorn01x, p_baitCheese01x, p_baitWorm01x, p_baitCricket01x, p_crawdad01x, p_finisheDragonfly01x, p_finisdFishlure01x, p_finishdCrawd01x, p_finisheDragonflyLegendary01x, p_finisdFishlureLegendary01x, p_finishdCrawdLegendary01x, p_lgoc_spinner_v4
   *
   * @param {number} ped
   * @param {string | number} bait
   * @param {boolean} withoutBuoy
   * @param {boolean} instantly
   * @return {void}
   */
global.SetFishingBait = function (ped, bait, withoutBuoy, instantly) {
  return Citizen.invokeNative('0x9b0c7fa063e67629', ped, bait, withoutBuoy, instantly);
};

/**
   * _SET_HOGTIE_ESCAPE_TIMER
   * Sets the time it takes for a hogtied ped to escape
   * -1.0f for ped to never escape
   *
   * @param {number} ped
   * @param {number} time
   * @return {void}
   */
global.SetHogtieEscapeTimer = function (ped, time) {
  return Citizen.invokeNative('0xab591ae6b48b913e', ped, _fv(time));
};

/**
   * _SET_PED_CLEAR_AIMING_IN_THE_AIR
   *
   * @param {number} ped
   * @param {any} p1
   * @return {void}
   */
global.SetPedClearAimingInTheAir = function (ped, p1) {
  return Citizen.invokeNative('0x34c0010188d7c54a', ped, p1);
};

/**
   * _SET_PED_IGNORE_DEAD_BODIES
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedIgnoreDeadBodies = function (ped, toggle) {
  return Citizen.invokeNative('0x013a7ba5015c1372', ped, toggle);
};

/**
   * _SET_PED_PATH_LADDER_COST_MODIFIER
   * _SET_PED_PATH_P*
   *
   * @param {number} ped
   * @param {number} modifier
   * @return {void}
   */
global.SetPedPathLadderCostModifier = function (ped, modifier) {
  return Citizen.invokeNative('0x70f7a1eab1ae3aa8', ped, _fv(modifier));
};

/**
   * _SET_PED_PATH_MAY_ENTER_DEEP_WATER
   *
   * @param {number} ped
   * @param {boolean} mayEnterDeepWater
   * @return {void}
   */
global.SetPedPathMayEnterDeepWater = function (ped, mayEnterDeepWater) {
  return Citizen.invokeNative('0x9de63896b176ea94', ped, mayEnterDeepWater);
};

/**
   * _SET_SCENARIO_CONTAINER_OPENING_STATE
   * Opens/closes containers: ChestDugUp
   *
   * @param {number} entity
   * @param {boolean} open
   * @return {void}
   */
global.SetScenarioContainerOpeningState = function (entity, open) {
  return Citizen.invokeNative('0x188f8071f244b9b8', entity, open);
};

/**
   * _SET_SCENARIO_GROUP_ENABLED_HASH
   *
   * @param {number} scenarioGroup
   * @param {boolean} toggle
   * @return {void}
   */
global.SetScenarioGroupEnabledHash = function (scenarioGroup, toggle) {
  return Citizen.invokeNative('0x9925eddb6eab88cd', _ch(scenarioGroup), toggle);
};

/**
   * _SET_SCENARIO_POINT_ACTIVE
   *
   * @param {number} scenario
   * @param {boolean} active
   * @return {void}
   */
global.SetScenarioPointActive = function (scenario, active) {
  return Citizen.invokeNative('0xeee4829304f93eee', scenario, active);
};

/**
   * _SET_SCENARIO_POINT_COORDS
   *
   * @param {number} scenario
   * @param {number} xPos
   * @param {number} yPos
   * @param {number} zPos
   * @param {boolean} p4
   * @return {void}
   */
global.SetScenarioPointCoords = function (scenario, xPos, yPos, zPos, p4) {
  return Citizen.invokeNative('0x2056ab38df06825c', scenario, _fv(xPos), _fv(yPos), _fv(zPos), p4);
};

/**
   * _SET_SCENARIO_POINT_FLAG
   * flag: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CScenarioPointFlags__Flags
   *
   * @param {number} scenario
   * @param {number} flag
   * @param {boolean} value
   * @return {void}
   */
global.SetScenarioPointFlag = function (scenario, flag, value) {
  return Citizen.invokeNative('0x5af19b6cc2115d34', scenario, flag, value);
};

/**
   * _SET_SCENARIO_POINT_HEADING
   *
   * @param {number} scenario
   * @param {number} heading
   * @param {boolean} p2
   * @return {void}
   */
global.SetScenarioPointHeading = function (scenario, heading, p2) {
  return Citizen.invokeNative('0xd3a0da8f91612c6e', scenario, _fv(heading), p2);
};

/**
   * _SET_SCENARIO_POINT_RADIUS
   *
   * @param {number} scenario
   * @param {number} radius
   * @return {void}
   */
global.SetScenarioPointRadius = function (scenario, radius) {
  return Citizen.invokeNative('0xc47d9080a9a8856a', scenario, _fv(radius));
};

/**
   * _SET_SCENARIO_TYPE_ENABLED_HASH
   *
   * @param {number} scenarioType
   * @param {boolean} toggle
   * @return {void}
   */
global.SetScenarioTypeEnabledHash = function (scenarioType, toggle) {
  return Citizen.invokeNative('0xd00e50e673802d71', _ch(scenarioType), toggle);
};

/**
   * _SET_TASK_FISHING
   * Only used in R* Scripts fishing_core and av_fishing_river
   *
   * @param {number} ped
   * @param {any} p1
   * @return {boolean}
   */
global.SetTaskFishing = function (ped, p1) {
  return Citizen.invokeNative('0xf3735acd11acd501', ped, p1, _r);
};

/**
   * _SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_2
   *
   * @param {number} ped
   * @param {string | number} signalName
   * @param {number} value
   * @return {void}
   */
global.SetTaskMoveNetworkSignalFloat_2 = function (ped, signalName, value) {
  return Citizen.invokeNative('0x099d4a855d53b03b', ped, signalName, _fv(value));
};

/**
   * _SET_TASK_MOVE_NETWORK_SIGNAL_VECTOR
   *
   * @param {number} ped
   * @param {string | number} signalName
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.SetTaskMoveNetworkSignalVector = function (ped, signalName, x, y, z) {
  return Citizen.invokeNative('0x4662bfe01938d98d', ped, signalName, _fv(x), _fv(y), _fv(z));
};

/**
   * _TASK_ANIMAL_BLEED_OUT
   *
   * @param {number} ped
   * @param {number} killer
   * @param {boolean} p2
   * @param {number} weaponHash
   * @param {number} p4
   * @param {number} p5
   * @return {void}
   */
global.TaskAnimalBleedOut = function (ped, killer, p2, weaponHash, p4, p5) {
  return Citizen.invokeNative('0x30a768c30d385ec5', ped, killer, p2, _ch(weaponHash), p4, p5);
};

/**
   * _TASK_BOARD_VEHICLE
   *
   * @param {number} ped
   * @param {number} vehicle
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.TaskBoardVehicle = function (ped, vehicle, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xe53d17ad837cbf7c', ped, vehicle, p2, p3, p4, p5);
};

/**
   * _TASK_BOARD_VEHICLE_2
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {number} p3
   * @param {number} flags
   * @return {void}
   */
global.TaskBoardVehicle_2 = function (ped, p1, p2, p3, flags) {
  return Citizen.invokeNative('0xe41a09c8ddff7aa4', ped, p1, p2, _fv(p3), flags);
};

/**
   * _TASK_CLIMB_2
   *
   * @param {number} ped
   * @param {number} heading
   * @return {void}
   */
global.TaskClimb_2 = function (ped, heading) {
  return Citizen.invokeNative('0xdf1d85bcaf60d537', ped, _fv(heading));
};

/**
   * _TASK_COMBAT_PED_AT_COORDS
   * Coords: volume coords used in R* Script smuggler2
   * p4/p5 = 0 in R* Scripts previous name TASK_COMBAT_PED_3
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p4
   * @param {number} p5
   * @return {void}
   */
global.TaskCombatPedAtCoords = function (ped, x, y, z, p4, p5) {
  return Citizen.invokeNative('0xc624414fa748b9ba', ped, _fv(x), _fv(y), _fv(z), p4, p5);
};

/**
   * _TASK_CUT_FREE_HOGTIED_TARGET_PED
   *
   * @param {number} ped
   * @param {number} targetPed
   * @return {void}
   */
global.TaskCutFreeHogtiedTargetPed = function (ped, targetPed) {
  return Citizen.invokeNative('0x81d16c4ff3a77adf', ped, targetPed);
};

/**
   * _TASK_CUT_FREE_HOGTIED_TARGET_PED_2
   *
   * @param {number} ped
   * @param {number} targetPed
   * @param {number} p2
   * @return {void}
   */
global.TaskCutFreeHogtiedTargetPed_2 = function (ped, targetPed, p2) {
  return Citizen.invokeNative('0x525421a507216084', ped, targetPed, _fv(p2));
};

/**
   * _TASK_DISEMBARK_VEHICLE
   *
   * @param {any} p0
   * @param {number} vehicle
   * @param {number} p2
   * @param {any} p3
   * @param {number} p4
   * @param {any} p5
   * @return {void}
   */
global.TaskDisembarkVehicle = function (p0, vehicle, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xa7c6854bb5a4192a', p0, vehicle, p2, p3, _fv(p4), p5);
};

/**
   * _TASK_EMOTE_OUTRO
   *
   * @param {number} ped
   * @return {void}
   */
global.TaskEmoteOutro = function (ped) {
  return Citizen.invokeNative('0xbdfeeb7600bcd938', ped);
};

/**
   * _TASK_EQUIP_HAT
   * _A*
   *
   * @param {number} hatObject
   * @param {number} ped
   * @return {void}
   */
global.TaskEquipHat = function (hatObject, ped) {
  return Citizen.invokeNative('0xaa0af6025160243a', hatObject, ped);
};

/**
   * _TASK_FLEE_FROM_COORD
   * fleeType: see TASK_FLEE_COORD
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @param {any} p11
   * @return {void}
   */
global.TaskFleeFromCoord = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
  return Citizen.invokeNative('0x6879ff208ed87f2a', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
};

/**
   * _TASK_FLEE_FROM_PED
   * fleeType: see TASK_FLEE_COORD
   *
   * @param {number} ped
   * @param {number} fleeFromTarget
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} distance
   * @param {number} p6
   * @param {number} p7
   * @param {number} p8
   * @param {number} targetPed
   * @return {void}
   */
global.TaskFleeFromPed = function (ped, fleeFromTarget, x, y, z, distance, p6, p7, p8, targetPed) {
  return Citizen.invokeNative('0x7b74d8eede9b5727', ped, fleeFromTarget, _fv(x), _fv(y), _fv(z), _fv(distance), p6, p7, _fv(p8), targetPed);
};

/**
   * _TASK_GUARD_ASSIGNED_DEFENSIVE_AREA_2
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.TaskGuardAssignedDefensiveArea_2 = function (ped, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0x1fc9b33976bacd6c', ped, p1, p2, p3, p4, p5, p6, p7);
};

/**
   * _TASK_INTIMIDATED
   *
   * @param {any} p0
   * @param {number} ped
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {boolean}
   */
global.TaskIntimidated = function (p0, ped, p2, p3, p4) {
  return Citizen.invokeNative('0x648b75d44930d6bd', p0, ped, p2, p3, p4, _r);
};

/**
   * _TASK_INTIMIDATED_2
   *
   * @param {number} victim
   * @param {number} attacker
   * @param {number} p2
   * @param {boolean} p3
   * @param {boolean} p4
   * @param {boolean} everyFrame
   * @param {boolean} p6
   * @param {boolean} p7
   * @param {number} flag
   * @return {boolean}
   */
global.TaskIntimidated_2 = function (victim, attacker, p2, p3, p4, everyFrame, p6, p7, flag) {
  return Citizen.invokeNative('0x933acc1a1771a288', victim, attacker, p2, p3, p4, everyFrame, p6, p7, flag, _r);
};

/**
   * _TASK_ITEM_INTERACTION_2
   *
   * @param {number} ped
   * @param {number} propNameGxt
   * @param {number} prop
   * @param {number} propId
   * @param {number} itemInteractionState
   * @param {number} p5
   * @param {any} p6
   * @param {number} p7
   * @return {void}
   */
global.TaskItemInteraction_2 = function (ped, propNameGxt, prop, propId, itemInteractionState, p5, p6, p7) {
  return Citizen.invokeNative('0x72f52aa2d2b172cc', ped, _ch(propNameGxt), prop, _ch(propId), _ch(itemInteractionState), p5, p6, _fv(p7));
};

/**
   * _TASK_ITEM_INTERACTION_3
   * Params: p3, p4, p5, p6: 0, 0, 0, -1.0f in R* Scripts
   *
   * @param {number} ped
   * @param {number} item
   * @param {DataView} guid
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {number} p6
   * @return {void}
   */
global.TaskItemInteraction_3 = function (ped, item, guid, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xd61d5e1ad9876deb', ped, _ch(item), guid, p3, p4, p5, _fv(p6));
};

/**
   * _TASK_JUMP_2
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} entity
   * @return {void}
   */
global.TaskJump_2 = function (ped, x, y, z, entity) {
  return Citizen.invokeNative('0x91083103137d7254', ped, _fv(x), _fv(y), _fv(z), entity);
};

/**
   * _TASK_PATROL_2
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.TaskPatrol_2 = function (p0, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0x964b06c88e4c86db', p0, p1, p2, p3, p4, p5, p6, p7);
};

/**
   * TASK_PERFORM_SEQUENCE_LOCALLY
   * Old name: _TASK_PERFORM_SEQUENCE_2
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.TaskPerformSequenceLocally = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x4fc0af869d6e309d', p0, p1, p2, p3);
};

/**
   * _TASK_PLAY_EMOTE
   * Similar to 0xB31A277C1AC7B7FF but checks if the ped's inventory contains the specified emote kit.
   *
   * @param {number} ped
   * @param {number} emoteType
   * @param {number} playbackMode
   * @param {number} emote
   * @param {boolean} isSecondaryTask
   * @param {boolean} canBreakOut
   * @param {boolean} disableEarlyOutAnimTag
   * @param {boolean} ignoreInvalidMainTask
   * @param {boolean} destroyProps
   * @return {void}
   */
global.TaskPlayEmote = function (ped, emoteType, playbackMode, emote, isSecondaryTask, canBreakOut, disableEarlyOutAnimTag, ignoreInvalidMainTask, destroyProps) {
  return Citizen.invokeNative('0x884e3436cc1f41dd', ped, emoteType, playbackMode, _ch(emote), isSecondaryTask, canBreakOut, disableEarlyOutAnimTag, ignoreInvalidMainTask, destroyProps);
};

/**
   * _TASK_PUT_PED_DIRECTLY_INTO_COVER_FROM_COORDS
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} fromX
   * @param {number} fromY
   * @param {number} fromZ
   * @param {number} timeout
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @param {any} p11
   * @param {any} p12
   * @param {any} p13
   * @param {any} p14
   * @param {any} p15
   * @param {any} p16
   * @param {any} p17
   * @return {void}
   */
global.TaskPutPedDirectlyIntoCoverFromCoords = function (ped, x, y, z, fromX, fromY, fromZ, timeout, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17) {
  return Citizen.invokeNative('0xdf8a5855b9f9a97b', ped, _fv(x), _fv(y), _fv(z), _fv(fromX), _fv(fromY), _fv(fromZ), timeout, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17);
};

/**
   * _TASK_START_SCENARIO_IN_PLACE_2
   * Takes scenario point handle instead of hash
   *
   * @param {number} ped
   * @param {any} p1
   * @param {string | number} p2
   * @param {number} p3
   * @param {boolean} p4
   * @param {number} p5
   * @param {boolean} p6
   * @return {void}
   */
global.TaskStartScenarioInPlace_2 = function (ped, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xa917e39f2cefd215', ped, p1, p2, p3, p4, _fv(p5), p6);
};

/**
   * _TASK_THROW_PROJECTILE_2
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.TaskThrowProjectile_2 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x7282356dff6b5a51', p0, p1, p2, p3);
};

/**
   * _TASK_USE_NEAREST_SCENARIO_TO_COORD
   *
   * @param {number} ped
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} distance
   * @param {number} duration
   * @param {boolean} p6
   * @param {boolean} p7
   * @param {boolean} p8
   * @param {boolean} p9
   * @return {void}
   */
global.TaskUseNearestScenarioToCoord = function (ped, x, y, z, distance, duration, p6, p7, p8, p9) {
  return Citizen.invokeNative('0x322bfdea666e2b0e', ped, _fv(x), _fv(y), _fv(z), _fv(distance), duration, p6, p7, p8, p9);
};

/**
   * _TASK_USE_SCENARIO_POINT_2
   *
   * @param {number} ped
   * @param {number} ped2
   * @param {any} p2
   * @param {string | number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {boolean} p7
   * @return {void}
   */
global.TaskUseScenarioPoint_2 = function (ped, ped2, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0x0f6641449dd86fbe', ped, ped2, p2, p3, p4, _ch(p5), _fv(p6), p7);
};

/**
   * _TASK_VEHICLE_DRIVE_TO_COORD_2
   *
   * @param {number} ped
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @return {void}
   */
global.TaskVehicleDriveToCoord_2 = function (ped, p1, p2, p3, p4, p5, p6, p7, p8) {
  return Citizen.invokeNative('0xf0108f01fb105da2', ped, p1, p2, p3, p4, p5, p6, p7, p8);
};

/**
   * _TASK_VEHICLE_DRIVE_TO_DESTINATION_2
   * Tasks vehicle towards owner
   *
   * @param {number} vehicle
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} speed
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @param {number} p8
   * @return {void}
   */
global.TaskVehicleDriveToDestination_2 = function (vehicle, x, y, z, speed, p5, p6, p7, p8) {
  return Citizen.invokeNative('0x391073b9d3cce2ba', vehicle, _fv(x), _fv(y), _fv(z), _fv(speed), p5, p6, _fv(p7), _fv(p8));
};

/**
   * _TASK_VEHICLE_DRIVE_TO_POINT_2
   * Params: p4 = 3.f or 8.f, p5 = 0.25f, p6 = 0 in R* Scripts
   *
   * @param {number} vehicle
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p4
   * @param {number} p5
   * @param {any} p6
   * @return {void}
   */
global.TaskVehicleDriveToPoint_2 = function (vehicle, x, y, z, p4, p5, p6) {
  return Citizen.invokeNative('0x6524a8981e8be7c9', vehicle, _fv(x), _fv(y), _fv(z), _fv(p4), _fv(p5), p6);
};

/**
   * _TASK_VEHICLE_FLEE_ON_CLEANUP
   * Vehicle Auto Drive (?)
   * p1/p2/p3: usually 1f, 1f, 0f or 0f, 0f, 0f
   * Speed: usually 8f
   * Types: 1148979456 (task with flee), 1148979587 (dismissing the vehicle)
   *
   * @param {number} vehicle
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} speed
   * @param {number} type
   * @return {void}
   */
global.TaskVehicleFleeOnCleanup = function (vehicle, p1, p2, p3, speed, type) {
  return Citizen.invokeNative('0x55cd5fddd4335c1e', vehicle, _fv(p1), _fv(p2), _fv(p3), _fv(speed), _ch(type));
};

/**
   * _TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING_2
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @return {void}
   */
global.TaskVehicleFollowWaypointRecording_2 = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
  return Citizen.invokeNative('0x041d17a9e221ae30', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
};

/**
   * ANALYTICS_PLAYTIME_FREEMODE_END
   *
  
   * @return {void}
   */
global.AnalyticsPlaytimeFreemodeEnd = function () {
  return Citizen.invokeNative('0x3180e991d4b8f248');
};

/**
   * ANALYTICS_PLAYTIME_FREEMODE_START
   *
  
   * @return {void}
   */
global.AnalyticsPlaytimeFreemodeStart = function () {
  return Citizen.invokeNative('0xe9f24081d84931b8');
};

/**
   * TELEMETRY_CAMP_DONATE
   *
   * @param {any} transactionId
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {number} slotId
   * @param {number} p6
   * @param {any} p7
   * @param {boolean} p8
   * @return {void}
   */
global.TelemetryCampDonate = function (transactionId, p1, p2, p3, p4, slotId, p6, p7, p8) {
  return Citizen.invokeNative('0xdf516e598d966d06', transactionId, p1, p2, p3, p4, _ch(slotId), _ch(p6), p7, p8);
};

/**
   * TELEMETRY_PERSONAL_VEHICLE_MOUNT
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.TelemetryPersonalVehicleMount = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xff9052bc7a3b7d33', p0, p1, p2, p3);
};

/**
   * TELEMETRY_PLAYER_MENU_PIN
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.TelemetryPlayerMenuPin = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x076c5843371eb889', p0, p1, p2, p3);
};

/**
   * _0x6F5BC5C4EAB42B15
   * Note: this native was added in build 1491.50
   *
   * @param {number} linkId
   * @param {number} type
   * @param {string | number} contentId
   * @return {void}
   */
global.N_0x6F5BC5C4EAB42B15 = function (linkId, type, contentId) {
  return Citizen.invokeNative('0x6f5bc5c4eab42b15', linkId, type, _ts(contentId));
};

/**
   * _0xEC0BD8736DCAF841
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.N_0xEC0BD8736DCAF841 = function (toggle) {
  return Citizen.invokeNative('0xec0bd8736dcaf841', toggle);
};

/**
   * _CLEAR_TELEMETRY_SHOP_UI
   *
  
   * @return {void}
   */
global.ClearTelemetryShopUi = function () {
  return Citizen.invokeNative('0x32d5898c4898cd95');
};

/**
   * _TELEMETRY_AMBIENT_VIGNETTE
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.TelemetryAmbientVignette = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0x3145044f3990d321', p0, p1, p2, p3, p4, p5, p6);
};

/**
   * _TELEMETRY_ANIMAL_SKINNED
   *
   * @param {number} type
   * @param {DataView} items
   * @return {void}
   */
global.TelemetryAnimalSkinned = function (type, items) {
  return Citizen.invokeNative('0x7581972adf5d699a', _ch(type), items);
};

/**
   * _TELEMETRY_BOUNTY_TARGET
   *
   * @param {DataView} data
   * @return {void}
   */
global.TelemetryBountyTarget = function (data) {
  return Citizen.invokeNative('0x52fa31db8f3ad25d', data);
};

/**
   * _TELEMETRY_CAMP_CREATED
   *
   * @param {any} p0
   * @return {void}
   */
global.TelemetryCampCreated = function (p0) {
  return Citizen.invokeNative('0x565eaa726b2ce3b7', p0);
};

/**
   * _TELEMETRY_CAMP_SUPPLIES
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.TelemetryCampSupplies = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x217f47761376e16e', p0, p1, p2, p3, p4);
};

/**
   * _TELEMETRY_CHAR_CREATOR
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.TelemetryCharCreator = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0x7207ad471bc9278c', p0, p1, p2, p3, p4, p5, p6);
};

/**
   * _TELEMETRY_COLLECT
   *
   * @param {any} transactionId
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.TelemetryCollect = function (transactionId, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xd6cb05ddaee43afd', transactionId, p1, p2, p3, p4, p5, p6);
};

/**
   * _TELEMETRY_COUPON
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.TelemetryCoupon = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x621d719c4836292b', p0, p1, p2, p3, p4, p5);
};

/**
   * _TELEMETRY_CRAFT_ITEM
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} quantity
   * @return {void}
   */
global.TelemetryCraftItem = function (p0, p1, p2, quantity) {
  return Citizen.invokeNative('0x78c2e029db205a3a', p0, p1, p2, quantity);
};

/**
   * _TELEMETRY_CREATE_UUID
   * Works in MP only.
   *
   * @param {DataView} uuid
   * @return {boolean}
   */
global.TelemetryCreateUuid = function (uuid) {
  return Citizen.invokeNative('0xe692d336f8a2a97f', uuid, _r);
};

/**
   * _TELEMETRY_CUSTOM
   *
   * @param {DataView} args
   * @return {void}
   */
global.TelemetryCustom = function (args) {
  return Citizen.invokeNative('0x40914ccf2a1ab531', args);
};

/**
   * _TELEMETRY_DEFENSIVE
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.TelemetryDefensive = function (p0, p1, p2) {
  return Citizen.invokeNative('0xe57529d23541d2dd', p0, p1, p2);
};

/**
   * _TELEMETRY_DISCOVERABLE
   *
   * @param {any} p0
   * @return {void}
   */
global.TelemetryDiscoverable = function (p0) {
  return Citizen.invokeNative('0xf5ead898ef387e73', p0);
};

/**
   * _TELEMETRY_EMOTE_ADD_CATEGORY_TO_SAVE
   *
   * @param {any} p0
   * @param {any} p1
   * @param {number} emote
   * @return {void}
   */
global.TelemetryEmoteAddCategoryToSave = function (p0, p1, emote) {
  return Citizen.invokeNative('0x2c24af8eeeef8a55', p0, p1, _ch(emote));
};

/**
   * _TELEMETRY_FAST_TRAVEL
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.TelemetryFastTravel = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x7cef4ac79f7e7fad', p0, p1, p2, p3, p4);
};

/**
   * _TELEMETRY_FAVOR_EMOTE
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.TelemetryFavorEmote = function (p0, p1, p2) {
  return Citizen.invokeNative('0x16b23d4f7a1f50d9', p0, p1, p2);
};

/**
   * _TELEMETRY_GAME_PROGRESS
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.TelemetryGameProgress = function (p0, p1) {
  return Citizen.invokeNative('0x51ec204a6e5b5a1a', p0, p1);
};

/**
   * _TELEMETRY_GANG_SHARES
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.TelemetryGangShares = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xe6dc9b21ac7a8729', p0, p1, p2, p3);
};

/**
   * _TELEMETRY_GOLD_STORE
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.TelemetryGoldStore = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x536b6025e94ac48f', p0, p1, p2, p3);
};

/**
   * _TELEMETRY_GUN_LOCKER
   *
  
   * @return {void}
   */
global.TelemetryGunLocker = function () {
  return Citizen.invokeNative('0x415fe28ed44bff14');
};

/**
   * _TELEMETRY_GUN_LOCKER_WEAPON_REMOVED
   *
   * @param {number} p0
   * @return {void}
   */
global.TelemetryGunLockerWeaponRemoved = function (p0) {
  return Citizen.invokeNative('0x317d9c9560529cc2', _ch(p0));
};

/**
   * _TELEMETRY_GUN_LOCKER_WEAPON_STORED
   *
   * @param {number} p0
   * @return {void}
   */
global.TelemetryGunLockerWeaponStored = function (p0) {
  return Citizen.invokeNative('0xc3adf4880784fa9c', _ch(p0));
};

/**
   * _TELEMETRY_HERB_PICKED
   *
   * @param {number} herbType
   * @return {void}
   */
global.TelemetryHerbPicked = function (herbType) {
  return Citizen.invokeNative('0xae693ec3a178f6c2', _ch(herbType));
};

/**
   * _TELEMETRY_HONOR
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.TelemetryHonor = function (p0, p1) {
  return Citizen.invokeNative('0xe6b763c7f4902201', p0, p1);
};

/**
   * _TELEMETRY_HUB_NAVIGATION
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.TelemetryHubNavigation = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x25cc50ec1a6f3a96', p0, p1, p2, p3);
};

/**
   * _TELEMETRY_HUB_OFFERS
   *
   * @param {any} couponItem
   * @param {any} p1
   * @return {void}
   */
global.TelemetryHubOffers = function (couponItem, p1) {
  return Citizen.invokeNative('0x37aa282163b0d2c4', couponItem, p1);
};

/**
   * _TELEMETRY_INTRO_SKIP
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.TelemetryIntroSkip = function (p0, p1, p2) {
  return Citizen.invokeNative('0x1b554723799245f4', p0, p1, p2);
};

/**
   * _TELEMETRY_LOBBY_PROGRESSION
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.TelemetryLobbyProgression = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xecd67e9fa677cccf', p0, p1, p2, p3);
};

/**
   * _TELEMETRY_LOOT
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.TelemetryLoot = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xcf63ef77b0df0397', p0, p1, p2, p3);
};

/**
   * _TELEMETRY_MATCH_NOMINATION
   *
   * @param {DataView} args
   * @return {void}
   */
global.TelemetryMatchNomination = function (args) {
  return Citizen.invokeNative('0x330029e121380ceb', args);
};

/**
   * _TELEMETRY_MATCH_OVER
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.TelemetryMatchOver = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xa2058154357726bb', p0, p1, p2, p3, p4);
};

/**
   * _TELEMETRY_MATCH_QUEUE
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.TelemetryMatchQueue = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0x4c08d2b6d8be17e4', p0, p1, p2, p3, p4, p5, p6);
};

/**
   * _TELEMETRY_MATCH_STARTED
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @return {void}
   */
global.TelemetryMatchStarted = function (p0, p1) {
  return Citizen.invokeNative('0xf620f47b4f4a78c4', p0, p1);
};

/**
   * _TELEMETRY_MATCH_VOTE
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @return {void}
   */
global.TelemetryMatchVote = function (p0, p1) {
  return Citizen.invokeNative('0xef3c68f56bad7b69', p0, p1);
};

/**
   * _TELEMETRY_MENU_NAVIGATION
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.TelemetryMenuNavigation = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x3255d4d2082c6339', p0, p1, p2, p3);
};

/**
   * _TELEMETRY_MISSION_CHECKPOINT
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.TelemetryMissionCheckpoint = function (p0, p1, p2) {
  return Citizen.invokeNative('0x8ec7890d446bd9c1', p0, p1, p2);
};

/**
   * _TELEMETRY_MISSION_FAILED_TO_LAUNCH
   * _TELEMETRY_C* - _TELEMETRY_G*
   *
   * @param {any} p0
   * @param {any} p1
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} reason
   * @return {void}
   */
global.TelemetryMissionFailedToLaunch = function (p0, p1, x, y, z, reason) {
  return Citizen.invokeNative('0x6571e4327390ec0b', p0, p1, _fv(x), _fv(y), _fv(z), reason);
};

/**
   * _TELEMETRY_MISSION_ILO_OPTION
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.TelemetryMissionIloOption = function (p0, p1) {
  return Citizen.invokeNative('0xea323f5e1a4da2f1', p0, p1);
};

/**
   * _TELEMETRY_MISSION_OVER
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.TelemetryMissionOver = function (p0, p1) {
  return Citizen.invokeNative('0xd894437e12c17aec', p0, p1);
};

/**
   * _TELEMETRY_MISSION_STARTED
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.TelemetryMissionStarted = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x15b0cc1b36f1de29', p0, p1, p2, p3);
};

/**
   * _TELEMETRY_MOONSHINE_BREW
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @return {void}
   */
global.TelemetryMoonshineBrew = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
  return Citizen.invokeNative('0xb5013efbb5516867', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
};

/**
   * _TELEMETRY_NET_CAMP
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.TelemetryNetCamp = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xa72773c3134f9a57', p0, p1, p2, p3, p4, p5, p6);
};

/**
   * _TELEMETRY_NOTORIETY
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.TelemetryNotoriety = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xe26970a7ae0f28e9', p0, p1, p2, p3);
};

/**
   * _TELEMETRY_PARLEY_FEUD
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.TelemetryParleyFeud = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xf37a2149bc9a8a27', p0, p1, p2, p3, p4);
};

/**
   * _TELEMETRY_PERSONAL_VEHICLE_WAGON
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.TelemetryPersonalVehicleWagon = function (p0, p1, p2) {
  return Citizen.invokeNative('0xe67af24c5a3b6058', p0, p1, p2);
};

/**
   * _TELEMETRY_PHOTO
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.TelemetryPhoto = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xed22be4c5a399e63', p0, p1, p2, p3);
};

/**
   * _TELEMETRY_PHOTO_CAM
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @return {void}
   */
global.TelemetryPhotoCam = function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
  return Citizen.invokeNative('0x0777d65ee8a17517', p0, p1, p2, p3, p4, p5, p6, p7, p8);
};

/**
   * _TELEMETRY_PLAYER_SPAWNED
   *
   * @param {number} ped
   * @return {void}
   */
global.TelemetryPlayerSpawned = function (ped) {
  return Citizen.invokeNative('0x5da4718df897eb25', ped);
};

/**
   * _TELEMETRY_POKER_OVER
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @return {void}
   */
global.TelemetryPokerOver = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
  return Citizen.invokeNative('0x8127c5aa05c5a210', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
};

/**
   * _TELEMETRY_PRISON
   *
   * @param {any} transactionId
   * @param {any} bountyAmount
   * @param {number} ped
   * @param {any} completionType
   * @param {any} jailTimeServed
   * @param {any} jailTimeLeft
   * @param {any} posseRole
   * @return {void}
   */
global.TelemetryPrison = function (transactionId, bountyAmount, ped, completionType, jailTimeServed, jailTimeLeft, posseRole) {
  return Citizen.invokeNative('0xb204bf9f30298d77', transactionId, bountyAmount, ped, completionType, jailTimeServed, jailTimeLeft, posseRole);
};

/**
   * _TELEMETRY_REGION
   *
   * @param {number} regionHash
   * @return {void}
   */
global.TelemetryRegion = function (regionHash) {
  return Citizen.invokeNative('0xcd6f8a0335d821f9', _ch(regionHash));
};

/**
   * _TELEMETRY_ROLE_BOUNTY
   *
   * @param {any} p0
   * @return {void}
   */
global.TelemetryRoleBounty = function (p0) {
  return Citizen.invokeNative('0xab43d1c80b5e9500', p0);
};

/**
   * _TELEMETRY_ROLE_COLLECTOR
   *
   * @param {any} transactionId
   * @param {any} collectible
   * @param {any} category
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.TelemetryRoleCollector = function (transactionId, collectible, category, p3, p4, p5, p6) {
  return Citizen.invokeNative('0x4ac38dfd286dad14', transactionId, collectible, category, p3, p4, p5, p6);
};

/**
   * _TELEMETRY_ROLE_MOONSHINER
   *
   * @param {any} p0
   * @param {any} transactionId
   * @return {void}
   */
global.TelemetryRoleMoonshiner = function (p0, transactionId) {
  return Citizen.invokeNative('0x99d40c5d74bc88e9', p0, transactionId);
};

/**
   * _TELEMETRY_ROLE_NATURALIST
   *
   * @param {any} transactionId
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @return {void}
   */
global.TelemetryRoleNaturalist = function (transactionId, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
  return Citizen.invokeNative('0x6fb9ea308f302922', transactionId, p1, p2, p3, p4, p5, p6, p7, p8, p9);
};

/**
   * _TELEMETRY_ROLE_TOKEN_TRANSACTION
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.TelemetryRoleTokenTransaction = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x32c2939564d74bff', p0, p1, p2, p3, p4, p5);
};

/**
   * _TELEMETRY_ROLE_TRADER
   *
   * @param {any} p0
   * @param {any} transactionId
   * @return {void}
   */
global.TelemetryRoleTrader = function (p0, transactionId) {
  return Citizen.invokeNative('0x476038b5a0734c10', p0, transactionId);
};

/**
   * _TELEMETRY_RPG_GLOBAL_CALCULATE_ATTRIBUTE_CORE_DELTA
   * Creation of the metric is related to attribute filling, i. e. at camp fires, when the ped is resting.
   * _TELEMETRY_C* - _TELEMETRY_P*
   *
  
   * @return {void}
   */
global.TelemetryRpgGlobalCalculateAttributeCoreDelta = function () {
  return Citizen.invokeNative('0x7e002a36aefcfb55');
};

/**
   * _TELEMETRY_SAMPLE
   *
   * @param {any} transactionId
   * @param {any} animal
   * @param {any} p2
   * @param {any} bSampled
   * @param {boolean} bTranq
   * @return {void}
   */
global.TelemetrySample = function (transactionId, animal, p2, bSampled, bTranq) {
  return Citizen.invokeNative('0x61559675d23d8bd1', transactionId, animal, p2, bSampled, bTranq);
};

/**
   * _TELEMETRY_SET_IS_FLOW
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.TelemetrySetIsFlow = function (toggle) {
  return Citizen.invokeNative('0x9bee018a63fffad9', toggle);
};

/**
   * _TELEMETRY_SET_SHOP_FOR_TRANSACTION
   *
   * @param {number} transactionId
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.TelemetrySetShopForTransaction = function (transactionId, p1, p2) {
  return Citizen.invokeNative('0xca9e42f437625a85', transactionId, _ch(p1), _ch(p2));
};

/**
   * _TELEMETRY_SHOP_CUTSCENE
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.TelemetryShopCutscene = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xb0b19b56697836f5', p0, p1, p2, p3);
};

/**
   * _TELEMETRY_SHOP_ENTRY
   *
   * @param {any} shopType
   * @param {any} shopRegion
   * @param {any} region
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.TelemetryShopEntry = function (shopType, shopRegion, region, p3, p4, p5) {
  return Citizen.invokeNative('0x775b2ed944e44973', shopType, shopRegion, region, p3, p4, p5);
};

/**
   * _TELEMETRY_SHOP_EXIT
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.TelemetryShopExit = function (p0, p1) {
  return Citizen.invokeNative('0xf78e669fdc202e73', p0, p1);
};

/**
   * _TELEMETRY_SHOP_PURCHASE
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.TelemetryShopPurchase = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x2a374e6f0075ee81', p0, p1, p2, p3, p4);
};

/**
   * _TELEMETRY_SHOP_SELL
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {number} centSalePrice
   * @return {void}
   */
global.TelemetryShopSell = function (p0, p1, p2, p3, centSalePrice) {
  return Citizen.invokeNative('0x9bd8a9d0a774a6f8', p0, p1, p2, p3, centSalePrice);
};

/**
   * _TELEMETRY_SLEEP
   *
   * @param {any} p0
   * @return {void}
   */
global.TelemetrySleep = function (p0) {
  return Citizen.invokeNative('0xf9f14080d80937bd', p0);
};

/**
   * _TELEMETRY_START_GUN_LOCKER_INTERACTION
   *
  
   * @return {void}
   */
global.TelemetryStartGunLockerInteraction = function () {
  return Citizen.invokeNative('0xf0d54e0651dd7e07');
};

/**
   * _TELEMETRY_TRIGGER_TRANSACTION_REQUEST
   * Returns false when transaction request is failing
   *
   * @param {DataView} requestId
   * @param {DataView} transactionId
   * @return {boolean}
   */
global.TelemetryTriggerTransactionRequest = function (requestId, transactionId) {
  return Citizen.invokeNative('0x80a02d9f948a8bca', requestId, transactionId, _r);
};

/**
   * _TRY_GET_TELEMETRY_ID_FROM_TRANSACTION_ID
   *
   * @param {DataView} transactionId
   * @param {DataView} requestId
   * @return {boolean}
   */
global.TryGetTelemetryIdFromTransactionId = function (transactionId, requestId) {
  return Citizen.invokeNative('0xf184b3ece36219cf', transactionId, requestId, _r);
};

/**
   * DOES_STREAMED_TEXTURE_DICT_EXIST
   *
   * @param {string | number} textureDict
   * @return {boolean}
   */
global.DoesStreamedTextureDictExist = function (textureDict) {
  return Citizen.invokeNative('0x7332461fc59eb7ec', textureDict, _r);
};

/**
   * DOES_STREAMED_TXD_EXIST
   *
   * @param {number} txdHash
   * @return {boolean}
   */
global.DoesStreamedTxdExist = function (txdHash) {
  return Citizen.invokeNative('0xba0163b277c2d2d0', _ch(txdHash), _r);
};

/**
   * HAS_STREAMED_TEXTURE_DICT_LOADED
   *
   * @param {string | number} textureDict
   * @return {boolean}
   */
global.HasStreamedTextureDictLoaded = function (textureDict) {
  return Citizen.invokeNative('0x54d6900929ccf162', textureDict, _r);
};

/**
   * HAS_STREAMED_TXD_LOADED
   *
   * @param {number} txdHash
   * @return {boolean}
   */
global.HasStreamedTxdLoaded = function (txdHash) {
  return Citizen.invokeNative('0xbe72591d1509ffe4', _ch(txdHash), _r);
};

/**
   * REQUEST_STREAMED_TEXTURE_DICT
   *
   * @param {string | number} textureDict
   * @param {boolean} p1
   * @return {void}
   */
global.RequestStreamedTextureDict = function (textureDict, p1) {
  return Citizen.invokeNative('0xc1ba29df5631b0f8', textureDict, p1);
};

/**
   * REQUEST_STREAMED_TXD
   *
   * @param {number} txdHash
   * @param {boolean} p1
   * @return {void}
   */
global.RequestStreamedTxd = function (txdHash, p1) {
  return Citizen.invokeNative('0xdb1bd07fb464584d', _ch(txdHash), p1);
};

/**
   * SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED
   *
   * @param {string | number} textureDict
   * @return {void}
   */
global.SetStreamedTextureDictAsNoLongerNeeded = function (textureDict) {
  return Citizen.invokeNative('0x4aca10a91f66f1e2', textureDict);
};

/**
   * SET_STREAMED_TXD_AS_NO_LONGER_NEEDED
   *
   * @param {number} txdHash
   * @return {void}
   */
global.SetStreamedTxdAsNoLongerNeeded = function (txdHash) {
  return Citizen.invokeNative('0x8232f37df762acb2', _ch(txdHash));
};

/**
   * CAN_LAUNCH_UIAPP_BY_HASH
   *
   * @param {number} appNameHash
   * @return {boolean}
   */
global.CanLaunchUiappByHash = function (appNameHash) {
  return Citizen.invokeNative('0xe555ec27d65ede80', _ch(appNameHash), _r);
};

/**
   * CAN_LAUNCH_UIAPP_BY_HASH_WITH_ENTRY
   *
   * @param {number} appNameHash
   * @param {number} entryHash
   * @return {boolean}
   */
global.CanLaunchUiappByHashWithEntry = function (appNameHash, entryHash) {
  return Citizen.invokeNative('0x16f47d434b6086bf', _ch(appNameHash), _ch(entryHash), _r);
};

/**
   * IS_ANY_UIAPP_ACTIVE
   *
  
   * @return {boolean}
   */
global.IsAnyUiappActive = function () {
  return Citizen.invokeNative('0xac959ab99aaf3d9f', _r);
};

/**
   * IS_ANY_UIAPP_RUNNING
   *
  
   * @return {boolean}
   */
global.IsAnyUiappRunning = function () {
  return Citizen.invokeNative('0xdb30bec7a7a5cbd3', _r);
};

/**
   * IS_UIAPP_ACTIVE_BY_HASH
   *
   * @param {number} appNameHash
   * @return {boolean}
   */
global.IsUiappActiveByHash = function (appNameHash) {
  return Citizen.invokeNative('0x25b7a0206bdfac76', _ch(appNameHash), _r);
};

/**
   * IS_UIAPP_RUNNING
   *
   * @param {string | number} appName
   * @return {boolean}
   */
global.IsUiappRunning = function (appName) {
  return Citizen.invokeNative('0xde4a9b35d028979f', appName, _r);
};

/**
   * IS_UIAPP_RUNNING_BY_HASH
   *
   * @param {number} appNameHash
   * @return {boolean}
   */
global.IsUiappRunningByHash = function (appNameHash) {
  return Citizen.invokeNative('0x4e511d093a86ad49', _ch(appNameHash), _r);
};

/**
   * IS_UIAPP_TRANSITIONING_BY_HASH
   *
   * @param {number} appNameHash
   * @return {boolean}
   */
global.IsUiappTransitioningByHash = function (appNameHash) {
  return Citizen.invokeNative('0x42095b886d30de66', _ch(appNameHash), _r);
};

/**
   * LAUNCH_UIAPP_BY_HASH
   *
   * @param {number} appNameHash
   * @return {number}
   */
global.LaunchUiappByHash = function (appNameHash) {
  return Citizen.invokeNative('0xc8fc7f4e4cf4f581', _ch(appNameHash), _r, _ri);
};

/**
   * LAUNCH_UIAPP_BY_HASH_WITH_ENTRY
   *
   * @param {number} appNameHash
   * @param {number} entryHash
   * @return {number}
   */
global.LaunchUiappByHashWithEntry = function (appNameHash, entryHash) {
  return Citizen.invokeNative('0xc1bcf31e975b3195', _ch(appNameHash), _ch(entryHash), _r, _ri);
};

/**
   * LAUNCH_UIAPP_WITH_ENTRY
   *
   * @param {string | number} appName
   * @param {string | number} entry
   * @return {number}
   */
global.LaunchUiappWithEntry = function (appName, entry) {
  return Citizen.invokeNative('0x7b2027bac5c8ec89', appName, entry, _r, _ri);
};

/**
   * REQUEST_UIAPP_TRANSITION_BY_HASH
   *
   * @param {number} appNameHash
   * @param {number} transitionHash
   * @return {boolean}
   */
global.RequestUiappTransitionByHash = function (appNameHash, transitionHash) {
  return Citizen.invokeNative('0x7689cd255655bfd7', _ch(appNameHash), _ch(transitionHash), _r);
};

/**
   * _CLOSE_ALL_UIAPPS
   *
  
   * @return {void}
   */
global.CloseAllUiapps = function () {
  return Citizen.invokeNative('0xad7b70f7230c5a12');
};

/**
   * _CLOSE_ALL_UIAPPS_IMMEDIATE
   *
  
   * @return {void}
   */
global.CloseAllUiappsImmediate = function () {
  return Citizen.invokeNative('0x12769eeb8dbd7a7b');
};

/**
   * _CLOSE_UIAPP
   *
   * @param {string | number} appName
   * @return {void}
   */
global.CloseUiapp = function (appName) {
  return Citizen.invokeNative('0x818c6ca9b659e8ec', appName);
};

/**
   * _CLOSE_UIAPP_BY_HASH
   *
   * @param {number} appNameHash
   * @return {void}
   */
global.CloseUiappByHash = function (appNameHash) {
  return Citizen.invokeNative('0x2ff10c9c3f92277e', _ch(appNameHash));
};

/**
   * _CLOSE_UIAPP_BY_HASH_IMMEDIATE
   *
   * @param {number} appNameHash
   * @return {void}
   */
global.CloseUiappByHashImmediate = function (appNameHash) {
  return Citizen.invokeNative('0x04428420a248a354', _ch(appNameHash));
};

/**
   * _CLOSE_UIAPP_IMMEDIATE
   *
   * @param {string | number} appName
   * @return {void}
   */
global.CloseUiappImmediate = function (appName) {
  return Citizen.invokeNative('0x3015635426d1b17c', appName);
};

/**
   * _GET_UIAPP_CURRENT_ACTIVITY_BY_HASH
   *
   * @param {number} appNameHash
   * @return {number}
   */
global.GetUiappCurrentActivityByHash = function (appNameHash) {
  return Citizen.invokeNative('0x96fd694fe5be55dc', _ch(appNameHash), _r, _ri);
};

/**
   * _BG_DISPLAY_TEXT
   * Note: you must use VAR_STRING
   *
   * @param {string | number} text
   * @param {number} x
   * @param {number} y
   * @return {void}
   */
global.BgDisplayText = function (text, x, y) {
  return Citizen.invokeNative('0x16794e044c9efb58', text, _fv(x), _fv(y));
};

/**
   * _BG_SET_TEXT_COLOR
   * https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/colours
   *
   * @param {number} red
   * @param {number} green
   * @param {number} blue
   * @param {number} alpha
   * @return {void}
   */
global.BgSetTextColor = function (red, green, blue, alpha) {
  return Citizen.invokeNative('0x16fa5ce47f184f1e', red, green, blue, alpha);
};

/**
   * _BG_SET_TEXT_SCALE
   *
   * @param {number} scaleX
   * @param {number} scaleY
   * @return {void}
   */
global.BgSetTextScale = function (scaleX, scaleY) {
  return Citizen.invokeNative('0xa1253a3c870b6843', _fv(scaleX), _fv(scaleY));
};

/**
   * EVENTS_UI_GET_MESSAGE
   * eventData:
   * struct UI_SCRIPT_EVENT
   * {
   *   alignas(8) eUIScriptEventType eventType; // https://alloc8or.re/rdr3/doc/enums/eUIScriptEventType.txt
   *   alignas(8) int intParam;
   *   alignas(8) Hash hashParam;
   *   alignas(8) Hash datastoreParam;
   * };
   * 
   * Old name: _EVENT_MANAGER_GET_EVENT
   *
   * @param {number} hash
   * @param {DataView} eventData
   * @return {boolean}
   */
global.EventsUiGetMessage = function (hash, eventData) {
  return Citizen.invokeNative('0xe24e957294241444', _ch(hash), eventData, _r);
};

/**
   * EVENTS_UI_IS_PENDING
   * Old name: _EVENT_MANAGER_IS_EVENT_PENDING
   *
   * @param {number} hash
   * @return {boolean}
   */
global.EventsUiIsPending = function (hash) {
  return Citizen.invokeNative('0x67ed5a7963f2f722', _ch(hash), _r);
};

/**
   * EVENTS_UI_PEEK_MESSAGE
   * eventData: see EVENTS_UI_GET_MESSAGE
   * 
   * Old name: _EVENT_MANAGER_PEEK_EVENT
   *
   * @param {number} hash
   * @param {DataView} eventData
   * @return {boolean}
   */
global.EventsUiPeekMessage = function (hash, eventData) {
  return Citizen.invokeNative('0x90237103f27f7937', _ch(hash), eventData, _r);
};

/**
   * EVENTS_UI_POP_MESSAGE
   * Old name: _EVENT_MANAGER_POP_EVENT
   *
   * @param {number} hash
   * @return {void}
   */
global.EventsUiPopMessage = function (hash) {
  return Citizen.invokeNative('0x8e8a2369f48ec839', _ch(hash));
};

/**
   * UI_FEED_CLEAR_CHANNEL
   * feedChannel: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIFeedChannel
   *
   * @param {number} feedChannel
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {void}
   */
global.UiFeedClearChannel = function (feedChannel, p1, p2) {
  return Citizen.invokeNative('0xdd1232b332cbb9e7', feedChannel, p1, p2);
};

/**
   * UI_FEED_GET_CURRENT_MESSAGE
   * feedChannel: see UI_FEED_CLEAR_CHANNEL
   * Returns feedMessage
   *
   * @param {number} feedChannel
   * @return {number}
   */
global.UiFeedGetCurrentMessage = function (feedChannel) {
  return Citizen.invokeNative('0xc17f69e1418cd11f', feedChannel, _r, _ri);
};

/**
   * _0x0FD07141AD048AAE
   * Only used in R* SP Script beat_animal_attack
   * Returns feedMessage
   *
   * @param {DataView} p0
   * @param {boolean} p1
   * @return {number}
   */
global.N_0x0FD07141AD048AAE = function (p0, p1) {
  return Citizen.invokeNative('0x0fd07141ad048aae', p0, p1, _r, _ri);
};

/**
   * _0x18D6869FBFFEC0F8
   * Only used in R* SP Scripts
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {boolean} p2
   * @param {boolean} p3
   * @return {number}
   */
global.N_0x18D6869FBFFEC0F8 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x18d6869fbffec0f8', p0, p1, p2, p3, _r, _ri);
};

/**
   * _0x4E88A65968A55C78
   * Returns feedMessage
   *
   * @param {DataView} p0
   * @param {boolean} p1
   * @return {number}
   */
global.N_0x4E88A65968A55C78 = function (p0, p1) {
  return Citizen.invokeNative('0x4e88a65968a55c78', p0, p1, _r, _ri);
};

/**
   * _0x6D85126F6CCF02C9
   *
   * @param {number} feedChannel
   * @param {number} p1
   * @param {boolean} p2
   * @return {void}
   */
global.N_0x6D85126F6CCF02C9 = function (feedChannel, p1, p2) {
  return Citizen.invokeNative('0x6d85126f6ccf02c9', feedChannel, p1, p2);
};

/**
   * _0xAFF5BE9BA496CE40
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {boolean} p2
   * @param {boolean} p3
   * @param {number} collectableCategory
   * @return {number}
   */
global.N_0xAFF5BE9BA496CE40 = function (p0, p1, p2, p3, collectableCategory) {
  return Citizen.invokeNative('0xaff5be9ba496ce40', p0, p1, p2, p3, _ch(collectableCategory), _r, _ri);
};

/**
   * _0xB7223B91CD6B7E07
   *
   * @param {number} feedChannel
   * @return {boolean}
   */
global.N_0xB7223B91CD6B7E07 = function (feedChannel) {
  return Citizen.invokeNative('0xb7223b91cd6b7e07', feedChannel, _r);
};

/**
   * _UI_FEED_CLEAR_ALL_CHANNELS
   * Hides Toast Notifications
   *
  
   * @return {void}
   */
global.UiFeedClearAllChannels = function () {
  return Citizen.invokeNative('0x6035e8fbca32ac5e');
};

/**
   * _UI_FEED_CLEAR_HELP_TEXT_FEED
   * Clears help text
   *
   * @param {number} feedMessage
   * @param {boolean} p1
   * @return {void}
   */
global.UiFeedClearHelpTextFeed = function (feedMessage, p1) {
  return Citizen.invokeNative('0x2f901291ef177b02', feedMessage, p1);
};

/**
   * _UI_FEED_GET_MESSAGE_STATE
   * Returns messageState, see https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIMessageState
   *
   * @param {number} feedMessage
   * @return {number}
   */
global.UiFeedGetMessageState = function (feedMessage) {
  return Citizen.invokeNative('0x59fa676177dbe4c9', feedMessage, _r, _ri);
};

/**
   * _UI_FEED_POST_FEED_TICKER
   * Display text on right of the screen, Example : https://pastebin.com/n1YmNe25
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {boolean} p2
   * @return {number}
   */
global.UiFeedPostFeedTicker = function (p0, p1, p2) {
  return Citizen.invokeNative('0xb2920b9760f0f36b', p0, p1, p2, _r, _ri);
};

/**
   * _UI_FEED_POST_GAME_UPDATE_SHARD
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {boolean} p2
   * @return {number}
   */
global.UiFeedPostGameUpdateShard = function (p0, p1, p2) {
  return Citizen.invokeNative('0x8d1249bd28791878', p0, p1, p2, _r, _ri);
};

/**
   * _UI_FEED_POST_HELP_TEXT
   * Example : https://pastebin.com/GvdBp8Dh
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {boolean} p2
   * @return {number}
   */
global.UiFeedPostHelpText = function (p0, p1, p2) {
  return Citizen.invokeNative('0x049d5c615bd38bad', p0, p1, p2, _r, _ri);
};

/**
   * _UI_FEED_POST_LOCATION_SHARD
   * Example : https://pastebin.com/h1YzycuR
   *
   * @param {DataView} duration
   * @param {DataView} data
   * @param {boolean} p2
   * @param {boolean} p3
   * @return {number}
   */
global.UiFeedPostLocationShard = function (duration, data, p2, p3) {
  return Citizen.invokeNative('0xd05590c1ab38f068', duration, data, p2, p3, _r, _ri);
};

/**
   * _UI_FEED_POST_MISSION_NAME
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {boolean} p2
   * @return {number}
   */
global.UiFeedPostMissionName = function (p0, p1, p2) {
  return Citizen.invokeNative('0x2024f4f333095fb1', p0, p1, p2, _r, _ri);
};

/**
   * _UI_FEED_POST_OBJECTIVE
   * Example : https://pastebin.com/13tuRa63
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {boolean} p2
   * @return {number}
   */
global.UiFeedPostObjective = function (p0, p1, p2) {
  return Citizen.invokeNative('0xcedbf17efcc0e4a4', p0, p1, p2, _r, _ri);
};

/**
   * _UI_FEED_POST_ONE_TEXT_SHARD
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {boolean} p2
   * @return {number}
   */
global.UiFeedPostOneTextShard = function (p0, p1, p2) {
  return Citizen.invokeNative('0x860ddfe97cc94df0', p0, p1, p2, _r, _ri);
};

/**
   * _UI_FEED_POST_RANKUP_TOAST
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {number} p2
   * @param {number} p3
   * @return {number}
   */
global.UiFeedPostRankupToast = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x3f9fddba79117c69', p0, p1, p2, p3, _r, _ri);
};

/**
   * _UI_FEED_POST_RETICLE_MESSAGE
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {boolean} p2
   * @return {number}
   */
global.UiFeedPostReticleMessage = function (p0, p1, p2) {
  return Citizen.invokeNative('0x893128cdb4b81fbb', p0, p1, p2, _r, _ri);
};

/**
   * _UI_FEED_POST_SAMPLE_NOTIFICATION
   * Example : https://pastebin.com/kAtEMQTD
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {number} p2
   * @param {number} p3
   * @return {number}
   */
global.UiFeedPostSampleNotification = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xc927890aa64e9661', p0, p1, p2, p3, _r, _ri);
};

/**
   * _UI_FEED_POST_SAMPLE_TOAST
   * Example : https://pastebin.com/YZMBkAmW
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {boolean} p2
   * @param {boolean} p3
   * @return {number}
   */
global.UiFeedPostSampleToast = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x26e87218390e6729', p0, p1, p2, p3, _r, _ri);
};

/**
   * _UI_FEED_POST_SAMPLE_TOAST_RIGHT
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {boolean} p2
   * @return {number}
   */
global.UiFeedPostSampleToastRight = function (p0, p1, p2) {
  return Citizen.invokeNative('0xb249ebcb30dd88e0', p0, p1, p2, _r, _ri);
};

/**
   * _UI_FEED_POST_SAMPLE_TOAST_WITH_APP_LINK
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {boolean} p2
   * @param {boolean} p3
   * @param {boolean} p4
   * @return {number}
   */
global.UiFeedPostSampleToastWithAppLink = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x38838a646fb30aae', p0, p1, p2, p3, p4, _r, _ri);
};

/**
   * _UI_FEED_POST_THREE_TEXT_SHARD
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {boolean} p2
   * @param {boolean} p3
   * @param {boolean} p4
   * @return {number}
   */
global.UiFeedPostThreeTextShard = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x02bcc0fe9eba3529', p0, p1, p2, p3, p4, _r, _ri);
};

/**
   * _UI_FEED_POST_TWO_TEXT_SHARD
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {boolean} p2
   * @param {boolean} p3
   * @return {number}
   */
global.UiFeedPostTwoTextShard = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xa6f4216ab10eb08e', p0, p1, p2, p3, _r, _ri);
};

/**
   * _UI_FEED_POST_VOICE_CHAT_FEED
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {boolean} p2
   * @return {number}
   */
global.UiFeedPostVoiceChatFeed = function (p0, p1, p2) {
  return Citizen.invokeNative('0xc48152bc6b3e821c', p0, p1, p2, _r, _ri);
};

/**
   * _0x2A4765812202E671
   *
  
   * @return {any}
   */
global.N_0x2A4765812202E671 = function () {
  return Citizen.invokeNative('0x2a4765812202e671', _r);
};

/**
   * _0x763637F9B838B0A7
   *
   * @param {number} p0
   * @param {number} p1
   * @param {string | number} p2
   * @return {void}
   */
global.N_0x763637F9B838B0A7 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x763637f9b838b0a7', p0, _ch(p1), _ts(p2));
};

/**
   * _0xA20398536B7F1134
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.N_0xA20398536B7F1134 = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xa20398536b7f1134', p0, p1, p2, p3, p4, p5);
};

/**
   * _0xA49D6D503E3EA847
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0xA49D6D503E3EA847 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xa49d6d503e3ea847', p0, p1, p2, p3, p4);
};

/**
   * _0xDA0A30153FCC0FFD
   *
  
   * @return {void}
   */
global.N_0xDA0A30153FCC0FFD = function () {
  return Citizen.invokeNative('0xda0a30153fcc0ffd');
};

/**
   * _UILOG_ADD_ENTRY_HASH
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} p5
   * @param {number} p6
   * @param {any} p7
   * @return {void}
   */
global.UilogAddEntryHash = function (p0, p1, x, y, z, p5, p6, p7) {
  return Citizen.invokeNative('0x69d5479982355d8f', p0, p1, _fv(x), _fv(y), _fv(z), _ch(p5), _ch(p6), p7);
};

/**
   * _UILOG_ADD_ITEM_TO_TASK_LIST
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @return {void}
   */
global.UilogAddItemToTaskList = function (p0, p1, p2, p3, p4, p5, p6, p7) {
  return Citizen.invokeNative('0x49c63fdf69744a27', p0, p1, p2, p3, p4, p5, p6, p7);
};

/**
   * _UILOG_ADD_OR_UPDATE_OBJECTIVE
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {string | number} p3
   * @param {boolean} p4
   * @param {boolean} p5
   * @param {boolean} p6
   * @return {void}
   */
global.UilogAddOrUpdateObjective = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xb43163388484cc87', p0, _ch(p1), _ch(p2), _ts(p3), p4, p5, p6);
};

/**
   * _UILOG_ADD_TOTAL_TAKE_ENTRY
   *
   * @param {number} p0
   * @param {number} p1
   * @param {string | number} p2
   * @param {string | number} p3
   * @param {number} p4
   * @return {void}
   */
global.UilogAddTotalTakeEntry = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x60c59968e8e87e6b', _ch(p0), _ch(p1), _ts(p2), _ts(p3), _ch(p4));
};

/**
   * _UILOG_CLEAR_ALL_ENTRIES
   *
  
   * @return {void}
   */
global.UilogClearAllEntries = function () {
  return Citizen.invokeNative('0xb95b4ea6b1edf035');
};

/**
   * _UILOG_CLEAR_CACHED_OBJECTIVE
   *
  
   * @return {void}
   */
global.UilogClearCachedObjective = function () {
  return Citizen.invokeNative('0xdff0d417277b41f8');
};

/**
   * _UILOG_CLEAR_HAS_DISPLAYED_CACHED_OBJECTIVE
   *
  
   * @return {void}
   */
global.UilogClearHasDisplayedCachedObjective = function () {
  return Citizen.invokeNative('0xa3108d6981a5cadb');
};

/**
   * _UILOG_GET_CACHED_OBJECTIVE
   *
  
   * @return {string | number}
   */
global.UilogGetCachedObjective = function () {
  return Citizen.invokeNative('0x15a4461beb788096', _r, _s);
};

/**
   * _UILOG_HAS_DISPLAYED_CACHED_OBJECTIVE
   *
  
   * @return {boolean}
   */
global.UilogHasDisplayedCachedObjective = function () {
  return Citizen.invokeNative('0xcc48ffbb45b54f71', _r);
};

/**
   * _UILOG_IS_ENTRY_REGISTERED
   *
   * @param {number} p0
   * @param {number} p1
   * @return {boolean}
   */
global.UilogIsEntryRegistered = function (p0, p1) {
  return Citizen.invokeNative('0xb8188ccf52202475', p0, _ch(p1), _r);
};

/**
   * _UILOG_MARK_ALL_ENTRIES_AVAILABILITY
   *
   * @param {number} p0
   * @param {string | number} p1
   * @return {void}
   */
global.UilogMarkAllEntriesAvailability = function (p0, p1) {
  return Citizen.invokeNative('0x3920574cf0a2b7b6', p0, _ts(p1));
};

/**
   * _UILOG_MARK_ENTRY_AVAILABILITY
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} p2
   * @param {string | number} p3
   * @return {void}
   */
global.UilogMarkEntryAvailability = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x13e8d7dd08543482', p0, _ch(p1), p2, _ts(p3));
};

/**
   * _UILOG_MARK_MISSION_COMPLETED
   *
   * @param {number} p0
   * @return {void}
   */
global.UilogMarkMissionCompleted = function (p0) {
  return Citizen.invokeNative('0xde31d66d1e54c471', _ch(p0));
};

/**
   * _UILOG_POST_NOTIFICATION
   *
   * @param {DataView} data
   * @return {number}
   */
global.UilogPostNotification = function (data) {
  return Citizen.invokeNative('0x49e58fe6ef40b987', data, _r, _ri);
};

/**
   * _UILOG_PRINT_CACHED_OBJECTIVE
   *
  
   * @return {void}
   */
global.UilogPrintCachedObjective = function () {
  return Citizen.invokeNative('0xe9990552dec71600');
};

/**
   * _UILOG_REMOVE_ENTRY
   *
   * @param {number} p0
   * @param {number} p1
   * @return {void}
   */
global.UilogRemoveEntry = function (p0, p1) {
  return Citizen.invokeNative('0xd594a19be09a75c6', p0, _ch(p1));
};

/**
   * _UILOG_SET_CACHED_OBJECTIVE
   *
   * @param {string | number} p0
   * @return {void}
   */
global.UilogSetCachedObjective = function (p0) {
  return Citizen.invokeNative('0xfa233f8fe190514c', _ts(p0));
};

/**
   * _UILOG_SET_DISPLAY_COMPLETION_RATING
   *
   * @param {number} logEntryType
   * @param {number} p1
   * @param {boolean} p2
   * @return {void}
   */
global.UilogSetDisplayCompletionRating = function (logEntryType, p1, p2) {
  return Citizen.invokeNative('0xa31013798fadcadc', logEntryType, _ch(p1), p2);
};

/**
   * _UILOG_SET_ENTRY_BRIEF_TEXTURE
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} texture
   * @param {number} textureDictionary
   * @return {void}
   */
global.UilogSetEntryBriefTexture = function (p0, p1, texture, textureDictionary) {
  return Citizen.invokeNative('0x69684d9936958d8f', p0, _ch(p1), _ch(texture), _ch(textureDictionary));
};

/**
   * _UILOG_SET_ENTRY_ICON_TEXTURE
   *
   * @param {number} p0
   * @param {number} p1
   * @param {number} icon
   * @param {number} iconDictionary
   * @return {void}
   */
global.UilogSetEntryIconTexture = function (p0, p1, icon, iconDictionary) {
  return Citizen.invokeNative('0x6965469934958d8f', p0, _ch(p1), _ch(icon), _ch(iconDictionary));
};

/**
   * _UILOG_SET_ENTRY_PINNED
   *
   * @param {number} p0
   * @param {number} p1
   * @param {boolean} p2
   * @return {void}
   */
global.UilogSetEntryPinned = function (p0, p1, p2) {
  return Citizen.invokeNative('0x72a5cd214b342568', p0, _ch(p1), p2);
};

/**
   * _UILOG_SET_HAS_DISPLAYED_CACHED_OBJECTIVE
   *
  
   * @return {void}
   */
global.UilogSetHasDisplayedCachedObjective = function () {
  return Citizen.invokeNative('0xa3108d6981a5cadc');
};

/**
   * _UILOG_SET_PENDING_DETAILS_ID
   *
   * @param {number} p0
   * @param {number} p1
   * @return {any}
   */
global.UilogSetPendingDetailsId = function (p0, p1) {
  return Citizen.invokeNative('0x136a027cf37b0a4f', p0, _ch(p1), _r);
};

/**
   * _UILOG_SET_TOTAL_TAKE_SUMMARY
   *
   * @param {string | number} p0
   * @param {string | number} p1
   * @return {void}
   */
global.UilogSetTotalTakeSummary = function (p0, p1) {
  return Citizen.invokeNative('0xd106b211ef1b8f04', _ts(p0), _ts(p1));
};

/**
   * _UILOG_UPDATE_ENTRY_SUBHEADER
   *
   * @param {number} p0
   * @param {number} p1
   * @param {string | number} p2
   * @return {void}
   */
global.UilogUpdateEntrySubheader = function (p0, p1, p2) {
  return Citizen.invokeNative('0x80d6524190258c3e', p0, _ch(p1), p2);
};

/**
   * _UIPINNING_GET_TOOLTIP_TEXT
   *
   * @param {number} hash
   * @return {string | number}
   */
global.UipinningGetTooltipText = function (hash) {
  return Citizen.invokeNative('0x3138582e0a13bfab', _ch(hash), _r, _s);
};

/**
   * UI_STATE_MACHINE_CAN_REQUEST_TRANSITION
   *
   * @param {any} p0
   * @return {any}
   */
global.UiStateMachineCanRequestTransition = function (p0) {
  return Citizen.invokeNative('0xf7c180f57f85d0b8', p0, _r);
};

/**
   * UI_STATE_MACHINE_CREATE
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.UiStateMachineCreate = function (p0, p1) {
  return Citizen.invokeNative('0x4c6f2c4b7a03a266', p0, p1, _r);
};

/**
   * UI_STATE_MACHINE_DESTROY
   *
   * @param {any} p0
   * @return {void}
   */
global.UiStateMachineDestroy = function (p0) {
  return Citizen.invokeNative('0x4eb122210a90e2d8', p0);
};

/**
   * UI_STATE_MACHINE_DESTROY_AND_CLEAR
   *
   * @param {DataView} p0
   * @return {void}
   */
global.UiStateMachineDestroyAndClear = function (p0) {
  return Citizen.invokeNative('0x2738d68d2b4e09e7', p0);
};

/**
   * UI_STATE_MACHINE_EXISTS
   *
   * @param {any} p0
   * @return {any}
   */
global.UiStateMachineExists = function (p0) {
  return Citizen.invokeNative('0x5d15569c0febf757', p0, _r);
};

/**
   * UI_STATE_MACHINE_REQUEST_EXIT
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.UiStateMachineRequestExit = function (p0, p1) {
  return Citizen.invokeNative('0x6b9fe4f0ba521a19', p0, p1);
};

/**
   * UI_STATE_MACHINE_REQUEST_TRANSITION
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.UiStateMachineRequestTransition = function (p0, p1) {
  return Citizen.invokeNative('0x7ea9c3547e80350e', p0, p1, _r);
};

/**
   * _UIFLOWBLOCK_ENTER
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.UiflowblockEnter = function (p0, p1) {
  return Citizen.invokeNative('0x3b7519720c9dcb45', p0, p1, _r);
};

/**
   * _UIFLOWBLOCK_IS_LOADED
   *
   * @param {any} p0
   * @return {any}
   */
global.UiflowblockIsLoaded = function (p0) {
  return Citizen.invokeNative('0x10a93c057b6bd944', p0, _r);
};

/**
   * _UIFLOWBLOCK_RELEASE
   *
   * @param {any} p0
   * @return {void}
   */
global.UiflowblockRelease = function (p0) {
  return Citizen.invokeNative('0xf320a77dd5f781df', p0);
};

/**
   * _UIFLOWBLOCK_REQUEST
   *
   * @param {any} p0
   * @return {any}
   */
global.UiflowblockRequest = function (p0) {
  return Citizen.invokeNative('0xc0081b34e395ce48', p0, _r);
};

/**
   * _UI_STATE_MACHINE_IS_EXITED
   *
   * @param {number} p0
   * @return {boolean}
   */
global.UiStateMachineIsExited = function (p0) {
  return Citizen.invokeNative('0x11e73195e735b25b', _ch(p0), _r);
};

/**
   * _UI_STICKY_FEED_CLEAR_MESSAGE
   *
   * @param {number} msgId
   * @return {void}
   */
global.UiStickyFeedClearMessage = function (msgId) {
  return Citizen.invokeNative('0x00a15b94cba4f76f', msgId);
};

/**
   * _UI_STICKY_FEED_CREATE_DEATH_FAIL_MESSAGE
   * Example: https://pastebin.com/JygJShNU
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {boolean} p2
   * @return {number}
   */
global.UiStickyFeedCreateDeathFailMessage = function (p0, p1, p2) {
  return Citizen.invokeNative('0x815c4065ae6e6071', p0, p1, p2, _r, _ri);
};

/**
   * _UI_STICKY_FEED_CREATE_ERROR_MESSAGE
   * Example: https://pastebin.com/EJD7ytnz
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {boolean} p2
   * @return {number}
   */
global.UiStickyFeedCreateErrorMessage = function (p0, p1, p2) {
  return Citizen.invokeNative('0x9f2cc2439a04e7ba', p0, p1, p2, _r, _ri);
};

/**
   * _UI_STICKY_FEED_CREATE_WARNING_MESSAGE
   * Example: https://pastebin.com/6mLtee2S
   *
   * @param {DataView} p0
   * @param {DataView} p1
   * @param {boolean} p2
   * @return {number}
   */
global.UiStickyFeedCreateWarningMessage = function (p0, p1, p2) {
  return Citizen.invokeNative('0x339e16b41780fc35', p0, p1, p2, _r, _ri);
};

/**
   * _UI_STICKY_FEED_GET_MESSAGE_STATE
   * Returns state of sticky feed message, see 0x59FA676177DBE4C9
   *
   * @param {number} msgId
   * @return {number}
   */
global.UiStickyFeedGetMessageState = function (msgId) {
  return Citizen.invokeNative('0x07954320d77f6a3d', msgId, _r, _ri);
};

/**
   * _UI_STICKY_FEED_IS_ALERT_SCREEN_ACTIVE
   *
  
   * @return {boolean}
   */
global.UiStickyFeedIsAlertScreenActive = function () {
  return Citizen.invokeNative('0xf8806ec3ff840fdc', _r);
};

/**
   * _UI_STICKY_FEED_IS_CHANNEL_ACTIVE
   * stickyFeedChannel: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIStickyFeedChannel
   *
   * @param {number} stickyFeedChannel
   * @return {boolean}
   */
global.UiStickyFeedIsChannelActive = function (stickyFeedChannel) {
  return Citizen.invokeNative('0xc5c395c60b542a3c', stickyFeedChannel, _r);
};

/**
   * _UI_STICKY_FEED_UPDATE_MESSAGE
   * Seems to only update _UI_STICKY_FEED_CREATE_ERROR_MESSAGE(0x9F2CC2439A04E7BA) and _UI_STICKY_FEED_CREATE_DEATH_FAIL_MESSAGE(0x815C4065AE6E6071) message.
   * Example: https://pastebin.com/nDrJyWq2
   *
   * @param {number} msgId
   * @param {DataView} p1
   * @param {boolean} p2
   * @return {void}
   */
global.UiStickyFeedUpdateMessage = function (msgId, p1, p2) {
  return Citizen.invokeNative('0xbc6f454e310124da', msgId, p1, p2);
};

/**
   * _UITUTORIAL_GET_IS_THREAT_INDICATOR_CAPABLE_RADAR_SHOWN
   *
  
   * @return {boolean}
   */
global.UitutorialGetIsThreatIndicatorCapableRadarShown = function () {
  return Citizen.invokeNative('0x2cc24a2a7a1489c4', _r);
};

/**
   * _UITUTORIAL_GET_IS_THREAT_INDICATOR_ON
   *
  
   * @return {boolean}
   */
global.UitutorialGetIsThreatIndicatorOn = function () {
  return Citizen.invokeNative('0xfc2e0a5e9ed4e1b4', _r);
};

/**
   * _UITUTORIAL_SET_RPG_ICON_VISIBILITY
   * enum eRpgIcons
   * {
   *   ICON_STAMINA,
   *   ICON_STAMINA_CORE,
   *   ICON_DEADEYE,
   *   ICON_DEADEYE_CORE,
   *   ICON_HEALTH,
   *   ICON_HEALTH_CORE,
   *   ICON_HORSE_HEALTH,
   *   ICON_HORSE_HEALTH_CORE,
   *   ICON_HORSE_STAMINA,
   *   ICON_HORSE_STAMINA_CORE,
   *   ICON_HORSE_COURAGE,
   *   ICON_HORSE_COURAGE_CORE
   * };
   * 
   * enum eRpgIconVisibility
   * {
   *   ICON_VISIBILITY_WAIT_TO_HIDE,
   *   ICON_VISIBILITY_ALWAYS_SHOW,
   *   ICON_VISIBILITY_ALWAYS_HIDE,
   *   ICON_VISIBILITY_ALWAYS_BLINK
   * };
   *
   * @param {number} rpgIcon
   * @param {number} visibility
   * @return {void}
   */
global.UitutorialSetRpgIconVisibility = function (rpgIcon, visibility) {
  return Citizen.invokeNative('0xc116e6df68dce667', rpgIcon, visibility);
};

/**
   * UNLOCK_IS_UNLOCKED
   *
   * @param {number} unlockHash
   * @return {boolean}
   */
global.UnlockIsUnlocked = function (unlockHash) {
  return Citizen.invokeNative('0xc4b660c7b6040e75', _ch(unlockHash), _r);
};

/**
   * UNLOCK_IS_VISIBLE
   *
   * @param {number} unlockHash
   * @return {boolean}
   */
global.UnlockIsVisible = function (unlockHash) {
  return Citizen.invokeNative('0x8588a14b75af096b', _ch(unlockHash), _r);
};

/**
   * UNLOCK_SET_UNLOCKED
   *
   * @param {number} unlockHash
   * @param {boolean} toggle
   * @return {void}
   */
global.UnlockSetUnlocked = function (unlockHash, toggle) {
  return Citizen.invokeNative('0x1b7c5ada8a6910a0', _ch(unlockHash), toggle);
};

/**
   * UNLOCK_SET_VISIBLE
   *
   * @param {number} unlockHash
   * @param {boolean} toggle
   * @return {void}
   */
global.UnlockSetVisible = function (unlockHash, toggle) {
  return Citizen.invokeNative('0x46b901a8ecdb5a61', _ch(unlockHash), toggle);
};

/**
   * _UNLOCK_GET_ITEM_ROLE_UNLOCK_INFO
   *
   * @param {number} unlockHash
   * @param {DataView} outData
   * @return {void}
   */
global.UnlockGetItemRoleUnlockInfo = function (unlockHash, outData) {
  return Citizen.invokeNative('0x7c1c2062cfad06fe', _ch(unlockHash), outData);
};

/**
   * _UNLOCK_IS_LOOTABLE
   *
   * @param {number} unlockHash
   * @return {boolean}
   */
global.UnlockIsLootable = function (unlockHash) {
  return Citizen.invokeNative('0x66bf197e066050de', _ch(unlockHash), _r);
};

/**
   * _UNLOCK_IS_NEW
   *
   * @param {number} unlockHash
   * @return {boolean}
   */
global.UnlockIsNew = function (unlockHash) {
  return Citizen.invokeNative('0x644166ba7aa49dea', _ch(unlockHash), _r);
};

/**
   * _UNLOCK_IS_UNLOCK_FLAG_SET
   *
   * @param {number} unlockHash
   * @param {number} flag
   * @return {boolean}
   */
global.UnlockIsUnlockFlagSet = function (unlockHash, flag) {
  return Citizen.invokeNative('0x6b6369647f26f09f', _ch(unlockHash), flag, _r);
};

/**
   * _UNLOCK_SET_NEW
   *
   * @param {number} unlockHash
   * @param {boolean} toggle
   * @return {void}
   */
global.UnlockSetNew = function (unlockHash, toggle) {
  return Citizen.invokeNative('0xa6d79c7aef870a99', _ch(unlockHash), toggle);
};

/**
   * ADD_ROAD_NODE_SPEED_ZONE
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @return {number}
   */
global.AddRoadNodeSpeedZone = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
  return Citizen.invokeNative('0x4c221bac54d735c3', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, _r, _ri);
};

/**
   * ARE_ANY_VEHICLE_SEATS_FREE
   * Returns false if every seat is occupied.
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.AreAnyVehicleSeatsFree = function (vehicle) {
  return Citizen.invokeNative('0xa0a424505a1b6429', vehicle, _r);
};

/**
   * BRING_VEHICLE_TO_HALT
   * This native makes the vehicle stop immediately
   * 
   * distance defines how far it will travel until stopping.
   *
   * @param {number} vehicle
   * @param {number} distance
   * @param {number} duration
   * @param {boolean} unknown
   * @return {void}
   */
global.BringVehicleToHalt = function (vehicle, distance, duration, unknown) {
  return Citizen.invokeNative('0x260be8f09e326a20', vehicle, _fv(distance), duration, unknown);
};

/**
   * CAN_ANCHOR_BOAT_HERE
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.CanAnchorBoatHere = function (vehicle) {
  return Citizen.invokeNative('0xc075176cfb8b4128', vehicle, _r);
};

/**
   * CAN_SHUFFLE_SEAT
   * seatIndex: see CREATE_PED_INSIDE_VEHICLE
   *
   * @param {number} vehicle
   * @param {number} seatIndex
   * @return {boolean}
   */
global.CanShuffleSeat = function (vehicle, seatIndex) {
  return Citizen.invokeNative('0xf8b2d32a2231fd24', vehicle, seatIndex, _r);
};

/**
   * CLEAR_LAST_DRIVEN_VEHICLE
   *
  
   * @return {void}
   */
global.ClearLastDrivenVehicle = function () {
  return Citizen.invokeNative('0x0efc5dc62e67609b');
};

/**
   * COPY_VEHICLE_DAMAGES
   * Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle.
   *
   * @param {number} sourceVehicle
   * @param {number} targetVehicle
   * @return {void}
   */
global.CopyVehicleDamages = function (sourceVehicle, targetVehicle) {
  return Citizen.invokeNative('0xdbc28a8c683cd80b', sourceVehicle, targetVehicle);
};

/**
   * CREATE_VEHICLE
   *
   * @param {number} modelHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} heading
   * @param {boolean} isNetwork
   * @param {boolean} bScriptHostVeh
   * @param {boolean} bDontAutoCreateDraftAnimals
   * @param {boolean} p8
   * @return {number}
   */
global.CreateVehicle = function (modelHash, x, y, z, heading, isNetwork, bScriptHostVeh, bDontAutoCreateDraftAnimals, p8) {
  return Citizen.invokeNative('0xaf35d0d2583051b0', _ch(modelHash), _fv(x), _fv(y), _fv(z), _fv(heading), isNetwork, bScriptHostVeh, bDontAutoCreateDraftAnimals, p8, _r, _ri);
};

/**
   * DELETE_ALL_TRAINS
   *
  
   * @return {void}
   */
global.DeleteAllTrains = function () {
  return Citizen.invokeNative('0xa3120a1385f17ff7');
};

/**
   * DELETE_MISSION_TRAIN
   *
  
   * @return {number}
   */
global.DeleteMissionTrain = function () {
  return Citizen.invokeNative('0x0d3630fb07e8b570', _i);
};

/**
   * DELETE_VEHICLE
   * Deletes a vehicle.
   * The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
   * 
   * eg how to use:
   * SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
   * DELETE_VEHICLE(&vehicle);
   * 
   * Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.
   *
  
   * @return {number}
   */
global.DeleteVehicle = function () {
  return Citizen.invokeNative('0xe20a909d8c4a70f8', _i);
};

/**
   * DISABLE_VEHICLE_WEAPON
   *
   * @param {boolean} disabled
   * @param {number} weaponHash
   * @param {number} vehicle
   * @param {number} owner
   * @return {void}
   */
global.DisableVehicleWeapon = function (disabled, weaponHash, vehicle, owner) {
  return Citizen.invokeNative('0x94b1e71b144356a5', disabled, _ch(weaponHash), vehicle, owner);
};

/**
   * DOES_EXTRA_EXIST
   *
   * @param {number} vehicle
   * @param {number} extraId
   * @return {boolean}
   */
global.DoesExtraExist = function (vehicle, extraId) {
  return Citizen.invokeNative('0xaf5e7e9a7620ffb5', vehicle, extraId, _r);
};

/**
   * EXPLODE_VEHICLE
   * Explodes a selected vehicle.
   * 
   * Vehicle vehicle = Vehicle you want to explode.
   * BOOL isAudible = If explosion makes a sound.
   * BOOL isInvisible = If the explosion is invisible or not.
   * 
   * First BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.
   *
   * @param {number} vehicle
   * @param {boolean} isAudible
   * @param {boolean} isInvisible
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.ExplodeVehicle = function (vehicle, isAudible, isInvisible, p3, p4) {
  return Citizen.invokeNative('0x75dced9eec5769d7', vehicle, isAudible, isInvisible, p3, p4);
};

/**
   * FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE
   * Often called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE.
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.ForcePlaybackRecordedVehicleUpdate = function (vehicle, p1) {
  return Citizen.invokeNative('0x59eca796021b0539', vehicle, p1);
};

/**
   * GET_CLOSEST_VEHICLE
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} modelHash
   * @param {number} flags
   * @return {number}
   */
global.GetClosestVehicle = function (x, y, z, radius, modelHash, flags) {
  return Citizen.invokeNative('0x52f45d033645181b', _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), flags, _r, _ri);
};

/**
   * GET_CURRENT_STATION_FOR_TRAIN
   * Returns p1 for 0xBA958F68031DDBFC (stationIndex)
   *
   * @param {number} train
   * @return {number}
   */
global.GetCurrentStationForTrain = function (train) {
  return Citizen.invokeNative('0x86fa6d8b48667d75', train, _r, _ri);
};

/**
   * GET_DRAFT_ANIMAL_COUNT
   *
   * @param {number} vehicle
   * @return {[boolean, number, number]}
   */
global.GetDraftAnimalCount = function (vehicle) {
  return Citizen.invokeNative('0xa19447d83294e29f', vehicle, _i, _i, _r);
};

/**
   * GET_DRIVER_OF_VEHICLE
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetDriverOfVehicle = function (vehicle) {
  return Citizen.invokeNative('0x2963b5c1637e8a27', vehicle, _r, _ri);
};

/**
   * GET_LAST_DRIVEN_VEHICLE
   *
  
   * @return {number}
   */
global.GetLastDrivenVehicle = function () {
  return Citizen.invokeNative('0xa94f3e0ab9695e19', _r, _ri);
};

/**
   * GET_LAST_PED_IN_VEHICLE_SEAT
   * seatIndex: see CREATE_PED_INSIDE_VEHICLE
   *
   * @param {number} vehicle
   * @param {number} seatIndex
   * @return {number}
   */
global.GetLastPedInVehicleSeat = function (vehicle, seatIndex) {
  return Citizen.invokeNative('0x74583b19feeafda7', vehicle, seatIndex, _r, _ri);
};

/**
   * GET_PED_IN_VEHICLE_SEAT
   * seatIndex: see CREATE_PED_INSIDE_VEHICLE
   *
   * @param {number} vehicle
   * @param {number} seatIndex
   * @return {number}
   */
global.GetPedInVehicleSeat = function (vehicle, seatIndex) {
  return Citizen.invokeNative('0xbb40dd2270b65366', vehicle, seatIndex, _r, _ri);
};

/**
   * GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME
   * This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording.
   * 
   * See REQUEST_VEHICLE_RECORDING
   *
   * @param {number} recording
   * @param {number} time
   * @param {string | number} script
   * @return {Vector3}
   */
global.GetPositionOfVehicleRecordingAtTime = function (recording, time, script) {
  return Citizen.invokeNative('0x1a00961a1be94e5e', recording, _fv(time), script, _r, _rv);
};

/**
   * GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME
   * This native does no interpolation between pathpoints. The same rotation will be returned for all times up to the next pathpoint in the recording.
   * 
   * See REQUEST_VEHICLE_RECORDING
   *
   * @param {number} recording
   * @param {number} time
   * @param {string | number} script
   * @return {Vector3}
   */
global.GetRotationOfVehicleRecordingAtTime = function (recording, time, script) {
  return Citizen.invokeNative('0x61787dd28b8cc0d5', recording, _fv(time), script, _r, _rv);
};

/**
   * GET_TIME_POSITION_IN_RECORDING
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetTimePositionInRecording = function (vehicle) {
  return Citizen.invokeNative('0x233b51c7913fa031', vehicle, _r, _rf);
};

/**
   * GET_TRACK_INDEX_OF_TRAIN
   *
   * @param {number} train
   * @return {number}
   */
global.GetTrackIndexOfTrain = function (train) {
  return Citizen.invokeNative('0x865fec2fa899f29c', train, _r, _ri);
};

/**
   * GET_TRAIN_CARRIAGE
   *
   * @param {number} train
   * @param {number} trailerNumber
   * @return {number}
   */
global.GetTrainCarriage = function (train, trailerNumber) {
  return Citizen.invokeNative('0xd0fb093a4cdb932c', train, trailerNumber, _r, _ri);
};

/**
   * GET_VEHICLE_BODY_HEALTH
   * Seems related to vehicle health, like the one in IV.
   * Max 1000, min 0.
   * Vehicle does not necessarily explode or become undrivable at 0.
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetVehicleBodyHealth = function (vehicle) {
  return Citizen.invokeNative('0x42113b857e33c16e', vehicle, _r, _rf);
};

/**
   * GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER
   *
   * @param {number} vehicle
   * @param {number} player
   * @return {boolean}
   */
global.GetVehicleDoorsLockedForPlayer = function (vehicle, player) {
  return Citizen.invokeNative('0xfa2cddfeb8bc898b', vehicle, player, _r);
};

/**
   * GET_VEHICLE_DOOR_LOCK_STATUS
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetVehicleDoorLockStatus = function (vehicle) {
  return Citizen.invokeNative('0xc867fd144f2469d3', vehicle, _r, _ri);
};

/**
   * GET_VEHICLE_ENGINE_HEALTH
   * Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.
   * 
   * Minimum: -4000
   * Maximum: 1000
   * 
   * -4000: Engine is destroyed
   * 0 and below: Engine catches fire and health rapidly declines
   * 300: Engine is smoking and losing functionality
   * 1000: Engine is perfect
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetVehicleEngineHealth = function (vehicle) {
  return Citizen.invokeNative('0x90dbffac43b22081', vehicle, _r, _rf);
};

/**
   * GET_VEHICLE_ESTIMATED_MAX_SPEED
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetVehicleEstimatedMaxSpeed = function (vehicle) {
  return Citizen.invokeNative('0xfe52f34491529f0b', vehicle, _r, _rf);
};

/**
   * GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetVehicleMaxNumberOfPassengers = function (vehicle) {
  return Citizen.invokeNative('0xa9c55f1c15e62e06', vehicle, _r, _ri);
};

/**
   * GET_VEHICLE_MODEL_NUMBER_OF_SEATS
   *
   * @param {number} modelHash
   * @return {number}
   */
global.GetVehicleModelNumberOfSeats = function (modelHash) {
  return Citizen.invokeNative('0x9a578736ff3a17c3', _ch(modelHash), _r, _ri);
};

/**
   * GET_VEHICLE_NUMBER_OF_PASSENGERS
   * Gets the number of passengers, NOT including the driver. Use IS_VEHICLE_SEAT_FREE(Vehicle, -1) to also check for the driver
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetVehicleNumberOfPassengers = function (vehicle) {
  return Citizen.invokeNative('0x59f3f16577cd79b2', vehicle, _r, _ri);
};

/**
   * GET_VEHICLE_PETROL_TANK_HEALTH
   * 1000 is max health
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetVehiclePetrolTankHealth = function (vehicle) {
  return Citizen.invokeNative('0x1e5a9b356d5098be', vehicle, _r, _rf);
};

/**
   * GET_VEHICLE_TRAILER_VEHICLE
   * Gets the trailer of a vehicle and puts it into the trailer parameter.
   *
   * @param {number} vehicle
   * @return {[boolean, Vehicle]}
   */
global.GetVehicleTrailerVehicle = function (vehicle) {
  return Citizen.invokeNative('0xcf867a239ec30741', vehicle, _i, _r);
};

/**
   * HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED
   *
  
   * @return {boolean}
   */
global.HasInstantFillVehiclePopulationFinished = function () {
  return Citizen.invokeNative('0x2701d01d5e18fc31', _r);
};

/**
   * HAS_VEHICLE_ASSET_LOADED
   *
   * @param {number} vehicleAsset
   * @return {boolean}
   */
global.HasVehicleAssetLoaded = function (vehicleAsset) {
  return Citizen.invokeNative('0xb935f3154bc913c8', _ch(vehicleAsset), _r);
};

/**
   * HAS_VEHICLE_RECORDING_BEEN_LOADED
   * See REQUEST_VEHICLE_RECORDING
   *
   * @param {number} recording
   * @param {string | number} script
   * @return {boolean}
   */
global.HasVehicleRecordingBeenLoaded = function (recording, script) {
  return Citizen.invokeNative('0xba9325be372ab6ea', recording, script, _r);
};

/**
   * INSTANTLY_FILL_VEHICLE_POPULATION
   *
  
   * @return {void}
   */
global.InstantlyFillVehiclePopulation = function () {
  return Citizen.invokeNative('0x1ff00db43026b12f');
};

/**
   * IS_ANY_VEHICLE_NEAR_POINT
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @return {boolean}
   */
global.IsAnyVehicleNearPoint = function (x, y, z, radius) {
  return Citizen.invokeNative('0x5698ba4fd04d39c4', _fv(x), _fv(y), _fv(z), _fv(radius), _r);
};

/**
   * IS_DRAFT_VEHICLE
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.IsDraftVehicle = function (vehicle) {
  return Citizen.invokeNative('0xea44e97849e9f3dd', vehicle, _r);
};

/**
   * IS_ENTRY_POINT_FOR_SEAT_CLEAR
   *
   * @param {number} ped
   * @param {number} vehicle
   * @param {number} seatIndex
   * @param {boolean} side
   * @param {boolean} onEnter
   * @return {boolean}
   */
global.IsEntryPointForSeatClear = function (ped, vehicle, seatIndex, side, onEnter) {
  return Citizen.invokeNative('0x80ddccb2f4a3eb57', ped, vehicle, seatIndex, side, onEnter, _r);
};

/**
   * IS_PLAYBACK_GOING_ON_FOR_VEHICLE
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.IsPlaybackGoingOnForVehicle = function (vehicle) {
  return Citizen.invokeNative('0x02774b3a9034278f', vehicle, _r);
};

/**
   * IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.IsPlaybackUsingAiGoingOnForVehicle = function (vehicle) {
  return Citizen.invokeNative('0x5a7472606ec5b7c1', vehicle, _r);
};

/**
   * IS_SEAT_WARP_ONLY
   * seatIndex: see CREATE_PED_INSIDE_VEHICLE
   *
   * @param {number} vehicle
   * @param {number} seatIndex
   * @return {boolean}
   */
global.IsSeatWarpOnly = function (vehicle, seatIndex) {
  return Citizen.invokeNative('0x7892685bf6d9775e', vehicle, seatIndex, _r);
};

/**
   * IS_THIS_MODEL_A_BOAT
   *
   * @param {number} model
   * @return {boolean}
   */
global.IsThisModelABoat = function (model) {
  return Citizen.invokeNative('0x799cfc7c5b743b15', _ch(model), _r);
};

/**
   * IS_THIS_MODEL_A_TRAIN
   *
   * @param {number} model
   * @return {boolean}
   */
global.IsThisModelATrain = function (model) {
  return Citizen.invokeNative('0xfc08c8f8c1edf174', _ch(model), _r);
};

/**
   * IS_TRAIN_WAITING_AT_STATION
   *
   * @param {number} train
   * @return {boolean}
   */
global.IsTrainWaitingAtStation = function (train) {
  return Citizen.invokeNative('0xe887bd31d97793f6', train, _r);
};

/**
   * IS_VEHICLE_DOOR_FULLY_OPEN
   * doorId: see SET_VEHICLE_DOOR_SHUT
   *
   * @param {number} vehicle
   * @param {number} doorId
   * @return {boolean}
   */
global.IsVehicleDoorFullyOpen = function (vehicle, doorId) {
  return Citizen.invokeNative('0x7ae191143c7a9107', vehicle, doorId, _r);
};

/**
   * IS_VEHICLE_DRIVEABLE
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {boolean}
   */
global.IsVehicleDriveable = function (vehicle, p1, p2) {
  return Citizen.invokeNative('0xb86d29b10f627379', vehicle, p1, p2, _r);
};

/**
   * IS_VEHICLE_EXTRA_TURNED_ON
   *
   * @param {number} vehicle
   * @param {number} extraId
   * @return {boolean}
   */
global.IsVehicleExtraTurnedOn = function (vehicle, extraId) {
  return Citizen.invokeNative('0xfa9a55d9c4351625', vehicle, extraId, _r);
};

/**
   * IS_VEHICLE_IN_BURNOUT
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.IsVehicleInBurnout = function (vehicle) {
  return Citizen.invokeNative('0x3f5029a8fc060c48', vehicle, _r);
};

/**
   * IS_VEHICLE_MODEL
   *
   * @param {number} vehicle
   * @param {number} model
   * @return {boolean}
   */
global.IsVehicleModel = function (vehicle, model) {
  return Citizen.invokeNative('0x0045a54ec7a22455', vehicle, _ch(model), _r);
};

/**
   * IS_VEHICLE_ON_ALL_WHEELS
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.IsVehicleOnAllWheels = function (vehicle) {
  return Citizen.invokeNative('0x0d5d119529654ee0', vehicle, _r);
};

/**
   * IS_VEHICLE_SEAT_FREE
   * seatIndex: see CREATE_PED_INSIDE_VEHICLE
   * Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
   *
   * @param {number} vehicle
   * @param {number} seatIndex
   * @return {boolean}
   */
global.IsVehicleSeatFree = function (vehicle, seatIndex) {
  return Citizen.invokeNative('0xe052c1b1caa4ece4', vehicle, seatIndex, _r);
};

/**
   * IS_VEHICLE_STOPPED
   * Returns true if the vehicle's current speed is less than, or equal to 0.0025f.
   * 
   * For some vehicles it returns true if the current speed is <= 0.00039999999.
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.IsVehicleStopped = function (vehicle) {
  return Citizen.invokeNative('0x78c3311a73135241', vehicle, _r);
};

/**
   * IS_VEHICLE_STUCK_TIMER_UP
   * VEH_STUCK_ON_ROOF = 0,
   * VEH_STUCK_ON_SIDE,
   * VEH_STUCK_HUNG_UP,
   * VEH_STUCK_JAMMED
   *
   * @param {number} vehicle
   * @param {number} stuckType
   * @param {number} ms
   * @return {boolean}
   */
global.IsVehicleStuckTimerUp = function (vehicle, stuckType, ms) {
  return Citizen.invokeNative('0x1aba9753939503c5', vehicle, stuckType, ms, _r);
};

/**
   * IS_VEHICLE_VISIBLE
   * Requires a visibility tracker on the vehicle (TRACK_VEHICLE_VISIBILITY)
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.IsVehicleVisible = function (vehicle) {
  return Citizen.invokeNative('0x424910cd5de8c246', vehicle, _r);
};

/**
   * IS_VEHICLE_WINDOW_INTACT
   *
   * @param {number} vehicle
   * @param {number} windowIndex
   * @return {boolean}
   */
global.IsVehicleWindowIntact = function (vehicle, windowIndex) {
  return Citizen.invokeNative('0x0e7910a63e05b12c', vehicle, windowIndex, _r);
};

/**
   * IS_VEHICLE_WRECKED
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.IsVehicleWrecked = function (vehicle) {
  return Citizen.invokeNative('0xddbea5506c848227', vehicle, _r);
};

/**
   * LOCK_DOORS_WHEN_NO_LONGER_NEEDED
   *
   * @param {number} vehicle
   * @return {void}
   */
global.LockDoorsWhenNoLongerNeeded = function (vehicle) {
  return Citizen.invokeNative('0x1ef36558fbde2daa', vehicle);
};

/**
   * MODIFY_VEHICLE_TOP_SPEED
   *
   * @param {number} vehicle
   * @param {number} value
   * @return {void}
   */
global.ModifyVehicleTopSpeed = function (vehicle, value) {
  return Citizen.invokeNative('0x35ad938c74cacd6a', vehicle, _fv(value));
};

/**
   * REMOVE_ROAD_NODE_SPEED_ZONE
   *
   * @param {number} speedzone
   * @return {boolean}
   */
global.RemoveRoadNodeSpeedZone = function (speedzone) {
  return Citizen.invokeNative('0xfe9ab3354ace6c9c', speedzone, _r);
};

/**
   * REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.RemoveVehiclesFromGeneratorsInArea = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xc619a44639bc0cb4', p0, p1, p2, p3, p4, p5);
};

/**
   * REMOVE_VEHICLE_ASSET
   *
   * @param {number} vehicleAsset
   * @return {void}
   */
global.RemoveVehicleAsset = function (vehicleAsset) {
  return Citizen.invokeNative('0x888a4e675b38f5ad', _ch(vehicleAsset));
};

/**
   * REMOVE_VEHICLE_RECORDING
   * See REQUEST_VEHICLE_RECORDING
   *
   * @param {any} p0
   * @param {DataView} p1
   * @return {void}
   */
global.RemoveVehicleRecording = function (p0, p1) {
  return Citizen.invokeNative('0x139e35755418f6aa', p0, p1);
};

/**
   * REMOVE_VEHICLE_WINDOW
   * windowIndex:
   * 0 = Front Right Window
   * 1 = Front Left Window
   * 2 = Back Right Window
   * 3 = Back Left Window
   *
   * @param {number} vehicle
   * @param {number} windowIndex
   * @return {void}
   */
global.RemoveVehicleWindow = function (vehicle, windowIndex) {
  return Citizen.invokeNative('0x745f15a215f2ddf1', vehicle, windowIndex);
};

/**
   * REQUEST_VEHICLE_ASSET
   *
   * @param {number} vehicleHash
   * @param {number} vehicleAsset
   * @return {void}
   */
global.RequestVehicleAsset = function (vehicleHash, vehicleAsset) {
  return Citizen.invokeNative('0x81a15811460fab3a', _ch(vehicleHash), vehicleAsset);
};

/**
   * REQUEST_VEHICLE_HIGH_DETAIL_MODEL
   *
   * @param {number} vehicle
   * @return {void}
   */
global.RequestVehicleHighDetailModel = function (vehicle) {
  return Citizen.invokeNative('0x84b81ef78bd22357', vehicle);
};

/**
   * REQUEST_VEHICLE_RECORDING
   * Request the vehicle recording defined by the lowercase format string "%s%03d.yvr". For example, REQUEST_VEHICLE_RECORDING(1, "FBIs1UBER") corresponds to fbis1uber001.yvr.
   * For all vehicle recording/playback natives, "script" is a common prefix that usually corresponds to the script/mission the recording is used in, "recording" is its int suffix, and "id" corresponds to a unique identifier within the recording streaming module.
   * (GTA) Note that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins.
   *
   * @param {number} recording
   * @param {string | number} script
   * @return {void}
   */
global.RequestVehicleRecording = function (recording, script) {
  return Citizen.invokeNative('0xc474cf16eda45dc9', recording, script);
};

/**
   * RESET_VEHICLE_STUCK_TIMER
   *
   * @param {number} vehicle
   * @param {number} nullAttributes
   * @return {void}
   */
global.ResetVehicleStuckTimer = function (vehicle, nullAttributes) {
  return Citizen.invokeNative('0x23298b468f7d88b6', vehicle, nullAttributes);
};

/**
   * SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.SetAllowVehicleExplodesOnContact = function (vehicle, p1) {
  return Citizen.invokeNative('0x8d3230a0ed7de39f', vehicle, p1);
};

/**
   * SET_ALL_VEHICLE_GENERATORS_ACTIVE
   *
  
   * @return {void}
   */
global.SetAllVehicleGeneratorsActive = function () {
  return Citizen.invokeNative('0x3d596e6e88a02c24');
};

/**
   * SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {boolean} p6
   * @param {boolean} p7
   * @return {void}
   */
global.SetAllVehicleGeneratorsActiveInArea = function (x1, y1, z1, x2, y2, z2, p6, p7) {
  return Citizen.invokeNative('0xbbb134fb9d50c0cc', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p6, p7);
};

/**
   * SET_BOAT_ANCHOR
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetBoatAnchor = function (vehicle, toggle) {
  return Citizen.invokeNative('0xaeab044f05b92659', vehicle, toggle);
};

/**
   * SET_BOAT_LOW_LOD_ANCHOR_DISTANCE
   * Value: mostly 99999.9f
   * 
   * Old name: _SET_BOAT_MOVEMENT_RESISTANCE
   *
   * @param {number} vehicle
   * @param {number} value
   * @return {void}
   */
global.SetBoatLowLodAnchorDistance = function (vehicle, value) {
  return Citizen.invokeNative('0xe3261532550d6a9f', vehicle, _fv(value));
};

/**
   * SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER
   * Old name: _SET_BOAT_FROZEN_WHEN_ANCHORED
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {void}
   */
global.SetBoatRemainsAnchoredWhilePlayerIsDriver = function (vehicle, p1, p2) {
  return Citizen.invokeNative('0x286771f3059a37a7', vehicle, p1, p2);
};

/**
   * SET_BOAT_SINKS_WHEN_WRECKED
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetBoatSinksWhenWrecked = function (vehicle, toggle) {
  return Citizen.invokeNative('0x62a6d317a011ea1d', vehicle, toggle);
};

/**
   * SET_BREAKABLE_VEHICLE_LOCKS_UNBREAKABLE
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetBreakableVehicleLocksUnbreakable = function (vehicle, toggle) {
  return Citizen.invokeNative('0xbc4735f48cd983ef', vehicle, toggle);
};

/**
   * SET_DISABLE_RANDOM_TRAINS_THIS_FRAME
   * nullsub, doesn't do anything
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetDisableRandomTrainsThisFrame = function (toggle) {
  return Citizen.invokeNative('0xd4288603e8766ff7', toggle);
};

/**
   * SET_DISABLE_SUPERDUMMY
   * Old name: _SET_DISABLE_SUPERDUMMY_MODE
   *
   * @param {number} vehicle
   * @param {boolean} disable
   * @return {void}
   */
global.SetDisableSuperdummy = function (vehicle, disable) {
  return Citizen.invokeNative('0x1716d787d9b94202', vehicle, disable);
};

/**
   * SET_DISABLE_VEHICLE_ENGINE_FIRES
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.SetDisableVehicleEngineFires = function (vehicle, p1) {
  return Citizen.invokeNative('0xd146ee5f2b06b95e', vehicle, p1);
};

/**
   * SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetDisableVehiclePetrolTankDamage = function (vehicle, toggle) {
  return Citizen.invokeNative('0x5795fbe7a2001c14', vehicle, toggle);
};

/**
   * SET_DISABLE_VEHICLE_PETROL_TANK_FIRES
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetDisableVehiclePetrolTankFires = function (vehicle, toggle) {
  return Citizen.invokeNative('0xb70986ab19b04aff', vehicle, toggle);
};

/**
   * SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.SetDontAllowPlayerToEnterVehicleIfLockedForPlayer = function (vehicle, p1) {
  return Citizen.invokeNative('0x63dc1f22c903b709', vehicle, p1);
};

/**
   * SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF
   * doorId: see SET_VEHICLE_DOOR_SHUT
   * 
   * Old name: _SET_VEHICLE_DOOR_CAN_BREAK
   *
   * @param {number} vehicle
   * @param {number} doorId
   * @param {boolean} isBreakable
   * @return {void}
   */
global.SetDoorAllowedToBeBrokenOff = function (vehicle, doorId, isBreakable) {
  return Citizen.invokeNative('0x081fb9d6422f804c', vehicle, doorId, isBreakable);
};

/**
   * SET_ENABLE_VEHICLE_SLIPSTREAMING
   *
   * @param {boolean} p0
   * @return {void}
   */
global.SetEnableVehicleSlipstreaming = function (p0) {
  return Citizen.invokeNative('0x73f1e4f6df26fe30', p0);
};

/**
   * SET_FORCE_HD_VEHICLE
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetForceHdVehicle = function (vehicle, toggle) {
  return Citizen.invokeNative('0x373cb1283308bd7b', vehicle, toggle);
};

/**
   * SET_FORCE_LOW_LOD_ANCHOR_MODE
   * Sets boat to be anchored on spawn, called together with SET_BOAT_ANCHOR and _SET_BOAT_ANCHOR_BUOYANCY_COEFFICIENT
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.SetForceLowLodAnchorMode = function (vehicle, p1) {
  return Citizen.invokeNative('0x75b49acd73617437', vehicle, p1);
};

/**
   * SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetForceVehicleEngineDamageByBullet = function (vehicle, toggle) {
  return Citizen.invokeNative('0x7f8e2b131e1dca6c', vehicle, toggle);
};

/**
   * SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED
   * flags = 0: DEFAULT; 1: KEEP_OLD_SPEED
   *
   * @param {number} flags
   * @return {number}
   */
global.SetMissionTrainAsNoLongerNeeded = function (flags) {
  return Citizen.invokeNative('0xbbe7648349b49be8', _i, flags);
};

/**
   * SET_MISSION_TRAIN_COORDS
   *
   * @param {number} train
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.SetMissionTrainCoords = function (train, x, y, z) {
  return Citizen.invokeNative('0x7632755962ab9922', train, _fv(x), _fv(y), _fv(z));
};

/**
   * SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME
   *
   * @param {number} multiplier
   * @return {void}
   */
global.SetParkedVehicleDensityMultiplierThisFrame = function (multiplier) {
  return Citizen.invokeNative('0xfedfa97638d61d4a', _fv(multiplier));
};

/**
   * SET_PED_OWNS_VEHICLE
   *
   * @param {number} ped
   * @param {number} vehicle
   * @return {void}
   */
global.SetPedOwnsVehicle = function (ped, vehicle) {
  return Citizen.invokeNative('0x838c216c2b05a009', ped, vehicle);
};

/**
   * SET_PLAYBACK_SPEED
   *
   * @param {number} vehicle
   * @param {number} speed
   * @return {void}
   */
global.SetPlaybackSpeed = function (vehicle, speed) {
  return Citizen.invokeNative('0xd78084eed4cd94c6', vehicle, _fv(speed));
};

/**
   * SET_RANDOM_BOATS
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetRandomBoats = function (toggle) {
  return Citizen.invokeNative('0xf44d446d4e36db87', toggle);
};

/**
   * SET_RANDOM_TRAINS
   *
   * @param {boolean} toggle
   * @return {void}
   */
global.SetRandomTrains = function (toggle) {
  return Citizen.invokeNative('0x1156c6ee7e82a98a', toggle);
};

/**
   * SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME
   *
   * @param {number} multiplier
   * @return {void}
   */
global.SetRandomVehicleDensityMultiplierThisFrame = function (multiplier) {
  return Citizen.invokeNative('0x1f91d44490e1ea0c', _fv(multiplier));
};

/**
   * SET_TRAIN_CRUISE_SPEED
   *
   * @param {number} train
   * @param {number} speed
   * @return {void}
   */
global.SetTrainCruiseSpeed = function (train, speed) {
  return Citizen.invokeNative('0x01021eb2e96b793c', train, _fv(speed));
};

/**
   * SET_TRAIN_OFFSET_FROM_STATION
   *
   * @param {number} train
   * @param {number} offset
   * @return {void}
   */
global.SetTrainOffsetFromStation = function (train, offset) {
  return Citizen.invokeNative('0x8ec47dd4300bf063', train, _fv(offset));
};

/**
   * SET_TRAIN_SPEED
   *
   * @param {number} train
   * @param {number} speed
   * @return {void}
   */
global.SetTrainSpeed = function (train, speed) {
  return Citizen.invokeNative('0xdfba6bbff7ccafbb', train, _fv(speed));
};

/**
   * SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS
   * Used to be incorrectly named SET_VEHICLE_EXCLUSIVE_DRIVER
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleAiCanUseExclusiveSeats = function (vehicle, toggle) {
  return Citizen.invokeNative('0x0893dafbfa67110e', vehicle, toggle);
};

/**
   * SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleAllowHomingMissleLockon = function (vehicle, toggle) {
  return Citizen.invokeNative('0x1240e8596a8308b9', vehicle, toggle);
};

/**
   * SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON
   * Makes the vehicle accept no passengers.
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleAllowNoPassengersLockon = function (vehicle, toggle) {
  return Citizen.invokeNative('0xecb9e9bc887e8060', vehicle, toggle);
};

/**
   * SET_VEHICLE_AUTOMATICALLY_ATTACHES
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @param {any} p2
   * @return {any}
   */
global.SetVehicleAutomaticallyAttaches = function (vehicle, p1, p2) {
  return Citizen.invokeNative('0x501354951cd942de', vehicle, p1, p2, _r);
};

/**
   * SET_VEHICLE_BODY_HEALTH
   *
   * @param {number} vehicle
   * @param {number} value
   * @return {void}
   */
global.SetVehicleBodyHealth = function (vehicle, value) {
  return Citizen.invokeNative('0x55ccaae4f28c67a0', vehicle, _fv(value));
};

/**
   * SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.SetVehicleBrokenPartsDontAffectAiHandling = function (vehicle, p1) {
  return Citizen.invokeNative('0xcec4ca2cab8fa98c', vehicle, p1);
};

/**
   * SET_VEHICLE_CAN_BE_TARGETTED
   *
   * @param {number} vehicle
   * @param {boolean} state
   * @return {void}
   */
global.SetVehicleCanBeTargetted = function (vehicle, state) {
  return Citizen.invokeNative('0x05254ba0b44adc16', vehicle, state);
};

/**
   * SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleCanBeUsedByFleeingPeds = function (vehicle, toggle) {
  return Citizen.invokeNative('0xe42952510f84afdb', vehicle, toggle);
};

/**
   * SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED
   *
   * @param {number} vehicle
   * @param {boolean} state
   * @return {void}
   */
global.SetVehicleCanBeVisiblyDamaged = function (vehicle, state) {
  return Citizen.invokeNative('0x4bf8131ae811541c', vehicle, state);
};

/**
   * SET_VEHICLE_CAN_BREAK
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleCanBreak = function (vehicle, toggle) {
  return Citizen.invokeNative('0xc5ed9d59b4646611', vehicle, toggle);
};

/**
   * SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.SetVehicleCanEjectPassengersIfLocked = function (vehicle, p1) {
  return Citizen.invokeNative('0x065d03a9d6b2c6b5', vehicle, p1);
};

/**
   * SET_VEHICLE_DAMAGE
   * Apply damage to vehicle at a location. Location is relative to vehicle model (not world).
   * 
   * Radius of effect damage applied in a sphere at impact location
   *
   * @param {number} vehicle
   * @param {number} xOffset
   * @param {number} yOffset
   * @param {number} zOffset
   * @param {number} damage
   * @param {number} radius
   * @param {boolean} p6
   * @return {void}
   */
global.SetVehicleDamage = function (vehicle, xOffset, yOffset, zOffset, damage, radius, p6) {
  return Citizen.invokeNative('0x1d7678f81452bb41', vehicle, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(damage), _fv(radius), p6);
};

/**
   * SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME
   *
   * @param {number} multiplier
   * @return {void}
   */
global.SetVehicleDensityMultiplierThisFrame = function (multiplier) {
  return Citizen.invokeNative('0x606374ebfc27b133', _fv(multiplier));
};

/**
   * SET_VEHICLE_DIRT_LEVEL
   *
   * @param {number} vehicle
   * @param {number} dirtLevel
   * @return {void}
   */
global.SetVehicleDirtLevel = function (vehicle, dirtLevel) {
  return Citizen.invokeNative('0x758c3460ee915d0a', vehicle, _fv(dirtLevel));
};

/**
   * SET_VEHICLE_DOORS_LOCKED
   *
   * @param {number} vehicle
   * @param {number} doorLockStatus
   * @return {void}
   */
global.SetVehicleDoorsLocked = function (vehicle, doorLockStatus) {
  return Citizen.invokeNative('0x96f78a6a075d55d9', vehicle, doorLockStatus);
};

/**
   * SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleDoorsLockedForAllPlayers = function (vehicle, toggle) {
  return Citizen.invokeNative('0x2381977da948f8dc', vehicle, toggle);
};

/**
   * SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER
   *
   * @param {number} vehicle
   * @param {number} player
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleDoorsLockedForPlayer = function (vehicle, player, toggle) {
  return Citizen.invokeNative('0x359a8ea1fb8d6f0f', vehicle, player, toggle);
};

/**
   * SET_VEHICLE_DOORS_LOCKED_FOR_TEAM
   *
   * @param {number} vehicle
   * @param {number} team
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleDoorsLockedForTeam = function (vehicle, team, toggle) {
  return Citizen.invokeNative('0xe712bc978770f105', vehicle, team, toggle);
};

/**
   * SET_VEHICLE_DOORS_SHUT
   * Closes all doors of a vehicle:
   *
   * @param {number} vehicle
   * @param {boolean} closeInstantly
   * @return {void}
   */
global.SetVehicleDoorsShut = function (vehicle, closeInstantly) {
  return Citizen.invokeNative('0xa4ffcd645b11f25a', vehicle, closeInstantly);
};

/**
   * SET_VEHICLE_DOORS_TO_OPEN_AT_ANY_DISTANCE
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleDoorsToOpenAtAnyDistance = function (vehicle, toggle) {
  return Citizen.invokeNative('0x362cedd2a41e0747', vehicle, toggle);
};

/**
   * SET_VEHICLE_DOOR_BROKEN
   * doorId: see SET_VEHICLE_DOOR_SHUT
   *
   * @param {number} vehicle
   * @param {number} doorId
   * @param {boolean} deleteDoor
   * @return {void}
   */
global.SetVehicleDoorBroken = function (vehicle, doorId, deleteDoor) {
  return Citizen.invokeNative('0x9666cf20a1c6d780', vehicle, doorId, deleteDoor);
};

/**
   * SET_VEHICLE_DOOR_CONTROL
   * doorId: see SET_VEHICLE_DOOR_SHUT
   *
   * @param {number} vehicle
   * @param {number} doorId
   * @param {number} speed
   * @param {number} angle
   * @return {void}
   */
global.SetVehicleDoorControl = function (vehicle, doorId, speed, angle) {
  return Citizen.invokeNative('0xd57f10ebba814ecf', vehicle, doorId, speed, _fv(angle));
};

/**
   * SET_VEHICLE_DOOR_LATCHED
   * doorId: see SET_VEHICLE_DOOR_SHUT
   *
   * @param {number} vehicle
   * @param {number} doorId
   * @param {boolean} p2
   * @param {boolean} p3
   * @param {boolean} p4
   * @return {void}
   */
global.SetVehicleDoorLatched = function (vehicle, doorId, p2, p3, p4) {
  return Citizen.invokeNative('0x06f8a202eb312a3c', vehicle, doorId, p2, p3, p4);
};

/**
   * SET_VEHICLE_DOOR_OPEN
   * doorId: see SET_VEHICLE_DOOR_SHUT
   * Can also be used on trains and its wagons
   *
   * @param {number} vehicle
   * @param {number} doorId
   * @param {boolean} loose
   * @param {boolean} openInstantly
   * @return {void}
   */
global.SetVehicleDoorOpen = function (vehicle, doorId, loose, openInstantly) {
  return Citizen.invokeNative('0x550ce392a4672412', vehicle, doorId, loose, openInstantly);
};

/**
   * SET_VEHICLE_DOOR_SHUT
   * doorId: enum eDoorId
   * {
   *   VEH_EXT_DOOR_INVALID_ID = -1,
   *   VEH_EXT_DOOR_DSIDE_F,
   *   VEH_EXT_DOOR_DSIDE_M,
   *   VEH_EXT_DOOR_DSIDE_M1,
   *   VEH_EXT_DOOR_DSIDE_M2,
   *   VEH_EXT_DOOR_DSIDE_R,
   *   VEH_EXT_DOOR_PSIDE_F,
   *   VEH_EXT_DOOR_PSIDE_M,
   *   VEH_EXT_DOOR_PSIDE_M1,
   *   VEH_EXT_DOOR_PSIDE_M2,
   *   VEH_EXT_DOOR_PSIDE_R,
   *   VEH_EXT_BONNET,
   *   VEH_EXT_BOOT
   * };
   *
   * @param {number} vehicle
   * @param {number} doorId
   * @param {boolean} closeInstantly
   * @return {void}
   */
global.SetVehicleDoorShut = function (vehicle, doorId, closeInstantly) {
  return Citizen.invokeNative('0x6a3c24b91fd0ea09', vehicle, doorId, closeInstantly);
};

/**
   * SET_VEHICLE_ENGINE_CAN_DEGRADE
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleEngineCanDegrade = function (vehicle, toggle) {
  return Citizen.invokeNative('0x48e4c137a71c2688', vehicle, toggle);
};

/**
   * SET_VEHICLE_ENGINE_HEALTH
   * 1000 is max health
   * Begins leaking gas at around 650 health
   * -999.90002441406 appears to be minimum health, although nothing special occurs <- false statement
   * 
   * -------------------------
   * Minimum: -4000
   * Maximum: 1000
   * 
   * -4000: Engine is destroyed
   * 0 and below: Engine catches fire and health rapidly declines
   * 300: Engine is smoking and losing functionality
   * 1000: Engine is perfect
   *
   * @param {number} vehicle
   * @param {number} health
   * @return {void}
   */
global.SetVehicleEngineHealth = function (vehicle, health) {
  return Citizen.invokeNative('0x8bdc5b998b4654ef', vehicle, _fv(health));
};

/**
   * SET_VEHICLE_ENGINE_ON
   * Starts or stops the engine on the specified vehicle.
   * 
   * vehicle: The vehicle to start or stop the engine on.
   * value: true to turn the vehicle on; false to turn it off.
   * instantly: if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine.
   *
   * @param {number} vehicle
   * @param {boolean} value
   * @param {boolean} instantly
   * @return {void}
   */
global.SetVehicleEngineOn = function (vehicle, value, instantly) {
  return Citizen.invokeNative('0xb64cfa14cb9a2e78', vehicle, value, instantly);
};

/**
   * SET_VEHICLE_EXCLUSIVE_DRIVER
   * index: 0 - 1
   * 
   * Used to be incorrectly named _SET_VEHICLE_EXCLUSIVE_DRIVER_2
   *
   * @param {number} vehicle
   * @param {number} ped
   * @param {number} index
   * @return {void}
   */
global.SetVehicleExclusiveDriver = function (vehicle, ped, index) {
  return Citizen.invokeNative('0xc6b9bf123b9463b6', vehicle, ped, index);
};

/**
   * SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE
   * Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleExplodesOnHighExplosionDamage = function (vehicle, toggle) {
  return Citizen.invokeNative('0xa402939c6761e1a3', vehicle, toggle);
};

/**
   * SET_VEHICLE_EXTRA
   * Note: only some vehicle have extras
   * https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_extras.lua
   *
   * @param {number} vehicle
   * @param {number} extraId
   * @param {boolean} disable
   * @return {void}
   */
global.SetVehicleExtra = function (vehicle, extraId, disable) {
  return Citizen.invokeNative('0xbb6f89150bc9d16b', vehicle, extraId, disable);
};

/**
   * SET_VEHICLE_FIXED
   * This fixes a vehicle.
   * If the vehicle's engine's broken then you cannot fix it with this native.
   *
   * @param {number} vehicle
   * @return {void}
   */
global.SetVehicleFixed = function (vehicle) {
  return Citizen.invokeNative('0x79811282a9d1ae56', vehicle);
};

/**
   * SET_VEHICLE_FORWARD_SPEED
   *
   * @param {number} vehicle
   * @param {number} speed
   * @return {void}
   */
global.SetVehicleForwardSpeed = function (vehicle, speed) {
  return Citizen.invokeNative('0xf9f92af49f12f6e7', vehicle, _fv(speed));
};

/**
   * SET_VEHICLE_HANDBRAKE
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleHandbrake = function (vehicle, toggle) {
  return Citizen.invokeNative('0x91be51aec4e99710', vehicle, toggle);
};

/**
   * SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER
   *
   * @param {number} vehicle
   * @param {boolean} owned
   * @return {void}
   */
global.SetVehicleHasBeenOwnedByPlayer = function (vehicle, owned) {
  return Citizen.invokeNative('0xbb5a3fa8ed3979c5', vehicle, owned);
};

/**
   * SET_VEHICLE_HAS_STRONG_AXLES
   * if true, axles won't bend.
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleHasStrongAxles = function (vehicle, toggle) {
  return Citizen.invokeNative('0x252253c8a45aa1fc', vehicle, toggle);
};

/**
   * SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.SetVehicleHasUnbreakableLights = function (vehicle, p1) {
  return Citizen.invokeNative('0xc903855e028a05f2', vehicle, p1);
};

/**
   * SET_VEHICLE_INACTIVE_DURING_PLAYBACK
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleInactiveDuringPlayback = function (vehicle, toggle) {
  return Citizen.invokeNative('0x4ea71b4c9db3c3f1', vehicle, toggle);
};

/**
   * SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED
   * doorId: see SET_VEHICLE_DOOR_SHUT
   *
   * @param {number} vehicle
   * @param {number} doorId
   * @param {number} doorLockStatus
   * @return {void}
   */
global.SetVehicleIndividualDoorsLocked = function (vehicle, doorId, doorLockStatus) {
  return Citizen.invokeNative('0xa9f1d75195cc40f6', vehicle, doorId, doorLockStatus);
};

/**
   * SET_VEHICLE_INFLUENCES_WANTED_LEVEL
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleInfluencesWantedLevel = function (vehicle, toggle) {
  return Citizen.invokeNative('0xc1842f40fd501da2', vehicle, toggle);
};

/**
   * SET_VEHICLE_IS_CONSIDERED_BY_PLAYER
   * Setting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleIsConsideredByPlayer = function (vehicle, toggle) {
  return Citizen.invokeNative('0x54800d386c5825e5', vehicle, toggle);
};

/**
   * SET_VEHICLE_IS_STOLEN
   *
   * @param {number} vehicle
   * @param {boolean} isStolen
   * @return {void}
   */
global.SetVehicleIsStolen = function (vehicle, isStolen) {
  return Citizen.invokeNative('0x6c32fc81dff25c9a', vehicle, isStolen);
};

/**
   * SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleKeepEngineOnWhenAbandoned = function (vehicle, toggle) {
  return Citizen.invokeNative('0x1549ba7fe83a2383', vehicle, toggle);
};

/**
   * SET_VEHICLE_LIGHTS
   * Sets the vehicle's lights state.
   *
   * @param {number} vehicle
   * @param {number} state
   * @return {void}
   */
global.SetVehicleLights = function (vehicle, state) {
  return Citizen.invokeNative('0x629f0a0e952cae7d', vehicle, state);
};

/**
   * SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE
   * _SET_VEHICLE_LI*
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.SetVehicleLimitSpeedWhenPlayerInactive = function (vehicle, p1) {
  return Citizen.invokeNative('0x8f75941c86eebfca', vehicle, p1);
};

/**
   * SET_VEHICLE_LOD_MULTIPLIER
   *
   * @param {number} vehicle
   * @param {number} multiplier
   * @return {void}
   */
global.SetVehicleLodMultiplier = function (vehicle, multiplier) {
  return Citizen.invokeNative('0x5f5e2b1b9eaecc0f', vehicle, _fv(multiplier));
};

/**
   * SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.SetVehicleMayBeUsedByGotoPointAnyMeans = function (vehicle, p1) {
  return Citizen.invokeNative('0x7549b9e841940695', vehicle, p1);
};

/**
   * SET_VEHICLE_NOT_STEALABLE_AMBIENTLY
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.SetVehicleNotStealableAmbiently = function (vehicle, p1) {
  return Citizen.invokeNative('0x09c970ae59abf6b2', vehicle, p1);
};

/**
   * SET_VEHICLE_ON_GROUND_PROPERLY
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {boolean}
   */
global.SetVehicleOnGroundProperly = function (vehicle, p1) {
  return Citizen.invokeNative('0x7263332501e07f52', vehicle, p1, _r);
};

/**
   * SET_VEHICLE_PETROL_TANK_HEALTH
   * 1000 is max health
   *
   * @param {number} vehicle
   * @param {number} health
   * @return {void}
   */
global.SetVehiclePetrolTankHealth = function (vehicle, health) {
  return Citizen.invokeNative('0x6ab2918ee3bec94c', vehicle, _fv(health));
};

/**
   * SET_VEHICLE_PROVIDES_COVER
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleProvidesCover = function (vehicle, toggle) {
  return Citizen.invokeNative('0x652712478f1721f4', vehicle, toggle);
};

/**
   * SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.SetVehicleRespectsLocksWhenHasDriver = function (vehicle, p1) {
  return Citizen.invokeNative('0x33992a808df1c1ba', vehicle, p1);
};

/**
   * SET_VEHICLE_SHOOT_AT_TARGET
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {void}
   */
global.SetVehicleShootAtTarget = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xb79be78c665b3e6d', p0, p1, p2, p3, p4, p5);
};

/**
   * SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleStaysFrozenWhenCleanedUp = function (vehicle, toggle) {
  return Citizen.invokeNative('0x23a3ab86e0807721', vehicle, toggle);
};

/**
   * SET_VEHICLE_STEER_BIAS
   * Locks the vehicle's steering to the desired angle, explained below.
   * 
   * Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.
   * 
   * Steer bias:
   * -1.0 = full right
   * 0.0 = centered steering
   * 1.0 = full left
   *
   * @param {number} vehicle
   * @param {number} value
   * @return {void}
   */
global.SetVehicleSteerBias = function (vehicle, value) {
  return Citizen.invokeNative('0x84daae11e9ee4fc3', vehicle, _fv(value));
};

/**
   * SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.SetVehicleStopInstantlyWhenPlayerInactive = function (vehicle, p1) {
  return Citizen.invokeNative('0xc84e138448507567', vehicle, p1);
};

/**
   * SET_VEHICLE_STRONG
   * If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleStrong = function (vehicle, toggle) {
  return Citizen.invokeNative('0xab315515c9f8803d', vehicle, toggle);
};

/**
   * SET_VEHICLE_TYRES_CAN_BURST
   * Allows you to toggle bulletproof tires.
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleTyresCanBurst = function (vehicle, toggle) {
  return Citizen.invokeNative('0xebd0a4e935106fe5', vehicle, toggle);
};

/**
   * SET_VEHICLE_UNDRIVEABLE
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleUndriveable = function (vehicle, toggle) {
  return Citizen.invokeNative('0x6e884bab713a2a94', vehicle, toggle);
};

/**
   * SET_VEHICLE_WHEELS_CAN_BREAK
   *
   * @param {number} vehicle
   * @param {boolean} enabled
   * @return {void}
   */
global.SetVehicleWheelsCanBreak = function (vehicle, enabled) {
  return Citizen.invokeNative('0x839137c40275fb77', vehicle, enabled);
};

/**
   * SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.SetVehicleWheelsCanBreakOffWhenBlowUp = function (vehicle, toggle) {
  return Citizen.invokeNative('0xc462c79379abbcb1', vehicle, toggle);
};

/**
   * SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE
   * SET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle)
   *
   * @param {number} vehicle
   * @param {number} time
   * @return {void}
   */
global.SkipTimeInPlaybackRecordedVehicle = function (vehicle, time) {
  return Citizen.invokeNative('0x5f5e6379c59efc56', vehicle, _fv(time));
};

/**
   * START_PLAYBACK_RECORDED_VEHICLE
   * p3 is some flag related to 'trailers' (invokes CVehicle::GetTrailer).
   * 
   * See REQUEST_VEHICLE_RECORDING
   *
   * @param {number} vehicle
   * @param {number} recording
   * @param {string | number} script
   * @param {boolean} p3
   * @return {void}
   */
global.StartPlaybackRecordedVehicle = function (vehicle, recording, script, p3) {
  return Citizen.invokeNative('0x4932b84e3276508e', vehicle, recording, script, p3);
};

/**
   * START_VEHICLE_HORN
   * Sounds the horn for the specified vehicle.
   * 
   * vehicle: The vehicle to activate the horn for.
   * mode: The hash of "NORMAL" or "HELDDOWN". Can be 0.
   * duration: The duration to sound the horn, in milliseconds.
   * 
   * Note: If a player is in the vehicle, it will only sound briefly.
   *
   * @param {number} vehicle
   * @param {number} duration
   * @param {number} mode
   * @param {boolean} forever
   * @return {void}
   */
global.StartVehicleHorn = function (vehicle, duration, mode, forever) {
  return Citizen.invokeNative('0xb4e3bfc39ca16057', vehicle, duration, _ch(mode), forever);
};

/**
   * STOP_BRINGING_VEHICLE_TO_HALT
   * Old name: _STOP_BRING_VEHICLE_TO_HALT
   *
   * @param {number} vehicle
   * @return {void}
   */
global.StopBringingVehicleToHalt = function (vehicle) {
  return Citizen.invokeNative('0x7c06330bfdda182e', vehicle);
};

/**
   * STOP_PLAYBACK_RECORDED_VEHICLE
   *
   * @param {number} vehicle
   * @return {void}
   */
global.StopPlaybackRecordedVehicle = function (vehicle) {
  return Citizen.invokeNative('0xbf9b4d6267e8c26d', vehicle);
};

/**
   * TRACK_VEHICLE_VISIBILITY
   *
   * @param {number} vehicle
   * @return {void}
   */
global.TrackVehicleVisibility = function (vehicle) {
  return Citizen.invokeNative('0x1f3969b140dee157', vehicle);
};

/**
   * _0x012701ED938B85DE
   * Only used in SP Scripts.
   * Related to Vehicle Speed.
   *
   * @param {number} p0
   * @param {number} p1
   * @return {void}
   */
global.N_0x012701ED938B85DE = function (p0, p1) {
  return Citizen.invokeNative('0x012701ed938b85de', _fv(p0), _fv(p1));
};

/**
   * _0x0355FE37240E2C77
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x0355FE37240E2C77 = function (p0, p1) {
  return Citizen.invokeNative('0x0355fe37240e2c77', p0, p1);
};

/**
   * _0x04F0579DBDD32F34
   * _SET_VEHICLE_*
   *
   * @param {number} vehicle
   * @return {void}
   */
global.N_0x04F0579DBDD32F34 = function (vehicle) {
  return Citizen.invokeNative('0x04f0579dbdd32f34', vehicle);
};

/**
   * _0x0516FAE561276EFC
   * Takes value returned from 0x45853F4E17D847D5
   *
   * @param {number} trackIndex
   * @return {boolean}
   */
global.N_0x0516FAE561276EFC = function (trackIndex) {
  return Citizen.invokeNative('0x0516fae561276efc', trackIndex, _r);
};

/**
   * _0x06A09A6E0C6D2A84
   * _SET_TRAIN_*
   *
   * @param {number} train
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x06A09A6E0C6D2A84 = function (train, p1) {
  return Citizen.invokeNative('0x06a09a6e0c6d2a84', train, p1);
};

/**
   * _0x0794199B25E499E1
   * _SET_VEHICLE_S*
   *
   * @param {number} wagon
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x0794199B25E499E1 = function (wagon, p1) {
  return Citizen.invokeNative('0x0794199b25e499e1', wagon, p1);
};

/**
   * _0x07E2E21E799080A0
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x07E2E21E799080A0 = function (p0, p1) {
  return Citizen.invokeNative('0x07e2e21e799080a0', p0, p1);
};

/**
   * _RETURN_TRAIN_INFO_FROM_HANDLE
   * Outputs track hash and junction index on given train vehicle handle.
   * _RESET_VEHICLE_* (?)
   *
   * @param {number} train
   * @return {[boolean, number, number]}
   */
global.ReturnTrainInfoFromHandle = function (train) {
  return Citizen.invokeNative('0x09034479e6e3e269', train, _i, _i, _r);
};

/**
   * _0x0BA4250D20007C2E
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x0BA4250D20007C2E = function (p0) {
  return Citizen.invokeNative('0x0ba4250d20007c2e', p0, _r);
};

/**
   * _0x0CD7914D17A970AB
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x0CD7914D17A970AB = function (p0, p1) {
  return Citizen.invokeNative('0x0cd7914d17a970ab', p0, p1);
};

/**
   * _0x0D5FDF0D36FA10CD
   *
   * @param {number} trackIndex
   * @return {void}
   */
global.N_0x0D5FDF0D36FA10CD = function (trackIndex) {
  return Citizen.invokeNative('0x0d5fdf0d36fa10cd', trackIndex);
};

/**
   * _0x0E558D3A49D759D6
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x0E558D3A49D759D6 = function (p0, p1) {
  return Citizen.invokeNative('0x0e558d3a49d759d6', p0, p1, _r);
};

/**
   * _0x0F7F603BDE08C4D3
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x0F7F603BDE08C4D3 = function (p0) {
  return Citizen.invokeNative('0x0f7f603bde08c4d3', p0);
};

/**
   * _0x0FDDEE66E3465726
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x0FDDEE66E3465726 = function (p0) {
  return Citizen.invokeNative('0x0fddee66e3465726', p0, _r);
};

/**
   * _0x104D9A7B1C0D0783
   *
   * @param {number} vehicle
   * @param {number} p1
   * @return {void}
   */
global.N_0x104D9A7B1C0D0783 = function (vehicle, p1) {
  return Citizen.invokeNative('0x104d9a7b1c0d0783', vehicle, _fv(p1));
};

/**
   * _0x1121B07088ED3013
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x1121B07088ED3013 = function (p0) {
  return Citizen.invokeNative('0x1121b07088ed3013', p0, _r);
};

/**
   * _0x1180A2974D251B7B
   * Returns p1 for 0xBA958F68031DDBFC (stationIndex)
   * _GET_N* (NEAREST_STATION_FOR_TRAIN?)
   *
   * @param {number} train
   * @return {number}
   */
global.N_0x1180A2974D251B7B = function (train) {
  return Citizen.invokeNative('0x1180a2974d251b7b', train, _r, _ri);
};

/**
   * _0x12F6C6ED3EFF42DE
   * Params: coords = GET_ENTITY_VELOCITY
   * _SET_VELOCITY*
   *
   * @param {number} vehicle
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.N_0x12F6C6ED3EFF42DE = function (vehicle, x, y, z) {
  return Citizen.invokeNative('0x12f6c6ed3eff42de', vehicle, _fv(x), _fv(y), _fv(z));
};

/**
   * _0x13C190302369308B
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x13C190302369308B = function (p0) {
  return Citizen.invokeNative('0x13c190302369308b', p0, _r);
};

/**
   * _0x13EB275BF81636D1
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x13EB275BF81636D1 = function (p0, p1) {
  return Citizen.invokeNative('0x13eb275bf81636d1', p0, p1);
};

/**
   * _0x14DA8C4BC2CCD90A
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x14DA8C4BC2CCD90A = function (p0) {
  return Citizen.invokeNative('0x14da8c4bc2ccd90a', p0, _r);
};

/**
   * _0x15206E88FF7617DF
   *
   * @param {number} trackIndex
   * @param {number} p1
   * @return {void}
   */
global.N_0x15206E88FF7617DF = function (trackIndex, p1) {
  return Citizen.invokeNative('0x15206e88ff7617df', trackIndex, _fv(p1));
};

/**
   * _0x15CC8C33D7FFCC4A
   *
   * @param {number} vehicle
   * @param {number} p1
   * @return {void}
   */
global.N_0x15CC8C33D7FFCC4A = function (vehicle, p1) {
  return Citizen.invokeNative('0x15cc8c33d7ffcc4a', vehicle, p1);
};

/**
   * _0x160C1B5AB48AB87C
   *
   * @param {number} train
   * @param {number} p1
   * @return {void}
   */
global.N_0x160C1B5AB48AB87C = function (train, p1) {
  return Citizen.invokeNative('0x160c1b5ab48ab87c', train, _fv(p1));
};

/**
   * _0x165BE2001E5E4B75
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x165BE2001E5E4B75 = function (p0) {
  return Citizen.invokeNative('0x165be2001e5e4b75', p0);
};

/**
   * _0x16B86A49E072AA85
   *
  
   * @return {void}
   */
global.N_0x16B86A49E072AA85 = function () {
  return Citizen.invokeNative('0x16b86a49e072aa85');
};

/**
   * _0x172E9DD35858DCD7
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x172E9DD35858DCD7 = function (p0) {
  return Citizen.invokeNative('0x172e9dd35858dcd7', p0);
};

/**
   * _ARE_ANY_VEHICLE_WHEELS_DESTROYED
   * returns true if any wheel is destroyed/detached
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.AreAnyVehicleWheelsDestroyed = function (vehicle) {
  return Citizen.invokeNative('0x18714953cced17d3', vehicle, _r);
};

/**
   * _0x1A861F899EBBE17C
   *
   * @param {number} train
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x1A861F899EBBE17C = function (train, p1) {
  return Citizen.invokeNative('0x1a861f899ebbe17c', train, p1);
};

/**
   * _0x1BFBAFCC6760FF02
   *
   * @param {number} train
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x1BFBAFCC6760FF02 = function (train, p1) {
  return Citizen.invokeNative('0x1bfbafcc6760ff02', train, p1);
};

/**
   * _0x2045429505158D1A
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x2045429505158D1A = function (p0) {
  return Citizen.invokeNative('0x2045429505158d1a', p0, _r);
};

/**
   * _0x2200AB13CBD10F4E
   *
   * @param {number} vehicle
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {boolean} p4
   * @param {number} p5
   * @return {void}
   */
global.N_0x2200AB13CBD10F4E = function (vehicle, x, y, z, p4, p5) {
  return Citizen.invokeNative('0x2200ab13cbd10f4e', vehicle, _fv(x), _fv(y), _fv(z), p4, _fv(p5));
};

/**
   * _0x23F66C36F8E5EAAB
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x23F66C36F8E5EAAB = function (p0, p1) {
  return Citizen.invokeNative('0x23f66c36f8e5eaab', p0, p1);
};

/**
   * _0x27E3F2B57209FA54
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x27E3F2B57209FA54 = function (p0, p1) {
  return Citizen.invokeNative('0x27e3f2b57209fa54', p0, p1);
};

/**
   * _0x288CBB414C3C2FBB
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x288CBB414C3C2FBB = function (p0) {
  return Citizen.invokeNative('0x288cbb414c3c2fbb', p0, _r);
};

/**
   * _0x2A7413168F6CD5A8
   *
  
   * @return {void}
   */
global.N_0x2A7413168F6CD5A8 = function () {
  return Citizen.invokeNative('0x2a7413168f6cd5a8');
};

/**
   * _0x2BB2B5BCF0DF8008
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x2BB2B5BCF0DF8008 = function (p0, p1) {
  return Citizen.invokeNative('0x2bb2b5bcf0df8008', p0, p1);
};

/**
   * _0x2C46D2A591D8C322
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0x2C46D2A591D8C322 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x2c46d2a591d8c322', p0, p1, p2, _r);
};

/**
   * _0x3053064F909B5F42
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x3053064F909B5F42 = function (p0, p1) {
  return Citizen.invokeNative('0x3053064f909b5f42', p0, p1);
};

/**
   * _0x3137EDC899E6DAE4
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x3137EDC899E6DAE4 = function (p0, p1) {
  return Citizen.invokeNative('0x3137edc899e6dae4', p0, p1);
};

/**
   * _0x331CBD247FC5DAA8
   * Returns trackIndex
   *
   * @param {number} configHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {boolean} direction
   * @param {boolean} p5
   * @return {number}
   */
global.N_0x331CBD247FC5DAA8 = function (configHash, x, y, z, direction, p5) {
  return Citizen.invokeNative('0x331cbd247fc5daa8', _ch(configHash), _fv(x), _fv(y), _fv(z), direction, p5, _r, _ri);
};

/**
   * _0x34BCF6209B9668A7
   *
   * @param {number} trackIndex
   * @param {any} p1
   * @return {void}
   */
global.N_0x34BCF6209B9668A7 = function (trackIndex, p1) {
  return Citizen.invokeNative('0x34bcf6209b9668a7', trackIndex, p1);
};

/**
   * _0x37D238BE69F7378A
   *
   * @param {number} trackIndex
   * @return {boolean}
   */
global.N_0x37D238BE69F7378A = function (trackIndex) {
  return Citizen.invokeNative('0x37d238be69f7378a', trackIndex, _r);
};

/**
   * _0x38E7DD70A242D5CB
   *
   * @param {number} trackIndex
   * @param {number} p1
   * @return {void}
   */
global.N_0x38E7DD70A242D5CB = function (trackIndex, p1) {
  return Citizen.invokeNative('0x38e7dd70a242d5cb', trackIndex, p1);
};

/**
   * _0x3ABFA128F5BF5A70
   * Called together with 0xE6C5E2125EB210C1 in R* Script medium_update
   *
   * @param {number} trainTrack
   * @param {number} junctionIndex
   * @param {boolean} enabled
   * @return {void}
   */
global.N_0x3ABFA128F5BF5A70 = function (trainTrack, junctionIndex, enabled) {
  return Citizen.invokeNative('0x3abfa128f5bf5a70', _ch(trainTrack), junctionIndex, enabled);
};

/**
   * _0x3D86997A86FEEF0D
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x3D86997A86FEEF0D = function (p0, p1) {
  return Citizen.invokeNative('0x3d86997a86feef0d', p0, p1);
};

/**
   * _0x41365DB586CD9E8E
   *
   * @param {number} trackIndex
   * @param {number} p1
   * @return {void}
   */
global.N_0x41365DB586CD9E8E = function (trackIndex, p1) {
  return Citizen.invokeNative('0x41365db586cd9e8e', trackIndex, _fv(p1));
};

/**
   * _0x41F0B254DDF71473
   * _H*
   *
   * @param {number} wagon
   * @return {void}
   */
global.N_0x41F0B254DDF71473 = function (wagon) {
  return Citizen.invokeNative('0x41f0b254ddf71473', wagon);
};

/**
   * _0x42404D57D621601A
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x42404D57D621601A = function (p0) {
  return Citizen.invokeNative('0x42404d57d621601a', p0, _r);
};

/**
   * _0x427C919E9809E370
   *
   * @param {number} trackIndex
   * @param {number} p1
   * @return {void}
   */
global.N_0x427C919E9809E370 = function (trackIndex, p1) {
  return Citizen.invokeNative('0x427c919e9809e370', trackIndex, p1);
};

/**
   * _0x485B05EF05B9AEE9
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x485B05EF05B9AEE9 = function (p0, p1) {
  return Citizen.invokeNative('0x485b05ef05b9aee9', p0, p1);
};

/**
   * _0x4C05B42A8D937796
   *
  
   * @return {void}
   */
global.N_0x4C05B42A8D937796 = function () {
  return Citizen.invokeNative('0x4c05b42a8d937796');
};

/**
   * _0x4C60C333F9CCA2B6
   * Params: p1 usually true in R* Scripts
   * _SET_DRAFT_VEHICLE_*
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x4C60C333F9CCA2B6 = function (vehicle, p1) {
  return Citizen.invokeNative('0x4c60c333f9cca2b6', vehicle, p1);
};

/**
   * _0x51C7694E140FAE43
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x51C7694E140FAE43 = function (p0) {
  return Citizen.invokeNative('0x51c7694e140fae43', p0, _r);
};

/**
   * _0x5AADC7BBBB1BCEEB
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {void}
   */
global.N_0x5AADC7BBBB1BCEEB = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0x5aadc7bbbb1bceeb', p0, p1, p2, p3, p4);
};

/**
   * _0x615B3B8E73634509
   *
   * @param {number} trackIndex
   * @param {number} p1
   * @return {void}
   */
global.N_0x615B3B8E73634509 = function (trackIndex, p1) {
  return Citizen.invokeNative('0x615b3b8e73634509', trackIndex, _fv(p1));
};

/**
   * _0x63509DDF102E08E8
   *
   * @param {number} trackIndex
   * @param {number} p1
   * @return {void}
   */
global.N_0x63509DDF102E08E8 = function (trackIndex, p1) {
  return Citizen.invokeNative('0x63509ddf102e08e8', trackIndex, p1);
};

/**
   * _0x6355602C02EDC6DF
   * Only used in R* Script beat_train_holdup: p1 = 1
   *
   * @param {number} entity
   * @param {any} p1
   * @return {void}
   */
global.N_0x6355602C02EDC6DF = function (entity, p1) {
  return Citizen.invokeNative('0x6355602c02edc6df', entity, p1);
};

/**
   * _0x6703872EC09BC158
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x6703872EC09BC158 = function (p0, p1) {
  return Citizen.invokeNative('0x6703872ec09bc158', p0, p1);
};

/**
   * _0x6835AFEA10E186F4
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x6835AFEA10E186F4 = function (p0, p1) {
  return Citizen.invokeNative('0x6835afea10e186f4', p0, p1);
};

/**
   * _0x68830738A6BFB370
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x68830738A6BFB370 = function (p0, p1) {
  return Citizen.invokeNative('0x68830738a6bfb370', p0, p1);
};

/**
   * _0x697DF68F3A761A50
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x697DF68F3A761A50 = function (p0) {
  return Citizen.invokeNative('0x697df68f3a761a50', p0);
};

/**
   * _0x6B34BE961F639E21
   *
   * @param {number} trackIndex
   * @param {number} p1
   * @return {void}
   */
global.N_0x6B34BE961F639E21 = function (trackIndex, p1) {
  return Citizen.invokeNative('0x6b34be961f639e21', trackIndex, p1);
};

/**
   * _0x6B53F4B811E583D2
   *
   * @param {number} vehicle
   * @param {boolean} toggle
   * @return {void}
   */
global.N_0x6B53F4B811E583D2 = function (vehicle, toggle) {
  return Citizen.invokeNative('0x6b53f4b811e583d2', vehicle, toggle);
};

/**
   * _0x6C87F49BFA181DB5
   * Returns trackIndex
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {number}
   */
global.N_0x6C87F49BFA181DB5 = function (x, y, z) {
  return Citizen.invokeNative('0x6c87f49bfa181db5', _fv(x), _fv(y), _fv(z), _r, _ri);
};

/**
   * _0x6DE072AC8A95FFC1
   * _SET_INSTANTLY_* - _SET_MISSION_TRAIN*
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x6DE072AC8A95FFC1 = function (vehicle, p1) {
  return Citizen.invokeNative('0x6de072ac8a95ffc1', vehicle, p1);
};

/**
   * _0x6EA1273D525427F4
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x6EA1273D525427F4 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x6ea1273d525427f4', p0, p1, p2);
};

/**
   * _0x6FD7BDF10304363A
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x6FD7BDF10304363A = function (p0, p1) {
  return Citizen.invokeNative('0x6fd7bdf10304363a', p0, p1);
};

/**
   * _0x703D4FB366DA4452
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x703D4FB366DA4452 = function (p0, p1) {
  return Citizen.invokeNative('0x703d4fb366da4452', p0, p1);
};

/**
   * _0x718EB706B6E998A0
   *
   * @param {number} trackIndex
   * @return {void}
   */
global.N_0x718EB706B6E998A0 = function (trackIndex) {
  return Citizen.invokeNative('0x718eb706b6e998a0', trackIndex);
};

/**
   * _0x73118A3EE9C9B6DB
   * _SET_VEHICLE_WHEELS_*
   *
   * @param {number} wagon
   * @param {number} p1
   * @param {boolean} p2
   * @return {void}
   */
global.N_0x73118A3EE9C9B6DB = function (wagon, p1, p2) {
  return Citizen.invokeNative('0x73118a3ee9c9b6db', wagon, p1, p2);
};

/**
   * _0x7408B5C66BA31ADB
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @return {void}
   */
global.N_0x7408B5C66BA31ADB = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
  return Citizen.invokeNative('0x7408b5c66ba31adb', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
};

/**
   * _0x750D42C013F64AE7
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x750D42C013F64AE7 = function (p0, p1) {
  return Citizen.invokeNative('0x750d42c013f64ae7', p0, p1);
};

/**
   * _0x762FDC4C19E5A981
   * Seems to be related while setting a (door) state of specific trains (midlandboxcar05x, privateboxcar01x, privateboxcar02x, midlandrefrigeratorCar, privateArmoured, armoredCar01x)
   *
   * @param {number} trainCarriage
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x762FDC4C19E5A981 = function (trainCarriage, p1) {
  return Citizen.invokeNative('0x762fdc4c19e5a981', trainCarriage, p1);
};

/**
   * _0x7840576C50A13DBA
   *
   * @param {number} train
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x7840576C50A13DBA = function (train, p1) {
  return Citizen.invokeNative('0x7840576c50a13dba', train, p1);
};

/**
   * _0x785639D89F8451AB
   *
   * @param {any} p0
   * @param {any} p1
   * @return {Vector3}
   */
global.N_0x785639D89F8451AB = function (p0, p1) {
  return Citizen.invokeNative('0x785639d89f8451ab', p0, p1, _r, _rv);
};

/**
   * _0x7BE0746539DEF0C8
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x7BE0746539DEF0C8 = function (p0, p1) {
  return Citizen.invokeNative('0x7be0746539def0c8', p0, p1, _r);
};

/**
   * _0x8379E05871AD24E0
   *
  
   * @return {void}
   */
global.N_0x8379E05871AD24E0 = function () {
  return Citizen.invokeNative('0x8379e05871ad24e0');
};

/**
   * _0x850CE59DEC2028F3
   *
   * @param {number} vehicle
   * @param {any} p1
   * @return {void}
   */
global.N_0x850CE59DEC2028F3 = function (vehicle, p1) {
  return Citizen.invokeNative('0x850ce59dec2028f3', vehicle, p1);
};

/**
   * _0x873AAF600CC36DAC
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x873AAF600CC36DAC = function (p0) {
  return Citizen.invokeNative('0x873aaf600cc36dac', p0);
};

/**
   * _0x877EA24EB1614495
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0x877EA24EB1614495 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x877ea24eb1614495', p0, p1, p2, _r);
};

/**
   * _0x87B974E54C71BA7B
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x87B974E54C71BA7B = function (vehicle, p1) {
  return Citizen.invokeNative('0x87b974e54c71ba7b', vehicle, p1);
};

/**
   * _0x8878FF3EEE2868A9
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x8878FF3EEE2868A9 = function (p0, p1) {
  return Citizen.invokeNative('0x8878ff3eee2868a9', p0, p1);
};

/**
   * _0x8DECD262602548B9
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x8DECD262602548B9 = function (p0, p1) {
  return Citizen.invokeNative('0x8decd262602548b9', p0, p1);
};

/**
   * _0x9868C0D0134855F7
   * nullsub, doesn't do anything
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x9868C0D0134855F7 = function (p0) {
  return Citizen.invokeNative('0x9868c0d0134855f7', p0);
};

/**
   * _0x98A7598C579EE871
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x98A7598C579EE871 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x98a7598c579ee871', p0, p1, p2);
};

/**
   * _0x9CC94A948EAF5372
   * _GET_P - _GET_T*
   *
   * @param {number} trackIndex
   * @param {number} stationIndex
   * @return {number}
   */
global.N_0x9CC94A948EAF5372 = function (trackIndex, stationIndex) {
  return Citizen.invokeNative('0x9cc94a948eaf5372', trackIndex, stationIndex, _r, _ri);
};

/**
   * _0x9D12796EF4BF9EA9
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x9D12796EF4BF9EA9 = function (p0) {
  return Citizen.invokeNative('0x9d12796ef4bf9ea9', p0);
};

/**
   * _0x9E8711C81AA17876
   * Forcing high LOD buoyancy for vehicle: p1 = false
   * _SET_A*
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x9E8711C81AA17876 = function (vehicle, p1) {
  return Citizen.invokeNative('0x9e8711c81aa17876', vehicle, p1);
};

/**
   * _0xA13028E22564A1BD
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xA13028E22564A1BD = function (p0, p1) {
  return Citizen.invokeNative('0xa13028e22564a1bd', p0, p1);
};

/**
   * _0xA230A5DDE12ED374
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xA230A5DDE12ED374 = function (p0) {
  return Citizen.invokeNative('0xa230a5dde12ed374', p0);
};

/**
   * _0xA72B1BF3857B94D7
   *
   * @param {number} train
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xA72B1BF3857B94D7 = function (train, p1) {
  return Citizen.invokeNative('0xa72b1bf3857b94d7', train, p1);
};

/**
   * _0xA7966807953A18EE
   *
   * @param {number} trackIndex
   * @param {number} p1
   * @return {void}
   */
global.N_0xA7966807953A18EE = function (trackIndex, p1) {
  return Citizen.invokeNative('0xa7966807953a18ee', trackIndex, _fv(p1));
};

/**
   * _0xA9E185D498B9AC67
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xA9E185D498B9AC67 = function (p0, p1) {
  return Citizen.invokeNative('0xa9e185d498b9ac67', p0, p1, _r);
};

/**
   * _0xAE7E66A61E7C17A5
   * _SET_TRAIN_*
   *
   * @param {number} train
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xAE7E66A61E7C17A5 = function (train, p1) {
  return Citizen.invokeNative('0xae7e66a61e7c17a5', train, p1);
};

/**
   * _0xB4241AD8F5AEE9ED
   *
   * @param {number} trackIndex
   * @return {boolean}
   */
global.N_0xB4241AD8F5AEE9ED = function (trackIndex) {
  return Citizen.invokeNative('0xb4241ad8f5aee9ed', trackIndex, _r);
};

/**
   * _0xB42C87521D1BDD2F
   *
   * @param {number} vehicle
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.N_0xB42C87521D1BDD2F = function (vehicle, x, y, z) {
  return Citizen.invokeNative('0xb42c87521d1bdd2f', vehicle, _fv(x), _fv(y), _fv(z));
};

/**
   * _0xB961DD799A837BD7
   *
  
   * @return {void}
   */
global.N_0xB961DD799A837BD7 = function () {
  return Citizen.invokeNative('0xb961dd799a837bd7');
};

/**
   * _0xC2E62678D602853C
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {void}
   */
global.N_0xC2E62678D602853C = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xc2e62678d602853c', p0, p1, p2, p3, p4, p5, p6);
};

/**
   * _0xC325A6BAA62CF8A2
   * Used in Script Function MC_LOCAL_SETUP_VEH - enabling transitions
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xC325A6BAA62CF8A2 = function (vehicle, p1) {
  return Citizen.invokeNative('0xc325a6baa62cf8a2', vehicle, p1);
};

/**
   * _0xC351394B932A6A50
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xC351394B932A6A50 = function (p0) {
  return Citizen.invokeNative('0xc351394b932a6a50', p0);
};

/**
   * _0xC399CC89FBA05DA0
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xC399CC89FBA05DA0 = function (vehicle, p1) {
  return Citizen.invokeNative('0xc399cc89fba05da0', vehicle, p1);
};

/**
   * _0xC4A2C11FC0D41916
   * _SET_DRAFT_VEHICLE_(STOP?)*
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xC4A2C11FC0D41916 = function (vehicle, p1) {
  return Citizen.invokeNative('0xc4a2c11fc0d41916', vehicle, p1);
};

/**
   * _0xCACAB2B123BBDBD6
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0xCACAB2B123BBDBD6 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xcacab2b123bbdbd6', p0, p1, p2, _r);
};

/**
   * _0xCAFF2C9747103C02
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0xCAFF2C9747103C02 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xcaff2c9747103c02', p0, p1, p2, _r);
};

/**
   * _0xCBC7B6F9A56B79F6
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xCBC7B6F9A56B79F6 = function (p0, p1) {
  return Citizen.invokeNative('0xcbc7b6f9a56b79f6', p0, p1);
};

/**
   * _0xCBF88256E44D5D39
   * Used in Script Function MC_LOCAL_SETUP_VEH - enabling transitions
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xCBF88256E44D5D39 = function (vehicle, p1) {
  return Citizen.invokeNative('0xcbf88256e44d5d39', vehicle, p1);
};

/**
   * _0xCEB1F1EED484A5B4
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xCEB1F1EED484A5B4 = function (p0, p1) {
  return Citizen.invokeNative('0xceb1f1eed484a5b4', p0, p1);
};

/**
   * _0xCF342503CA4C8DF1
   *
   * @param {number} vehicle
   * @param {number} p1
   * @return {void}
   */
global.N_0xCF342503CA4C8DF1 = function (vehicle, p1) {
  return Citizen.invokeNative('0xcf342503ca4c8df1', vehicle, _fv(p1));
};

/**
   * _REQUEST_VEHICLE_ASSET_ANIMS
   *
   * @param {number} ped
   * @param {number} entity
   * @param {number} vehicleAsset
   * @return {void}
   */
global.RequestVehicleAssetAnims = function (ped, entity, vehicleAsset) {
  return Citizen.invokeNative('0xcf9da72002fc16bf', ped, entity, vehicleAsset);
};

/**
   * _0xD0116DF21E6C7B36
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xD0116DF21E6C7B36 = function (p0, p1) {
  return Citizen.invokeNative('0xd0116df21e6c7b36', p0, p1, _r);
};

/**
   * _0xD0AABE5B9F8FA589
   *
   * @param {number} trackIndex
   * @param {number} p1
   * @return {void}
   */
global.N_0xD0AABE5B9F8FA589 = function (trackIndex, p1) {
  return Citizen.invokeNative('0xd0aabe5b9f8fa589', trackIndex, _fv(p1));
};

/**
   * _0xD0BA1853D76683C8
   *
   * @param {number} trackIndex
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {any} p4
   * @return {void}
   */
global.N_0xD0BA1853D76683C8 = function (trackIndex, x, y, z, p4) {
  return Citizen.invokeNative('0xd0ba1853d76683c8', trackIndex, _fv(x), _fv(y), _fv(z), p4);
};

/**
   * _0xD1DF5E54F4ACBE1A
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {any}
   */
global.N_0xD1DF5E54F4ACBE1A = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0xd1df5e54f4acbe1a', p0, p1, p2, p3, p4, p5, p6, _r);
};

/**
   * _0xD1EFA8D68BF5D63D
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0xD1EFA8D68BF5D63D = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xd1efa8d68bf5d63d', p0, p1, p2, p3);
};

/**
   * _0xD21A3D421E7F09F7
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xD21A3D421E7F09F7 = function (p0, p1) {
  return Citizen.invokeNative('0xd21a3d421e7f09f7', p0, p1);
};

/**
   * _0xD4907EF4334C7602
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xD4907EF4334C7602 = function (p0, p1) {
  return Citizen.invokeNative('0xd4907ef4334c7602', p0, p1);
};

/**
   * _0xD826690B5CF3BEFF
   *
   * @param {number} vehicle
   * @param {any} p1
   * @return {void}
   */
global.N_0xD826690B5CF3BEFF = function (vehicle, p1) {
  return Citizen.invokeNative('0xd826690b5cf3beff', vehicle, p1);
};

/**
   * _0xD9BF3ED8EFB67EA3
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {any}
   */
global.N_0xD9BF3ED8EFB67EA3 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xd9bf3ed8efb67ea3', p0, p1, p2, p3, p4, _r);
};

/**
   * _0xDC0556D0F484ECAA
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xDC0556D0F484ECAA = function (p0) {
  return Citizen.invokeNative('0xdc0556d0f484ecaa', p0);
};

/**
   * _0xDC69F6913CCA0B99
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xDC69F6913CCA0B99 = function (p0, p1) {
  return Citizen.invokeNative('0xdc69f6913cca0b99', p0, p1);
};

/**
   * _0xDD100CE1EBBF37E3
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xDD100CE1EBBF37E3 = function (p0, p1) {
  return Citizen.invokeNative('0xdd100ce1ebbf37e3', p0, p1);
};

/**
   * _0xDE8C5B9F65017FA1
   *
   * @param {number} train
   * @return {any}
   */
global.N_0xDE8C5B9F65017FA1 = function (train) {
  return Citizen.invokeNative('0xde8c5b9f65017fa1', train, _r);
};

/**
   * _0xE12F5ED49F44D40D
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xE12F5ED49F44D40D = function (p0) {
  return Citizen.invokeNative('0xe12f5ed49f44d40d', p0);
};

/**
   * _0xE1C0F8781BF130C2
   * Only used in R* SP Script rcm_abigail31: p1 = 5
   * _GET_VEHICLE_T* - _GET_VO*
   *
   * @param {number} wagon
   * @param {number} p1
   * @return {boolean}
   */
global.N_0xE1C0F8781BF130C2 = function (wagon, p1) {
  return Citizen.invokeNative('0xe1c0f8781bf130c2', wagon, p1, _r);
};

/**
   * _0xE682002DB1F30669
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xE682002DB1F30669 = function (p0) {
  return Citizen.invokeNative('0xe682002db1f30669', p0);
};

/**
   * _0xE6BD7DD3FD474415
   *
   * @param {number} train
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xE6BD7DD3FD474415 = function (train, p1) {
  return Citizen.invokeNative('0xe6bd7dd3fd474415', train, p1);
};

/**
   * _0xE777DDF3E78397E8
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xE777DDF3E78397E8 = function (p0) {
  return Citizen.invokeNative('0xe777ddf3e78397e8', p0, _r);
};

/**
   * _0xE78993FF9022C064
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xE78993FF9022C064 = function (p0) {
  return Citizen.invokeNative('0xe78993ff9022c064', p0);
};

/**
   * _0xEF28A614B4B264B8
   * _SET_TRAIN_*
   *
   * @param {number} train
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xEF28A614B4B264B8 = function (train, p1) {
  return Citizen.invokeNative('0xef28a614b4b264b8', train, p1);
};

/**
   * _0xF05DFAF1ADFEF2CD
   * _IS_* (related to CREATE_MISSION_TRAIN)
   *
   * @param {number} trainConfig
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {boolean} direction
   * @param {boolean} p5
   * @return {boolean}
   */
global.N_0xF05DFAF1ADFEF2CD = function (trainConfig, x, y, z, direction, p5) {
  return Citizen.invokeNative('0xf05dfaf1adfef2cd', _ch(trainConfig), _fv(x), _fv(y), _fv(z), direction, p5, _r);
};

/**
   * _0xF57DB8E83DCD8349
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xF57DB8E83DCD8349 = function (p0) {
  return Citizen.invokeNative('0xf57db8e83dcd8349', p0, _r);
};

/**
   * _0xF5EA41C1408695FB
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {any}
   */
global.N_0xF5EA41C1408695FB = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xf5ea41c1408695fb', p0, p1, p2, p3, _r);
};

/**
   * _0xF6E3D38869D0F7AD
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xF6E3D38869D0F7AD = function (p0) {
  return Citizen.invokeNative('0xf6e3d38869d0f7ad', p0);
};

/**
   * _0xF8F7DA13CFBD4532
   *
   * @param {number} trackIndex
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xF8F7DA13CFBD4532 = function (trackIndex, p1) {
  return Citizen.invokeNative('0xf8f7da13cfbd4532', trackIndex, p1);
};

/**
   * _0xFC4F15A7DDDC47B1
   * _SET_DRAFT_VEHICLE_*
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.N_0xFC4F15A7DDDC47B1 = function (vehicle, p1) {
  return Citizen.invokeNative('0xfc4f15a7dddc47b1', vehicle, p1);
};

/**
   * _0xFF2B1F59FB892F14
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xFF2B1F59FB892F14 = function (p0) {
  return Citizen.invokeNative('0xff2b1f59fb892f14', p0);
};

/**
   * _0xFFFE15B433300B8C
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xFFFE15B433300B8C = function (p0, p1, p2) {
  return Citizen.invokeNative('0xfffe15b433300b8c', p0, p1, p2);
};

/**
   * _ADD_TRAIN_TEMPORARY_STOP
   *
   * @param {number} train
   * @param {number} trackIndex
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.AddTrainTemporaryStop = function (train, trackIndex, x, y, z) {
  return Citizen.invokeNative('0x41503629d1139abc', train, trackIndex, _fv(x), _fv(y), _fv(z));
};

/**
   * _ATTACH_DRAFT_VEHICLE_HARNESS_PED
   *
   * @param {number} mount
   * @param {number} draft
   * @param {number} harnessId
   * @return {boolean}
   */
global.AttachDraftVehicleHarnessPed = function (mount, draft, harnessId) {
  return Citizen.invokeNative('0x316cdb5b6e8f4110', mount, draft, harnessId, _r);
};

/**
   * _BREAK_OFF_DRAFT_WHEEL
   * Params: destroyingForce is usually 100f in R* Scripts
   * Similar to 0xD4F5EFB55769D272, _A*
   *
   * @param {number} vehicle
   * @param {number} wheelIndex
   * @param {number} destroyingForce
   * @return {void}
   */
global.BreakOffDraftWheel = function (vehicle, wheelIndex, destroyingForce) {
  return Citizen.invokeNative('0xc372b6a88f6e4ad8', vehicle, wheelIndex, _fv(destroyingForce));
};

/**
   * _BREAK_OFF_VEHICLE_WHEEL
   * wheelIndex 0: left, wheelIndex 1: right, 4 & 5: unknown
   *
   * @param {number} vehicle
   * @param {number} wheelIndex
   * @return {number}
   */
global.BreakOffVehicleWheel = function (vehicle, wheelIndex) {
  return Citizen.invokeNative('0xd4f5efb55769d272', vehicle, wheelIndex, _r, _ri);
};

/**
   * _CREATE_DRAFT_VEHICLE
   * Identical to CREATE_VEHICLE but allows to set draftAnimalPopGroup (see popgroups.#mt for DRAFT_HORSES_*)
   *
   * @param {number} modelHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} heading
   * @param {boolean} isNetwork
   * @param {boolean} bScriptHostVeh
   * @param {boolean} bDontAutoCreateDraftAnimals
   * @param {number} draftAnimalPopGroup
   * @param {boolean} p9
   * @return {number}
   */
global.CreateDraftVehicle = function (modelHash, x, y, z, heading, isNetwork, bScriptHostVeh, bDontAutoCreateDraftAnimals, draftAnimalPopGroup, p9) {
  return Citizen.invokeNative('0x214651fb1dfeba89', _ch(modelHash), _fv(x), _fv(y), _fv(z), _fv(heading), isNetwork, bScriptHostVeh, bDontAutoCreateDraftAnimals, _ch(draftAnimalPopGroup), p9, _r, _ri);
};

/**
   * _CREATE_MISSION_TRAIN
   * configHash: https://alloc8or.re/rdr3/doc/enums/eTrainConfig.txt
   * For more information, see trainconfigs.ymt
   * To make the train AI controlled, set conductor to true and set the speed once.
   *
   * @param {number} configHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {boolean} direction
   * @param {boolean} passengers
   * @param {boolean} p6
   * @param {boolean} conductor
   * @return {number}
   */
global.CreateMissionTrain = function (configHash, x, y, z, direction, passengers, p6, conductor) {
  return Citizen.invokeNative('0xc239dbd9a57d2a71', _ch(configHash), _fv(x), _fv(y), _fv(z), direction, passengers, p6, conductor, _r, _ri);
};

/**
   * _DELETE_VEHICLE_LANTERNS
   * Spawn without lanterns set
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.DeleteVehicleLanterns = function (vehicle) {
  return Citizen.invokeNative('0xe1a83d4a3b5d7938', vehicle, _r);
};

/**
   * _DETACH_DRAFT_VEHICLE_HARNESS_FROM_INDEX
   *
   * @param {number} draft
   * @param {number} harnessId
   * @return {boolean}
   */
global.DetachDraftVehicleHarnessFromIndex = function (draft, harnessId) {
  return Citizen.invokeNative('0x4402960666000e62', draft, harnessId, _r);
};

/**
   * _DETACH_DRAFT_VEHICLE_HARNESS_PED
   *
   * @param {number} draft
   * @param {number} ped
   * @return {boolean}
   */
global.DetachDraftVehicleHarnessPed = function (draft, ped) {
  return Citizen.invokeNative('0xb36d3ec70963be60', draft, ped, _r);
};

/**
   * _DETACH_WAGON_ENTITY_FROM_TRAIN
   * Only used in train_robbery4 R* Script
   * _C* - _DEL*
   *
   * @param {number} entity
   * @return {void}
   */
global.DetachWagonEntityFromTrain = function (entity) {
  return Citizen.invokeNative('0x54cbdd6e1b4cb4df', entity);
};

/**
   * _DOES_TRAIN_EXIST_ON_TRACK
   *
   * @param {number} trackIndex
   * @return {boolean}
   */
global.DoesTrainExistOnTrack = function (trackIndex) {
  return Citizen.invokeNative('0xc29996a337bdd099', trackIndex, _r);
};

/**
   * _FADE_AND_DESTROY_VEHICLE
   *
  
   * @return {number}
   */
global.FadeAndDestroyVehicle = function () {
  return Citizen.invokeNative('0x35dc1877312fba0f', _i);
};

/**
   * _GET_BREAKABLE_VEHICLE_LOCKS_STATE
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetBreakableVehicleLocksState = function (vehicle) {
  return Citizen.invokeNative('0xe015cf1f2c0959d8', vehicle, _r, _ri);
};

/**
   * _GET_BREAKABLE_VEHICLE_LOCK_OBJECT
   *
   * @param {number} vehicle
   * @param {number} index
   * @return {number}
   */
global.GetBreakableVehicleLockObject = function (vehicle, index) {
  return Citizen.invokeNative('0x58f2244c1286d09a', vehicle, index, _r, _ri);
};

/**
   * _GET_CHECKPOINT_TRAIN_SPAWN_LOCATION
   *
   * @param {number} trackIndex
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} distance
   * @param {boolean} direction
   * @return {Vector3}
   */
global.GetCheckpointTrainSpawnLocation = function (trackIndex, x, y, z, distance, direction) {
  return Citizen.invokeNative('0x35d302397e524939', trackIndex, _fv(x), _fv(y), _fv(z), _fv(distance), direction, _r, _rv);
};

/**
   * _GET_CURRENT_TRACK_FOR_TRAIN
   * Returns p0 for 0xBA958F68031DDBFC (trackIndex)
   *
   * @param {number} train
   * @return {number}
   */
global.GetCurrentTrackForTrain = function (train) {
  return Citizen.invokeNative('0xaf787e081ac4a8ee', train, _r, _ri);
};

/**
   * _GET_DRAFT_VEHICLE_DESIRED_SPEED
   * Returns rage::NumericLimits<float>::kMax (3.402823466e+38) if vehicle is not a valid vehicle of type VEHICLE_TYPE_DRAFT.
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetDraftVehicleDesiredSpeed = function (vehicle) {
  return Citizen.invokeNative('0xc6d7ddc843176701', vehicle, _r, _rf);
};

/**
   * _GET_NEAREST_TRAIN_TRACK_POSITION
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {Vector3}
   */
global.GetNearestTrainTrackPosition = function (x, y, z) {
  return Citizen.invokeNative('0x6de03bcc15e81710', _fv(x), _fv(y), _fv(z), _r, _rv);
};

/**
   * _GET_NUM_BREAKABLE_VEHICLE_LOCK_OBJECTS
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetNumBreakableVehicleLockObjects = function (vehicle) {
  return Citizen.invokeNative('0x2fa86833e3617e2d', vehicle, _r, _ri);
};

/**
   * _GET_NUM_CARS_FROM_TRAIN_CONFIG
   * Returns amount for CAN_REGISTER_MISSION_VEHICLES
   *
   * @param {number} trainConfig
   * @return {number}
   */
global.GetNumCarsFromTrainConfig = function (trainConfig) {
  return Citizen.invokeNative('0x635423d55ca84fc8', _ch(trainConfig), _r, _ri);
};

/**
   * _GET_NUM_DRAFT_VEHICLE_HARNESS_PED
   * Returns number of horses a wagon can have
   *
   * @param {number} modelHash
   * @return {number}
   */
global.GetNumDraftVehicleHarnessPed = function (modelHash) {
  return Citizen.invokeNative('0x5b1a26bb18e7d451', _ch(modelHash), _r, _ri);
};

/**
   * _GET_PED_IN_DRAFT_HARNESS
   * enum eDraftHarness
   * {
   *   DRAFT_HARNESS_LR,
   *   DRAFT_HARNESS_RR,
   *   DRAFT_HARNESS_LM,
   *   DRAFT_HARNESS_RM,
   *   DRAFT_HARNESS_LF,
   *   DRAFT_HARNESS_RF,
   *   DRAFT_HARNESS_COUNT
   * };
   *
   * @param {number} vehicle
   * @param {number} harnessId
   * @return {number}
   */
global.GetPedInDraftHarness = function (vehicle, harnessId) {
  return Citizen.invokeNative('0xa8ba0bae0173457b', vehicle, harnessId, _r, _ri);
};

/**
   * _GET_ROWING_OARS
   * Returns handles of boat paddles entities.
   *
   * @param {number} vehicle
   * @param {number} left
   * @param {number} right
   * @return {void}
   */
global.GetRowingOars = function (vehicle, left, right) {
  return Citizen.invokeNative('0xa6e210fb4283b767', vehicle, _ii(left), _ii(right));
};

/**
   * _GET_STATION_COORDS_FROM_TRAIN_STATION_DATA
   * Returns Coords of vStation
   * p0 - NET_TRAIN_MANAGER_GET_TRAIN_STATION_DATA
   * _GET_P* - _GET_T*
   *
   * @param {number} trackIndex
   * @param {number} stationIndex
   * @return {Vector3}
   */
global.GetStationCoordsFromTrainStationData = function (trackIndex, stationIndex) {
  return Citizen.invokeNative('0xba958f68031ddbfc', trackIndex, stationIndex, _r, _rv);
};

/**
   * _GET_TRACK_INDEX_FROM_COORDS
   * Returns trackIndex
   * _E* - _F*
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {number}
   */
global.GetTrackIndexFromCoords = function (x, y, z) {
  return Citizen.invokeNative('0x85d39f5e3b6d7eb0', _fv(x), _fv(y), _fv(z), _r, _ri);
};

/**
   * _GET_TRAIN_CAR
   * Returns train car, use GET_TRAIN_CARRIAGE when trailerNumber is bigger than 0
   *
   * @param {number} train
   * @return {number}
   */
global.GetTrainCar = function (train) {
  return Citizen.invokeNative('0x671a07c9a1cd50a5', train, _r, _ri);
};

/**
   * _GET_TRAIN_CARRIAGE_TRAILER_NUMBER
   * Returns iNumCars - to be used with GET_TRAIN_CARRIAGE (trailerNumber)
   * _C* (O, P, Q, R)
   *
   * @param {number} train
   * @return {number}
   */
global.GetTrainCarriageTrailerNumber = function (train) {
  return Citizen.invokeNative('0x60b7d1dcc312697d', train, _r, _ri);
};

/**
   * _GET_TRAIN_DIRECTION
   *
   * @param {number} train
   * @return {boolean}
   */
global.GetTrainDirection = function (train) {
  return Citizen.invokeNative('0x3c9628a811cbd724', train, _r);
};

/**
   * _GET_TRAIN_DIRECTION_FROM_INDEX
   * https://i.imgur.com/1rHibjW.jpg
   *
   * @param {number} trackIndex
   * @return {boolean}
   */
global.GetTrainDirectionFromIndex = function (trackIndex) {
  return Citizen.invokeNative('0x67995318f5faa496', trackIndex, _r);
};

/**
   * _GET_TRAIN_MODEL_FROM_TRAIN_CONFIG_BY_CAR_INDEX
   * Returns modelHash
   *
   * @param {number} trainConfig
   * @param {number} trainCarIndex
   * @return {number}
   */
global.GetTrainModelFromTrainConfigByCarIndex = function (trainConfig, trainCarIndex) {
  return Citizen.invokeNative('0x8df5f6a19f99f0d5', _ch(trainConfig), trainCarIndex, _r, _ri);
};

/**
   * _GET_TRAIN_POSITION_ON_TRACK
   *
   * @param {number} trackIndex
   * @return {Vector3}
   */
global.GetTrainPositionOnTrack = function (trackIndex) {
  return Citizen.invokeNative('0x1e8a921112891651', trackIndex, _r, _rv);
};

/**
   * _GET_TRAIN_TRACK_FROM_TRAIN_VEHICLE
   * Returns trackIndex
   *
   * @param {number} train
   * @return {number}
   */
global.GetTrainTrackFromTrainVehicle = function (train) {
  return Citizen.invokeNative('0x45853f4e17d847d5', train, _r, _ri);
};

/**
   * _GET_TRAIN_TRACK_JUNCTION_AT_COORDS
   * Outputs junctionIndex, to be used with 0xE6C5E2125EB210C1
   *
   * @param {number} trainTrack
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {[boolean, number]}
   */
global.GetTrainTrackJunctionAtCoords = function (trainTrack, x, y, z) {
  return Citizen.invokeNative('0x86afc343cf7f0b34', _ch(trainTrack), _fv(x), _fv(y), _fv(z), _i, _r);
};

/**
   * _GET_TRAIN_VEHICLE_FROM_TRACK_INDEX
   * Returns train
   *
   * @param {number} trackIndex
   * @return {number}
   */
global.GetTrainVehicleFromTrackIndex = function (trackIndex) {
  return Citizen.invokeNative('0x6e585a616abb8401', trackIndex, _r, _ri);
};

/**
   * _GET_VEHICLE_DOORS_LOCKED_FOR_TEAM
   *
   * @param {number} vehicle
   * @param {number} team
   * @return {boolean}
   */
global.GetVehicleDoorsLockedForTeam = function (vehicle, team) {
  return Citizen.invokeNative('0xdd1e1393d966d39a', vehicle, team, _r);
};

/**
   * _GET_VEHICLE_IS_PROP_SET_APPLIED
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.GetVehicleIsPropSetApplied = function (vehicle) {
  return Citizen.invokeNative('0xd798df5db67b1659', vehicle, _r);
};

/**
   * _GET_VEHICLE_LIVERY
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetVehicleLivery = function (vehicle) {
  return Citizen.invokeNative('0xbb765b8fd49a796c', vehicle, _r, _ri);
};

/**
   * _GET_VEHICLE_OWNER
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetVehicleOwner = function (vehicle) {
  return Citizen.invokeNative('0xb729679356a889ae', vehicle, _r, _ri);
};

/**
   * _GET_VEHICLE_TINT
   *
   * @param {number} vehicle
   * @return {number}
   */
global.GetVehicleTint = function (vehicle) {
  return Citizen.invokeNative('0xa44d65e6c624526f', vehicle, _r, _ri);
};

/**
   * _GET_VEHICLE_TURRET_SEAT
   *
   * @param {number} vehicle
   * @return {[boolean, number]}
   */
global.GetVehicleTurretSeat = function (vehicle) {
  return Citizen.invokeNative('0xff5791b7639c2a46', vehicle, _i, _r);
};

/**
   * _HAS_TRAIN_LOADED
   *
   * @param {number} train
   * @return {boolean}
   */
global.HasTrainLoaded = function (train) {
  return Citizen.invokeNative('0xbd3c4a2ed509205e', train, _r);
};

/**
   * _HIDE_HORSE_REINS
   *
   * @param {number} vehicle
   * @return {void}
   */
global.HideHorseReins = function (vehicle) {
  return Citizen.invokeNative('0x201b8ed4ff7fe9f5', vehicle);
};

/**
   * _IS_BOAT_GROUNDED
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.IsBoatGrounded = function (vehicle) {
  return Citizen.invokeNative('0x30d86b2b7622d0eb', vehicle, _r);
};

/**
   * _IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE
   *
   * @param {number} ped
   * @param {number} vehicle
   * @return {[boolean, number]}
   */
global.IsPedExclusiveDriverOfVehicle = function (ped, vehicle) {
  return Citizen.invokeNative('0xb213d2a560b2e48b', ped, vehicle, _i, _r);
};

/**
   * _IS_THIS_MODEL_A_DRAFT_VEHICLE
   *
   * @param {number} model
   * @return {boolean}
   */
global.IsThisModelADraftVehicle = function (model) {
  return Citizen.invokeNative('0xb9d5bdda88e1bb66', _ch(model), _r);
};

/**
   * _IS_VEHICLE_BROUGHT_TO_HALT
   * Only returns true if BRING_VEHICLE_TO_HALT is called on vehicle beforehand
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.IsVehicleBroughtToHalt = function (vehicle) {
  return Citizen.invokeNative('0x404527bc03da0e6c', vehicle, _r);
};

/**
   * _IS_VEHICLE_DOOR_BROKEN
   * doorId: see SET_VEHICLE_DOOR_SHUT
   *
   * @param {number} vehicle
   * @param {number} doorId
   * @return {boolean}
   */
global.IsVehicleDoorBroken = function (vehicle, doorId) {
  return Citizen.invokeNative('0xe979bb5602ad3402', vehicle, doorId, _r);
};

/**
   * _IS_VEHICLE_FADING_OUT
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.IsVehicleFadingOut = function (vehicle) {
  return Citizen.invokeNative('0x5136b284b67b35c7', vehicle, _r);
};

/**
   * _IS_VEHICLE_ON_FIRE
   *
   * @param {number} vehicle
   * @return {boolean}
   */
global.IsVehicleOnFire = function (vehicle) {
  return Citizen.invokeNative('0x0e3bf7ed4169ec43', vehicle, _r);
};

/**
   * _IS_VEHICLE_WHEEL_DESTROYED
   *
   * @param {number} vehicle
   * @param {number} wheel
   * @return {boolean}
   */
global.IsVehicleWheelDestroyed = function (vehicle, wheel) {
  return Citizen.invokeNative('0xcb2ca620c48bc875', vehicle, wheel, _r);
};

/**
   * _SET_ALL_JUNCTIONS_CLEARED
   *
  
   * @return {void}
   */
global.SetAllJunctionsCleared = function () {
  return Citizen.invokeNative('0x138398153824e332');
};

/**
   * _SET_ALL_VEHICLE_GENERATORS_DISABLED_FOR_VOLUME
   *
   * @param {number} volume
   * @param {boolean} toggle
   * @return {void}
   */
global.SetAllVehicleGeneratorsDisabledForVolume = function (volume, toggle) {
  return Citizen.invokeNative('0x424ffcb9f0d2d4b5', volume, toggle);
};

/**
   * _SET_BALLOON_HOVER_STATE
   * Params: 1.0f will make balloon hover
   *
   * @param {number} balloon
   * @param {number} p1
   * @return {void}
   */
global.SetBalloonHoverState = function (balloon, p1) {
  return Citizen.invokeNative('0x7c9e45a4ced2e8da', balloon, _fv(p1));
};

/**
   * _SET_BATCH_TARP_HEIGHT
   * Total height is calculated using: cargo ratio + pelt ratio (by pelt count)
   * Screenshot: https://imgur.com/a/nsomtiv
   *
   * @param {number} vehicle
   * @param {number} height
   * @param {boolean} immediately
   * @return {void}
   */
global.SetBatchTarpHeight = function (vehicle, height, immediately) {
  return Citizen.invokeNative('0x31f343383f19c987', vehicle, _fv(height), immediately);
};

/**
   * _SET_DRAFT_ANIMAL_RANDOM_SEED
   *
   * @param {number} vehicle
   * @param {number} seed
   * @return {void}
   */
global.SetDraftAnimalRandomSeed = function (vehicle, seed) {
  return Citizen.invokeNative('0x8c6d9a399126c194', vehicle, seed);
};

/**
   * _SET_DRAFT_VEHICLE_ALLOW_DRAFT_ANIMAL_AUTO_CREATION
   *
   * @param {number} vehicle
   * @param {boolean} allow
   * @return {void}
   */
global.SetDraftVehicleAllowDraftAnimalAutoCreation = function (vehicle, allow) {
  return Citizen.invokeNative('0x87344305778e5415', vehicle, allow);
};

/**
   * _SET_DRAFT_VEHICLE_ANIMALS_CAN_DETACH
   *
   * @param {number} draft
   * @param {boolean} canDetach
   * @return {void}
   */
global.SetDraftVehicleAnimalsCanDetach = function (draft, canDetach) {
  return Citizen.invokeNative('0x6090a031c69f384e', draft, canDetach);
};

/**
   * _SET_DRAFT_VEHICLE_DESIRED_SPEED
   *
   * @param {number} vehicle
   * @param {number} speed
   * @return {void}
   */
global.SetDraftVehicleDesiredSpeed = function (vehicle, speed) {
  return Citizen.invokeNative('0x0c3f0f7f92ca847c', vehicle, _fv(speed));
};

/**
   * _SET_DRAFT_VEHICLE_YOKE_CAN_BREAK
   *
   * @param {number} draft
   * @param {boolean} canBreak
   * @return {void}
   */
global.SetDraftVehicleYokeCanBreak = function (draft, canBreak) {
  return Citizen.invokeNative('0x226c6a4e3346d288', draft, canBreak);
};

/**
   * _SET_FORCE_COACH_ROBBERY_LOOT
   * Hashes: COACH2_BOOT_LOOT_ITEMS_COACHROB_RSC, COACH2_BOOT_LOOT_ITEMS_COACHROB, COACH2_MARY3
   *
   * @param {number} vehicle
   * @param {number} coachrobberyLoot
   * @return {void}
   */
global.SetForceCoachRobberyLoot = function (vehicle, coachrobberyLoot) {
  return Citizen.invokeNative('0xf489f94bfee12bb0', vehicle, _ch(coachrobberyLoot));
};

/**
   * _SET_FORCE_HIGH_LOD_VEHICLE
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.SetForceHighLodVehicle = function (vehicle, p1) {
  return Citizen.invokeNative('0x1098cda477890165', vehicle, p1);
};

/**
   * _SET_HORSE_TRAFFIC_GROUPING_DISTRIBUTION
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.SetHorseTrafficGroupingDistribution = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xf5ffb08976911b50', p0, p1, p2, p3);
};

/**
   * _SET_MISSION_TRAIN_WARP_TO_COORDS
   * Notice: BOOL p4 was wrongly named takePassengers (?)
   * Can be used to rotate the train by setting the BOOL direction
   *
   * @param {number} train
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {boolean} direction
   * @return {void}
   */
global.SetMissionTrainWarpToCoords = function (train, x, y, z, direction) {
  return Citizen.invokeNative('0xc9ea26893c9e4024', train, _fv(x), _fv(y), _fv(z), direction);
};

/**
   * _SET_TRAIN_HALT
   *
   * @param {number} train
   * @return {void}
   */
global.SetTrainHalt = function (train) {
  return Citizen.invokeNative('0x3660bcab3a6bb734', train);
};

/**
   * _SET_TRAIN_LEAVE_STATION
   * Restarts the train
   *
   * @param {number} train
   * @return {void}
   */
global.SetTrainLeaveStation = function (train) {
  return Citizen.invokeNative('0x787e43477746876f', train);
};

/**
   * _SET_TRAIN_MAX_SPEED
   * Maximum possible speed is 30.0 (108 km/h)
   *
   * @param {number} train
   * @param {number} speed
   * @return {void}
   */
global.SetTrainMaxSpeed = function (train, speed) {
  return Citizen.invokeNative('0x9f29999dfdf2aeb8', train, _fv(speed));
};

/**
   * _SET_TRAIN_STOPS_FOR_STATIONS
   *
   * @param {number} train
   * @param {boolean} toggle
   * @return {void}
   */
global.SetTrainStopsForStations = function (train, toggle) {
  return Citizen.invokeNative('0x4182c037aa1f0091', train, toggle);
};

/**
   * _SET_TRAIN_TRACK_JUNCTION_SWITCH
   * trainTrack: FREIGHT_GROUP, TRAINS3, BRAITHWAITES2_TRACK_CONFIG, TRAINS_OLD_WEST01, TRAINS_OLD_WEST03, TRAINS_NB1, TRAINS_INTERSECTION1_ANN
   *
   * @param {number} trainTrack
   * @param {number} junctionIndex
   * @param {boolean} enabled
   * @return {void}
   */
global.SetTrainTrackJunctionSwitch = function (trainTrack, junctionIndex, enabled) {
  return Citizen.invokeNative('0xe6c5e2125eb210c1', _ch(trainTrack), junctionIndex, enabled);
};

/**
   * _SET_VEHICLE_DETERIORATION
   *
   * @param {number} vehicle
   * @param {number} amount
   * @param {number} p2
   * @param {boolean} p3
   * @return {void}
   */
global.SetVehicleDeterioration = function (vehicle, amount, p2, p3) {
  return Citizen.invokeNative('0x8e5da070bad3279e', vehicle, _fv(amount), p2, p3);
};

/**
   * _SET_VEHICLE_DIRT_LEVEL_2
   * dirtLevel: 0.0 - 1.0
   *
   * @param {number} vehicle
   * @param {number} dirtLevel
   * @return {void}
   */
global.SetVehicleDirtLevel_2 = function (vehicle, dirtLevel) {
  return Citizen.invokeNative('0xbae0eedf93f05eaa', vehicle, _fv(dirtLevel));
};

/**
   * _SET_VEHICLE_IS_IN_HURRY
   *
   * @param {number} vehicle
   * @param {boolean} enabled
   * @return {void}
   */
global.SetVehicleIsInHurry = function (vehicle, enabled) {
  return Citizen.invokeNative('0xce1531927ad6c9f8', vehicle, enabled);
};

/**
   * _SET_VEHICLE_LIVERY
   * https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_liveries.lua
   *
   * @param {number} vehicle
   * @param {number} liveryIndex
   * @return {void}
   */
global.SetVehicleLivery = function (vehicle, liveryIndex) {
  return Citizen.invokeNative('0xf89d82a0582e46ed', vehicle, liveryIndex);
};

/**
   * _SET_VEHICLE_LOD_LEVEL
   * Ranges from -1 to 2? (internal type is int8)
   * https://imgur.com/a/bPzHcft
   *
   * @param {number} vehicle
   * @param {number} lodLevel
   * @return {void}
   */
global.SetVehicleLodLevel = function (vehicle, lodLevel) {
  return Citizen.invokeNative('0x3fa7d7d1e0ea809e', vehicle, lodLevel);
};

/**
   * _SET_VEHICLE_MUD_LEVEL
   * mudLevel: 0.0 - 1.0
   *
   * @param {number} vehicle
   * @param {number} mudLevel
   * @return {void}
   */
global.SetVehicleMudLevel = function (vehicle, mudLevel) {
  return Citizen.invokeNative('0x4d15e49764cb328a', vehicle, _fv(mudLevel));
};

/**
   * _SET_VEHICLE_SNOW_LEVEL
   * snowLevel: 0.0 - 1.0
   *
   * @param {number} vehicle
   * @param {number} snowLevel
   * @return {void}
   */
global.SetVehicleSnowLevel = function (vehicle, snowLevel) {
  return Citizen.invokeNative('0x6f73efab11651d7f', vehicle, _fv(snowLevel));
};

/**
   * _SET_VEHICLE_TINT
   * https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_tints.lua
   *
   * @param {number} vehicle
   * @param {number} tintId
   * @return {void}
   */
global.SetVehicleTint = function (vehicle, tintId) {
  return Citizen.invokeNative('0x8268b098f6fca4e2', vehicle, tintId);
};

/**
   * _SET_VEHICLE_WET_LEVEL
   * wetLevel: 0.0 - 1.0
   *
   * @param {number} vehicle
   * @param {number} wetLevel
   * @return {void}
   */
global.SetVehicleWetLevel = function (vehicle, wetLevel) {
  return Citizen.invokeNative('0x5aabb09f6fbd1f87', vehicle, _fv(wetLevel));
};

/**
   * _SHOW_HORSE_REINS
   *
   * @param {number} vehicle
   * @return {void}
   */
global.ShowHorseReins = function (vehicle) {
  return Citizen.invokeNative('0x41cda90ee3450921', vehicle);
};

/**
   * _TRIGGER_TRAIN_WHISTLE
   * whistleSequence: ACKNOWLEDGE, BACKING_UP, CROSSING, DANGER, MOVING, NEXT_STATION, PASSING, STOPPED
   * p2 = true seems to mute the sound
   *
   * @param {number} train
   * @param {string | number} whistleSequence
   * @param {boolean} p2
   * @param {boolean} p3
   * @return {void}
   */
global.TriggerTrainWhistle = function (train, whistleSequence, p2, p3) {
  return Citizen.invokeNative('0xcfe122ec635cc2b2', train, whistleSequence, p2, p3);
};

/**
   * _0x08797A8C03868CB8
   *
   * @param {number} threshold
   * @return {void}
   */
global.N_0x08797A8C03868CB8 = function (threshold) {
  return Citizen.invokeNative('0x08797a8c03868cb8', _fv(threshold));
};

/**
   * _0x0DED260A1958A82E
   *
   * @param {number} player
   * @return {boolean}
   */
global.N_0x0DED260A1958A82E = function (player) {
  return Citizen.invokeNative('0x0ded260a1958a82e', player, _r);
};

/**
   * _0x1C38C3577901AF1F
   *
  
   * @return {void}
   */
global.N_0x1C38C3577901AF1F = function () {
  return Citizen.invokeNative('0x1c38c3577901af1f');
};

/**
   * _0x1FBF7F5BA7E4BE3A
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x1FBF7F5BA7E4BE3A = function (p0) {
  return Citizen.invokeNative('0x1fbf7f5ba7e4be3a', p0);
};

/**
   * _0x2F82CAB262C8AE26
   *
   * @param {number} player
   * @return {number}
   */
global.N_0x2F82CAB262C8AE26 = function (player) {
  return Citizen.invokeNative('0x2f82cab262c8ae26', player, _r, _rf);
};

/**
   * _0x356135B9B10A2A82
   *
   * @param {DataView} gamerHandle
   * @return {boolean}
   */
global.N_0x356135B9B10A2A82 = function (gamerHandle) {
  return Citizen.invokeNative('0x356135b9b10a2a82', gamerHandle, _r);
};

/**
   * _0x4791899615D70FA2
   * Params: p1 = 2; p2 = 3 in R* Script net_main_offline
   *
   * @param {number} player
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.N_0x4791899615D70FA2 = function (player, p1, p2) {
  return Citizen.invokeNative('0x4791899615d70fa2', player, p1, p2);
};

/**
   * _0x49623BCFC3A3D829
   *
   * @param {number} player
   * @param {boolean} muted
   * @return {boolean}
   */
global.N_0x49623BCFC3A3D829 = function (player, muted) {
  return Citizen.invokeNative('0x49623bcfc3a3d829', player, muted, _r);
};

/**
   * _0x58125B691F6827D5
   *
   * @param {number} proximity
   * @return {void}
   */
global.N_0x58125B691F6827D5 = function (proximity) {
  return Citizen.invokeNative('0x58125b691f6827d5', _fv(proximity));
};

/**
   * _0x5CA7FB7D6DE49DCC
   *
   * @param {number} player
   * @return {number}
   */
global.N_0x5CA7FB7D6DE49DCC = function (player) {
  return Citizen.invokeNative('0x5ca7fb7d6de49dcc', player, _r, _rf);
};

/**
   * _0x767931C727DF2ED7
   * Returns p2 value of 0x4791899615D70FA2
   *
   * @param {number} player
   * @param {number} p1
   * @return {number}
   */
global.N_0x767931C727DF2ED7 = function (player, p1) {
  return Citizen.invokeNative('0x767931c727df2ed7', player, p1, _r, _ri);
};

/**
   * _0x79F478FF5F9F4F05
   *
   * @param {boolean} enabled
   * @return {void}
   */
global.N_0x79F478FF5F9F4F05 = function (enabled) {
  return Citizen.invokeNative('0x79f478ff5f9f4f05', enabled);
};

/**
   * _0x8E462DB1EAA9C47C
   *
   * @param {number} player
   * @return {boolean}
   */
global.N_0x8E462DB1EAA9C47C = function (player) {
  return Citizen.invokeNative('0x8e462db1eaa9c47c', player, _r);
};

/**
   * _0x919AF2D93E9AA89D
   *
   * @param {number} player
   * @return {boolean}
   */
global.N_0x919AF2D93E9AA89D = function (player) {
  return Citizen.invokeNative('0x919af2d93e9aa89d', player, _r);
};

/**
   * _0xAA35FD9ABAB490A3
   *
   * @param {number} player
   * @return {boolean}
   */
global.N_0xAA35FD9ABAB490A3 = function (player) {
  return Citizen.invokeNative('0xaa35fd9abab490a3', player, _r);
};

/**
   * _0xB3E8841F6BDAF83E
   *
  
   * @return {void}
   */
global.N_0xB3E8841F6BDAF83E = function () {
  return Citizen.invokeNative('0xb3e8841f6bdaf83e');
};

/**
   * _0xB6E79850B759A30E
   *
   * @param {number} teamId
   * @param {boolean} allow
   * @return {void}
   */
global.N_0xB6E79850B759A30E = function (teamId, allow) {
  return Citizen.invokeNative('0xb6e79850b759a30e', teamId, allow);
};

/**
   * _0xB779F4FA19269AEC
   *
   * @param {boolean} flag
   * @return {void}
   */
global.N_0xB779F4FA19269AEC = function (flag) {
  return Citizen.invokeNative('0xb779f4fa19269aec', flag);
};

/**
   * _0xCCF71FCFA0070B1A
   *
  
   * @return {boolean}
   */
global.N_0xCCF71FCFA0070B1A = function () {
  return Citizen.invokeNative('0xccf71fcfa0070b1a', _r);
};

/**
   * _0xDB622ECD3DCBE078
   *
   * @param {number} player
   * @return {any}
   */
global.N_0xDB622ECD3DCBE078 = function (player) {
  return Citizen.invokeNative('0xdb622ecd3dcbe078', player, _r);
};

/**
   * _0xDC9B361CB7776673
   *
   * @param {number} player
   * @return {void}
   */
global.N_0xDC9B361CB7776673 = function (player) {
  return Citizen.invokeNative('0xdc9b361cb7776673', player);
};

/**
   * _0xEC8703E4536A9952
   *
  
   * @return {void}
   */
global.N_0xEC8703E4536A9952 = function () {
  return Citizen.invokeNative('0xec8703e4536a9952');
};

/**
   * _0xEF6F2A35FAAF2ED7
   *
   * @param {number} player
   * @return {boolean}
   */
global.N_0xEF6F2A35FAAF2ED7 = function (player) {
  return Citizen.invokeNative('0xef6f2a35faaf2ed7', player, _r);
};

/**
   * _0xF8938CF3984092A5
   *
   * @param {number} player
   * @return {void}
   */
global.N_0xF8938CF3984092A5 = function (player) {
  return Citizen.invokeNative('0xf8938cf3984092a5', player);
};

/**
   * CREATE_VOLUME_AGGREGATE
   *
  
   * @return {number}
   */
global.CreateVolumeAggregate = function () {
  return Citizen.invokeNative('0x59f6f5c1d129f106', _r, _ri);
};

/**
   * CREATE_VOLUME_BOX
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} scaleX
   * @param {number} scaleY
   * @param {number} scaleZ
   * @return {number}
   */
global.CreateVolumeBox = function (x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ) {
  return Citizen.invokeNative('0xdf85637f22706891', _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scaleX), _fv(scaleY), _fv(scaleZ), _r, _ri);
};

/**
   * CREATE_VOLUME_CYLINDER
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} scaleX
   * @param {number} scaleY
   * @param {number} scaleZ
   * @return {number}
   */
global.CreateVolumeCylinder = function (x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ) {
  return Citizen.invokeNative('0x0522d4774b82e3e6', _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scaleX), _fv(scaleY), _fv(scaleZ), _r, _ri);
};

/**
   * CREATE_VOLUME_SPHERE
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} scaleX
   * @param {number} scaleY
   * @param {number} scaleZ
   * @return {number}
   */
global.CreateVolumeSphere = function (x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ) {
  return Citizen.invokeNative('0xb3fb80a32bae3065', _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scaleX), _fv(scaleY), _fv(scaleZ), _r, _ri);
};

/**
   * DELETE_VOLUME
   *
   * @param {number} volume
   * @return {void}
   */
global.DeleteVolume = function (volume) {
  return Citizen.invokeNative('0x43f867ef5c463a53', volume);
};

/**
   * DOES_VOLUME_COLLIDE_WITH_ANY_VOLUME_LOCK
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {boolean} p4
   * @param {number} p5
   * @param {number} p6
   * @return {boolean}
   */
global.DoesVolumeCollideWithAnyVolumeLock = function (x, y, z, radius, p4, p5, p6) {
  return Citizen.invokeNative('0x397769175a7dbb30', _fv(x), _fv(y), _fv(z), _fv(radius), p4, p5, p6, _r);
};

/**
   * DOES_VOLUME_EXIST
   *
   * @param {number} volume
   * @return {boolean}
   */
global.DoesVolumeExist = function (volume) {
  return Citizen.invokeNative('0x92a78d0bedb332a3', volume, _r);
};

/**
   * GET_VOLUME_COORDS
   *
   * @param {number} volume
   * @return {Vector3}
   */
global.GetVolumeCoords = function (volume) {
  return Citizen.invokeNative('0xf70f00013a62f866', volume, _r, _rv);
};

/**
   * GET_VOLUME_LOCK_REQUEST_STATUS
   * enum eVolumeLockRequestStatus
   * {
   *   VOLUME_LOCK_REQUEST_STATUS_INVALID,
   *   VOLUME_LOCK_REQUEST_STATUS_READY,
   *   VOLUME_LOCK_REQUEST_STATUS_IN_PROGRESS,
   *   VOLUME_LOCK_REQUEST_STATUS_SUCCEEDED,
   *   VOLUME_LOCK_REQUEST_STATUS_FAILED
   * };
   *
   * @param {number} volLockRequestId
   * @return {number}
   */
global.GetVolumeLockRequestStatus = function (volLockRequestId) {
  return Citizen.invokeNative('0xb33a604345f58202', volLockRequestId, _r, _ri);
};

/**
   * GET_VOLUME_ROTATION
   *
   * @param {number} volume
   * @return {Vector3}
   */
global.GetVolumeRotation = function (volume) {
  return Citizen.invokeNative('0x18675bc914891122', volume, _r, _rv);
};

/**
   * GET_VOLUME_SCALE
   *
   * @param {number} volume
   * @return {Vector3}
   */
global.GetVolumeScale = function (volume) {
  return Citizen.invokeNative('0x3e2a25b2416dd67e', volume, _r, _rv);
};

/**
   * IS_POINT_IN_VOLUME
   * Old name: _IS_POSITION_INSIDE_VOLUME
   *
   * @param {number} volume
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {boolean}
   */
global.IsPointInVolume = function (volume, x, y, z) {
  return Citizen.invokeNative('0xf256a75210c5c0eb', volume, _fv(x), _fv(y), _fv(z), _r);
};

/**
   * IS_VOLUME_LOCK_REQUEST_VALID
   *
   * @param {number} volLockRequestId
   * @return {boolean}
   */
global.IsVolumeLockRequestValid = function (volLockRequestId) {
  return Citizen.invokeNative('0xa4a4359320345b34', volLockRequestId, _r);
};

/**
   * REQUEST_VOLUME_LOCK
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} p4
   * @param {number} p5
   * @return {number}
   */
global.RequestVolumeLock = function (x, y, z, radius, p4, p5) {
  return Citizen.invokeNative('0xf14bcef290f869e1', _fv(x), _fv(y), _fv(z), _fv(radius), p4, p5, _r, _ri);
};

/**
   * REQUEST_VOLUME_LOCK_WITH_ARGS
   *
   * @param {DataView} args
   * @return {number}
   */
global.RequestVolumeLockWithArgs = function (args) {
  return Citizen.invokeNative('0x183c0b6cfeffcae4', args, _r, _ri);
};

/**
   * SET_VOLUME_COORDS
   *
   * @param {number} volume
   * @param {number} posX
   * @param {number} posY
   * @param {number} posZ
   * @return {boolean}
   */
global.SetVolumeCoords = function (volume, posX, posY, posZ) {
  return Citizen.invokeNative('0x541b8576615c33de', volume, _fv(posX), _fv(posY), _fv(posZ), _r);
};

/**
   * SET_VOLUME_OWNER_PERSISTENT_CHARACTER
   *
   * @param {number} volume
   * @param {number} persChar
   * @param {boolean} p2
   * @return {void}
   */
global.SetVolumeOwnerPersistentCharacter = function (volume, persChar, p2) {
  return Citizen.invokeNative('0xe2be6ffa4a13cbb0', volume, persChar, p2);
};

/**
   * SET_VOLUME_ROTATION
   *
   * @param {number} volume
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @return {boolean}
   */
global.SetVolumeRotation = function (volume, rotX, rotY, rotZ) {
  return Citizen.invokeNative('0xa07cf1b21b56f041', volume, _fv(rotX), _fv(rotY), _fv(rotZ), _r);
};

/**
   * SET_VOLUME_SCALE
   *
   * @param {number} volume
   * @param {number} scaleX
   * @param {number} scaleY
   * @param {number} scaleZ
   * @return {boolean}
   */
global.SetVolumeScale = function (volume, scaleX, scaleY, scaleZ) {
  return Citizen.invokeNative('0xa46e98bdc407e23d', volume, _fv(scaleX), _fv(scaleY), _fv(scaleZ), _r);
};

/**
   * _0x128FC3A893BF853A
   * nullsub, doesn't do anything
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x128FC3A893BF853A = function (p0) {
  return Citizen.invokeNative('0x128fc3a893bf853a', p0);
};

/**
   * _GET_VOLUME_AMOUNT_OF_INDEXED_ITEMS
   * Indexes items (including entyties and peds) in a set volume
   * Counts up as its the return value of how many items it writes to given itemSet
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} itemSet
   * @return {number}
   */
global.GetVolumeAmountOfIndexedItems = function (x, y, z, radius, itemSet) {
  return Citizen.invokeNative('0x2b32b11520626229', _fv(x), _fv(y), _fv(z), _fv(radius), itemSet, _r, _ri);
};

/**
   * _0x351D71B8B72B858B
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x351D71B8B72B858B = function (p0) {
  return Citizen.invokeNative('0x351d71b8b72b858b', p0, _r);
};

/**
   * _0x3EFABB21E14A6BD1
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x3EFABB21E14A6BD1 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x3efabb21e14a6bd1', p0, p1, p2);
};

/**
   * _0x40F769D31A00D5A0
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x40F769D31A00D5A0 = function (p0, p1) {
  return Citizen.invokeNative('0x40f769d31a00d5a0', p0, p1, _r);
};

/**
   * _0x4A8FEFC43FD8AC9B
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x4A8FEFC43FD8AC9B = function (p0, p1, p2) {
  return Citizen.invokeNative('0x4a8fefc43fd8ac9b', p0, p1, p2);
};

/**
   * _0x51E52C9687FCDEEC
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @return {any}
   */
global.N_0x51E52C9687FCDEEC = function (p0, p1, p2, p3, p4, p5, p6) {
  return Citizen.invokeNative('0x51e52c9687fcdeec', p0, p1, p2, p3, p4, p5, p6, _r);
};

/**
   * _0x52572B331E693AED
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0x52572B331E693AED = function (p0, p1, p2) {
  return Citizen.invokeNative('0x52572b331e693aed', p0, p1, p2);
};

/**
   * _0x53D05D60E5F5B40C
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0x53D05D60E5F5B40C = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0x53d05d60e5f5b40c', p0, p1, p2, p3);
};

/**
   * _0x695DAC2DB928F308
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x695DAC2DB928F308 = function (p0, p1) {
  return Citizen.invokeNative('0x695dac2db928f308', p0, p1);
};

/**
   * _0x6D5F9E69BA1BE783
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x6D5F9E69BA1BE783 = function (p0) {
  return Citizen.invokeNative('0x6d5f9e69ba1be783', p0);
};

/**
   * _0x748C5F51A18CB8F0
   * nullsub, doesn't do anything
   *
   * @param {boolean} p0
   * @return {void}
   */
global.N_0x748C5F51A18CB8F0 = function (p0) {
  return Citizen.invokeNative('0x748c5f51a18cb8f0', p0);
};

/**
   * _0x7FD78DFD0C5D7B9B
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x7FD78DFD0C5D7B9B = function (p0) {
  return Citizen.invokeNative('0x7fd78dfd0c5d7b9b', p0, _r);
};

/**
   * _0x870E9981ED27C815
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {any}
   */
global.N_0x870E9981ED27C815 = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x870e9981ed27c815', p0, p1, p2, p3, p4, p5, _r);
};

/**
   * _0x998202B206872672
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x998202B206872672 = function (p0) {
  return Citizen.invokeNative('0x998202b206872672', p0);
};

/**
   * _0xAA9EE2AAFC717623
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @return {any}
   */
global.N_0xAA9EE2AAFC717623 = function (p0, p1, p2, p3, p4, p5) {
  return Citizen.invokeNative('0xaa9ee2aafc717623', p0, p1, p2, p3, p4, p5, _r);
};

/**
   * _0xAC355980681A7F89
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xAC355980681A7F89 = function (p0) {
  return Citizen.invokeNative('0xac355980681a7f89', p0);
};

/**
   * _0xB440F4E35393FC39
   *
   * @param {number} volume
   * @param {any} p1
   * @return {void}
   */
global.N_0xB440F4E35393FC39 = function (volume, p1) {
  return Citizen.invokeNative('0xb440f4e35393fc39', volume, p1);
};

/**
   * _0xB469CFD9E065EB99
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xB469CFD9E065EB99 = function (p0, p1) {
  return Citizen.invokeNative('0xb469cfd9e065eb99', p0, p1);
};

/**
   * _0xC4019CF9AE8E931A
   *
   * @param {number} volLockRequestId
   * @return {Vector3}
   */
global.N_0xC4019CF9AE8E931A = function (volLockRequestId) {
  return Citizen.invokeNative('0xc4019cf9ae8e931a', volLockRequestId, _r, _rv);
};

/**
   * _0xC61E2FD926DBB406
   *
  
   * @return {void}
   */
global.N_0xC61E2FD926DBB406 = function () {
  return Citizen.invokeNative('0xc61e2fd926dbb406');
};

/**
   * _0xCA5C90D40665D5CE
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xCA5C90D40665D5CE = function (p0, p1) {
  return Citizen.invokeNative('0xca5c90d40665d5ce', p0, p1, _r);
};

/**
   * _0xD460135C98940274
   *
   * @param {number} volume
   * @param {any} p1
   * @return {void}
   */
global.N_0xD460135C98940274 = function (volume, p1) {
  return Citizen.invokeNative('0xd460135c98940274', volume, p1);
};

/**
   * _0xD4FA73FE628FEC63
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xD4FA73FE628FEC63 = function (p0, p1) {
  return Citizen.invokeNative('0xd4fa73fe628fec63', p0, p1);
};

/**
   * _0xD52DF30355EA7C8E
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xD52DF30355EA7C8E = function (p0, p1, p2) {
  return Citizen.invokeNative('0xd52df30355ea7c8e', p0, p1, p2);
};

/**
   * _0xD882C5B3991575B7
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @return {Vector3}
   */
global.N_0xD882C5B3991575B7 = function (p0, p1, p2, p3, p4) {
  return Citizen.invokeNative('0xd882c5b3991575b7', p0, p1, p2, p3, p4, _r, _rv);
};

/**
   * _0xEBA87B9273835CF3
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xEBA87B9273835CF3 = function (p0, p1) {
  return Citizen.invokeNative('0xeba87b9273835cf3', p0, p1);
};

/**
   * _0xEE1D6FF54CAF7714
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xEE1D6FF54CAF7714 = function (p0, p1) {
  return Citizen.invokeNative('0xee1d6ff54caf7714', p0, p1, _r);
};

/**
   * _0xF3A2FBA5985C8CD5
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @return {void}
   */
global.N_0xF3A2FBA5985C8CD5 = function (p0, p1, p2, p3) {
  return Citizen.invokeNative('0xf3a2fba5985c8cd5', p0, p1, p2, p3);
};

/**
   * _0xF6CE6F9C3897804E
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xF6CE6F9C3897804E = function (p0) {
  return Citizen.invokeNative('0xf6ce6f9c3897804e', p0, _r);
};

/**
   * _0xF6F5447D418DAA82
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xF6F5447D418DAA82 = function (p0) {
  return Citizen.invokeNative('0xf6f5447d418daa82', p0, _r);
};

/**
   * _0xFA15C9A320E707B0
   * nullsub, doesn't do anything
   *
  
   * @return {void}
   */
global.N_0xFA15C9A320E707B0 = function () {
  return Citizen.invokeNative('0xfa15c9a320e707b0');
};

/**
   * _ADD_BOUNDS_TO_AGGREGATE_VOLUME
   * _ADD_R* - _ADD_V(OLUME?)*
   *
   * @param {number} volume
   * @param {number} aggregate
   * @return {void}
   */
global.AddBoundsToAggregateVolume = function (volume, aggregate) {
  return Citizen.invokeNative('0x6e0d3c3f828da773', volume, aggregate);
};

/**
   * _ADD_BOX_VOLUME_TO_VOLUME_AGGREGATE
   *
   * @param {number} aggregate
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @param {number} p8
   * @param {number} p9
   * @return {void}
   */
global.AddBoxVolumeToVolumeAggregate = function (aggregate, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
  return Citizen.invokeNative('0x39816f6f94f385ad', aggregate, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), _fv(p9));
};

/**
   * _ADD_CYLINDER_VOLUME_TO_VOLUME_AGGREGATE
   *
   * @param {number} aggregate
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @param {number} p8
   * @param {number} p9
   * @return {void}
   */
global.AddCylinderVolumeToVolumeAggregate = function (aggregate, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
  return Citizen.invokeNative('0xbce668aaf83608be', aggregate, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), _fv(p9));
};

/**
   * _ADD_ENTRY_VOLUME_LOCK
   *
   * @param {DataView} args
   * @return {boolean}
   */
global.AddEntryVolumeLock = function (args) {
  return Citizen.invokeNative('0x58d3803fa639a3bb', args, _r);
};

/**
   * _ADD_SPHERE_VOLUME_TO_VOLUME_AGGREGATE
   *
   * @param {number} aggregate
   * @param {number} p1
   * @param {number} p2
   * @param {number} p3
   * @param {number} p4
   * @param {number} p5
   * @param {number} p6
   * @param {number} p7
   * @param {number} p8
   * @param {number} p9
   * @return {void}
   */
global.AddSphereVolumeToVolumeAggregate = function (aggregate, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
  return Citizen.invokeNative('0x5b7d7bf36d2de18b', aggregate, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), _fv(p9));
};

/**
   * _ADD_VOLUME_TO_VOLUME_AGGREGATE
   *
   * @param {number} aggregate
   * @param {number} typeHash
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} scaleX
   * @param {number} scaleY
   * @param {number} scaleZ
   * @return {void}
   */
global.AddVolumeToVolumeAggregate = function (aggregate, typeHash, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ) {
  return Citizen.invokeNative('0x12fcaa23f2320422', aggregate, _ch(typeHash), _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scaleX), _fv(scaleY), _fv(scaleZ));
};

/**
   * _CREATE_ANTI_GRIEF_VOLUME
   *
   * @param {number} volumeType
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} scaleX
   * @param {number} scaleY
   * @param {number} scaleZ
   * @return {number}
   */
global.CreateAntiGriefVolume = function (volumeType, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ) {
  return Citizen.invokeNative('0x0eb78c2b156635b1', _ch(volumeType), _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scaleX), _fv(scaleY), _fv(scaleZ), _r, _ri);
};

/**
   * _CREATE_SPEED_VOLUME
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @param {any} p11
   * @param {any} p12
   * @param {any} p13
   * @param {any} p14
   * @return {number}
   */
global.CreateSpeedVolume = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
  return Citizen.invokeNative('0xbbe768e3ae76e07c', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, _r, _ri);
};

/**
   * _CREATE_VOLUME_AGGREGATE_WITH_CUSTOM_NAME
   *
   * @param {string | number} name
   * @return {number}
   */
global.CreateVolumeAggregateWithCustomName = function (name) {
  return Citizen.invokeNative('0x5d580de6398bb162', name, _r, _ri);
};

/**
   * _CREATE_VOLUME_BOX_WITH_CUSTOM_NAME
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} scaleX
   * @param {number} scaleY
   * @param {number} scaleZ
   * @param {string | number} name
   * @return {number}
   */
global.CreateVolumeBoxWithCustomName = function (x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, name) {
  return Citizen.invokeNative('0xf68485c7495d848e', _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scaleX), _fv(scaleY), _fv(scaleZ), name, _r, _ri);
};

/**
   * _CREATE_VOLUME_BY_HASH
   *
   * @param {number} volumeType
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} scaleX
   * @param {number} scaleY
   * @param {number} scaleZ
   * @return {number}
   */
global.CreateVolumeByHash = function (volumeType, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ) {
  return Citizen.invokeNative('0x502022fa1af9dc86', _ch(volumeType), _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scaleX), _fv(scaleY), _fv(scaleZ), _r, _ri);
};

/**
   * _CREATE_VOLUME_BY_HASH_WITH_CUSTOM_NAME
   *
   * @param {number} volumeType
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} scaleX
   * @param {number} scaleY
   * @param {number} scaleZ
   * @param {string | number} name
   * @return {number}
   */
global.CreateVolumeByHashWithCustomName = function (volumeType, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, name) {
  return Citizen.invokeNative('0x1f85e4ac774a201e', _ch(volumeType), _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scaleX), _fv(scaleY), _fv(scaleZ), name, _r, _ri);
};

/**
   * _CREATE_VOLUME_CYLINDER_WITH_CUSTOM_NAME
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} scaleX
   * @param {number} scaleY
   * @param {number} scaleZ
   * @param {string | number} name
   * @return {number}
   */
global.CreateVolumeCylinderWithCustomName = function (x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, name) {
  return Citizen.invokeNative('0xdf1e350eddf06e59', _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scaleX), _fv(scaleY), _fv(scaleZ), name, _r, _ri);
};

/**
   * _CREATE_VOLUME_LOCK
   * Params: p5 is always 0
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} flag
   * @param {any} p5
   * @return {number}
   */
global.CreateVolumeLock = function (x, y, z, radius, flag, p5) {
  return Citizen.invokeNative('0x00bbf7ceae8c666a', _fv(x), _fv(y), _fv(z), _fv(radius), flag, p5, _r, _ri);
};

/**
   * _CREATE_VOLUME_LOCK_ATTACHED_TO_ENTITY
   * Params: p3 is always 0
   *
   * @param {number} entity
   * @param {number} radius
   * @param {number} flag
   * @param {any} p3
   * @return {number}
   */
global.CreateVolumeLockAttachedToEntity = function (entity, radius, flag, p3) {
  return Citizen.invokeNative('0xf383e96c4904df0c', entity, _fv(radius), flag, p3, _r, _ri);
};

/**
   * _CREATE_VOLUME_SPHERE_WITH_CUSTOM_NAME
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} rotX
   * @param {number} rotY
   * @param {number} rotZ
   * @param {number} scaleX
   * @param {number} scaleY
   * @param {number} scaleZ
   * @param {string | number} name
   * @return {number}
   */
global.CreateVolumeSphereWithCustomName = function (x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, name) {
  return Citizen.invokeNative('0x10157bc3247ff3ba', _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scaleX), _fv(scaleY), _fv(scaleZ), name, _r, _ri);
};

/**
   * _CREATE_WALK_AND_TALK_VOLUME
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @param {any} p3
   * @param {any} p4
   * @param {any} p5
   * @param {any} p6
   * @param {any} p7
   * @param {any} p8
   * @param {any} p9
   * @param {any} p10
   * @param {any} p11
   * @param {any} p12
   * @return {number}
   */
global.CreateWalkAndTalkVolume = function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
  return Citizen.invokeNative('0xfd0e389cd44434b6', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, _r, _ri);
};

/**
   * _FIND_VOLUME_LOCK_REQUEST_ID_WITH_ARGS
   *
   * @param {DataView} args
   * @return {number}
   */
global.FindVolumeLockRequestIdWithArgs = function (args) {
  return Citizen.invokeNative('0x77a6e4ad0c496f81', args, _r, _ri);
};

/**
   * _GET_VOLUME_BOUNDS
   *
   * @param {number} volume
   * @return {[Vector3, Vector3]}
   */
global.GetVolumeBounds = function (volume) {
  return Citizen.invokeNative('0x5737199af2dc609f', volume, _v, _v);
};

/**
   * _GET_VOLUME_RELATIONSHIP
   * Returns relationshipGroup Hash
   *
   * @param {number} volume
   * @return {number}
   */
global.GetVolumeRelationship = function (volume) {
  return Citizen.invokeNative('0x666c2f53abefc952', volume, _r, _ri);
};

/**
   * _IS_AGGREGATE_VOLUME
   *
   * @param {number} volume
   * @return {boolean}
   */
global.IsAggregateVolume = function (volume) {
  return Citizen.invokeNative('0xfeff01b5725bcd22', volume, _r);
};

/**
   * _IS_POINT_NEAR_VOLUME_LOCK_CENTER
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} radius
   * @param {number} p4
   * @param {number} p5
   * @param {number} flags
   * @return {boolean}
   */
global.IsPointNearVolumeLockCenter = function (x, y, z, radius, p4, p5, flags) {
  return Citizen.invokeNative('0x769bb7626b8cdb06', _fv(x), _fv(y), _fv(z), _fv(radius), p4, p5, flags, _r);
};

/**
   * _IS_VOLUME_LOCK_REQUEST_VALID_2
   *
   * @param {number} volLockRequestId
   * @return {boolean}
   */
global.IsVolumeLockRequestValid_2 = function (volLockRequestId) {
  return Citizen.invokeNative('0xf6a8a652a6b186cd', volLockRequestId, _r);
};

/**
   * _MODIFY_VOLUME_LOCK_LOCATION
   *
   * @param {number} volLock
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {void}
   */
global.ModifyVolumeLockLocation = function (volLock, x, y, z) {
  return Citizen.invokeNative('0xec43c2ffb70e3f30', volLock, _fv(x), _fv(y), _fv(z));
};

/**
   * _RELEASE_LOCK_VOLUME
   *
   * @param {number} volLockRequestId
   * @return {void}
   */
global.ReleaseLockVolume = function (volLockRequestId) {
  return Citizen.invokeNative('0xfdfecc6ee4491e11', volLockRequestId);
};

/**
   * _REMOVE_BOUNDS_FROM_AGGREGATE_VOLUME
   * _REMOVE_E* - _REMOVE_R*
   *
   * @param {number} volume
   * @param {number} aggregate
   * @return {void}
   */
global.RemoveBoundsFromAggregateVolume = function (volume, aggregate) {
  return Citizen.invokeNative('0xf92fa8890dececf6', volume, aggregate);
};

/**
   * _SET_ANTI_GRIEF_VOLUME_BLOCKS_HORSE
   *
   * @param {number} volume
   * @param {boolean} toggle
   * @return {void}
   */
global.SetAntiGriefVolumeBlocksHorse = function (volume, toggle) {
  return Citizen.invokeNative('0xbe551c2cc421185d', volume, toggle);
};

/**
   * _SET_ANTI_GRIEF_VOLUME_BLOCKS_PLAYER
   *
   * @param {number} volume
   * @param {boolean} toggle
   * @return {void}
   */
global.SetAntiGriefVolumeBlocksPlayer = function (volume, toggle) {
  return Citizen.invokeNative('0x5b23dff8e0948bb2', volume, toggle);
};

/**
   * _SET_VOLUME_RELATIONSHIP
   *
   * @param {number} volume
   * @param {number} relationshipGroup
   * @return {void}
   */
global.SetVolumeRelationship = function (volume, relationshipGroup) {
  return Citizen.invokeNative('0xfd010a2154b40676', volume, _ch(relationshipGroup));
};

/**
   * DISABLE_WATER_LOOKUP
   * Must be called every frame to take full effect.
   *
  
   * @return {void}
   */
global.DisableWaterLookup = function () {
  return Citizen.invokeNative('0x754616ec6965d1fb');
};

/**
   * ENABLE_WATER_LOOKUP
   *
  
   * @return {void}
   */
global.EnableWaterLookup = function () {
  return Citizen.invokeNative('0x754616ec6965d1bf');
};

/**
   * GET_WATER_HEIGHT
   * Checks against a global variable that is set by _SET_WORLD_WATER_TYPE. If that is set to one it will fail. Likely not the only issue but part of it.
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {[boolean, number]}
   */
global.GetWaterHeight = function (x, y, z) {
  return Citizen.invokeNative('0xfca8b23f28813f69', _fv(x), _fv(y), _fv(z), _f, _r);
};

/**
   * GET_WATER_HEIGHT_NO_WAVES
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {[boolean, number]}
   */
global.GetWaterHeightNoWaves = function (x, y, z) {
  return Citizen.invokeNative('0xdcf3690aa262c03f', _fv(x), _fv(y), _fv(z), _f, _r);
};

/**
   * REMOVE_EXTRA_CALMING_QUAD
   * Only used in rcm_crackpot1 R* Script: p0 = 0
   *
   * @param {number} index
   * @return {void}
   */
global.RemoveExtraCalmingQuad = function (index) {
  return Citizen.invokeNative('0x4bef8dd75af6c71c', index);
};

/**
   * TEST_PROBE_AGAINST_ALL_WATER
   * enum eScriptWaterTestResult
   * {
   *   SCRIPT_WATER_TEST_RESULT_NONE,
   *   SCRIPT_WATER_TEST_RESULT_WATER,
   *   SCRIPT_WATER_TEST_RESULT_BLOCKED,
   * };
   *
   * @param {number} x1
   * @param {number} y1
   * @param {number} z1
   * @param {number} x2
   * @param {number} y2
   * @param {number} z2
   * @param {number} flags
   * @return {[number, Vector3]}
   */
global.TestProbeAgainstAllWater = function (x1, y1, z1, x2, y2, z2, flags) {
  return Citizen.invokeNative('0x8974647ed222ea5f', _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), flags, _v, _r, _ri);
};

/**
   * TEST_VERTICAL_PROBE_AGAINST_ALL_WATER
   * Checks against a global variable that is set by _SET_WORLD_WATER_TYPE. If it's set to 1 (Guarma) it will fail.
   * 
   * See TEST_PROBE_AGAINST_ALL_WATER.
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} flags
   * @return {[number, number]}
   */
global.TestVerticalProbeAgainstAllWater = function (x, y, z, flags) {
  return Citizen.invokeNative('0x2b3451fa1e3142e2', _fv(x), _fv(y), _fv(z), flags, _f, _r, _ri);
};

/**
   * _0x09A1C7DFDCE54FBC
   * Called together with REMOVE_EXTRA_CALMING_QUAD in rcm_crackpot1 R* Script: p0 = 0
   * _REMOVE_*
   *
   * @param {number} p0
   * @return {void}
   */
global.N_0x09A1C7DFDCE54FBC = function (p0) {
  return Citizen.invokeNative('0x09a1c7dfdce54fbc', p0);
};

/**
   * _0x0DCEC6A92E497E17
   * Only used in native_son1 R* Script: p1 = 1
   *
   * @param {number} entity
   * @param {number} p1
   * @return {void}
   */
global.N_0x0DCEC6A92E497E17 = function (entity, p1) {
  return Citizen.invokeNative('0x0dcec6a92e497e17', entity, p1);
};

/**
   * _0xA33F5069B0CB89B8
   * Only used in fishing_core R* Script
   *
  
   * @return {void}
   */
global.N_0xA33F5069B0CB89B8 = function () {
  return Citizen.invokeNative('0xa33f5069b0cb89b8');
};

/**
   * _0xB34A6009A0DB80B8
   * Used in bounty1, fanale3, sean1 R* Scripts
   *
   * @param {number} entity
   * @return {void}
   */
global.N_0xB34A6009A0DB80B8 = function (entity) {
  return Citizen.invokeNative('0xb34a6009a0db80b8', entity);
};

/**
   * _0xE8126623008372AA
   * Only used in fussar1 / train_robbery2 R* Script
   *
  
   * @return {void}
   */
global.N_0xE8126623008372AA = function () {
  return Citizen.invokeNative('0xe8126623008372aa');
};

/**
   * _0xF0FBF193F1F5C0EA
   * Only used in fishing_core R* Script
   *
   * @param {number} ped
   * @return {void}
   */
global.N_0xF0FBF193F1F5C0EA = function (ped) {
  return Citizen.invokeNative('0xf0fbf193f1f5c0ea', ped);
};

/**
   * _GET_WORLD_WATER_TYPE
   *
  
   * @return {number}
   */
global.GetWorldWaterType = function () {
  return Citizen.invokeNative('0x189739a7631c1867', _r, _ri);
};

/**
   * _RESET_GUARMA_WATER_STATE
   * Only used in guama1 / guama3 R* Script
   * _REQUEST_* or _RESET_*
   *
  
   * @return {void}
   */
global.ResetGuarmaWaterState = function () {
  return Citizen.invokeNative('0xc63540aef8384769');
};

/**
   * _SET_OCEAN_GUARMA_WATER_QUADRANT
   * Only used in R* Script guama1 this native allows to modify the ocean water in the guarma island. wave direction accepts 0, 1 and 2 values.
   *
   * @param {number} wavesHeight
   * @param {number} p1
   * @param {number} waveDirection
   * @param {number} p3
   * @param {number} waveAmmount
   * @param {number} p5
   * @param {number} waveSpeed
   * @param {number} wavesStrength
   * @param {number} p8
   * @return {void}
   */
global.SetOceanGuarmaWaterQuadrant = function (wavesHeight, p1, waveDirection, p3, waveAmmount, p5, waveSpeed, wavesStrength, p8) {
  return Citizen.invokeNative('0xc63540aef8384732', _fv(wavesHeight), _fv(p1), waveDirection, _fv(p3), _fv(waveAmmount), _fv(p5), _fv(waveSpeed), _fv(wavesStrength), p8);
};

/**
   * _SET_WORLD_WATER_TYPE
   * 0 = World
   * 1 = Guarma
   *
   * @param {number} waterType
   * @return {void}
   */
global.SetWorldWaterType = function (waterType) {
  return Citizen.invokeNative('0xe8770ee02aee45c2', waterType);
};

/**
   * GET_ALLOW_DUAL_WIELD
   *
   * @param {number} ped
   * @return {boolean}
   */
global.GetAllowDualWield = function (ped) {
  return Citizen.invokeNative('0x918990bd9ce08582', ped, _r);
};

/**
   * GET_AMMO_IN_CLIP
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @return {[boolean, number]}
   */
global.GetAmmoInClip = function (ped, weaponHash) {
  return Citizen.invokeNative('0x2e1202248937775c', ped, _i, _ch(weaponHash), _r);
};

/**
   * GET_AMMO_IN_PED_WEAPON
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @return {number}
   */
global.GetAmmoInPedWeapon = function (ped, weaponHash) {
  return Citizen.invokeNative('0x015a522136d7f951', ped, _ch(weaponHash), _r, _ri);
};

/**
   * GET_BEST_PED_SHORTARM_GUID
   *
   * @param {number} ped
   * @param {DataView} outGuid
   * @param {boolean} p2
   * @param {boolean} p3
   * @return {void}
   */
global.GetBestPedShortarmGuid = function (ped, outGuid, p2, p3) {
  return Citizen.invokeNative('0xf52bd94b47ccf736', ped, outGuid, p2, p3);
};

/**
   * GET_BEST_PED_WEAPON
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {number}
   */
global.GetBestPedWeapon = function (ped, p1, p2) {
  return Citizen.invokeNative('0x8483e98e8b888ae2', ped, p1, p2, _r, _ri);
};

/**
   * GET_CURRENT_PED_VEHICLE_WEAPON
   *
   * @param {number} ped
   * @return {[boolean, number]}
   */
global.GetCurrentPedVehicleWeapon = function (ped) {
  return Citizen.invokeNative('0x1017582bcd3832dc', ped, _i, _r);
};

/**
   * GET_CURRENT_PED_WEAPON
   * attachPoint: see SET_CURRENT_PED_WEAPON
   *
   * @param {number} ped
   * @param {boolean} p2
   * @param {number} attachPoint
   * @param {boolean} p4
   * @return {[boolean, number]}
   */
global.GetCurrentPedWeapon = function (ped, p2, attachPoint, p4) {
  return Citizen.invokeNative('0x3a87e44bb9a01d54', ped, _i, p2, attachPoint, p4, _r);
};

/**
   * GET_CURRENT_PED_WEAPON_ENTITY_INDEX
   * Returns weaponObject, attachPoint: see SET_CURRENT_PED_WEAPON
   *
   * @param {number} ped
   * @param {number} attachPoint
   * @return {number}
   */
global.GetCurrentPedWeaponEntityIndex = function (ped, attachPoint) {
  return Citizen.invokeNative('0x3b390a939af0b5fc', ped, attachPoint, _r, _ri);
};

/**
   * GET_MAX_AMMO
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @return {[boolean, number]}
   */
global.GetMaxAmmo = function (ped, weaponHash) {
  return Citizen.invokeNative('0xdc16122c7a20c933', ped, _i, _ch(weaponHash), _r);
};

/**
   * GET_MAX_AMMO_IN_CLIP
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @param {boolean} p2
   * @return {number}
   */
global.GetMaxAmmoInClip = function (ped, weaponHash, p2) {
  return Citizen.invokeNative('0xa38dcffcea8962fa', ped, _ch(weaponHash), p2, _r, _ri);
};

/**
   * GET_PED_AMMO_BY_TYPE
   *
   * @param {number} ped
   * @param {number} ammoType
   * @return {number}
   */
global.GetPedAmmoByType = function (ped, ammoType) {
  return Citizen.invokeNative('0x39d22031557946c1', ped, _ch(ammoType), _r, _ri);
};

/**
   * GET_PED_AMMO_TYPE_FROM_WEAPON
   * Returns the current ammo type of the specified ped's specified weapon.
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @return {number}
   */
global.GetPedAmmoTypeFromWeapon = function (ped, weaponHash) {
  return Citizen.invokeNative('0x7fead38b326b9f74', ped, _ch(weaponHash), _r, _ri);
};

/**
   * GET_PED_BACKUP_WEAPON
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {number}
   */
global.GetPedBackupWeapon = function (ped, p1) {
  return Citizen.invokeNative('0xc71fe230a513c30f', ped, p1, _r, _ri);
};

/**
   * GET_PED_LAST_WEAPON_IMPACT_COORD
   *
   * @param {number} ped
   * @return {[boolean, Vector3]}
   */
global.GetPedLastWeaponImpactCoord = function (ped) {
  return Citizen.invokeNative('0x6c4d0409ba1a2bc2', ped, _v, _r);
};

/**
   * GET_PED_WEAPON_GUID_AT_ATTACH_POINT
   *
   * @param {number} ped
   * @param {number} attachPoint
   * @param {DataView} weaponGuid
   * @return {boolean}
   */
global.GetPedWeaponGuidAtAttachPoint = function (ped, attachPoint, weaponGuid) {
  return Citizen.invokeNative('0x6929e22158e52265', ped, attachPoint, weaponGuid, _r);
};

/**
   * GET_WEAPONTYPE_GROUP
   *
   * @param {number} weaponHash
   * @return {number}
   */
global.GetWeapontypeGroup = function (weaponHash) {
  return Citizen.invokeNative('0xedca14ca5199ff25', _ch(weaponHash), _r, _ri);
};

/**
   * GET_WEAPON_CLIP_SIZE
   *
   * @param {number} weaponHash
   * @return {number}
   */
global.GetWeaponClipSize = function (weaponHash) {
  return Citizen.invokeNative('0xd3750ccc00635fc2', _ch(weaponHash), _r, _ri);
};

/**
   * GET_WEAPON_DEGRADATION
   * 0.0: good condition, 1.0: poor condition
   *
   * @param {number} weaponObject
   * @return {number}
   */
global.GetWeaponDegradation = function (weaponObject) {
  return Citizen.invokeNative('0x0d78e1097f89e637', weaponObject, _r, _rf);
};

/**
   * GET_WEAPON_PERMANENT_DEGRADATION
   * Related to rust of weapons
   *
   * @param {number} weaponObject
   * @return {number}
   */
global.GetWeaponPermanentDegradation = function (weaponObject) {
  return Citizen.invokeNative('0xd56e5f336c675efa', weaponObject, _r, _rf);
};

/**
   * GIVE_DELAYED_WEAPON_TO_PED
   * addReason: see _ADD_AMMO_TO_PED
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @param {number} ammoCount
   * @param {boolean} p3
   * @param {number} addReason
   * @return {void}
   */
global.GiveDelayedWeaponToPed = function (ped, weaponHash, ammoCount, p3, addReason) {
  return Citizen.invokeNative('0xb282dc6ebd803c75', ped, _ch(weaponHash), ammoCount, p3, _ch(addReason));
};

/**
   * GIVE_WEAPON_TO_PED
   * Gives the ped the weapon.
   * List: https://github.com/femga/rdr3_discoveries/blob/master/weapons/weapons.lua
   * 
   * Params: p7 is 0.5f, and p8 is 1.0f. p11 and p12 are both 0 in R* Scripts
   * attachPoint: see SET_CURRENT_PED_WEAPON
   * addReason: see _ADD_AMMO_TO_PED
   * permanentDegradation: default 0.5, any higher than 0 it will automatically make the weapon worn, you can also adjust the value to change the weapons maximum cleanliness
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @param {number} ammoCount
   * @param {boolean} bForceInHand
   * @param {boolean} bForceInHolster
   * @param {number} attachPoint
   * @param {boolean} bAllowMultipleCopies
   * @param {number} p7
   * @param {number} p8
   * @param {number} addReason
   * @param {boolean} bIgnoreUnlocks
   * @param {number} permanentDegradation
   * @param {boolean} p12
   * @return {number}
   */
global.GiveWeaponToPed = function (ped, weaponHash, ammoCount, bForceInHand, bForceInHolster, attachPoint, bAllowMultipleCopies, p7, p8, addReason, bIgnoreUnlocks, permanentDegradation, p12) {
  return Citizen.invokeNative('0x5e3bddbcb83f3d84', ped, _ch(weaponHash), ammoCount, bForceInHand, bForceInHolster, attachPoint, bAllowMultipleCopies, _fv(p7), _fv(p8), _ch(addReason), bIgnoreUnlocks, _fv(permanentDegradation), p12, _r, _ri);
};

/**
   * GIVE_WEAPON_TO_PED_WITH_OPTIONS
   *
   * @param {number} ped
   * @param {DataView} data
   * @param {DataView} outData
   * @return {boolean}
   */
global.GiveWeaponToPedWithOptions = function (ped, data, outData) {
  return Citizen.invokeNative('0xbe7e42b07fd317ac', ped, data, outData, _r);
};

/**
   * HAS_PED_GOT_WEAPON
   * onlyCheckPlayerInventory: If true, it will only check the players current inventory. If false, it also checks your horse inventory
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @param {number} p2
   * @param {boolean} onlyCheckPlayerInventory
   * @return {boolean}
   */
global.HasPedGotWeapon = function (ped, weaponHash, p2, onlyCheckPlayerInventory) {
  return Citizen.invokeNative('0x8decb02f88f428bc', ped, _ch(weaponHash), p2, onlyCheckPlayerInventory, _r);
};

/**
   * HAS_WEAPON_GOT_WEAPON_COMPONENT
   *
   * @param {number} weapon
   * @param {number} addonHash
   * @return {boolean}
   */
global.HasWeaponGotWeaponComponent = function (weapon, addonHash) {
  return Citizen.invokeNative('0x76a18844e743bf91', weapon, _ch(addonHash), _r);
};

/**
   * HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE
   * Hides the ped's weapon during a cutscene.
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.HidePedWeaponForScriptedCutscene = function (ped, toggle) {
  return Citizen.invokeNative('0x6f6981d2253c208f', ped, toggle);
};

/**
   * IS_PED_ARMED
   *
   * @param {number} ped
   * @param {number} flags
   * @return {boolean}
   */
global.IsPedArmed = function (ped, flags) {
  return Citizen.invokeNative('0xcb690f680a3ea971', ped, flags, _r);
};

/**
   * IS_PED_CARRYING_WEAPON
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsPedCarryingWeapon = function (ped, weaponHash) {
  return Citizen.invokeNative('0xf29a186ed428b552', ped, _ch(weaponHash), _r);
};

/**
   * IS_PED_WEAPON_READY_TO_SHOOT
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedWeaponReadyToShoot = function (ped) {
  return Citizen.invokeNative('0xb80ca294f2f26749', ped, _r);
};

/**
   * IS_WEAPON_A_GUN
   * Returns true if CWeaponInfoFlags::Flags::Gun is set.
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponAGun = function (weaponHash) {
  return Citizen.invokeNative('0x705be297eebdb95d', _ch(weaponHash), _r);
};

/**
   * IS_WEAPON_BOW
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponBow = function (weaponHash) {
  return Citizen.invokeNative('0xc4dec3ca8c365a5d', _ch(weaponHash), _r);
};

/**
   * IS_WEAPON_MELEE_WEAPON
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponMeleeWeapon = function (weaponHash) {
  return Citizen.invokeNative('0x959383dcd42040da', _ch(weaponHash), _r);
};

/**
   * IS_WEAPON_PISTOL
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponPistol = function (weaponHash) {
  return Citizen.invokeNative('0xddc64f5e31eedab6', _ch(weaponHash), _r);
};

/**
   * IS_WEAPON_REPEATER
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponRepeater = function (weaponHash) {
  return Citizen.invokeNative('0xddb2578e95ef7138', _ch(weaponHash), _r);
};

/**
   * IS_WEAPON_REVOLVER
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponRevolver = function (weaponHash) {
  return Citizen.invokeNative('0xc212f1d05a8232bb', _ch(weaponHash), _r);
};

/**
   * IS_WEAPON_RIFLE
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponRifle = function (weaponHash) {
  return Citizen.invokeNative('0x0a82317b7ebfc420', _ch(weaponHash), _r);
};

/**
   * IS_WEAPON_SHOTGUN
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponShotgun = function (weaponHash) {
  return Citizen.invokeNative('0xc75386174ece95d5', _ch(weaponHash), _r);
};

/**
   * IS_WEAPON_VALID
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponValid = function (weaponHash) {
  return Citizen.invokeNative('0x937c71165cf334b3', _ch(weaponHash), _r);
};

/**
   * MAKE_PED_DROP_WEAPON
   * Old name: _DROP_CURRENT_PED_WEAPON
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {number} attachPoint
   * @param {boolean} p3
   * @param {boolean} p4
   * @return {number}
   */
global.MakePedDropWeapon = function (ped, p1, attachPoint, p3, p4) {
  return Citizen.invokeNative('0xcef4c65de502d367', ped, p1, attachPoint, p3, p4, _r, _ri);
};

/**
   * REMOVE_ALL_PED_WEAPONS
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {boolean} p2
   * @return {void}
   */
global.RemoveAllPedWeapons = function (ped, p1, p2) {
  return Citizen.invokeNative('0xf25df915fa38c5f3', ped, p1, p2);
};

/**
   * REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT
   *
   * @param {number} weaponObject
   * @param {number} component
   * @return {void}
   */
global.RemoveWeaponComponentFromWeaponObject = function (weaponObject, component) {
  return Citizen.invokeNative('0xf7d82b0d66777611', weaponObject, _ch(component));
};

/**
   * REMOVE_WEAPON_FROM_PED
   * removeReason:
   * enum eRemoveItemReason : Hash
   * {
   *   REMOVE_REASON_CLIENT_PURGED = 0x4A4E94DC,
   *   REMOVE_REASON_COALESCE = 0x2ABE393E,
   *   REMOVE_REASON_DEBUG = 0xA07362E6,
   *   REMOVE_REASON_DEFAULT = 0xF77DE93D,
   *   REMOVE_REASON_DELETE_CHARACTER = 0x20AFBDE9,
   *   REMOVE_REASON_DROPPED = 0xEC7FB5D5,
   *   REMOVE_REASON_DUPLICATE = 0x19047132,
   *   REMOVE_REASON_GIFTED_INCORRECTLY = 0x9C4E3829,
   *   REMOVE_REASON_GIVEN = 0xAD5377D4,
   *   REMOVE_REASON_INSUFFICIENT_INVENTORY = 0x518D1AAE,
   *   REMOVE_REASON_ITEM_DOES_NOT_EXIST = 0xEAD5D889,
   *   REMOVE_REASON_LOADOUT = 0x1B94E3BA,
   *   REMOVE_REASON_SET_AMOUNT = 0x19D5CFA5,
   *   REMOVE_REASON_SOLD = 0x76C4B482,
   *   REMOVE_REASON_USED = 0x2188E0A3,
   *   REMOVE_REASON_USE_FAILED = 0x671F9EAD
   * };
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @param {boolean} p2
   * @param {number} removeReason
   * @return {void}
   */
global.RemoveWeaponFromPed = function (ped, weaponHash, p2, removeReason) {
  return Citizen.invokeNative('0x4899cb088edf59b8', ped, _ch(weaponHash), p2, _ch(removeReason));
};

/**
   * SET_ALLOW_ANY_WEAPON_DROP
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetAllowAnyWeaponDrop = function (ped, toggle) {
  return Citizen.invokeNative('0x78030c7867d8b9b6', ped, toggle);
};

/**
   * SET_AMMO_IN_CLIP
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @param {number} ammo
   * @return {boolean}
   */
global.SetAmmoInClip = function (ped, weaponHash, ammo) {
  return Citizen.invokeNative('0xdcd2a934d65cb497', ped, _ch(weaponHash), ammo, _r);
};

/**
   * SET_CURRENT_PED_VEHICLE_WEAPON
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @return {boolean}
   */
global.SetCurrentPedVehicleWeapon = function (ped, weaponHash) {
  return Citizen.invokeNative('0x75c55983c2c39daa', ped, _ch(weaponHash), _r);
};

/**
   * SET_CURRENT_PED_WEAPON
   * attachPoint:
   * enum eWeaponAttachPoint
   * {
   *   WEAPON_ATTACH_POINT_INVALID = -1,
   *   WEAPON_ATTACH_POINT_HAND_PRIMARY = 0,
   *   WEAPON_ATTACH_POINT_HAND_SECONDARY = 1,
   *   WEAPON_ATTACH_POINT_PISTOL_R = 2,
   *   MAX_HAND_WEAPON_ATTACH_POINTS = 2,
   *   WEAPON_ATTACH_POINT_PISTOL_L = 3,
   *   WEAPON_ATTACH_POINT_KNIFE = 4,
   *   WEAPON_ATTACH_POINT_LASSO = 5,
   *   WEAPON_ATTACH_POINT_THROWER = 6,
   *   WEAPON_ATTACH_POINT_BOW = 7,
   *   WEAPON_ATTACH_POINT_BOW_ALTERNATE = 8,
   *   WEAPON_ATTACH_POINT_RIFLE = 9,
   *   WEAPON_ATTACH_POINT_RIFLE_ALTERNATE = 10,
   *   WEAPON_ATTACH_POINT_LANTERN = 11,
   *   WEAPON_ATTACH_POINT_TEMP_LANTERN = 12,
   *   WEAPON_ATTACH_POINT_MELEE = 13,
   *   MAX_SYNCED_WEAPON_ATTACH_POINTS = 13,
   *   WEAPON_ATTACH_POINT_HIP = 14,
   *   WEAPON_ATTACH_POINT_BOOT = 15,
   *   WEAPON_ATTACH_POINT_BACK = 16,
   *   WEAPON_ATTACH_POINT_FRONT = 17,
   *   WEAPON_ATTACH_POINT_SHOULDERSLING = 18,
   *   WEAPON_ATTACH_POINT_LEFTBREAST = 19,
   *   WEAPON_ATTACH_POINT_RIGHTBREAST = 20,
   *   WEAPON_ATTACH_POINT_LEFTARMPIT = 21,
   *   WEAPON_ATTACH_POINT_RIGHTARMPIT = 22,
   *   WEAPON_ATTACH_POINT_LEFTARMPIT_RIFLE = 23,
   *   WEAPON_ATTACH_POINT_SATCHEL = 24,
   *   WEAPON_ATTACH_POINT_LEFTARMPIT_BOW = 25,
   *   WEAPON_ATTACH_POINT_RIGHT_HAND_EXTRA = 26,
   *   WEAPON_ATTACH_POINT_LEFT_HAND_EXTRA = 27,
   *   WEAPON_ATTACH_POINT_RIGHT_HAND_AUX = 28,
   *   MAX_WEAPON_ATTACH_POINTS = 29
   * };
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @param {boolean} equipNow
   * @param {number} attachPoint
   * @param {boolean} p4
   * @param {boolean} p5
   * @return {void}
   */
global.SetCurrentPedWeapon = function (ped, weaponHash, equipNow, attachPoint, p4, p5) {
  return Citizen.invokeNative('0xadf692b254977c0c', ped, _ch(weaponHash), equipNow, attachPoint, p4, p5);
};

/**
   * SET_CURRENT_PED_WEAPON_BY_GUID
   * Equips a weapon from a weaponItem, similar to GIVE_WEAPON_TO_PED
   *
   * @param {number} ped
   * @param {DataView} weaponUid
   * @param {boolean} p2
   * @param {boolean} p3
   * @param {boolean} p4
   * @param {boolean} p5
   * @return {void}
   */
global.SetCurrentPedWeaponByGuid = function (ped, weaponUid, p2, p3, p4, p5) {
  return Citizen.invokeNative('0x12fb95fe3d579238', ped, weaponUid, p2, p3, p4, p5);
};

/**
   * SET_INSTANTLY_EQUIP_WEAPON_PICKUPS
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetInstantlyEquipWeaponPickups = function (ped, toggle) {
  return Citizen.invokeNative('0x739b9c6d0e7f7f93', ped, toggle);
};

/**
   * SET_PED_AMMO
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @param {number} ammo
   * @return {void}
   */
global.SetPedAmmo = function (ped, weaponHash, ammo) {
  return Citizen.invokeNative('0x14e56bc5b5db6a19', ped, _ch(weaponHash), ammo);
};

/**
   * SET_PED_AMMO_BY_TYPE
   *
   * @param {number} ped
   * @param {number} ammoType
   * @param {number} ammo
   * @return {void}
   */
global.SetPedAmmoByType = function (ped, ammoType, ammo) {
  return Citizen.invokeNative('0x5fd1e1f011e76d7e', ped, _ch(ammoType), ammo);
};

/**
   * SET_PED_AMMO_TO_DROP
   *
   * @param {number} ped
   * @param {number} p1
   * @param {number} p2
   * @return {void}
   */
global.SetPedAmmoToDrop = function (ped, p1, p2) {
  return Citizen.invokeNative('0xa4efef9440a5b0ef', ped, p1, p2);
};

/**
   * SET_PED_CURRENT_WEAPON_VISIBLE
   *
   * @param {number} ped
   * @param {boolean} visible
   * @param {boolean} deselectWeapon
   * @param {boolean} p3
   * @param {boolean} p4
   * @return {void}
   */
global.SetPedCurrentWeaponVisible = function (ped, visible, deselectWeapon, p3, p4) {
  return Citizen.invokeNative('0x0725a4ccfded9a70', ped, visible, deselectWeapon, p3, p4);
};

/**
   * SET_PED_DROPS_INVENTORY_WEAPON
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @param {number} xOffset
   * @param {number} yOffset
   * @param {number} zOffset
   * @param {number} ammoCount
   * @return {void}
   */
global.SetPedDropsInventoryWeapon = function (ped, weaponHash, xOffset, yOffset, zOffset, ammoCount) {
  return Citizen.invokeNative('0x208a1888007fc0e6', ped, _ch(weaponHash), _fv(xOffset), _fv(yOffset), _fv(zOffset), ammoCount);
};

/**
   * SET_PED_DROPS_WEAPONS_WHEN_DEAD
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedDropsWeaponsWhenDead = function (ped, toggle) {
  return Citizen.invokeNative('0x476ae72c1d19d1a8', ped, toggle);
};

/**
   * SET_PED_INFINITE_AMMO
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @param {number} weaponHash
   * @return {void}
   */
global.SetPedInfiniteAmmo = function (ped, toggle, weaponHash) {
  return Citizen.invokeNative('0x3edcb0505123623b', ped, toggle, _ch(weaponHash));
};

/**
   * SET_PLAYER_PED_QUICK_SWAP_WEAPON_BY_GUID
   *
   * @param {number} ped
   * @param {DataView} guidPrimary
   * @param {DataView} guidSecondary
   * @return {void}
   */
global.SetPlayerPedQuickSwapWeaponByGuid = function (ped, guidPrimary, guidSecondary) {
  return Citizen.invokeNative('0xec1f85da51d3d6c4', ped, guidPrimary, guidSecondary);
};

/**
   * SET_VEHICLE_WEAPON_HEADING
   *
   * @param {number} vehicle
   * @param {number} seatIndex
   * @param {number} heading
   * @param {boolean} p3
   * @return {void}
   */
global.SetVehicleWeaponHeading = function (vehicle, seatIndex, heading, p3) {
  return Citizen.invokeNative('0x194d877fc5597b7d', vehicle, seatIndex, _fv(heading), p3);
};

/**
   * SHOULD_WEAPON_BE_DISCARDED_WHEN_SWAPPED
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.ShouldWeaponBeDiscardedWhenSwapped = function (weaponHash) {
  return Citizen.invokeNative('0x2c83212a7aa51d3d', _ch(weaponHash), _r);
};

/**
   * _0x000FA7A4A8443AF7
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x000FA7A4A8443AF7 = function (p0) {
  return Citizen.invokeNative('0x000fa7a4a8443af7', p0);
};

/**
   * _IS_PED_HOLDING_WEAPON
   * Returns whether the specified ped is holding a weapon with the given hash.
   * only these weapons below return true
   *  WEAPON_BOW, WEAPON_KIT_METAL_DETECTOR, WEAPON_MELEE_CLEAVER, WEAPON_MELEE_DAVY_LANTERN, WEAPON_MELEE_HATCHET, WEAPON_MELEE_HATCHET_HUNTER, WEAPON_MELEE_KNIFE_JAWBONE, WEAPON_MELEE_LANTERN WEAPON_MELEE_TORCH, WEAPON_MOONSHINEJUG_MP, WEAPON_RIFLE_BOLTACTION, WEAPON_SHOTGUN_PUMP, WEAPON_THROWN_BOLAS, WEAPON_THROWN_MOLOTOV
   *
   * @param {number} ped
   * @param {number} weapon
   * @return {boolean}
   */
global.IsPedHoldingWeapon = function (ped, weapon) {
  return Citizen.invokeNative('0x07e1c35f0078c3f9', ped, _ch(weapon), _r);
};

/**
   * _0x0DE0944ECCB3DF5D
   * _GET_D* - _GET_L*
   *
   * @param {number} ped
   * @return {boolean}
   */
global.N_0x0DE0944ECCB3DF5D = function (ped) {
  return Citizen.invokeNative('0x0de0944eccb3df5d', ped, _r);
};

/**
   * _0x14FF0C2545527F9B
   * Puts the gun visibly in your horse's holster without having to be close to the horse. Use 0xE9BD19F8121ADE3E before using this native
   * _A* or _B*
   *
   * @param {number} horse
   * @param {number} weaponHash
   * @param {number} ped
   * @return {void}
   */
global.N_0x14FF0C2545527F9B = function (horse, weaponHash, ped) {
  return Citizen.invokeNative('0x14ff0c2545527f9b', horse, _ch(weaponHash), ped);
};

/**
   * _0x16D9841A85FA627E
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.N_0x16D9841A85FA627E = function (ped, toggle) {
  return Citizen.invokeNative('0x16d9841a85fa627e', ped, toggle);
};

/**
   * _0x183CE355115B6E75
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x183CE355115B6E75 = function (p0, p1) {
  return Citizen.invokeNative('0x183ce355115b6e75', p0, p1);
};

/**
   * _0x23BF601A42F329A0
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x23BF601A42F329A0 = function (p0) {
  return Citizen.invokeNative('0x23bf601a42f329a0', p0, _r);
};

/**
   * _0x2EBF70E1D8C06683
   * _SET_A* - _SET_B*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {void}
   */
global.N_0x2EBF70E1D8C06683 = function (ped, p1) {
  return Citizen.invokeNative('0x2ebf70e1d8c06683', ped, _ch(p1));
};

/**
   * _0x3799EFCC3C8CD5E1
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0x3799EFCC3C8CD5E1 = function (p0) {
  return Citizen.invokeNative('0x3799efcc3c8cd5e1', p0, _r);
};

/**
   * _0x404514D231DB27A0
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x404514D231DB27A0 = function (p0, p1) {
  return Citizen.invokeNative('0x404514d231db27a0', p0, p1);
};

/**
   * _0x431240A58484D5D0
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.N_0x431240A58484D5D0 = function (ped, toggle) {
  return Citizen.invokeNative('0x431240a58484d5d0', ped, toggle);
};

/**
   * _0x44C8F4908F1B2622
   *
   * @param {number} ped
   * @param {number} ammoHash
   * @return {boolean}
   */
global.N_0x44C8F4908F1B2622 = function (ped, ammoHash) {
  return Citizen.invokeNative('0x44c8f4908f1b2622', ped, _ch(ammoHash), _r);
};

/**
   * _0x457B16951AD77C1B
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x457B16951AD77C1B = function (p0) {
  return Citizen.invokeNative('0x457b16951ad77c1b', p0);
};

/**
   * _0x45E57FDD531C9477
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.N_0x45E57FDD531C9477 = function (ped, toggle) {
  return Citizen.invokeNative('0x45e57fdd531c9477', ped, toggle);
};

/**
   * _GET_NUM_PEDS_RESTRAINED_FROM_WEAPON_BOLAS
   * returns the amount of peds that were restrained with the weapon thrown bolas
   *
   * @param {number} ped
   * @return {number}
   */
global.GetNumPedsRestrainedFromWeaponBolas = function (ped) {
  return Citizen.invokeNative('0x46d42883e873c1d7', ped, _r, _ri);
};

/**
   * _SET_PED_WEAPON_ON_BACK
   * Holster the holded shoulder weapon. Precisions: 0 means with anim while 1 means direct holster
   *
   * @param {number} ped
   * @param {boolean} disableAnim
   * @return {void}
   */
global.SetPedWeaponOnBack = function (ped, disableAnim) {
  return Citizen.invokeNative('0x4820a6939d7cef28', ped, disableAnim);
};

/**
   * _0x4823F13A21F51964
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x4823F13A21F51964 = function (p0, p1) {
  return Citizen.invokeNative('0x4823f13a21f51964', p0, p1, _r);
};

/**
   * _0x486C96A0DCD2BC92
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x486C96A0DCD2BC92 = function (p0, p1) {
  return Citizen.invokeNative('0x486c96a0dcd2bc92', p0, p1, _r);
};

/**
   * _DOES_PED_HAVE_REPEATER
   * Returns whether the ped has a repeater p1: 0 or 1
   *
   * @param {number} ped
   * @param {number} p1
   * @return {boolean}
   */
global.DoesPedHaveRepeater = function (ped, p1) {
  return Citizen.invokeNative('0x495a04caec263af8', ped, p1, _r);
};

/**
   * _GET_WEAPON_HAS_MULTIPLE_AMMO_TYPES
   * Returns whether the weapon has multiple ammo types or not.
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.GetWeaponHasMultipleAmmoTypes = function (weaponHash) {
  return Citizen.invokeNative('0x58425fca3d3a2d15', _ch(weaponHash), _r);
};

/**
   * _0x5A695BD328586B44
   * Returns true if ped is on a horse while inside of a town
   * Params: p1 = 0
   * GET_L* - GET_MA*
   *
   * @param {number} ped
   * @param {number} p1
   * @return {boolean}
   */
global.N_0x5A695BD328586B44 = function (ped, p1) {
  return Citizen.invokeNative('0x5a695bd328586b44', ped, p1, _r);
};

/**
   * _DOES_PED_HAVE_REVOLVER
   * Returns whether the ped has a revolver p1: 0 or 1
   *
   * @param {number} ped
   * @param {number} p1
   * @return {boolean}
   */
global.DoesPedHaveRevolver = function (ped, p1) {
  return Citizen.invokeNative('0x5b235f24472f2c3b', ped, p1, _r);
};

/**
   * _0x63B83A526329AFBC
   * Only used in R* Script fme_escaped_convicts, p0 = 0
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x63B83A526329AFBC = function (p0) {
  return Citizen.invokeNative('0x63b83a526329afbc', p0);
};

/**
   * _0x641351E9AD103890
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x641351E9AD103890 = function (p0, p1) {
  return Citizen.invokeNative('0x641351e9ad103890', p0, p1);
};

/**
   * _GET_DEFAULT_WEAPON_ATTACH_POINT
   * Returns the attachpoint for a weapon hash. (returns -1 for melee as they can't be attached)
   *
   * @param {number} weaponHash
   * @return {number}
   */
global.GetDefaultWeaponAttachPoint = function (weaponHash) {
  return Citizen.invokeNative('0x65dc4ac5b96614cb', _ch(weaponHash), _r, _ri);
};

/**
   * _0x74C2365FDD1BB48F
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x74C2365FDD1BB48F = function (p0, p1) {
  return Citizen.invokeNative('0x74c2365fdd1bb48f', p0, p1);
};

/**
   * _0x74C8000FDD1BB111
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x74C8000FDD1BB111 = function (p0, p1) {
  return Citizen.invokeNative('0x74c8000fdd1bb111', p0, p1, _r);
};

/**
   * _0x74C8000FDD1BB222
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0x74C8000FDD1BB222 = function (p0, p1) {
  return Citizen.invokeNative('0x74c8000fdd1bb222', p0, p1, _r);
};

/**
   * _0x74C9080FDD1BB48E
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x74C9080FDD1BB48E = function (p0, p1) {
  return Citizen.invokeNative('0x74c9080fdd1bb48e', p0, p1);
};

/**
   * _0x74C9080FDD1BB48F
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0x74C9080FDD1BB48F = function (p0, p1) {
  return Citizen.invokeNative('0x74c9080fdd1bb48f', p0, p1);
};

/**
   * _0x74C90AAACC1DD48F
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0x74C90AAACC1DD48F = function (p0) {
  return Citizen.invokeNative('0x74c90aaacc1dd48f', p0);
};

/**
   * _DOES_PED_HAVE_SNIPER
   * Returns whether the ped has a sniper p1: 0 or 1
   *
   * @param {number} ped
   * @param {number} p1
   * @return {boolean}
   */
global.DoesPedHaveSniper = function (ped, p1) {
  return Citizen.invokeNative('0x80bb243789008a82', ped, p1, _r);
};

/**
   * _0x8A779706DA5CA3DD
   * Only used in R* SP Scripts native_son2, native_son3 and smuggler2
   * Params: p2 = -1
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {number} p2
   * @return {void}
   */
global.N_0x8A779706DA5CA3DD = function (ped, p1, p2) {
  return Citizen.invokeNative('0x8a779706da5ca3dd', ped, p1, p2);
};

/**
   * _0x9409C62504A8F9E9
   * Only used in R* SP Script guama3
   *
   * @param {number} vehicle
   * @param {boolean} p1
   * @return {void}
   */
global.N_0x9409C62504A8F9E9 = function (vehicle, p1) {
  return Citizen.invokeNative('0x9409c62504a8f9e9', vehicle, p1);
};

/**
   * _DOES_PED_HAVE_RIFLE
   * Returns whether the ped has a rifle p1: 0 or 1
   *
   * @param {number} ped
   * @param {number} p1
   * @return {boolean}
   */
global.DoesPedHaveRifle = function (ped, p1) {
  return Citizen.invokeNative('0x95ca12e2c68043e5', ped, p1, _r);
};

/**
   * _0x9CCA3131E6B53C68
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {any}
   */
global.N_0x9CCA3131E6B53C68 = function (p0, p1, p2) {
  return Citizen.invokeNative('0x9cca3131e6b53c68', p0, p1, p2, _r);
};

/**
   * _GET_WEAPON_FROM_DEFAULT_PED_WEAPON_COLLECTION
   * this native gets the weapon hash from the default ped weapon collection (see GetDefaultPedWeaponCollection for more info) will randomly return one of it's weapons
   *
   * @param {number} weaponCollection
   * @param {number} weaponGroup
   * @return {number}
   */
global.GetWeaponFromDefaultPedWeaponCollection = function (weaponCollection, weaponGroup) {
  return Citizen.invokeNative('0x9eefd670f10656d7', weaponCollection, _ch(weaponGroup), _r, _ri);
};

/**
   * _0x9F0E1892C7F228A8
   *
   * @param {boolean} p0
   * @return {any}
   */
global.N_0x9F0E1892C7F228A8 = function (p0) {
  return Citizen.invokeNative('0x9f0e1892c7f228a8', p0, _r);
};

/**
   * _0xA2091482ED42EF85
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xA2091482ED42EF85 = function (p0, p1) {
  return Citizen.invokeNative('0xa2091482ed42ef85', p0, p1, _r);
};

/**
   * _0xA3716A77DCF17424
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xA3716A77DCF17424 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xa3716a77dcf17424', p0, p1, p2);
};

/**
   * _0xA769D753922B031B
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xA769D753922B031B = function (p0, p1, p2) {
  return Citizen.invokeNative('0xa769d753922b031b', p0, p1, p2);
};

/**
   * _DOES_PED_HAVE_SHOTGUN
   * Returns whether the ped has a shotgun p1: 0 or 1
   *
   * @param {number} ped
   * @param {number} p1
   * @return {boolean}
   */
global.DoesPedHaveShotgun = function (ped, p1) {
  return Citizen.invokeNative('0xabc18a28bad4b46f', ped, p1, _r);
};

/**
   * _0xAFFD0CCF31F469B8
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xAFFD0CCF31F469B8 = function (p0) {
  return Citizen.invokeNative('0xaffd0ccf31f469b8', p0, _r);
};

/**
   * _0xB0FB9B196A3D13F0
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xB0FB9B196A3D13F0 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xb0fb9b196a3d13f0', p0, p1, p2);
};

/**
   * _SET_INSTANTLY_STORE_LONGARMS_ON_DISMOUNT
   * Stores longarms to your horse on dismount
   * Params: p2 = 0
   * SET_[I - M]*
   *
   * @param {number} ped
   * @param {boolean} storeLongarms
   * @param {number} p2
   * @return {void}
   */
global.SetInstantlyStoreLongarmsOnDismount = function (ped, storeLongarms, p2) {
  return Citizen.invokeNative('0xb832f1a686b9b810', ped, storeLongarms, p2);
};

/**
   * _0xBC9444F2FF94A9C0
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xBC9444F2FF94A9C0 = function (p0) {
  return Citizen.invokeNative('0xbc9444f2ff94a9c0', p0, _r);
};

/**
   * _DOES_PED_HAVE_PISTOL
   * Returns whether the ped has a pistol p1: 0 or 1
   *
   * @param {number} ped
   * @param {number} p1
   * @return {boolean}
   */
global.DoesPedHavePistol = function (ped, p1) {
  return Citizen.invokeNative('0xbfca7afabf9d7967', ped, p1, _r);
};

/**
   * _0xC5899C4CD2E2495D
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xC5899C4CD2E2495D = function (p0) {
  return Citizen.invokeNative('0xc5899c4cd2e2495d', p0);
};

/**
   * _0xD2209866B0CB72EA
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xD2209866B0CB72EA = function (p0, p1) {
  return Citizen.invokeNative('0xd2209866b0cb72ea', p0, p1, _r);
};

/**
   * _0xD4C6E24D955FF061
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xD4C6E24D955FF061 = function (p0) {
  return Citizen.invokeNative('0xd4c6e24d955ff061', p0);
};

/**
   * _0xD53846B9C931C181
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xD53846B9C931C181 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xd53846b9c931c181', p0, p1, p2);
};

/**
   * _0xD63B4BA3A02A99E0
   *
   * @param {any} p0
   * @param {any} p1
   * @return {void}
   */
global.N_0xD63B4BA3A02A99E0 = function (p0, p1) {
  return Citizen.invokeNative('0xd63b4ba3a02a99e0', p0, p1);
};

/**
   * _0xE9B3FEC825668291
   *
   * @param {any} p0
   * @param {any} p1
   * @param {any} p2
   * @return {void}
   */
global.N_0xE9B3FEC825668291 = function (p0, p1, p2) {
  return Citizen.invokeNative('0xe9b3fec825668291', p0, p1, p2);
};

/**
   * _IS_WEAPON_CLOSE_RANGE
   * _IS_WEAPON_CLOSE_RANGE?
   * returns true when it's lassos , melee, thrown weapons (matchetes and unarmed return false)
   * all guns ,bows and animal weapons return false
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponCloseRange = function (weaponHash) {
  return Citizen.invokeNative('0xea522f991e120d45', _ch(weaponHash), _r);
};

/**
   * _0xEC97101A8F311282
   *
   * @param {any} p0
   * @return {any}
   */
global.N_0xEC97101A8F311282 = function (p0) {
  return Citizen.invokeNative('0xec97101a8f311282', p0, _r);
};

/**
   * _0xECBB26529A737EF6
   *
   * @param {any} p0
   * @return {void}
   */
global.N_0xECBB26529A737EF6 = function (p0) {
  return Citizen.invokeNative('0xecbb26529a737ef6', p0);
};

/**
   * _0xF08D8FEB455F2C8C
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.N_0xF08D8FEB455F2C8C = function (ped, toggle) {
  return Citizen.invokeNative('0xf08d8feb455f2c8c', ped, toggle);
};

/**
   * _0xF252A85B8F3F8C58
   *
   * @param {number} weaponCollection
   * @param {number} dualwieldVariant
   * @return {boolean}
   */
global.N_0xF252A85B8F3F8C58 = function (weaponCollection, dualwieldVariant) {
  return Citizen.invokeNative('0xf252a85b8f3f8c58', _ch(weaponCollection), _ch(dualwieldVariant), _r);
};

/**
   * _0xF2F585411E748B9C
   *
   * @param {any} p0
   * @param {any} p1
   * @return {any}
   */
global.N_0xF2F585411E748B9C = function (p0, p1) {
  return Citizen.invokeNative('0xf2f585411e748b9c', p0, p1, _r);
};

/**
   * _0xF8204EF17410BF43
   * Returns weaponHash
   *
   * @param {number} weaponGroupHash
   * @param {number} p1
   * @param {number} p2
   * @param {any} p3
   * @return {number}
   */
global.N_0xF8204EF17410BF43 = function (weaponGroupHash, p1, p2, p3) {
  return Citizen.invokeNative('0xf8204ef17410bf43', _ch(weaponGroupHash), _fv(p1), _fv(p2), p3, _r, _ri);
};

/**
   * _ADD_AMMO_TO_PED
   * addReason:
   * enum eAddItemReason : Hash
   * {
   *   ADD_REASON_AWARDS = 0xB784AD1E,
   *   ADD_REASON_CREATE_CHARACTER = 0xE2C4FF71,
   *   ADD_REASON_DEBUG = 0x5C05C64D,
   *   ADD_REASON_DEFAULT = 0x2CD419DC,
   *   ADD_REASON_GET_INVENTORY = 0xD8188685,
   *   ADD_REASON_INCENTIVE = 0x8ADC2E95,
   *   ADD_REASON_LOADOUT = 0xCA3454E6,
   *   ADD_REASON_LOAD_SAVEGAME = 0x56212906,
   *   ADD_REASON_LOOTED = 0xCA806A55,
   *   ADD_REASON_MELEE = 0x7B9BDCE7,
   *   ADD_REASON_MP_MISSION = 0xEC0E0194,
   *   ADD_REASON_NOTIFICATION = 0xC56292D2,
   *   ADD_REASON_PICKUP = 0x1A770E22,
   *   ADD_REASON_PURCHASED = 0x4A6726C9,
   *   ADD_REASON_SET_AMOUNT = 0x4504731E,
   *   ADD_REASON_SYNCING = 0x8D4B4FF4,
   *   ADD_REASON_USE_FAILED = 0xD385B670
   * };
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @param {number} amount
   * @param {number} addReason
   * @return {void}
   */
global.AddAmmoToPed = function (ped, weaponHash, amount, addReason) {
  return Citizen.invokeNative('0xb190bca3f4042f95', ped, _ch(weaponHash), amount, _ch(addReason));
};

/**
   * _ADD_AMMO_TO_PED_BY_TYPE
   * addReason: see _ADD_AMMO_TO_PED
   *
   * @param {number} ped
   * @param {number} ammoType
   * @param {number} amount
   * @param {number} addReason
   * @return {void}
   */
global.AddAmmoToPedByType = function (ped, ammoType, amount, addReason) {
  return Citizen.invokeNative('0x106a811c6d3035f3', ped, _ch(ammoType), amount, _ch(addReason));
};

/**
   * _CLEAR_PED_LAST_WEAPON_DAMAGE
   *
   * @param {number} ped
   * @return {void}
   */
global.ClearPedLastWeaponDamage = function (ped) {
  return Citizen.invokeNative('0x087d8f4bc65f68e4', ped);
};

/**
   * _CREATE_WEAPON_OBJECT
   *
   * @param {number} weaponHash
   * @param {number} ammoCount
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {boolean} showWorldModel
   * @param {number} scale
   * @return {number}
   */
global.CreateWeaponObject = function (weaponHash, ammoCount, x, y, z, showWorldModel, scale) {
  return Citizen.invokeNative('0x9888652b8ba77f73', _ch(weaponHash), ammoCount, _fv(x), _fv(y), _fv(z), showWorldModel, _fv(scale), _r, _ri);
};

/**
   * _DISABLE_AMMO_TYPE_FOR_PED
   *
   * @param {number} ped
   * @param {number} ammoHash
   * @return {void}
   */
global.DisableAmmoTypeForPed = function (ped, ammoHash) {
  return Citizen.invokeNative('0xaa5a52204e077883', ped, _ch(ammoHash));
};

/**
   * _DISABLE_AMMO_TYPE_FOR_PED_WEAPON
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @param {number} ammoHash
   * @return {void}
   */
global.DisableAmmoTypeForPedWeapon = function (ped, weaponHash, ammoHash) {
  return Citizen.invokeNative('0xf0d728eea3c99775', ped, _ch(weaponHash), _ch(ammoHash));
};

/**
   * _ENABLE_AMMO_TYPE_FOR_PED
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @return {void}
   */
global.EnableAmmoTypeForPed = function (ped, weaponHash) {
  return Citizen.invokeNative('0x3b7b7908b7adfb4b', ped, _ch(weaponHash));
};

/**
   * _ENABLE_AMMO_TYPE_FOR_PED_WEAPON
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @param {number} ammoHash
   * @return {void}
   */
global.EnableAmmoTypeForPedWeapon = function (ped, weaponHash, ammoHash) {
  return Citizen.invokeNative('0x23fb9faca28779c1', ped, _ch(weaponHash), _ch(ammoHash));
};

/**
   * _ENABLE_WEAPON_RESTORE
   *
   * @param {number} ped
   * @return {boolean}
   */
global.EnableWeaponRestore = function (ped) {
  return Citizen.invokeNative('0xc395355843be134b', ped, _r);
};

/**
   * _GET_AMMO_IN_CLIP_BY_INVENTORY_UID
   *
   * @param {number} ped
   * @param {DataView} inventoryUid
   * @return {[boolean, number]}
   */
global.GetAmmoInClipByInventoryUid = function (ped, inventoryUid) {
  return Citizen.invokeNative('0x678f00858980f516', ped, _i, inventoryUid, _r);
};

/**
   * _GET_AMMO_TYPE_FOR_WEAPON
   *
   * @param {number} weaponHash
   * @return {number}
   */
global.GetAmmoTypeForWeapon = function (weaponHash) {
  return Citizen.invokeNative('0x5c2ea6c44f515f34', _ch(weaponHash), _r, _ri);
};

/**
   * _GET_BEST_PED_WEAPON_IN_GROUP
   * If near your horse when called, weapons stored on your horse will be considered
   * Returns weaponHash
   *
   * @param {number} ped
   * @param {number} weaponGroup
   * @param {boolean} p2
   * @param {boolean} p3
   * @return {number}
   */
global.GetBestPedWeaponInGroup = function (ped, weaponGroup, p2, p3) {
  return Citizen.invokeNative('0x9f67929d98e7c6e8', ped, _ch(weaponGroup), p2, p3, _r, _ri);
};

/**
   * _GET_BEST_PED_WEAPON_IN_INVENTORY
   *
   * @param {number} ped
   * @param {any} p1
   * @param {DataView} guidPrimary
   * @return {any}
   */
global.GetBestPedWeaponInInventory = function (ped, p1, guidPrimary) {
  return Citizen.invokeNative('0x7b98500614c8e8b8', ped, p1, guidPrimary, _r);
};

/**
   * _GET_CAN_TWIRL_WEAPON
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.GetCanTwirlWeapon = function (weaponHash) {
  return Citizen.invokeNative('0x6554ecce226f2a2a', _ch(weaponHash), _r);
};

/**
   * _GET_CORRECT_KIT_EMOTE_TWIRL_GUN
   * _GET_BEST_* - _GET_CLOSEST_*
   *
   * @param {number} ped
   * @param {DataView} weaponGuid
   * @return {boolean}
   */
global.GetCorrectKitEmoteTwirlGun = function (ped, weaponGuid) {
  return Citizen.invokeNative('0xcd356b42c57bfe01', ped, weaponGuid, _r);
};

/**
   * _GET_CURRENT_AMMO_TYPE_FROM_GUID
   * Returns ammoHash
   *
   * @param {number} ped
   * @param {DataView} weaponGuid
   * @return {number}
   */
global.GetCurrentAmmoTypeFromGuid = function (ped, weaponGuid) {
  return Citizen.invokeNative('0xaf9d167a5656d6a6', ped, weaponGuid, _r, _ri);
};

/**
   * _GET_CURRENT_PED_WEAPON_AMMO_TYPE
   * Returns ammoHash from weaponObject (Returned by 0x6CA484C9A7377E4F)
   *
   * @param {number} ped
   * @param {number} weaponObject
   * @return {number}
   */
global.GetCurrentPedWeaponAmmoType = function (ped, weaponObject) {
  return Citizen.invokeNative('0x7e7b19a4355fee13', ped, weaponObject, _r, _ri);
};

/**
   * _GET_DEFAULT_PED_WEAPON_COLLECTION
   * Returns weaponCollection Hash
   * Example: RE_POLICECHASE_MALES_01: Carbine Repeater + Knife, LO_AGRO_PED
   *
   * @param {number} pedModel
   * @return {number}
   */
global.GetDefaultPedWeaponCollection = function (pedModel) {
  return Citizen.invokeNative('0xd42514c182121c23', _ch(pedModel), _r, _ri);
};

/**
   * _GET_DEFAULT_UNARMED_WEAPON_HASH
   * Returns the ped's default unarmed weapon hash as defined in CPedModelInfo (DefaultUnarmedWeapon).
   * Falls back to WEAPON_UNARMED if the ped doesn't have a valid model info pointer, or 0 if the ped doesn't exist.
   *
   * @param {number} ped
   * @return {number}
   */
global.GetDefaultUnarmedWeaponHash = function (ped) {
  return Citizen.invokeNative('0x08ff1099ed2e6e21', ped, _r, _ri);
};

/**
   * _GET_MAX_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON
   *
   * @param {number} ped
   * @return {number}
   */
global.GetMaxLockonDistanceOfCurrentPedWeapon = function (ped) {
  return Citizen.invokeNative('0x79b1a6e780266db0', ped, _r, _rf);
};

/**
   * _GET_PED_CURRENT_HELD_WEAPON
   * Returns eCurrentHeldWeapon
   * _GET_R* - _GET_T*
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedCurrentHeldWeapon = function (ped) {
  return Citizen.invokeNative('0x8425c5f057012dab', ped, _r, _ri);
};

/**
   * _GET_PED_GUN_SPINNING_EQUIPPED_KIT_EMOTE_TWIRL
   * Returns emote Hash
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedGunSpinningEquippedKitEmoteTwirl = function (ped) {
  return Citizen.invokeNative('0x2c4fec3d0efa9fc0', ped, _r, _ri);
};

/**
   * _GET_PED_GUN_SPINNING_HASH_FROM_WEAPON_EMOTE_VARIATION
   * Returns iSpinHash / iVariationSpin
   *
   * @param {number} ped
   * @param {number} weaponEmoteVariation
   * @return {number}
   */
global.GetPedGunSpinningHashFromWeaponEmoteVariation = function (ped, weaponEmoteVariation) {
  return Citizen.invokeNative('0xf3b1620b920d1708', ped, weaponEmoteVariation, _r, _ri);
};

/**
   * _GET_PED_HOGTIE_WEAPON
   *
   * @param {number} ped
   * @return {number}
   */
global.GetPedHogtieWeapon = function (ped) {
  return Citizen.invokeNative('0x90eb1cb189923587', ped, _r, _ri);
};

/**
   * _GET_PED_WEAPON_IN_SLOT
   * slotHash is usually just the weaponHash name, but WEAPON_* is replaced with SLOT_*
   *
   * @param {number} ped
   * @param {number} slotHash
   * @return {number}
   */
global.GetPedWeaponInSlot = function (ped, slotHash) {
  return Citizen.invokeNative('0xdbc4b552b2ae9a83', ped, _ch(slotHash), _r, _ri);
};

/**
   * _GET_PED_WEAPON_OBJECT
   * _GET_M* - _GET_PED_A*
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {number}
   */
global.GetPedWeaponObject = function (ped, p1) {
  return Citizen.invokeNative('0x6ca484c9a7377e4f', ped, p1, _r, _ri);
};

/**
   * _GET_PED_WORST_WEAPON
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {boolean} p2
   * @param {boolean} p3
   * @return {number}
   */
global.GetPedWorstWeapon = function (ped, p1, p2, p3) {
  return Citizen.invokeNative('0xda37a053c1522f5d', ped, p1, p2, p3, _r, _ri);
};

/**
   * _GET_PLAYER_PED_QUICK_SWAP_WEAPON_BY_GUID
   * Outputs cached guids
   *
   * @param {number} ped
   * @param {DataView} guidPrimary
   * @param {DataView} guidSecondary
   * @return {void}
   */
global.GetPlayerPedQuickSwapWeaponByGuid = function (ped, guidPrimary, guidSecondary) {
  return Citizen.invokeNative('0xb7e52a058b07c7e2', ped, guidPrimary, guidSecondary);
};

/**
   * _GET_WEAPONTYPE_MODEL
   * Gets the model hash from the weapon hash.
   *
   * @param {number} weaponHash
   * @return {number}
   */
global.GetWeapontypeModel = function (weaponHash) {
  return Citizen.invokeNative('0xf70825eb340e7d15', _ch(weaponHash), _r, _ri);
};

/**
   * _GET_WEAPONTYPE_SLOT
   * Returns hash where WEAPON_ is replaced with SLOT_
   *
   * @param {number} weaponHash
   * @return {number}
   */
global.GetWeapontypeSlot = function (weaponHash) {
  return Citizen.invokeNative('0x46f032b8ddf46cde', _ch(weaponHash), _r, _ri);
};

/**
   * _GET_WEAPON_ATTACH_POINT
   * Returns WeaponAttachPoint
   *
   * @param {number} ped
   * @param {number} attachPoint
   * @return {number}
   */
global.GetWeaponAttachPoint = function (ped, attachPoint) {
  return Citizen.invokeNative('0xcad4fe9398820d24', ped, attachPoint, _r, _ri);
};

/**
   * _GET_WEAPON_COMPONENT_TYPE_MODEL
   *
   * @param {number} componentHash
   * @return {number}
   */
global.GetWeaponComponentTypeModel = function (componentHash) {
  return Citizen.invokeNative('0x59de03442b6c9598', _ch(componentHash), _r, _ri);
};

/**
   * _GET_WEAPON_DAMAGE
   * Related to weapon visual damage, not actual damage.
   *
   * @param {number} weaponObject
   * @return {number}
   */
global.GetWeaponDamage = function (weaponObject) {
  return Citizen.invokeNative('0x904103d5d2333977', weaponObject, _r, _rf);
};

/**
   * _GET_WEAPON_DIRT
   *
   * @param {number} weaponObject
   * @return {number}
   */
global.GetWeaponDirt = function (weaponObject) {
  return Citizen.invokeNative('0x810e8ae9afea7e54', weaponObject, _r, _rf);
};

/**
   * _GET_WEAPON_EMOTE_VARIATION
   * Returns weaponEmoteVariation
   * 
   * WEAPON_EMOTE_VARIATION_INVALID = -2,
   * WEAPON_EMOTE_VARIATION_BASE,
   * WEAPON_EMOTE_VARIATION_A,
   * WEAPON_EMOTE_VARIATION_B,
   * WEAPON_EMOTE_VARIATION_C,
   * WEAPON_EMOTE_VARIATION_D,
   * WEAPON_EMOTE_VARIATION_PREVIEW,
   * WEAPON_EMOTE_NUM_VARIATIONS
   *
   * @param {number} ped
   * @param {number} variation
   * @return {number}
   */
global.GetWeaponEmoteVariation = function (ped, variation) {
  return Citizen.invokeNative('0x86147d05fa831d3a', ped, variation, _r, _ri);
};

/**
   * _GET_WEAPON_GUN_SPINNING_WEAPON_EMOTE_TRICK_TYPE_HASH
   * Returns iSpinHash
   *
   * @param {number} emote
   * @param {number} weaponEmoteTrickType
   * @return {number}
   */
global.GetWeaponGunSpinningWeaponEmoteTrickTypeHash = function (emote, weaponEmoteTrickType) {
  return Citizen.invokeNative('0xf4601c1203b1a78d', _ch(emote), weaponEmoteTrickType, _r, _ri);
};

/**
   * _GET_WEAPON_NAME
   * Returns "WNS_INVALID" if the weapon is invalid/doesn't exist.
   *
   * @param {number} weaponHash
   * @return {string | number}
   */
global.GetWeaponName = function (weaponHash) {
  return Citizen.invokeNative('0x89cf5ff3d363311e', _ch(weaponHash), _r, _s);
};

/**
   * _GET_WEAPON_NAME_2
   *
   * @param {number} weaponHash
   * @return {string | number}
   */
global.GetWeaponName_2 = function (weaponHash) {
  return Citizen.invokeNative('0x6d3ac61694a791c5', _ch(weaponHash), _r, _s);
};

/**
   * _GET_WEAPON_NAME_WITH_PERMANENT_DEGRADATION
   *
   * @param {number} weaponHash
   * @param {number} permanentDegradationLevel
   * @return {string | number}
   */
global.GetWeaponNameWithPermanentDegradation = function (weaponHash, permanentDegradationLevel) {
  return Citizen.invokeNative('0x7a56d66c78d8ef8e', _ch(weaponHash), _fv(permanentDegradationLevel), _r, _s);
};

/**
   * _GET_WEAPON_OBJECT_FROM_PED
   * Detaches the weapon from the ped and actually removes the ped's weapon
   *
   * @param {number} ped
   * @param {boolean} p1
   * @return {number}
   */
global.GetWeaponObjectFromPed = function (ped, p1) {
  return Citizen.invokeNative('0xc6a6789bb405d11c', ped, p1, _r, _ri);
};

/**
   * _GET_WEAPON_SCALE
   *
   * @param {number} weaponObject
   * @return {number}
   */
global.GetWeaponScale = function (weaponObject) {
  return Citizen.invokeNative('0x22084ca699219624', weaponObject, _r, _rf);
};

/**
   * _GET_WEAPON_SOOT
   *
   * @param {number} weaponObject
   * @return {number}
   */
global.GetWeaponSoot = function (weaponObject) {
  return Citizen.invokeNative('0x4bf66f8878f67663', weaponObject, _r, _rf);
};

/**
   * _GET_WEAPON_STAT_ID
   *
   * @param {number} weaponHash
   * @return {number}
   */
global.GetWeaponStatId = function (weaponHash) {
  return Citizen.invokeNative('0x8ec44ae8decff841', _ch(weaponHash), _r, _ri);
};

/**
   * _GET_WEAPON_TYPE_FROM_AMMO_TYPE
   *
   * @param {number} ammoType
   * @return {number}
   */
global.GetWeaponTypeFromAmmoType = function (ammoType) {
  return Citizen.invokeNative('0x7aa043f6c41d151e', _ch(ammoType), _r, _ri);
};

/**
   * _GET_WEAPON_UNLOCK
   *
   * @param {number} weaponHash
   * @return {number}
   */
global.GetWeaponUnlock = function (weaponHash) {
  return Citizen.invokeNative('0x865f36299079fb75', _ch(weaponHash), _r, _ri);
};

/**
   * _GIVE_WEAPON_COLLECTION_TO_PED
   *
   * @param {number} ped
   * @param {number} weaponCollection
   * @return {void}
   */
global.GiveWeaponCollectionToPed = function (ped, weaponCollection) {
  return Citizen.invokeNative('0x899a04afcc725d04', ped, _ch(weaponCollection));
};

/**
   * _GIVE_WEAPON_COMPONENT_TO_ENTITY
   * entity can be a ped or weapon object.
   *
   * @param {number} entity
   * @param {number} componentHash
   * @param {number} weaponHash
   * @param {boolean} p3
   * @return {void}
   */
global.GiveWeaponComponentToEntity = function (entity, componentHash, weaponHash, p3) {
  return Citizen.invokeNative('0x74c9090fdd1bb48e', entity, _ch(componentHash), _ch(weaponHash), p3);
};

/**
   * _GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT
   *
   * @param {number} ped
   * @param {number} componentHash
   * @param {boolean} p3
   * @return {number}
   */
global.GiveWeaponComponentToWeaponObject = function (ped, componentHash, p3) {
  return Citizen.invokeNative('0x1a47699e8d533e8f', _i, ped, _ch(componentHash), p3);
};

/**
   * _HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON
   *
   * @param {number} entity
   * @param {number} weaponName
   * @param {number} weaponType
   * @return {boolean}
   */
global.HasEntityBeenDamagedByWeapon = function (entity, weaponName, weaponType) {
  return Citizen.invokeNative('0xdcf06d0cdff68424', entity, _ch(weaponName), weaponType, _r);
};

/**
   * _HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON_RECENTLY
   *
   * @param {number} entity
   * @param {number} weaponHash
   * @param {number} ms
   * @return {boolean}
   */
global.HasEntityBeenDamagedByWeaponRecently = function (entity, weaponHash, ms) {
  return Citizen.invokeNative('0x9e2d5d6bc97a5f1e', entity, _ch(weaponHash), ms, _r);
};

/**
   * _HAS_PED_GOT_WEAPON_COMPONENT
   *
   * @param {number} ped
   * @param {number} componentHash
   * @param {number} weaponHash
   * @return {boolean}
   */
global.HasPedGotWeaponComponent = function (ped, componentHash, weaponHash) {
  return Citizen.invokeNative('0xbbc67a6f965c688a', ped, _ch(componentHash), _ch(weaponHash), _r);
};

/**
   * _HAS_WEAPON_ASSET_LOADED
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.HasWeaponAssetLoaded = function (weaponHash) {
  return Citizen.invokeNative('0xff07cf465f48b830', _ch(weaponHash), _r);
};

/**
   * _HIDE_PED_WEAPONS
   * Unequip current weapon and set current weapon to WEAPON_UNARMED.
   * p0 usually 2 in R* scripts. Doesn't seem to have any effect if changed....
   * immediately: if true it will instantly switch to unarmed
   *
   * @param {number} ped
   * @param {number} p0
   * @param {boolean} immediately
   * @return {void}
   */
global.HidePedWeapons = function (ped, p0, immediately) {
  return Citizen.invokeNative('0xfccc886ede3c63ec', ped, p0, immediately);
};

/**
   * _HOLSTER_PED_WEAPONS
   *
   * @param {number} ped
   * @param {boolean} p1
   * @param {boolean} p2
   * @param {boolean} p3
   * @param {boolean} immediately
   * @return {void}
   */
global.HolsterPedWeapons = function (ped, p1, p2, p3, immediately) {
  return Citizen.invokeNative('0x94a3c1b804d291ec', ped, p1, p2, p3, immediately);
};

/**
   * _IS_AMMO_SILENT
   *
   * @param {number} ammoHash
   * @return {boolean}
   */
global.IsAmmoSilent = function (ammoHash) {
  return Citizen.invokeNative('0xd2866cba797e872e', _ch(ammoHash), _r);
};

/**
   * _IS_AMMO_SILENT_2
   *
   * @param {number} ammoHash
   * @return {boolean}
   */
global.IsAmmoSilent_2 = function (ammoHash) {
  return Citizen.invokeNative('0x7efacc589b98c488', _ch(ammoHash), _r);
};

/**
   * _IS_AMMO_TYPE_VALID_FOR_WEAPON
   *
   * @param {number} weaponHash
   * @param {number} ammoHash
   * @return {boolean}
   */
global.IsAmmoTypeValidForWeapon = function (weaponHash, ammoHash) {
  return Citizen.invokeNative('0xc570b881754df609', _ch(weaponHash), _ch(ammoHash), _r);
};

/**
   * _IS_AMMO_VALID
   *
   * @param {number} ammoHash
   * @return {boolean}
   */
global.IsAmmoValid = function (ammoHash) {
  return Citizen.invokeNative('0x1f7977c9101f807f', _ch(ammoHash), _r);
};

/**
   * _IS_PED_CURRENT_WEAPON_HOLSTERED
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsPedCurrentWeaponHolstered = function (ped) {
  return Citizen.invokeNative('0xbdd9c235d8d1052e', ped, _r);
};

/**
   * _IS_TARGET_PED_CONSTRAINED_BY_PED_USING_BOLAS
   *
   * @param {number} ped
   * @param {number} targetPed
   * @return {boolean}
   */
global.IsTargetPedConstrainedByPedUsingBolas = function (ped, targetPed) {
  return Citizen.invokeNative('0x8d50f43298ab9545', ped, targetPed, _r);
};

/**
   * _IS_WEAPON_BINOCULARS
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponBinoculars = function (weaponHash) {
  return Citizen.invokeNative('0xc853230e76a152df', _ch(weaponHash), _r);
};

/**
   * _IS_WEAPON_HOLSTER_STATE_CHANGING
   * Returns true if the ped is currently holstering or unholstering a weapon
   *
   * @param {number} ped
   * @return {boolean}
   */
global.IsWeaponHolsterStateChanging = function (ped) {
  return Citizen.invokeNative('0x2387d6e9c6b478aa', ped, _r);
};

/**
   * _IS_WEAPON_KIT
   * Returns true when the weapon passed is either a lasso, the camera or the binoculars
   * _IS_WEAPON_M* - _IS_WEAPON_P*
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponKit = function (weaponHash) {
  return Citizen.invokeNative('0x6abad7b0a854f8fb', _ch(weaponHash), _r);
};

/**
   * _IS_WEAPON_KIT_2
   * Returns true when the weapon passed is either the fishingrod, a lasso, the camera or the binoculars
   * _IS_WEAPON_M* - _IS_WEAPON_P*
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponKit_2 = function (weaponHash) {
  return Citizen.invokeNative('0x49e40483948af062', _ch(weaponHash), _r);
};

/**
   * _IS_WEAPON_KNIFE
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponKnife = function (weaponHash) {
  return Citizen.invokeNative('0x792e3ef76c911959', _ch(weaponHash), _r);
};

/**
   * _IS_WEAPON_LANTERN
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponLantern = function (weaponHash) {
  return Citizen.invokeNative('0x79407d33328286c6', _ch(weaponHash), _r);
};

/**
   * _IS_WEAPON_LASSO
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponLasso = function (weaponHash) {
  return Citizen.invokeNative('0x6e4e1a82081eabed', _ch(weaponHash), _r);
};

/**
   * _IS_WEAPON_ONE_HANDED
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponOneHanded = function (weaponHash) {
  return Citizen.invokeNative('0xd955fee4b87afa07', _ch(weaponHash), _r);
};

/**
   * _IS_WEAPON_SILENT
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponSilent = function (weaponHash) {
  return Citizen.invokeNative('0x5809dbca0a37c82b', _ch(weaponHash), _r);
};

/**
   * _IS_WEAPON_SNIPER
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponSniper = function (weaponHash) {
  return Citizen.invokeNative('0x6ad66548840472e5', _ch(weaponHash), _r);
};

/**
   * _IS_WEAPON_THROWABLE
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponThrowable = function (weaponHash) {
  return Citizen.invokeNative('0x30e7c16b12da8211', _ch(weaponHash), _r);
};

/**
   * _IS_WEAPON_TORCH
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponTorch = function (weaponHash) {
  return Citizen.invokeNative('0x506f1de1bfc75304', _ch(weaponHash), _r);
};

/**
   * _IS_WEAPON_TWO_HANDED
   *
   * @param {number} weaponHash
   * @return {boolean}
   */
global.IsWeaponTwoHanded = function (weaponHash) {
  return Citizen.invokeNative('0x0556e9d2ecf39d01', _ch(weaponHash), _r);
};

/**
   * _LISTEN_PROJECTILE_HIT_EVENTS
   *
   * @param {boolean} listen
   * @return {void}
   */
global.ListenProjectileHitEvents = function (listen) {
  return Citizen.invokeNative('0xda5d3f2c6dd5b5d4', listen);
};

/**
   * _MAKE_PED_RELOAD
   *
   * @param {number} ped
   * @return {any}
   */
global.MakePedReload = function (ped) {
  return Citizen.invokeNative('0x79e1e511ff7efb13', ped, _r);
};

/**
   * _REFILL_AMMO_IN_CLIP
   *
   * @param {number} ped
   * @param {DataView} clipInventoryUid
   * @param {number} p2
   * @return {any}
   */
global.RefillAmmoInClip = function (ped, clipInventoryUid, p2) {
  return Citizen.invokeNative('0xdf4a3404d022adde', ped, clipInventoryUid, p2, _r);
};

/**
   * _REFILL_AMMO_IN_CURRENT_PED_WEAPON
   *
   * @param {number} ped
   * @return {any}
   */
global.RefillAmmoInCurrentPedWeapon = function (ped) {
  return Citizen.invokeNative('0x0a2ab7b7abc055f4', ped, _r);
};

/**
   * _REMOVE_ALL_PED_AMMO
   *
   * @param {number} ped
   * @return {void}
   */
global.RemoveAllPedAmmo = function (ped) {
  return Citizen.invokeNative('0x1b83c0deebcbb214', ped);
};

/**
   * _REMOVE_AMMO_FROM_PED
   * removeReason must be REMOVE_REASON_USED, REMOVE_REASON_GIVEN, REMOVE_REASON_DROPPED or REMOVE_REASON_DEBUG, unless amount is -1
   * 
   * removeReason: see REMOVE_WEAPON_FROM_PED
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @param {number} amount
   * @param {number} removeReason
   * @return {void}
   */
global.RemoveAmmoFromPed = function (ped, weaponHash, amount, removeReason) {
  return Citizen.invokeNative('0xf4823c813cb8277d', ped, _ch(weaponHash), amount, _ch(removeReason));
};

/**
   * _REMOVE_AMMO_FROM_PED_BY_TYPE
   * removeReason must be REMOVE_REASON_USED, REMOVE_REASON_GIVEN, REMOVE_REASON_DROPPED or REMOVE_REASON_DEBUG, unless amount is -1
   * 
   * removeReason: see REMOVE_WEAPON_FROM_PED
   *
   * @param {number} ped
   * @param {number} ammoHash
   * @param {number} amount
   * @param {number} removeReason
   * @return {void}
   */
global.RemoveAmmoFromPedByType = function (ped, ammoHash, amount, removeReason) {
  return Citizen.invokeNative('0xb6cfec32e3742779', ped, _ch(ammoHash), amount, _ch(removeReason));
};

/**
   * _REMOVE_WEAPON_ASSET
   *
   * @param {number} weaponHash
   * @return {void}
   */
global.RemoveWeaponAsset = function (weaponHash) {
  return Citizen.invokeNative('0xc3896d03e2852236', _ch(weaponHash));
};

/**
   * _REMOVE_WEAPON_COMPONENT_FROM_PED
   *
   * @param {number} ped
   * @param {number} componentHash
   * @param {number} weaponHash
   * @return {void}
   */
global.RemoveWeaponComponentFromPed = function (ped, componentHash, weaponHash) {
  return Citizen.invokeNative('0x19f70c4d80494ff8', ped, _ch(componentHash), _ch(weaponHash));
};

/**
   * _REMOVE_WEAPON_FROM_PED_BY_GUID
   *
   * @param {number} ped
   * @param {DataView} weaponGuid
   * @param {number} removeReason
   * @return {void}
   */
global.RemoveWeaponFromPedByGuid = function (ped, weaponGuid, removeReason) {
  return Citizen.invokeNative('0x51c3b71591811485', ped, weaponGuid, _ch(removeReason));
};

/**
   * _REQUEST_WEAPON_ASSET
   *
   * @param {number} weaponHash
   * @param {number} p1
   * @param {boolean} p2
   * @return {void}
   */
global.RequestWeaponAsset = function (weaponHash, p1, p2) {
  return Citizen.invokeNative('0x72d4cb5db927009c', _ch(weaponHash), p1, p2);
};

/**
   * _SEND_WEAPON_TO_INVENTORY
   * Appears to just send specified weapon to your horse holster without having to be close
   * However, the weapon is not visible on the horse holster, but you can reach the weapon on the weapon wheel
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @return {void}
   */
global.SendWeaponToInventory = function (ped, weaponHash) {
  return Citizen.invokeNative('0xe9bd19f8121ade3e', ped, _ch(weaponHash));
};

/**
   * _SET_ACTIVE_GUN_SPINNING_EQUIP_KIT_EMOTE_TWIRL
   * emote hashes: KIT_EMOTE_TWIRL_GUN, KIT_EMOTE_TWIRL_GUN_LEFT_HOLSTER, KIT_EMOTE_TWIRL_GUN_DUAL, 0 (to unequip)
   *
   * @param {number} ped
   * @param {number} emote
   * @return {void}
   */
global.SetActiveGunSpinningEquipKitEmoteTwirl = function (ped, emote) {
  return Citizen.invokeNative('0xcbcfff805f1b4596', ped, _ch(emote));
};

/**
   * _SET_ACTIVE_GUN_SPINNING_KIT_EMOTE_TWIRL
   * spinHash can be -1, 0 to disable
   *
   * @param {number} ped
   * @param {number} weaponEmoteTrickType
   * @param {number} spin
   * @return {void}
   */
global.SetActiveGunSpinningKitEmoteTwirl = function (ped, weaponEmoteTrickType, spin) {
  return Citizen.invokeNative('0x01f661bb9c71b465', ped, weaponEmoteTrickType, _ch(spin));
};

/**
   * _SET_ALLOW_DUAL_WIELD
   *
   * @param {number} ped
   * @param {boolean} allow
   * @return {void}
   */
global.SetAllowDualWield = function (ped, allow) {
  return Citizen.invokeNative('0x83b8d50eb9446bba', ped, allow);
};

/**
   * _SET_AMMO_IN_TURRET
   * turretHash: WEAPON_TURRET_MAXIUM, WEAPON_TURRET_GATLING, WEAPON_TURRET_CANNON, WEAPON_TURRET_REVOLVING_CANNON
   *
   * @param {number} vehicle
   * @param {number} turretHash
   * @param {number} ammo
   * @return {void}
   */
global.SetAmmoInTurret = function (vehicle, turretHash, ammo) {
  return Citizen.invokeNative('0xbdda0c290c228159', vehicle, _ch(turretHash), ammo);
};

/**
   * _SET_AMMO_TYPE_FOR_PED_WEAPON
   *
   * @param {number} ped
   * @param {number} weaponHash
   * @param {number} ammoHash
   * @return {void}
   */
global.SetAmmoTypeForPedWeapon = function (ped, weaponHash, ammoHash) {
  return Citizen.invokeNative('0xcc9c4393523833e2', ped, _ch(weaponHash), _ch(ammoHash));
};

/**
   * _SET_AMMO_TYPE_FOR_PED_WEAPON_INVENTORY
   *
   * @param {number} ped
   * @param {DataView} weaponInventoryUid
   * @param {number} ammoHash
   * @return {void}
   */
global.SetAmmoTypeForPedWeaponInventory = function (ped, weaponInventoryUid, ammoHash) {
  return Citizen.invokeNative('0xebe46b501bc3fbcf', ped, weaponInventoryUid, _ch(ammoHash));
};

/**
   * _SET_FORCE_AUTO_EQUIP
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetForceAutoEquip = function (ped, toggle) {
  return Citizen.invokeNative('0xbe711b14a159e84f', ped, toggle);
};

/**
   * _SET_FORCE_CURRENT_WEAPON_INTO_COCKED_STATE
   *
   * @param {number} ped
   * @param {number} attachPoint
   * @return {void}
   */
global.SetForceCurrentWeaponIntoCockedState = function (ped, attachPoint) {
  return Citizen.invokeNative('0x5230d3f6ee56cfe6', ped, attachPoint);
};

/**
   * _SET_GUN_SPINNING_INVENTORY_SLOT_ID_ACTIVATE
   * _STOP_* - _TEST_*
   *
   * @param {number} ped
   * @param {number} emoteType
   * @return {void}
   */
global.SetGunSpinningInventorySlotIdActivate = function (ped, emoteType) {
  return Citizen.invokeNative('0x408cf580c5e96d49', ped, emoteType);
};

/**
   * _SET_PED_ALL_WEAPONS_VISIBILITY
   *
   * @param {number} ped
   * @param {boolean} visible
   * @return {void}
   */
global.SetPedAllWeaponsVisibility = function (ped, visible) {
  return Citizen.invokeNative('0x4f806a6cfed89468', ped, visible);
};

/**
   * _SET_PED_INFINITE_AMMO_CLIP
   *
   * @param {number} ped
   * @param {boolean} toggle
   * @return {void}
   */
global.SetPedInfiniteAmmoClip = function (ped, toggle) {
  return Citizen.invokeNative('0xfbaa1e06b6bca741', ped, toggle);
};

/**
   * _SET_PED_WEAPON_ATTACH_POINT_VISIBILITY
   * attachPoint: see SET_CURRENT_PED_WEAPON
   *
   * @param {number} ped
   * @param {number} attachPoint
   * @param {boolean} visible
   * @return {void}
   */
global.SetPedWeaponAttachPointVisibility = function (ped, attachPoint, visible) {
  return Citizen.invokeNative('0x67e21acc5c0c970c', ped, attachPoint, visible);
};

/**
   * _SET_VEHICLE_WEAPON_HEADING_LIMITS
   *
   * @param {number} vehicle
   * @param {number} p1
   * @param {number} minHeading
   * @param {number} maxHeading
   * @return {void}
   */
global.SetVehicleWeaponHeadingLimits = function (vehicle, p1, minHeading, maxHeading) {
  return Citizen.invokeNative('0x56cb3b4305a4f7ce', vehicle, p1, _fv(minHeading), _fv(maxHeading));
};

/**
   * _SET_VEHICLE_WEAPON_HEADING_LIMITS_2
   *
   * @param {number} vehicle
   * @param {number} p1
   * @param {number} minHeading
   * @param {number} maxHeading
   * @return {any}
   */
global.SetVehicleWeaponHeadingLimits_2 = function (vehicle, p1, minHeading, maxHeading) {
  return Citizen.invokeNative('0xbf5987e1cde63501', vehicle, p1, _fv(minHeading), _fv(maxHeading), _r);
};

/**
   * _SET_WEAPON_DAMAGE
   * Related to weapon visual damage, not actual damage.
   *
   * @param {number} weaponObject
   * @param {number} level
   * @param {boolean} p2
   * @return {void}
   */
global.SetWeaponDamage = function (weaponObject, level, p2) {
  return Citizen.invokeNative('0xe22060121602493b', weaponObject, _fv(level), p2);
};

/**
   * _SET_WEAPON_DEGRADATION
   *
   * @param {number} weaponObject
   * @param {number} level
   * @return {void}
   */
global.SetWeaponDegradation = function (weaponObject, level) {
  return Citizen.invokeNative('0xa7a57e89e965d839', weaponObject, _fv(level));
};

/**
   * _SET_WEAPON_DIRT
   *
   * @param {number} weaponObject
   * @param {number} level
   * @param {boolean} p2
   * @return {void}
   */
global.SetWeaponDirt = function (weaponObject, level, p2) {
  return Citizen.invokeNative('0x812ce61debcab948', weaponObject, _fv(level), p2);
};

/**
   * _SET_WEAPON_LEVEL_THRESHOLD
   * every other level will have the max value of (brokeLevel - threshold)
   *
   * @param {number} weaponObject
   * @param {number} threshold
   * @return {void}
   */
global.SetWeaponLevelThreshold = function (weaponObject, threshold) {
  return Citizen.invokeNative('0xd4071efc83794b2f', weaponObject, _fv(threshold));
};

/**
   * _SET_WEAPON_SCALE
   *
   * @param {number} weaponObject
   * @param {number} scale
   * @return {void}
   */
global.SetWeaponScale = function (weaponObject, scale) {
  return Citizen.invokeNative('0xc3544ad0522e69b4', weaponObject, _fv(scale));
};

/**
   * _SET_WEAPON_SOOT
   *
   * @param {number} weaponObject
   * @param {number} level
   * @param {boolean} p2
   * @return {void}
   */
global.SetWeaponSoot = function (weaponObject, level, p2) {
  return Citizen.invokeNative('0xa9ef4ad10bdddb57', weaponObject, _fv(level), p2);
};

/**
   * _GET_MAP_ZONE_AT_COORDS
   * Returns name hash, see common:/data/levels/rdr3/mapzones.meta
   * 
   * type (-1 matches any type):
   * class CMapZone
   * {
   * public:
   *   enum class Type
   *   {
   *     STATE,
   *     TOWN,
   *     LAKE,
   *     RIVER,
   *     OIL_SPILL,
   *     SWAMP,
   *     OCEAN,
   *     CREEK,
   *     POND,
   *     GLACIER,
   *     DISTRICT,
   *     TEXT_PRINTED,
   *     TEXT_WRITTEN
   *   };
   * };
   * 
   * https://github.com/femga/rdr3_discoveries/tree/master/zones & https://alloc8or.re/rdr3/doc/enums/CMapZone__Type.txt
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @param {number} type
   * @return {number}
   */
global.GetMapZoneAtCoords = function (x, y, z, type) {
  return Citizen.invokeNative('0x43ad8fc02b429d33', _fv(x), _fv(y), _fv(z), type, _r, _ri);
};

/**
   * _GET_WATER_MAP_ZONE_AT_COORDS
   * Returns the zone's name hash if its type matches one of the following:
   * - LAKE
   * - RIVER
   * - OIL_SPILL
   * - SWAMP
   * - OCEAN
   * - CREEK
   * - POND
   * - GLACIER
   *
   * @param {number} x
   * @param {number} y
   * @param {number} z
   * @return {number}
   */
global.GetWaterMapZoneAtCoords = function (x, y, z) {
  return Citizen.invokeNative('0x5ba7a68a346a5a91', _fv(x), _fv(y), _fv(z), _r, _ri);
};

/**
   * _REPORT_PLAYER_BAD_SPORT_BEHAVIOR
   * nullsub, doesn't do anything
   * however it is being used in tty scripts: [NET_BAD_SPORT_REPORT_PLAYER] Detected bad sport behavior from Player
   * badSportBehavior: BS_QUITTER = 0, BS_VEHICLE_DESTRUCTION = 1, BS_VOTED_OUT = 2
   *
   * @param {DataView} gamerHandle
   * @param {number} badSportBehaviorType
   * @return {void}
   */
global.ReportPlayerBadSportBehavior = function (gamerHandle, badSportBehaviorType) {
  return Citizen.invokeNative('0xc31c44c43b48fde3', gamerHandle, badSportBehaviorType);
};